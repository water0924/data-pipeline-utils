import sys
import os
sys.path.insert(1, '/home/shuigenjiang/Documents/print_topic_data/proto')  # Change sys.path manually, avoid formatting to the lines after import statements. # noqa
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(os.path.join(current_dir, "proto"))

import struct
from aeb import aeb_state_pb2
from church import onboard_header_pb2
from church_py import BagMessage, InputBag, OnboardMessage



_HEADER_PREFIX = b"$$$$"
_HEADER_PREFIX_SIZE = len(_HEADER_PREFIX)
_HEADER_LENGTH_SIZE = 4


def _get_header_from_message(message_bytes: bytes) -> bytes:
    if len(message_bytes) < _HEADER_PREFIX_SIZE:
        # without header
        return b''

    if message_bytes[0:_HEADER_PREFIX_SIZE] != _HEADER_PREFIX:
        # without header
        return b''

    # with header
    info_size = _HEADER_PREFIX_SIZE + _HEADER_LENGTH_SIZE
    header_size = struct.unpack("I", message_bytes[_HEADER_PREFIX_SIZE:info_size])[0]
    return message_bytes[info_size:info_size + header_size]


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('Please input one bag to this script.', file=sys.stderr)
        exit(1)

    bag_path = sys.argv[1]

    msg = BagMessage()
    bag = InputBag()

    if not bag.open(bag_path):
        raise "open failed"

    while True:
        if not bag.read_next(msg):
            if bag.eof():
                print('Finished reading bag.')
                break
            raise "read failed"

        # print(
        #     f'Read message. Topic = "{msg.topic}", Receive time = "{msg.receive_time}", Data length = {len(msg.data)}')

        if msg.topic != '/aeb/aeb_state':
            continue

        # Parse header.
        header_bytes = _get_header_from_message(msg.data)
        header = onboard_header_pb2.OnboardHeader()
        header.ParseFromString(header_bytes)

        # Parse payload.
        payload_bytes = OnboardMessage.strip_header_if_exists(msg.data)
        payload = aeb_state_pb2.StateWrapper()
        payload.ParseFromString(payload_bytes)

        # Access `header` and `payload` here.
        print(header.dataplane_timestamp)
        print(payload.state_info)
