syntax = "proto2";

package deeproute.idl.planning_service;

import "common/module_status.proto";
import "common/vehicle_state/vehicle_state.proto";
import "offboard/planning/planning_frame_context.proto";
import "planning/planning_business_interface.proto";
import "perception/deeproute_perception_obstacle.proto";
import "perception/deeproute_perception_ras_map.proto";
import "perception/traffic_light_detection.proto";
import "localization/localization_internal_messages.proto";
import "routing/local_routing.proto";
import "planning/planning.proto";
import "offboard/planning/planning_debug_info.proto";
import "map/deeproute_map_ras_map_plus.proto";
import "visualizer/visualizer_command.proto";
import "visualizer/rviz_marker.proto";

service PlanningService {
  rpc Init(PlanningInitRequest) returns (PlanningInitResponse) {
  }
  rpc Proc(PlanningProcRequest) returns (PlanningProcResponse) {
  }
}

message PlanningInitRequest {
  // optional Header header = 1;
  // config path or data? centeralized parameter server?
  optional string planning_interal_config = 1;
  optional string semantic_map_path = 2;
  optional string car_config_path = 3;
  optional string pnc_vehicle_param_path = 4;

  // ...
}

message PlanningInitResponse {
}

message PlanningProcRequest {
  optional deeproute.perception.PerceptionObstacles perception_obstacles = 1;
  optional deeproute.common.VehicleState vehicle_state = 2;
  optional deeproute.perception.TrafficLightResponse traffic_light_response = 3;
  // todo(lkx): local_routing will be replaced with "reference lane" afterwards.
  optional deeproute.routing.LocalRouting local_routing = 4;  // for L4 only

  // FrameContext is for both request and reponse
  optional deeproute.planning.FrameContext frame_context = 5;

  optional deeproute.planning.interface.PlanningRequest planning_request = 6;
  optional deeproute.planning.interface.PlanningRequests planning_requests = 16;

  optional deeproute.map.RASMapPlus ras_map_plus = 7;
  optional deeproute.visualizer.VisualizerCommand vis_command = 8;
  optional bool plan_with_context = 9;
  optional deeproute.routing.LocalRouting blc_local_routing =
      10;  // for L2 speed limit
  optional deeproute.common.VehicleState bag_vehicle_state = 11;
  optional bool is_replay_mode = 12;
  optional deeproute.planning.debug.PlanningDebug debug_info = 13;
  optional deeproute.perception.RASMap ras_map = 14;
  optional deeproute.localization.message.LidarMatchingMessage map_info = 15;
}

message PlanningProcResponse {
  optional deeproute.planning.ADCTrajectory trajectory = 1;
  optional deeproute.planning.debug.PlanningDebug debug_info = 2;
  optional deeproute.proto.ModuleStatus module_status = 3;

  // FrameContext is for both request and reponse
  optional deeproute.planning.FrameContext frame_context = 4;

  optional deeproute.planning.interface.PlanningResponse planning_response = 5;
  optional deeproute.planning.interface.PlanningResponses planning_responses =
      10;
  repeated deeproute.planning.interface.PlanningEvent planning_events = 6;

  optional deeproute.planning.PlanningSemanticInfo planning_semantic_info = 7;

  optional deeproute.visualizer.VisualizerCommandRP vis_commandrp = 8;
  // output rviz marker to prophet
  optional deeproute.visualizer.MarkerArray marker_array = 9;
}
