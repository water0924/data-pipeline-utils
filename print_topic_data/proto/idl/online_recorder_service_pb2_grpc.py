# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto.idl import online_recorder_service_pb2 as idl_dot_online__recorder__service__pb2


class OnlineRecorderServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Trigger = channel.unary_unary(
                '/deeproute.online_recorder_service.OnlineRecorderService/Trigger',
                request_serializer=idl_dot_online__recorder__service__pb2.TriggerRequest.SerializeToString,
                response_deserializer=idl_dot_online__recorder__service__pb2.TriggerResponse.FromString,
                )


class OnlineRecorderServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Trigger(self, request, context):
        """*
        @~english trigger a request task. multiple triggers are handled in parallel asynchorously
        @~chinese 进行一次录制trigger，多个trigger会并行地、异步地进行
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OnlineRecorderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Trigger': grpc.unary_unary_rpc_method_handler(
                    servicer.Trigger,
                    request_deserializer=idl_dot_online__recorder__service__pb2.TriggerRequest.FromString,
                    response_serializer=idl_dot_online__recorder__service__pb2.TriggerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'deeproute.online_recorder_service.OnlineRecorderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OnlineRecorderService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Trigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/deeproute.online_recorder_service.OnlineRecorderService/Trigger',
            idl_dot_online__recorder__service__pb2.TriggerRequest.SerializeToString,
            idl_dot_online__recorder__service__pb2.TriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
