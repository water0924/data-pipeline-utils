syntax = "proto2";

package deeproute.canbus;

message ECM_0X10D {
// Report Message
  enum ECMEngineStatusSType {
    ECM_ENGINE_STATUS_S_ENGINESTOP = 0;
    ECM_ENGINE_STATUS_S_CRANKING = 1;
    ECM_ENGINE_STATUS_S_RESERVED_2 = 2;
    ECM_ENGINE_STATUS_S_RUNNING = 3;
    ECM_ENGINE_STATUS_S_RESERVED_4 = 4;
    ECM_ENGINE_STATUS_S_RESERVED_5 = 5;
    ECM_ENGINE_STATUS_S_RESERVED_6 = 6;
    ECM_ENGINE_STATUS_S_FAULT = 7;
  }
  // ECM_Engine_Rev10D_S [rpm] [0|10000]
  optional double ecm_engine_rev10_d_s = 1;
  // Rev_Drag_Start_Cmd_S [] [0|1]
  optional bool rev_drag_start_cmd_s = 2;
  // ECM_Engine_Status_S [] [0|7]
  optional ECMEngineStatusSType ecm_engine_status_s = 3;
}

message VCU_0X128 {
// Report Message
  enum GenrmodType {
    GENR_MOD_RESERVED_0 = 0;
    GENR_MOD_SPEEDCONTROL = 1;
    GENR_MOD_TORQUECONTROL = 2;
    GENR_MOD_STABLEVOLTAGECONTROL = 3;
    GENR_MOD_V2VSTABLEVOLTAGECONTROL = 4;
    GENR_MOD_RESERVED_5 = 5;
    GENR_MOD_RESERVED_6 = 6;
    GENR_MOD_RESERVED_7 = 7;
  }
  // Genr_mod [] [0|7]
  optional GenrmodType genr_mod = 1;
}

message LEFT_BCM_0X12D {
// Report Message
  enum WiperSpeedSType {
    WIPER_SPEED_S_INVALID = 0;
    WIPER_SPEED_S_STOP = 1;
    WIPER_SPEED_S_SLOWSCRAPING = 2;
    WIPER_SPEED_S_FASTSCRAPING = 3;
  }
  enum BCMPowerGear12DSType {
    BCMPOWER_GEAR_12D_S_INVALID = 0;
    BCMPOWER_GEAR_12D_S_OFFFILE = 1;
    BCMPOWER_GEAR_12D_S_ACCFILE = 2;
    BCMPOWER_GEAR_12D_S_ONFILE = 3;
    BCMPOWER_GEAR_12D_S_RESERVED_4 = 4;
    BCMPOWER_GEAR_12D_S_RESERVED_5 = 5;
    BCMPOWER_GEAR_12D_S_RESERVED_6 = 6;
    BCMPOWER_GEAR_12D_S_RESERVED_7 = 7;
  }
  enum VehicleStatusSecuritySType {
    VEHICLE_STATUS_SECURITY_S_NORMALSTATE = 0;
    VEHICLE_STATUS_SECURITY_S_ANTITHEFTSETTINGSTATE = 1;
    VEHICLE_STATUS_SECURITY_S_ANTITHEFTSTATE = 2;
    VEHICLE_STATUS_SECURITY_S_RESERVED_3 = 3;
    VEHICLE_STATUS_SECURITY_S_RESERVED_4 = 4;
    VEHICLE_STATUS_SECURITY_S_RESERVED_5 = 5;
    VEHICLE_STATUS_SECURITY_S_RESERVED_6 = 6;
    VEHICLE_STATUS_SECURITY_S_RESERVED_7 = 7;
  }
  // Wiper_Speed_S [] [0|3]
  optional WiperSpeedSType wiper_speed_s = 1;
  // Gateway_Engine_Stop_Inform_12D_S [] [0|1]
  optional bool gateway_engine_stop_inform_12_d_s = 2;
  // Gateway_Starter_Command12D_S [] [0|1]
  optional bool gateway_starter_command12_d_s = 3;
  // BCMPower_Gear_12D_S [] [0|7]
  optional BCMPowerGear12DSType bcm_power_gear_12_d_s = 4;
  // Vehicle_Status_Security_S [] [0|7]
  optional VehicleStatusSecuritySType vehicle_status_security_s = 5;
  // Counter_12D_S [] [0|15]
  optional int32 counter_12_d_s = 6;
  // Checksum_12D_S [] [0|255]
  optional int32 checksum_12_d_s = 7;
}

message CS_0X133 {
// Report Message
  enum FrontAndRearFogLampGearSType {
    FRONT_AND_REAR_FOG_LAMP_GEAR_S_INVALID = 0;
    FRONT_AND_REAR_FOG_LAMP_GEAR_S_OFFFILE = 1;
    FRONT_AND_REAR_FOG_LAMP_GEAR_S_ALLWEARLIGHTFILE = 2;
    FRONT_AND_REAR_FOG_LAMP_GEAR_S_REARFOGLAMP = 3;
  }
  enum CSFrontWiperGearSType {
    CS_FRONT_WIPER_GEAR_S_RESERVED_0 = 0;
    CS_FRONT_WIPER_GEAR_S_OFFGEAR = 1;
    CS_FRONT_WIPER_GEAR_S_SHORTPRESS = 2;
    CS_FRONT_WIPER_GEAR_S_CLICKANDLONGPRESS = 3;
    CS_FRONT_WIPER_GEAR_S_GAP1LEVEL = 4;
    CS_FRONT_WIPER_GEAR_S_GAP2LEVEL = 5;
    CS_FRONT_WIPER_GEAR_S_GAP3LEVEL = 6;
    CS_FRONT_WIPER_GEAR_S_GAP4LEVEL = 7;
    CS_FRONT_WIPER_GEAR_S_SLOWSCRAPING = 8;
    CS_FRONT_WIPER_GEAR_S_QUICKSCRAPING = 9;
    CS_FRONT_WIPER_GEAR_S_AUTOGEAR = 10;
    CS_FRONT_WIPER_GEAR_S_RESERVED_11 = 11;
    CS_FRONT_WIPER_GEAR_S_RESERVED_12 = 12;
    CS_FRONT_WIPER_GEAR_S_RESERVED_13 = 13;
    CS_FRONT_WIPER_GEAR_S_RESERVED_14 = 14;
    CS_FRONT_WIPER_GEAR_S_RESERVED_15 = 15;
  }
  enum LightKnobMechanGearSType {
    LIGHT_KNOB_MECHAN_GEAR_S_INVALID = 0;
    LIGHT_KNOB_MECHAN_GEAR_S_OFFFILE = 1;
    LIGHT_KNOB_MECHAN_GEAR_S_AUTOFILE = 2;
    LIGHT_KNOB_MECHAN_GEAR_S_SMALLLIGHTFILE = 3;
    LIGHT_KNOB_MECHAN_GEAR_S_LOWBEAMLIGHTFILE = 4;
    LIGHT_KNOB_MECHAN_GEAR_S_RESERVED_5 = 5;
    LIGHT_KNOB_MECHAN_GEAR_S_RESERVED_6 = 6;
    LIGHT_KNOB_MECHAN_GEAR_S_RESERVED_7 = 7;
  }
  enum HighBeamAttendanLampStallSType {
    HIGH_BEAM_ATTENDAN_LAMP_STALL_S_INVALID = 0;
    HIGH_BEAM_ATTENDAN_LAMP_STALL_S_OFFFILE = 1;
    HIGH_BEAM_ATTENDAN_LAMP_STALL_S_HIGHBEAMFILE = 2;
    HIGH_BEAM_ATTENDAN_LAMP_STALL_S_OVERTAKINGLAMP = 3;
  }
  enum TurnSignalSwitchSType {
    TURN_SIGNAL_SWITCH_S_INVALID = 0;
    TURN_SIGNAL_SWITCH_S_OFFGEAR = 1;
    TURN_SIGNAL_SWITCH_S_LSTEERINGSHORTLIFT = 2;
    TURN_SIGNAL_SWITCH_S_LSTEERINGLONGLIFT = 3;
    TURN_SIGNAL_SWITCH_S_RSTEERINGSHORTLIFT = 4;
    TURN_SIGNAL_SWITCH_S_RSTEERINGLONGLIFT = 5;
    TURN_SIGNAL_SWITCH_S_RESERVED_6 = 6;
    TURN_SIGNAL_SWITCH_S_RESERVED_7 = 7;
  }
  // Front_And_Rear_Fog_Lamp_Gear_S [] [0|3]
  optional FrontAndRearFogLampGearSType front_and_rear_fog_lamp_gear_s = 1;
  // CS_Front_Wiper_Gear_S [] [0|15]
  optional CSFrontWiperGearSType cs_front_wiper_gear_s = 2;
  // Light_Knob_Mechan_Gear_S [] [0|7]
  optional LightKnobMechanGearSType light_knob_mechan_gear_s = 3;
  // High_Beam_Attendan_Lamp_Stall_S [] [0|3]
  optional HighBeamAttendanLampStallSType high_beam_attendan_lamp_stall_s = 4;
  // Turn_Signal_Switch_S [] [0|7]
  optional TurnSignalSwitchSType turn_signal_switch_s = 5;
  // Combination_Switch_Signal_Type_S [] [0|3]
  optional int32 combination_switch_signal_type_s = 6;
  // Counter_133_S [] [0|15]
  optional int32 counter_133_s = 7;
  // Checksum_133_S [] [0|255]
  optional int32 checksum_133_s = 8;
}

message ADS_0X134 {
// Control Message
  enum APAAutoParkingStatusSType {
    APA_AUTO_PARKING_STATUS_S_PASSIVESTANDBY = 0;
    APA_AUTO_PARKING_STATUS_S_SEARCHING = 1;
    APA_AUTO_PARKING_STATUS_S_GUIDANCEACT = 2;
    APA_AUTO_PARKING_STATUS_S_GUIDANCESUSPEND = 3;
    APA_AUTO_PARKING_STATUS_S_GUIDANCETERMINATED = 4;
    APA_AUTO_PARKING_STATUS_S_GUIDANCECPLD = 5;
    APA_AUTO_PARKING_STATUS_S_AUTOPARISNOTAVAILABLE = 6;
    APA_AUTO_PARKING_STATUS_S_PKASSISTSTANDBY = 7;
  }
  enum APAFailureBrakeModeSType {
    APA_FAILUREBRAKEMODE_S_IDLENOBRAKING = 0;
    APA_FAILUREBRAKEMODE_S_COMFORTCOMFORTABLEBRAKING = 1;
    APA_FAILUREBRAKEMODE_S_EMERGENCYEMERGENCYBRAKING = 2;
    APA_FAILUREBRAKEMODE_S_RESERVED_3 = 3;
  }
  enum APAParkModeSType {
    APA_PARK_MODE_S_IDLE = 0;
    APA_PARK_MODE_S_APA = 1;
    APA_PARK_MODE_S_RPA = 2;
    APA_PARK_MODE_S_AVP = 3;
  }
  // APA_Auto_Parking_Status_S [] [0|7]
  optional APAAutoParkingStatusSType apa_auto_parking_status_s = 1;
  // APA_SteeringCtrlReqForEPS_S [] [0|1]
  optional bool apa_steering_ctrl_req_for_eps_s = 2;
  // APA_SteeringCtrlReqForEPSVD_S [] [0|1]
  optional bool apa_steering_ctrl_req_for_epsvd_s = 3;
  // APA_FailureBrakeMode_S [] [0|3]
  optional APAFailureBrakeModeSType apa_failure_brake_mode_s = 4;
  // APA_Target_Steering_Angle_S [度] [-780|779.9]
  optional double apa_target_steering_angle_s = 5;
  // APA_Park_Mode_S [] [0|3]
  optional APAParkModeSType apa_park_mode_s = 6;
  // Counter_134_S [] [0|15]
  optional int32 counter_134_s = 7;
  // Checksum_134_S [] [0|255]
  optional int32 checksum_134_s = 8;
}

message ADS_0X138 {
// Control Message
  enum IndiFCWSensitiveLvsType {
    INDI_FCW_SENSITIVE_LV_S_OFF = 0;
    INDI_FCW_SENSITIVE_LV_S_LOW = 1;
    INDI_FCW_SENSITIVE_LV_S_MEDIUM = 2;
    INDI_FCW_SENSITIVE_LV_S_HIGH = 3;
  }
  enum LKCfunctionstatusType {
    LKC_FUNCTION_STATUS_OFF = 0;
    LKC_FUNCTION_STATUS_PASSIVE = 1;
    LKC_FUNCTION_STATUS_STANDBY = 2;
    LKC_FUNCTION_STATUS_ACTIVE = 3;
    LKC_FUNCTION_STATUS_FAULT = 4;
    LKC_FUNCTION_STATUS_RESERVED_5 = 5;
    LKC_FUNCTION_STATUS_RESERVED_6 = 6;
    LKC_FUNCTION_STATUS_RESERVED_7 = 7;
  }
  enum NOAIASResponseSType {
    NOA_IAS_RESPONSE_S_INVALID = 0;
    NOA_IAS_RESPONSE_S_OFF = 1;
    NOA_IAS_RESPONSE_S_ON = 2;
    NOA_IAS_RESPONSE_S_REVERSED = 3;
  }
  enum NOALCStyleType {
    NOA_LCSTYLE_FASTLANECHANGE = 0;
    NOA_LCSTYLE_STANDARDLANECHANGE = 1;
    NOA_LCSTYLE_CONSERVATELANECHANGE = 2;
    NOA_LCSTYLE_REVERSED = 3;
  }
  enum ILCAActivateModeType {
    ILCA_ACTIVATE_MODE_INVALID = 0;
    ILCA_ACTIVATE_MODE_LONGLIFTMODEONLY = 1;
    ILCA_ACTIVATE_MODE_LONGANDSHORLIFTMODE = 2;
    ILCA_ACTIVATE_MODE_RESERVED_3 = 3;
  }
  enum ADSLVPPowerReqforVCUType {
    ADS_LVPPOWERREQFORVCU_INVALID = 0;
    ADS_LVPPOWERREQFORVCU_NOPOWERREQUESTFORVCU = 1;
    ADS_LVPPOWERREQFORVCU_POWERREQUESTFORVCU = 2;
    ADS_LVPPOWERREQFORVCU_RESERVED_3 = 3;
  }
  // Indi_FCW_Sensitive_Lv_s [] [0|3]
  optional IndiFCWSensitiveLvsType indi_fcw_sensitive_lv_s = 1;
  // FrontVehicleSts [] [0|1]
  optional bool front_vehicle_sts = 2;
  // FrontVehicleDistance [m] [0|409.5]
  optional double front_vehicle_distance = 3;
  // FrontVehicleSpeed [km/h] [0|255]
  optional int32 front_vehicle_speed = 4;
  // FrontVehicleAcc [m/s??] [-21.593|21.593]
  optional double front_vehicle_acc = 5;
  // LKC_function_status [] [0|7]
  optional LKCfunctionstatusType lkc_function_status = 6;
  // NOA_IAS_Response_S [] [0|3]
  optional NOAIASResponseSType noa_ias_response_s = 7;
  // NOA_LCStyle [] [0|3]
  optional NOALCStyleType noa_lc_style = 8;
  // ILCA_Activate_Mode [] [0|3]
  optional ILCAActivateModeType ilca_activate_mode = 9;
  // ADS_LVPPowerReqforVCU [] [0|3]
  optional ADSLVPPowerReqforVCUType ads_lvp_power_reqfor_vcu = 10;
  // Counter_138_S [] [0|15]
  optional int32 counter_138_s = 11;
  // Checksum138_S [] [0|255]
  optional int32 checksum138_s = 12;
}

message CS_0X142 {
// Report Message
  // Steering_Wheel_Angle_142_S [度] [-780|779.9]
  optional double steering_wheel_angle_142_s = 1;
  // Steering_Wheel_Rotat_Speed_142_S [°/s] [0|1016]
  optional double steering_wheel_rotat_speed_142_s = 2;
  // Failure_Stats_OK_142_S [] [0|1]
  optional bool failure_stats_ok_142_s = 3;
  // Sensor_Calibration_Stats_142_S [] [0|1]
  optional bool sensor_calibration_stats_142_s = 4;
  // TRIM_Trimming_Stats_142_S [] [0|1]
  optional bool trim_trimming_stats_142_s = 5;
  // Counter_142_S [] [0|15]
  optional int32 counter_142_s = 6;
  // Checksum_142_S [] [0|15]
  optional int32 checksum_142_s = 7;
}

message LEFT_BCM_0X144 {
// Report Message
  // Speed_Signal_144_S [] [0|240]
  optional int32 speed_signal_144_s = 1;
}

message ADS_0X14B {
// Control Message
  enum ADSAMAPStatusSType {
    ADS_AMAP_STATUS_S_OFF = 0;
    ADS_AMAP_STATUS_S_STANDBY = 1;
    ADS_AMAP_STATUS_S_INACT = 2;
    ADS_AMAP_STATUS_S_ACT = 3;
    ADS_AMAP_STATUS_S_BRAKING = 4;
    ADS_AMAP_STATUS_S_KEEP_PRESSURE = 5;
    ADS_AMAP_STATUS_S_ERROR = 6;
    ADS_AMAP_STATUS_S_RESERVED_7 = 7;
  }
  enum ADSAMAPaccepedlSType {
    ADS_AMAP_ACCE_PEDL_S_NOREQUEST = 0;
    ADS_AMAP_ACCE_PEDL_S_CPLLY = 1;
    ADS_AMAP_ACCE_PEDL_S_PARTIAL = 2;
    ADS_AMAP_ACCE_PEDL_S_RESERVED_3 = 3;
  }
  // ADS_AMAP_Status_S [] [0|7]
  optional ADSAMAPStatusSType ads_amap_status_s = 1;
  // ADS_AMAP_acce_pedl_S [] [0|3]
  optional ADSAMAPaccepedlSType ads_amap_acce_pedl_s = 2;
  // ADS_AMAPTargetAX_S [] [-10|3]
  optional double ads_amap_target_ax_s = 3;
  // ADS_AMAPTargetAX_UpperLimit_S [] [-10|3]
  optional double ads_amap_target_ax_upper_limit_s = 4;
  // ADS_AMAPTargetAX_LowerLimit_S [] [-10|3]
  optional double ads_amap_target_ax_lower_limit_s = 5;
  // ADS_AMAPJerk_UpperLimit_S [] [0|10]
  optional double ads_amap_jerk_upper_limit_s = 6;
  // ADS_AMAPJerk_LowerLimit_S [] [0|10]
  optional double ads_amap_jerk_lower_limit_s = 7;
  // Counter_14B_S [] [0|15]
  optional int32 counter_14_b_s = 8;
  // CheckSum_14B_S [] [0|255]
  optional int32 check_sum_14_b_s = 9;
}

message MEDIA_0X14C {
// Report Message
  // 哨兵模式特定帧字节1 [] [0|255]
  optional int32 sentry_mode_s_peical_frame_1_s = 1;
  // 哨兵模式特定帧字节2 [] [0|255]
  optional int32 sentry_mode_s_peical_frame_2_s = 2;
  // 哨兵模式特定帧字节3 [] [0|255]
  optional int32 sentry_mode_s_peical_frame_3_s = 3;
  // 哨兵模式特定帧字节4 [] [0|255]
  optional int32 sentry_mode_s_peical_frame_4_s = 4;
  // 哨兵模式特定帧字节5 [] [0|255]
  optional int32 sentry_mode_s_peical_frame_5_s = 5;
  // 哨兵模式特定帧字节6 [] [0|255]
  optional int32 sentry_mode_s_peical_frame_6_s = 6;
  // 哨兵模式特定帧字节7 [] [0|255]
  optional int32 sentry_mode_s_peical_frame_7_s = 7;
  // 哨兵模式特定帧字节8 [] [0|255]
  optional int32 sentry_mode_s_peical_frame_8_s = 8;
}

message LEFT_BCM_0X151 {
// Report Message
  enum SpeedUnitSetting151SType {
    SPEED_UNIT_SETTING_151_S_INVALID = 0;
    SPEED_UNIT_SETTING_151_S_KMH = 1;
    SPEED_UNIT_SETTING_151_S_MPH = 2;
    SPEED_UNIT_SETTING_151_S_RESERVED_3 = 3;
  }
  // Speed_Signal_151_S [km/h] [0|240]
  optional int32 speed_signal_151_s = 1;
  // Speed_Unit_Setting_151_S [] [0|3]
  optional SpeedUnitSetting151SType speed_unit_setting_151_s = 2;
  // Counter_151_S [] [0|15]
  optional int32 counter_151_s = 3;
  // Checksum_151_S [] [0|255]
  optional int32 checksum_151_s = 4;
}

message ADS_0X15A {
// Control Message
  // Child_ID_15A_S1 [] [0|255]
  optional int32 child_id_15_a_s1 = 1;
  // FrontCam_DistortCoefficient_K1_S [] [-1|1]
  optional double front_cam_distort_coefficient_k1_s = 2;
  // FrontCam_DistortCoefficient_K2_S [] [-1|1]
  optional double front_cam_distort_coefficient_k2_s = 3;
  // FrontCam_DistortCoefficient_K3_S [] [-1|1]
  optional double front_cam_distort_coefficient_k3_s = 4;
  // FrontCam_DistortCoefficient_K4_S [] [-1|1]
  optional double front_cam_distort_coefficient_k4_s = 5;
  // FrontCam_Migrat_parameter_xi_S [] [0|10]
  optional double front_cam_migrat_parameter_xi_s = 6;
  // Counter_15A_01_S [] [0|65535]
  optional int32 counter_15_a_01_s = 7;
  // Checksum_15A_01_S [] [0|65535]
  optional int32 checksum_15_a_01_s = 8;
  // LeftCam_DistortCoefficient_K1_S [] [-1|1]
  optional double left_cam_distort_coefficient_k1_s = 9;
  // LeftCam_DistortCoefficient_K2_S [] [-1|1]
  optional double left_cam_distort_coefficient_k2_s = 10;
  // LeftCam_DistortCoefficient_K3_S [] [-1|1]
  optional double left_cam_distort_coefficient_k3_s = 11;
  // LeftCam_DistortCoefficient_K4_S [] [-1|1]
  optional double left_cam_distort_coefficient_k4_s = 12;
  // LeftCam_Migrat_parameter_xi_S [] [0|10]
  optional double left_cam_migrat_parameter_xi_s = 13;
  // Counter_15A_02_S [] [0|65535]
  optional int32 counter_15_a_02_s = 14;
  // Checksum_15A_02_S [] [0|65535]
  optional int32 checksum_15_a_02_s = 15;
  // RightCam_DistortCoefficient_K1_S [] [-1|1]
  optional double right_cam_distort_coefficient_k1_s = 16;
  // RightCam_DistortCoefficient_K2_S [] [-1|1]
  optional double right_cam_distort_coefficient_k2_s = 17;
  // RightCam_DistortCoefficient_K3_S [] [-1|1]
  optional double right_cam_distort_coefficient_k3_s = 18;
  // RightCam_DistortCoefficient_K4_S [] [-1|1]
  optional double right_cam_distort_coefficient_k4_s = 19;
  // RightCam_Migrat_parameter_xi_S [] [0|10]
  optional double right_cam_migrat_parameter_xi_s = 20;
  // Counter_15A_03_S3 [] [0|65535]
  optional int32 counter_15_a_03_s3 = 21;
  // Checknum_15A_03_S3 [] [0|65535]
  optional int32 checknum_15_a_03_s3 = 22;
  // RearCam_DistortCoefficient_K1_S [] [-1|1]
  optional double rear_cam_distort_coefficient_k1_s = 23;
  // RearCam_DistortCoefficient_K2_S [] [-1|1]
  optional double rear_cam_distort_coefficient_k2_s = 24;
  // RearCam_DistortCoefficient_K3_S [] [-1|1]
  optional double rear_cam_distort_coefficient_k3_s = 25;
  // RearCam_DistortCoefficient_K4_S [] [-1|1]
  optional double rear_cam_distort_coefficient_k4_s = 26;
  // RearCam_Migrat_parameter_xi_S [] [0|10]
  optional double rear_cam_migrat_parameter_xi_s = 27;
  // Counter_15A_04_S4 [] [0|65535]
  optional int32 counter_15_a_04_s4 = 28;
  // Checknum_15A_04_S4 [] [0|65535]
  optional int32 checknum_15_a_04_s4 = 29;
}

message ADAS_0X175 {
// Control Message
  enum DTCStateS1Type {
    DTC_STATE_S_1_NO_FAILURE = 0;
    DTC_STATE_S_1_PRESENT_FAILURE = 1;
    DTC_STATE_S_1_PREVIOUS_FAILURE = 2;
    DTC_STATE_S_1_UNSURE_FAILURE = 3;
  }
  enum DTCStateS2Type {
    DTC_STATE_S_2_NO_FAILURE = 0;
    DTC_STATE_S_2_PRESENT_FAILURE = 1;
    DTC_STATE_S_2_PREVIOUS_FAILURE = 2;
    DTC_STATE_S_2_UNSURE_FAILURE = 3;
  }
  enum DTCStateS3Type {
    DTC_STATE_S_3_NO_FAILURE = 0;
    DTC_STATE_S_3_PRESENT_FAILURE = 1;
    DTC_STATE_S_3_PREVIOUS_FAILURE = 2;
    DTC_STATE_S_3_UNSURE_FAILURE = 3;
  }
  enum DTCStateS4Type {
    DTC_STATE_S_4_NO_FAILURE = 0;
    DTC_STATE_S_4_PRESENT_FAILURE = 1;
    DTC_STATE_S_4_PREVIOUS_FAILURE = 2;
    DTC_STATE_S_4_UNSURE_FAILURE = 3;
  }
  enum DTCStateS5Type {
    DTC_STATE_S_5_NO_FAILURE = 0;
    DTC_STATE_S_5_PRESENT_FAILURE = 1;
    DTC_STATE_S_5_PREVIOUS_FAILURE = 2;
    DTC_STATE_S_5_UNSURE_FAILURE = 3;
  }
  enum DTCStateS6Type {
    DTC_STATE_S_6_NO_FAILURE = 0;
    DTC_STATE_S_6_PRESENT_FAILURE = 1;
    DTC_STATE_S_6_PREVIOUS_FAILURE = 2;
    DTC_STATE_S_6_UNSURE_FAILURE = 3;
  }
  // DTC_Reporting_1 [] [0|1]
  optional int32 dtc_reporting_1 = 1;
  // DTC_State_S_1 [] [0|3]
  optional DTCStateS1Type dtc_state_s_1 = 2;
  // DTC_Info_1 [] [0|63]
  optional int32 dtc_info_1 = 3;
  // DTC_Reporting_2 [] [0|1]
  optional int32 dtc_reporting_2 = 4;
  // DTC_State_S_2 [] [0|3]
  optional DTCStateS2Type dtc_state_s_2 = 5;
  // DTC_Info_2 [] [0|63]
  optional int32 dtc_info_2 = 6;
  // DTC_Reporting_3 [] [0|1]
  optional int32 dtc_reporting_3 = 7;
  // DTC_State_S_3 [] [0|3]
  optional DTCStateS3Type dtc_state_s_3 = 8;
  // DTC_Info_3 [] [0|63]
  optional int32 dtc_info_3 = 9;
  // DTC_Reporting_4 [] [0|1]
  optional int32 dtc_reporting_4 = 10;
  // DTC_State_S_4 [] [0|3]
  optional DTCStateS4Type dtc_state_s_4 = 11;
  // DTC_Info_4 [] [0|63]
  optional int32 dtc_info_4 = 12;
  // DTC_Reporting_5 [] [0|1]
  optional int32 dtc_reporting_5 = 13;
  // DTC_State_S_5 [] [0|3]
  optional DTCStateS5Type dtc_state_s_5 = 14;
  // DTC_Info_5 [] [0|63]
  optional int32 dtc_info_5 = 15;
  // DTC_Reporting_6 [] [0|1]
  optional int32 dtc_reporting_6 = 16;
  // DTC_State_S_6 [] [0|3]
  optional DTCStateS6Type dtc_state_s_6 = 17;
  // DTC_Info_6 [] [0|63]
  optional int32 dtc_info_6 = 18;
  optional int64 dtc_reporting_timestamp_1 = 19;
  optional int64 dtc_reporting_timestamp_2 = 20;
  optional int64 dtc_reporting_timestamp_3 = 21;
  optional int64 dtc_reporting_timestamp_4 = 22;
  optional int64 dtc_reporting_timestamp_5 = 23;
  optional int64 dtc_reporting_timestamp_6 = 24;
}

message HOD_0X17F {
// Report Message
  enum HODSystemStatus17FSType {
    HOD_SYSTEM_STATUS_17F_S_AVAILABLE = 0;
    HOD_SYSTEM_STATUS_17F_S_INITIALSTATUS = 1;
    HOD_SYSTEM_STATUS_17F_S_FAULT = 2;
    HOD_SYSTEM_STATUS_17F_S_NOTCALIBRATION = 3;
  }
  enum DriverGrip17FSType {
    DRIVER_GRIP_17F_S_INVALID = 0;
    DRIVER_GRIP_17F_S_NOHANDDETECTED = 1;
    DRIVER_GRIP_17F_S_HANDDETECTED = 2;
  }
  enum DriverGripArea17FSType {
    DRIVER_GRIP_AREA_17F_S_NOHAND = 0;
    DRIVER_GRIP_AREA_17F_S_LEFTHALFAREA = 1;
    DRIVER_GRIP_AREA_17F_S_RIGHTHALFAREA = 2;
    DRIVER_GRIP_AREA_17F_S_BOTHLEFTHALFAREAANDRIGHT = 3;
    DRIVER_GRIP_AREA_17F_S_FRONTAREA = 4;
    DRIVER_GRIP_AREA_17F_S_BACKAREA = 5;
    DRIVER_GRIP_AREA_17F_S_BOTHFRONTANDBACKAREA = 6;
    DRIVER_GRIP_AREA_17F_S_RESERVED_7 = 7;
  }
  // HOD_System_Status_17F_S [] [0|7]
  optional HODSystemStatus17FSType hod_system_status_17_f_s = 1;
  // Driver_Grip_17F_S [] [0|7]
  optional DriverGrip17FSType driver_grip_17_f_s = 2;
  // Driver_Grip_S_Valid_17F_S [] [0|1]
  optional bool driver_grip_s_valid_17_f_s = 3;
  // Driver_Grip_Area_17F_S [] [0|7]
  optional DriverGripArea17FSType driver_grip_area_17_f_s = 4;
  // Rolling_Counter_17F_S [] [0|15]
  optional int32 rolling_counter_17_f_s = 5;
  // Checksum_17F_S [] [0|255]
  optional int32 checksum_17_f_s = 6;
}

message PAS_0X1A1 {
// Control Message
  enum PASSupport1A1SType {
    PAS_SUPPORT_1A1_S_INVALID = 0;
    PAS_SUPPORT_1A1_S_NOTSUPPORTED = 1;
    PAS_SUPPORT_1A1_S_SUPPORTED = 2;
    PAS_SUPPORT_1A1_S_RESERVED_3 = 3;
  }
  enum msSWorkSts1A1SType {
    MSS_WORKSTS_1A1_S_NONE = 0;
    MSS_WORKSTS_1A1_S_CRUISING = 1;
    MSS_WORKSTS_1A1_S_PARKING = 2;
  }
  enum msSRLCSts1A1SType {
    MSS_RLCSTS_1A1_S_NORMAL = 0;
    MSS_RLCSTS_1A1_S_FAILED = 1;
    MSS_RLCSTS_1A1_S_BLINDNESS = 2;
    MSS_RLCSTS_1A1_S_RESERVED_3 = 3;
  }
  enum msSRLMSts1A1SType {
    MSS_RLMSTS_1A1_S_NORMAL = 0;
    MSS_RLMSTS_1A1_S_FAILED = 1;
    MSS_RLMSTS_1A1_S_BLINDNESS = 2;
    MSS_RLMSTS_1A1_S_RESERVED_3 = 3;
  }
  enum msSRRCSts1A1SType {
    MSS_RRCSTS_1A1_S_NORMAL = 0;
    MSS_RRCSTS_1A1_S_FAILED = 1;
    MSS_RRCSTS_1A1_S_BLINDNESS = 2;
    MSS_RRCSTS_1A1_S_RESERVED_3 = 3;
  }
  enum msSRRMSts1A1SType {
    MSS_RRMSTS_1A1_S_NORMAL = 0;
    MSS_RRMSTS_1A1_S_FAILED = 1;
    MSS_RRMSTS_1A1_S_BLINDNESS = 2;
    MSS_RRMSTS_1A1_S_RESERVED_3 = 3;
  }
  enum msSFLCSts1A1SType {
    MSS_FLCSTS_1A1_S_NORMAL = 0;
    MSS_FLCSTS_1A1_S_FAILED = 1;
    MSS_FLCSTS_1A1_S_BLINDNESS = 2;
    MSS_FLCSTS_1A1_S_RESERVED_3 = 3;
  }
  enum msSFLMSts1A1SType {
    MSS_FLMSTS_1A1_S_NORMAL = 0;
    MSS_FLMSTS_1A1_S_FAILED = 1;
    MSS_FLMSTS_1A1_S_BLINDNESS = 2;
    MSS_FLMSTS_1A1_S_RESERVED_3 = 3;
  }
  enum msSFRCSts1A1SType {
    MSS_FRCSTS_1A1_S_NORMAL = 0;
    MSS_FRCSTS_1A1_S_FAILED = 1;
    MSS_FRCSTS_1A1_S_BLINDNESS = 2;
    MSS_FRCSTS_1A1_S_RESERVED_3 = 3;
  }
  enum msSFRMSts1A1SType {
    MSS_FRMSTS_1A1_S_NORMAL = 0;
    MSS_FRMSTS_1A1_S_FAILED = 1;
    MSS_FRMSTS_1A1_S_BLINDNESS = 2;
    MSS_FRMSTS_1A1_S_RESERVED_3 = 3;
  }
  enum msSRLSSts1A1SType {
    MSS_RLSSTS_1A1_S_NORMAL = 0;
    MSS_RLSSTS_1A1_S_FAILED = 1;
    MSS_RLSSTS_1A1_S_BLINDNESS = 2;
    MSS_RLSSTS_1A1_S_RESERVED_3 = 3;
  }
  enum msSRRSSts1A1SType {
    MSS_RRSSTS_1A1_S_NORMAL = 0;
    MSS_RRSSTS_1A1_S_FAILED = 1;
    MSS_RRSSTS_1A1_S_BLINDNESS = 2;
    MSS_RRSSTS_1A1_S_RESERVED_3 = 3;
  }
  enum msSFLSSts1A1SType {
    MSS_FLSSTS_1A1_S_NORMAL = 0;
    MSS_FLSSTS_1A1_S_FAILED = 1;
    MSS_FLSSTS_1A1_S_BLINDNESS = 2;
    MSS_FLSSTS_1A1_S_RESERVED_3 = 3;
  }
  enum msSFRSSts1A1SType {
    MSS_FRSSTS_1A1_S_NORMAL = 0;
    MSS_FRSSTS_1A1_S_FAILED = 1;
    MSS_FRSSTS_1A1_S_BLINDNESS = 2;
    MSS_FRSSTS_1A1_S_RESERVED_3 = 3;
  }
  enum UPCMapObjectOuputStatms1A1SType {
    UPC_MAPOBJECTOUPUT_STATMS_1A1_S_OFF = 0;
    UPC_MAPOBJECTOUPUT_STATMS_1A1_S_STANDBY = 1;
    UPC_MAPOBJECTOUPUT_STATMS_1A1_S_FRONTREARACTIVE = 2;
    UPC_MAPOBJECTOUPUT_STATMS_1A1_S_FRONTACTIVEANDREARFAILURE = 3;
    UPC_MAPOBJECTOUPUT_STATMS_1A1_S_REARACTIVEANDFRONTFAILURE = 4;
    UPC_MAPOBJECTOUPUT_STATMS_1A1_S_SYSTEMFAILURE = 5;
    UPC_MAPOBJECTOUPUT_STATMS_1A1_S_ONLYFRONTACTIVE = 6;
    UPC_MAPOBJECTOUPUT_STATMS_1A1_S_REARNOTACTIVEANDFRONTFAILURE = 7;
  }
  // Checksum_1A1_S [] [0|255]
  optional int32 checksum_1_a1_s = 1;
  // Counter_1A1_S [] [0|65535]
  optional int32 counter_1_a1_s = 2;
  // FLC_Dist_0x1A1 [cm] [0|511]
  optional int32 flc_dist_0x1_a1 = 3;
  // FLM_Dist_0x1A1 [cm] [0|511]
  optional int32 flm_dist_0x1_a1 = 4;
  // FRM_Dist_0x1A1 [cm] [0|511]
  optional int32 frm_dist_0x1_a1 = 5;
  // FRC_Dist_0x1A1 [cm] [0|511]
  optional int32 frc_dist_0x1_a1 = 6;
  // RLC_Dist_0x1A1 [cm] [0|511]
  optional int32 rlc_dist_0x1_a1 = 7;
  // RLM_Dist_0x1A1 [cm] [0|511]
  optional int32 rlm_dist_0x1_a1 = 8;
  // RRM_Dist_0x1A1 [cm] [0|511]
  optional int32 rrm_dist_0x1_a1 = 9;
  // RRC_Dist_0x1A1 [cm] [0|511]
  optional int32 rrc_dist_0x1_a1 = 10;
  // PAS_Support_1A1_S [] [0|3]
  optional PASSupport1A1SType pas_support_1_a1_s = 11;
  // msS_WorkSts_1A1_S [] [0|7]
  optional msSWorkSts1A1SType ms_s_work_sts_1_a1_s = 12;
  // msS_RLCSts_1A1_S [] [0|3]
  optional msSRLCSts1A1SType ms_s_rlc_sts_1_a1_s = 13;
  // msS_RLMSts_1A1_S [] [0|3]
  optional msSRLMSts1A1SType ms_s_rlm_sts_1_a1_s = 14;
  // msS_RRCSts_1A1_S [] [0|3]
  optional msSRRCSts1A1SType ms_s_rrc_sts_1_a1_s = 15;
  // msS_RRMSts_1A1_S [] [0|3]
  optional msSRRMSts1A1SType ms_s_rrm_sts_1_a1_s = 16;
  // msS_FLCSts_1A1_S [] [0|3]
  optional msSFLCSts1A1SType ms_s_flc_sts_1_a1_s = 17;
  // msS_FLMSts_1A1_S [] [0|3]
  optional msSFLMSts1A1SType ms_s_flm_sts_1_a1_s = 18;
  // msS_FRCSts_1A1_S [] [0|3]
  optional msSFRCSts1A1SType ms_s_frc_sts_1_a1_s = 19;
  // msS_FRMSts_1A1_S [] [0|3]
  optional msSFRMSts1A1SType ms_s_frm_sts_1_a1_s = 20;
  // msS_RLSSts_1A1_S [] [0|3]
  optional msSRLSSts1A1SType ms_s_rls_sts_1_a1_s = 21;
  // msS_RRSSts_1A1_S [] [0|3]
  optional msSRRSSts1A1SType ms_s_rrs_sts_1_a1_s = 22;
  // msS_FLSSts_1A1_S [] [0|3]
  optional msSFLSSts1A1SType ms_s_fls_sts_1_a1_s = 23;
  // msS_FRSSts_1A1_S [] [0|3]
  optional msSFRSSts1A1SType ms_s_frs_sts_1_a1_s = 24;
  // UPC_MapObjectOuput_Statms_1A1_S [] [0|15]
  optional UPCMapObjectOuputStatms1A1SType upc_map_object_ouput_statms_1_a1_s = 25;
}

message MEDIA_0X1BC {
// Report Message
  // Medium_0x1BC_ChilD_ID_S [] [0|255]
  optional int32 medium_0x1_bc_chil_d_id_s = 1;
  // Optional_Parking_Angle_S [] [0|255]
  optional int32 optional_parking_angle_s = 2;
  // X_Coordinate_Of_The_O_P_Space_S [] [-512|511]
  optional int32 x_coordinate_of_the_o_p_space_s = 3;
  // Y_Coordinate_Of_The_O_P_Space_S [] [-512|511]
  optional int32 y_coordinate_of_the_o_p_space_s = 4;
}

message ADS_0X1CB {
// Control Message
  enum DNPLiDARstatusType {
    DNP_LIDAR_STATUS_NORMAL = 0;
    DNP_LIDAR_STATUS_FRONT_LIDARFAULT = 1;
    DNP_LIDAR_STATUS_L_CORNER_LIDAR_FAULT = 2;
    DNP_LIDAR_STATUS_R_CORNER_LIDAR_FAULT = 3;
    DNP_LIDAR_STATUS_FRONT_LIDAR_COVERED = 4;
    DNP_LIDAR_STATUS_L_CORNER_LIDAR_COVERED = 5;
    DNP_LIDAR_STATUS_R_CORNER_COVERED = 6;
    DNP_LIDAR_STATUS_RESERVED_7 = 7;
  }
  enum WindshieldHeatingFuncStatusSType {
    WINDSHIELD_HEATING_FUNC_STATUS_S_OFF = 0;
    WINDSHIELD_HEATING_FUNC_STATUS_S_INITIALHEATING = 1;
    WINDSHIELD_HEATING_FUNC_STATUS_S_HEATING = 2;
    WINDSHIELD_HEATING_FUNC_STATUS_S_HEATINGTEST = 3;
  }
  enum E2ENaviStsResponseSType {
    E2E_NAVI_STS_RESPONSE_S_OFF = 0;
    E2E_NAVI_STS_RESPONSE_S_ON = 1;
    E2E_NAVI_STS_RESPONSE_S_FAULT = 2;
    E2E_NAVI_STS_RESPONSE_S_RESERVED_3 = 3;
  }
  enum VideomodestType {
    VIDEO_MODE_ST_OUTPUTINGORIGINALIMAGE = 0;
    VIDEO_MODE_ST_OUTPUTORIGINALIMAGEROTATED180DEGREE = 1;
    VIDEO_MODE_ST_OUTPUTINGORIGINALIMAGEMIRROR = 2;
    VIDEO_MODE_ST_OUTPUTINGLCTCLOCKWISE90DEGREE = 3;
    VIDEO_MODE_ST_OUTPUTINGLCTCLOCKWISE270DEGREE = 4;
    VIDEO_MODE_ST_OUTPUTINGLIMAGEROTATED180DEGREE = 5;
    VIDEO_MODE_ST_OUTPUTINGLIMAGELANDRMIRROR = 6;
    VIDEO_MODE_ST_OUTPUTINGRCTCLOCKWISE90DEGREE = 7;
    VIDEO_MODE_ST_OUTPUTINGRCTCLOCKWISE270DEGREE = 8;
    VIDEO_MODE_ST_OUTPUTINGRIMAGEROTATED180DEGREE = 9;
    VIDEO_MODE_ST_OUTPUTINGRIMAGELANDRMIRROR = 10;
    VIDEO_MODE_ST_OUTPUTINGCENTERCTCLOCKWISE90DEGREE = 11;
    VIDEO_MODE_ST_OUTPUTINGCENTERCTCLOCKWISE270DEGREE = 12;
    VIDEO_MODE_ST_OUTPUTINGCENTERIMAGEROTATED180DEGREE = 13;
    VIDEO_MODE_ST_OUTPUTINGCENTERIMAGELANDRMIRROR = 14;
    VIDEO_MODE_ST_RESERVED_15 = 15;
  }
  enum ADSFWsahRequestSType {
    ADS_FWSAH_REQUEST_S_NOREQUEST = 0;
    ADS_FWSAH_REQUEST_S_REQUESTTOWIPERWASH = 1;
    ADS_FWSAH_REQUEST_S_WASHINAUTO = 2;
    ADS_FWSAH_REQUEST_S_RESERVED_3 = 3;
  }
  enum ADASAngleReqStRddcySType {
    ADAS_ANGLEREQST_RDDCY_S_INHIBITED = 0;
    ADAS_ANGLEREQST_RDDCY_S_READY = 1;
    ADAS_ANGLEREQST_RDDCY_S_ACT = 2;
    ADAS_ANGLEREQST_RDDCY_S_RESERVED_3 = 3;
  }
  enum DNPStats1SType {
    DNP_STATS_1S_OFF = 0;
    DNP_STATS_1S_MRC = 8;
    DNP_STATS_1S_FAULT = 9;
    DNP_STATS_1S_RESERVED_10 = 10;
    DNP_STATS_1S_RESERVED_11 = 11;
    DNP_STATS_1S_RESERVED_12 = 12;
    DNP_STATS_1S_RESERVED_13 = 13;
    DNP_STATS_1S_RESERVED_14 = 14;
    DNP_STATS_1S_RESERVED_15 = 15;
  }
  enum ADSCenLockRequestSType {
    ADS_CENLOCK_REQUEST_S_NOREQUEST = 0;
    ADS_CENLOCK_REQUEST_S_REQUESTTOLOCK = 1;
    ADS_CENLOCK_REQUEST_S_REQUESTTOUNLOCK = 2;
    ADS_CENLOCK_REQUEST_S_DRIVEUNLOCKANDORLOCK = 3;
  }
  enum ADSIOAStatesSType {
    ADS_IOA_STATES_S_OFF = 0;
    ADS_IOA_STATES_S_STANDBY = 1;
    ADS_IOA_STATES_S_WARNING = 2;
    ADS_IOA_STATES_S_AVODING_HOST = 3;
    ADS_IOA_STATES_S_AVODING_HONE = 4;
    ADS_IOA_STATES_S_AVODING_NE = 5;
    ADS_IOA_STATES_S_STAFESTOP = 6;
    ADS_IOA_STATES_S_BRAKING = 7;
    ADS_IOA_STATES_S_ERROR = 8;
    ADS_IOA_STATES_S_CPLD = 9;
    ADS_IOA_STATES_S_RESERVED_10 = 10;
    ADS_IOA_STATES_S_RESERVED_11 = 11;
    ADS_IOA_STATES_S_RESERVED_12 = 12;
    ADS_IOA_STATES_S_RESERVED_13 = 13;
    ADS_IOA_STATES_S_RESERVED_14 = 14;
    ADS_IOA_STATES_S_RESERVED_15 = 15;
  }
  enum ADSIOAWarnSType {
    ADS_IOA_WARN_S_OFF = 0;
    ADS_IOA_WARN_S_STANDBY = 1;
    ADS_IOA_WARN_S_WARNING = 2;
    ADS_IOA_WARN_S_AVODING_HOST = 3;
    ADS_IOA_WARN_S_AVODING_HONE = 4;
    ADS_IOA_WARN_S_AVODING_NE = 5;
    ADS_IOA_WARN_S_STAFESTOP = 6;
    ADS_IOA_WARN_S_BRAKING = 7;
    ADS_IOA_WARN_S_ERROR = 8;
    ADS_IOA_WARN_S_CPLD = 9;
    ADS_IOA_WARN_S_RESERVED_10 = 10;
    ADS_IOA_WARN_S_RESERVED_11 = 11;
    ADS_IOA_WARN_S_RESERVED_12 = 12;
    ADS_IOA_WARN_S_RESERVED_13 = 13;
    ADS_IOA_WARN_S_RESERVED_14 = 14;
    ADS_IOA_WARN_S_RESERVED_15 = 15;
  }
  enum IOAObs1WarningSType {
    IOA_OBS1_WARNING_S_NORMAL = 0;
    IOA_OBS1_WARNING_S_NOTIFYING = 1;
    IOA_OBS1_WARNING_S_LOWWARNING = 2;
    IOA_OBS1_WARNING_S_MEDIUMWARNING = 3;
    IOA_OBS1_WARNING_S_HIGHWARNING = 4;
    IOA_OBS1_WARNING_S_RESERVED_5 = 5;
    IOA_OBS1_WARNING_S_RESERVED_6 = 6;
    IOA_OBS1_WARNING_S_RESERVED_7 = 7;
  }
  enum IOAObs2WarningSType {
    IOA_OBS2_WARNING_S_NORMAL = 0;
    IOA_OBS2_WARNING_S_NOTIFYING = 1;
    IOA_OBS2_WARNING_S_LOWWARNING = 2;
    IOA_OBS2_WARNING_S_MEDIUMWARNING = 3;
    IOA_OBS2_WARNING_S_HIGHWARNING = 4;
    IOA_OBS2_WARNING_S_RESERVED_5 = 5;
    IOA_OBS2_WARNING_S_RESERVED_6 = 6;
    IOA_OBS2_WARNING_S_RESERVED_7 = 7;
  }
  enum IOAObs3WarningSType {
    IOA_OBS3_WARNING_S_NORMAL = 0;
    IOA_OBS3_WARNING_S_NOTIFYING = 1;
    IOA_OBS3_WARNING_S_LOWWARNING = 2;
    IOA_OBS3_WARNING_S_MEDIUMWARNING = 3;
    IOA_OBS3_WARNING_S_HIGHWARNING = 4;
    IOA_OBS3_WARNING_S_RESERVED_5 = 5;
    IOA_OBS3_WARNING_S_RESERVED_6 = 6;
    IOA_OBS3_WARNING_S_RESERVED_7 = 7;
  }
  enum ADSIOASettingStatesSType {
    ADS_IOA_SETTINGSTATES_S_OFF = 0;
    ADS_IOA_SETTINGSTATES_S_ON = 1;
    ADS_IOA_SETTINGSTATES_S_RESERVED_2 = 2;
    ADS_IOA_SETTINGSTATES_S_RESERVED_3 = 3;
  }
  enum IOAObs1RelPosSType {
    IOA_OBS1_RELPOS_S_NONE = 0;
    IOA_OBS1_RELPOS_S_LOBS = 1;
    IOA_OBS1_RELPOS_S_ROBS = 2;
    IOA_OBS1_RELPOS_S_MIDOBS = 3;
    IOA_OBS1_RELPOS_S_CROSOBS = 4;
    IOA_OBS1_RELPOS_S_RESERVED_5 = 5;
    IOA_OBS1_RELPOS_S_RESERVED_6 = 6;
    IOA_OBS1_RELPOS_S_RESERVED_7 = 7;
  }
  enum IOAObs2RelPosSType {
    IOA_OBS2_RELPOS_S_NONE = 0;
    IOA_OBS2_RELPOS_S_LOBS = 1;
    IOA_OBS2_RELPOS_S_ROBS = 2;
    IOA_OBS2_RELPOS_S_MIDOBS = 3;
    IOA_OBS2_RELPOS_S_CROSOBS = 4;
    IOA_OBS2_RELPOS_S_RESERVED_5 = 5;
    IOA_OBS2_RELPOS_S_RESERVED_6 = 6;
    IOA_OBS2_RELPOS_S_RESERVED_7 = 7;
  }
  enum IOAObs3RelPosSType {
    IOA_OBS3_RELPOS_S_NONE = 0;
    IOA_OBS3_RELPOS_S_LOBS = 1;
    IOA_OBS3_RELPOS_S_ROBS = 2;
    IOA_OBS3_RELPOS_S_MIDOBS = 3;
    IOA_OBS3_RELPOS_S_CROSOBS = 4;
    IOA_OBS3_RELPOS_S_RESERVED_5 = 5;
    IOA_OBS3_RELPOS_S_RESERVED_6 = 6;
    IOA_OBS3_RELPOS_S_RESERVED_7 = 7;
  }
  enum IOAStopTakeoverSType {
    IOA_STOP_TAKEOVER_S_NONE = 0;
    IOA_STOP_TAKEOVER_S_TAKEOVER_INFORM = 1;
    IOA_STOP_TAKEOVER_S_RESERVED_2 = 2;
    IOA_STOP_TAKEOVER_S_RESERVED_3 = 3;
  }
  enum LastPowerOffStatusType {
    LAST_POWEROFF_STATUS_INVALID = 0;
    LAST_POWEROFF_STATUS_SAFE_POWEROFF = 1;
    LAST_POWEROFF_STATUS_UNSAFE_POWEROFF_PULSECOUNTER = 2;
    LAST_POWEROFF_STATUS_RESERVED_3 = 3;
  }
  enum frontfisheyevideostatusType {
    FRONT_FISHEYE_VIDEO_STATUS_DEFAULT = 0;
    FRONT_FISHEYE_VIDEO_STATUS_FRONT_VIDEO_NORMAL = 1;
    FRONT_FISHEYE_VIDEO_STATUS_FRONT_VIDEO_ABNORMAL = 2;
    FRONT_FISHEYE_VIDEO_STATUS_RESERVED_3 = 3;
  }
  enum leftfisheyevideostatusType {
    LEFT_FISHEYE_VIDEO_STATUS_DEFAULT = 0;
    LEFT_FISHEYE_VIDEO_STATUS_LEFT_VIDEO_NORMAL = 1;
    LEFT_FISHEYE_VIDEO_STATUS_LEFT_VIDEO_ABNORMAL = 2;
    LEFT_FISHEYE_VIDEO_STATUS_RESERVED_3 = 3;
  }
  enum rightfisheyevideostatusType {
    RIGHT_FISHEYE_VIDEO_STATUS_DEFAULT = 0;
    RIGHT_FISHEYE_VIDEO_STATUS_RIGHT_VIDEO_NORMAL = 1;
    RIGHT_FISHEYE_VIDEO_STATUS_RIGHT_VIDEO_ABNORMAL = 2;
    RIGHT_FISHEYE_VIDEO_STATUS_RESERVED_3 = 3;
  }
  enum rearfisheyevideostatusType {
    REAR_FISHEYE_VIDEO_STATUS_DEFAULT = 0;
    REAR_FISHEYE_VIDEO_STATUS_REAR_VIDEO_NORMAL = 1;
    REAR_FISHEYE_VIDEO_STATUS_REAR_VIDEO_ABNORMAL = 2;
    REAR_FISHEYE_VIDEO_STATUS_RESERVED_3 = 3;
  }
  enum RLPeriViewCamType {
    RL_PERI_VIEW_CAM_DEFAULT = 0;
    RL_PERI_VIEW_CAM_RL_PERI_VIEW_CAM_NORMAL = 1;
    RL_PERI_VIEW_CAM_RL_PERI_VIEW_CAM_ABNORMAL = 2;
    RL_PERI_VIEW_CAM_RESERVED_3 = 3;
  }
  enum RRPeriViewCamType {
    RR_PERI_VIEW_CAM_DEFAULT = 0;
    RR_PERI_VIEW_CAM_RR_PERI_VIEW_CAM_NORMAL = 1;
    RR_PERI_VIEW_CAM_RR_PERI_VIEW_CAM_ABNORMAL = 2;
    RR_PERI_VIEW_CAM_RESERVED_3 = 3;
  }
  enum NRPDisplayForPadType {
    NRP_DISPLAYFORPAD_NONE = 0;
    NRP_DISPLAYFORPAD_NRP_RUNNING = 1;
    NRP_DISPLAYFORPAD_HEIGHT_LIMITED_ADVISE_TO_STOP = 2;
    NRP_DISPLAYFORPAD_WIDTH_LIMITED_ADVISE_TO_STOP = 3;
    NRP_DISPLAYFORPAD_HEIGHT_LIMITED_BE_CAREFUL = 4;
    NRP_DISPLAYFORPAD_WIDTH_LIMITED_BE_CAREFUL = 5;
    NRP_DISPLAYFORPAD_PRESS_BRAKING = 6;
    NRP_DISPLAYFORPAD_PRESS_NRP_START_BUTTON = 7;
    NRP_DISPLAYFORPAD_RELEASE_BRAKEPEDAL_STEERING = 8;
    NRP_DISPLAYFORPAD_PLEASE_DRIVE_THE_VEHICLE = 9;
    NRP_DISPLAYFORPAD_NPR_COMPLETED = 10;
    NRP_DISPLAYFORPAD_RELEASE_ACCEL_PEDAL = 11;
    NRP_DISPLAYFORPAD_BUCKLE_SEAT_BELT = 12;
    NRP_DISPLAYFORPAD_WAIT_FOR_OBSTACLES_TO_CLEAR = 13;
    NRP_DISPLAYFORPAD_CLICK_CONTINUE_BUTTON = 14;
    NRP_DISPLAYFORPAD_NRP_FAILED = 15;
    NRP_DISPLAYFORPAD_STOP_TIME_OUT = 16;
    NRP_DISPLAYFORPAD_STEERING_OVERRIDE = 17;
    NRP_DISPLAYFORPAD_GEAR_P_OVERRIDE = 18;
    NRP_DISPLAYFORPAD_GEAR_N_R_D_OVERRIDE = 19;
    NRP_DISPLAYFORPAD_BRAKE_PEDAL_DEPRESSED = 20;
    NRP_DISPLAYFORPAD_SEATBELT_RELEASED = 21;
    NRP_DISPLAYFORPAD_PRESS_NRP_EXIT_BUTTON = 22;
    NRP_DISPLAYFORPAD_PRESS_AVM_EXIT_BUTTON = 23;
    NRP_DISPLAYFORPAD_ANY_DOOR_OPEN = 24;
    NRP_DISPLAYFORPAD_TRUNCK_OPEN = 25;
    NRP_DISPLAYFORPAD_HOOD_OPEN = 26;
    NRP_DISPLAYFORPAD_MIRROR_FOLD = 27;
  }
  enum NRPDisplayForMeterType {
    NRP_DISPLAYFORMETER_NONE = 0;
    NRP_DISPLAYFORMETER_NRP_RUNNING = 1;
    NRP_DISPLAYFORMETER_HEIGHT_LIMITED_ADVISE_TO_STOP = 2;
    NRP_DISPLAYFORMETER_WIDTH_LIMITED_ADVISE_TO_STOP = 3;
    NRP_DISPLAYFORMETER_HEIGHT_LIMITED_BE_CAREFUL = 4;
    NRP_DISPLAYFORMETER_WIDTH_LIMITED_BE_CAREFUL = 5;
    NRP_DISPLAYFORMETER_PRESS_BRAKING = 6;
    NRP_DISPLAYFORMETER_PRESS_NRP_START_BUTTON = 7;
    NRP_DISPLAYFORMETER_RELEASE_BRAKEPEDAL_STEERING = 8;
    NRP_DISPLAYFORMETER_PLEASE_DRIVE_THE_VEHICLE = 9;
    NRP_DISPLAYFORMETER_NPR_COMPLETED = 10;
    NRP_DISPLAYFORMETER_RELEASE_ACCEL_PEDAL = 11;
    NRP_DISPLAYFORMETER_BUCKLE_SEAT_BELT = 12;
    NRP_DISPLAYFORMETER_WAIT_FOR_OBSTACLES_TO_CLEAR = 13;
    NRP_DISPLAYFORMETER_CLICK_CONTINUE_BUTTON = 14;
    NRP_DISPLAYFORMETER_NRP_FAILED = 15;
    NRP_DISPLAYFORMETER_STOP_TIME_OUT = 16;
    NRP_DISPLAYFORMETER_STEERING_OVERRIDE = 17;
    NRP_DISPLAYFORMETER_GEAR_P_OVERRIDE = 18;
    NRP_DISPLAYFORMETER_GEAR_N_R_D_OVERRIDE = 19;
    NRP_DISPLAYFORMETER_BRAKE_PEDAL_DEPRESSED = 20;
    NRP_DISPLAYFORMETER_SEATBELT_RELEASED = 21;
    NRP_DISPLAYFORMETER_PRESS_NRP_EXIT_BUTTON = 22;
    NRP_DISPLAYFORMETER_PRESS_AVM_EXIT_BUTTON = 23;
    NRP_DISPLAYFORMETER_ANY_DOOR_OPEN = 24;
    NRP_DISPLAYFORMETER_TRUNCK_OPEN = 25;
    NRP_DISPLAYFORMETER_HOOD_OPEN = 26;
    NRP_DISPLAYFORMETER_MIRROR_FOLD = 27;
  }
  enum NRPTBAVoicePromptType {
    NRP_TBA_VOICEPROMPT_NONE = 0;
    NRP_TBA_VOICEPROMPT_NRP_START = 1;
    NRP_TBA_VOICEPROMPT_NRP_COMPLETED = 2;
    NRP_TBA_VOICEPROMPT_NRP_FAILED = 3;
  }
  enum NRPTBASoundEffectType {
    NRP_TBA_SOUNDEFFECT_NONE = 0;
    NRP_TBA_SOUNDEFFECT_2HZ_ONE_TIME = 1;
    NRP_TBA_SOUNDEFFECT_2HZ_TWO_TIMES = 2;
    NRP_TBA_SOUNDEFFECT_2HZ_HOLD = 3;
    NRP_TBA_SOUNDEFFECT_2_5HZ_FIVE_TIMES = 4;
    NRP_TBA_SOUNDEFFECT_2_5HZ_HOLD = 5;
    NRP_TBA_SOUNDEFFECT_3_33HZ_HOLD = 6;
    NRP_TBA_SOUNDEFFECT_3_33HZ_80_DECIBEL_HOLD = 7;
    NRP_TBA_SOUNDEFFECT_5HZ_HOLD = 8;
  }
  enum NRPTBAWarningHoldDisplayType {
    NRP_TBA_WARNINGHOLDDISPLAY_INVALID = 0;
    NRP_TBA_WARNINGHOLDDISPLAY_CONTINUE_DISPLAY = 1;
    NRP_TBA_WARNINGHOLDDISPLAY_NO_CONTINUE_DISPLAY = 2;
    NRP_TBA_WARNINGHOLDDISPLAY_RESERVED_3 = 3;
  }
  // DNP_LiDAR_status [] [0|7]
  optional DNPLiDARstatusType dnp_li_dar_status = 1;
  // vehicle_yaw_angle [°] [-90|90]
  optional double vehicle_yaw_angle = 2;
  // Windshield_Heating_Func_Status_S [] [0|3]
  optional WindshieldHeatingFuncStatusSType windshield_heating_func_status_s = 3;
  // E2E_Navi_Sts_Response_S [] [0|3]
  optional E2ENaviStsResponseSType e2_e_navi_sts_response_s = 4;
  // Video_mode_st [] [0|15]
  optional VideomodestType video_mode_st = 5;
  // ADS_PowerMode_Request_S [] [0|1]
  optional bool ads_power_mode_request_s = 6;
  // ADS_FWsah_Request_S [] [0|3]
  optional ADSFWsahRequestSType ads_f_wsah_request_s = 7;
  // ADS_Horn_Request_S [] [0|1]
  optional bool ads_horn_request_s = 8;
  // AngleReq_Valid_Rddcy_S [] [0|1]
  optional bool angle_req_valid_rddcy_s = 9;
  // ADAS_AngleReqSt_Rddcy_S [] [0|3]
  optional ADASAngleReqStRddcySType adas_angle_req_st_rddcy_s = 10;
  // ADAS_ECU_AngleReq_Rddcy_S [] [0|6553.5]
  optional double adas_ecu_angle_req_rddcy_s = 11;
  // DNP_Stats_1S [] [0|15]
  optional DNPStats1SType dnp_stats_1_s = 12;
  // ADS_WindSunCld_Request_S [] [0|1]
  optional bool ads_wind_sun_cld_request_s = 13;
  // ADS_CenLock_Request_S [] [0|3]
  optional ADSCenLockRequestSType ads_cen_lock_request_s = 14;
  // ADS_IOA_States_S [] [0|15]
  optional ADSIOAStatesSType ads_ioa_states_s = 15;
  // ADS_IOA_Warn_S [] [0|15]
  optional ADSIOAWarnSType ads_ioa_warn_s = 16;
  // IOA_Obs1_OrdinateY_S [m] [-12|12]
  optional double ioa_obs1_ordinate_y_s = 17;
  // IOA_Obs1_OrdinateX_S [m] [-10|150]
  optional double ioa_obs1_ordinate_x_s = 18;
  // IOA_Obs1_Size_S [m] [0|10]
  optional double ioa_obs1_size_s = 19;
  // IOA_Obs1_Warning_S [] [0|7]
  optional IOAObs1WarningSType ioa_obs1_warning_s = 20;
  // IOA_Obs2_OrdinateY_S [m] [-12|12]
  optional double ioa_obs2_ordinate_y_s = 21;
  // IOA_Obs2_OrdinateX_S [m] [-10|150]
  optional double ioa_obs2_ordinate_x_s = 22;
  // IOA_Obs2_Size_S [m] [0|10]
  optional double ioa_obs2_size_s = 23;
  // IOA_Obs2_Warning_S [] [0|7]
  optional IOAObs2WarningSType ioa_obs2_warning_s = 24;
  // IOA_Obs3_OrdinateY_S [m] [-12|12]
  optional double ioa_obs3_ordinate_y_s = 25;
  // IOA_Obs3_OrdinateX_S [m] [-10|150]
  optional double ioa_obs3_ordinate_x_s = 26;
  // IOA_Obs3_Size_S [m] [0|10]
  optional double ioa_obs3_size_s = 27;
  // IOA_Obs3_Warning_S [] [0|7]
  optional IOAObs3WarningSType ioa_obs3_warning_s = 28;
  // ADS_IOA_SettingStates_S [] [0|3]
  optional ADSIOASettingStatesSType ads_ioa_setting_states_s = 29;
  // IOA_Obs1_RelPos_S [] [0|7]
  optional IOAObs1RelPosSType ioa_obs1_rel_pos_s = 30;
  // IOA_Obs2_RelPos_S [] [0|7]
  optional IOAObs2RelPosSType ioa_obs2_rel_pos_s = 31;
  // IOA_Obs3_RelPos_S [] [0|7]
  optional IOAObs3RelPosSType ioa_obs3_rel_pos_s = 32;
  // IOA_Stop_Takeover_S [] [0|3]
  optional IOAStopTakeoverSType ioa_stop_takeover_s = 33;
  // Last_PowerOff_Status [] [0|3]
  optional LastPowerOffStatusType last_power_off_status = 34;
  // Last_Unsafe_PowerOff_Timestamp [] [0|4294967295]
  optional int32 last_unsafe_power_off_timestamp = 35;
  // Ri_LinklockStatus_96712 [] [0|1]
  optional bool ri_linklock_status_96712 = 36;
  // Fr_LinklockStatus_96712 [] [0|1]
  optional bool fr_linklock_status_96712 = 37;
  // Le_LinklockStatus_96712 [] [0|1]
  optional bool le_linklock_status_96712 = 38;
  // Re_LinklockStatus_96712 [] [0|1]
  optional bool re_linklock_status_96712 = 39;
  // Ri_videolockStatus_96712 [] [0|1]
  optional bool ri_videolock_status_96712 = 40;
  // Fr_videolockStatus_96712 [] [0|1]
  optional bool fr_videolock_status_96712 = 41;
  // Le_videolockStatus_96712 [] [0|1]
  optional bool le_videolock_status_96712 = 42;
  // Re_videolockStatus_96712 [] [0|1]
  optional bool re_videolock_status_96712 = 43;
  // RF_CSI_Status_96712 [] [0|1]
  optional bool rf_csi_status_96712 = 44;
  // LR_CSI_Status_96712 [] [0|1]
  optional bool lr_csi_status_96712 = 45;
  // Fisheye_CSI_Status_96712 [] [0|1]
  optional bool fisheye_csi_status_96712 = 46;
  // LinklockStatus_9295e [] [0|1]
  optional bool linklock_status_9295e = 47;
  // RF_Pclk_9295e [] [0|1]
  optional bool rf_pclk_9295e = 48;
  // RF_Frame_9295e [] [0|1]
  optional bool rf_frame_9295e = 49;
  // LR_Pclk_9295e [] [0|1]
  optional bool lr_pclk_9295e = 50;
  // LR_Frame_9295e [] [0|1]
  optional bool lr_frame_9295e = 51;
  // front_fisheye_video_status [] [0|3]
  optional frontfisheyevideostatusType front_fisheye_video_status = 52;
  // left_fisheye_video_status [] [0|3]
  optional leftfisheyevideostatusType left_fisheye_video_status = 53;
  // right_fisheye_video_status [] [0|3]
  optional rightfisheyevideostatusType right_fisheye_video_status = 54;
  // rear_fisheye_video_status [] [0|3]
  optional rearfisheyevideostatusType rear_fisheye_video_status = 55;
  // RL_Peri_View_Cam [] [0|3]
  optional RLPeriViewCamType rl_peri_view_cam = 56;
  // RR_Peri_View_Cam [] [0|3]
  optional RRPeriViewCamType rr_peri_view_cam = 57;
  // NRP_DisplayForPad [] [0|63]
  optional NRPDisplayForPadType nrp_display_for_pad = 58;
  // NRP_DisplayForMeter [] [0|63]
  optional NRPDisplayForMeterType nrp_display_for_meter = 59;
  // NRP_TBA_VoicePrompt [] [0|63]
  optional NRPTBAVoicePromptType nrp_tba_voice_prompt = 60;
  // NRP_TBA_SoundEffect [] [0|31]
  optional NRPTBASoundEffectType nrp_tba_sound_effect = 61;
  // NRP_TBA_WarningHoldDisplay [] [0|3]
  optional NRPTBAWarningHoldDisplayType nrp_tba_warning_hold_display = 62;
  // Counter_1CB_S [] [0|65535]
  optional int32 counter_1_cb_s = 63;
  // Checknum_1CB_S [] [0|65535]
  optional int32 checknum_1_cb_s = 64;
  // CutOutFreshvalues_1CB_S [] [0|65535]
  optional int32 cut_out_freshvalues_1_cb_s = 65;
  optional int64 cut_out_mac_1_cb_s = 66;
}

message ADS_0X1FF {
// Control Message
  enum ACCGrayStsType {
    ACC_GRAY_STS_INVALID = 0;
    ACC_GRAY_STS_GRAY = 1;
    ACC_GRAY_STS_RESERVED_2 = 2;
    ACC_GRAY_STS_RESERVED_3 = 3;
  }
  enum LCCGrayStsType {
    LCC_GRAY_STS_INVALID = 0;
    LCC_GRAY_STS_GRAY = 1;
    LCC_GRAY_STS_RESERVED_2 = 2;
    LCC_GRAY_STS_RESERVED_3 = 3;
  }
  enum ILCAGrayStsType {
    ILCA_GRAY_STS_INVALID = 0;
    ILCA_GRAY_STS_GRAY = 1;
    ILCA_GRAY_STS_RESERVED_2 = 2;
    ILCA_GRAY_STS_RESERVED_3 = 3;
  }
  enum UNPGrayStsType {
    UNP_GRAY_STS_INVALID = 0;
    UNP_GRAY_STS_GRAY = 1;
    UNP_GRAY_STS_RESERVED_2 = 2;
    UNP_GRAY_STS_RESERVED_3 = 3;
  }
  enum HNPGrayStsType {
    HNP_GRAY_STS_INVALID = 0;
    HNP_GRAY_STS_GRAY = 1;
    HNP_GRAY_STS_RESERVED_2 = 2;
    HNP_GRAY_STS_RESERVED_3 = 3;
  }
  enum NOAGrayStsType {
    NOA_GRAY_STS_INVALID = 0;
    NOA_GRAY_STS_GRAY = 1;
    NOA_GRAY_STS_RESERVED_2 = 2;
    NOA_GRAY_STS_RESERVED_3 = 3;
  }
  enum ESAGrayStsType {
    ESA_GRAY_STS_INVALID = 0;
    ESA_GRAY_STS_GRAY = 1;
    ESA_GRAY_STS_RESERVED_2 = 2;
    ESA_GRAY_STS_RESERVED_3 = 3;
  }
  enum AEBGrayStsType {
    AEB_GRAY_STS_INVALID = 0;
    AEB_GRAY_STS_GRAY = 1;
    AEB_GRAY_STS_RESERVED_2 = 2;
    AEB_GRAY_STS_RESERVED_3 = 3;
  }
  enum ELKGrayStsType {
    ELK_GRAY_STS_INVALID = 0;
    ELK_GRAY_STS_GRAY = 1;
    ELK_GRAY_STS_RESERVED_2 = 2;
    ELK_GRAY_STS_RESERVED_3 = 3;
  }
  enum ISLCGrayStsType {
    ISLC_GRAY_STS_INVALID = 0;
    ISLC_GRAY_STS_GRAY = 1;
    ISLC_GRAY_STS_RESERVED_2 = 2;
    ISLC_GRAY_STS_RESERVED_3 = 3;
  }
  enum LDPGrayStsType {
    LDP_GRAY_STS_INVALID = 0;
    LDP_GRAY_STS_GRAY = 1;
    LDP_GRAY_STS_RESERVED_2 = 2;
    LDP_GRAY_STS_RESERVED_3 = 3;
  }
  enum LDWGrayStsType {
    LDW_GRAY_STS_INVALID = 0;
    LDW_GRAY_STS_GRAY = 1;
    LDW_GRAY_STS_RESERVED_2 = 2;
    LDW_GRAY_STS_RESERVED_3 = 3;
  }
  enum LKCGrayStsType {
    LKC_GRAY_STS_INVALID = 0;
    LKC_GRAY_STS_GRAY = 1;
    LKC_GRAY_STS_RESERVED_2 = 2;
    LKC_GRAY_STS_RESERVED_3 = 3;
  }
  enum FCWGrayStsType {
    FCW_GRAY_STS_INVALID = 0;
    FCW_GRAY_STS_GRAY = 1;
    FCW_GRAY_STS_RESERVED_2 = 2;
    FCW_GRAY_STS_RESERVED_3 = 3;
  }
  enum HMAGrayStsType {
    HMA_GRAY_STS_INVALID = 0;
    HMA_GRAY_STS_GRAY = 1;
    HMA_GRAY_STS_RESERVED_2 = 2;
    HMA_GRAY_STS_RESERVED_3 = 3;
  }
  enum TLAGrayStsType {
    TLA_GRAY_STS_INVALID = 0;
    TLA_GRAY_STS_GRAY = 1;
    TLA_GRAY_STS_RESERVED_2 = 2;
    TLA_GRAY_STS_RESERVED_3 = 3;
  }
  enum TSRGrayStsType {
    TSR_GRAY_STS_INVALID = 0;
    TSR_GRAY_STS_GRAY = 1;
    TSR_GRAY_STS_RESERVED_2 = 2;
    TSR_GRAY_STS_RESERVED_3 = 3;
  }
  enum ISLIGrayStsType {
    ISLI_GRAY_STS_INVALID = 0;
    ISLI_GRAY_STS_GRAY = 1;
    ISLI_GRAY_STS_RESERVED_2 = 2;
    ISLI_GRAY_STS_RESERVED_3 = 3;
  }
  enum TSRLitSpdChgGrayStsType {
    TSR_LITSPDCHG_GRAY_STS_INVALID = 0;
    TSR_LITSPDCHG_GRAY_STS_GRAY = 1;
    TSR_LITSPDCHG_GRAY_STS_RESERVED_2 = 2;
    TSR_LITSPDCHG_GRAY_STS_RESERVED_3 = 3;
  }
  enum CSWGrayStsType {
    CSW_GRAY_STS_INVALID = 0;
    CSW_GRAY_STS_GRAY = 1;
    CSW_GRAY_STS_RESERVED_2 = 2;
    CSW_GRAY_STS_RESERVED_3 = 3;
  }
  enum ElctroicSpdLmtWarnType {
    ELCTROIC_SPDLMT_WARN_INVAILD = 0;
    ELCTROIC_SPDLMT_WARN_ELEC_SPEED_LIMIT_CONTROLLING = 1;
    ELCTROIC_SPDLMT_WARN_ELEC_SPEED_LIMIT_MANUAL_REQUEST = 2;
    ELCTROIC_SPDLMT_WARN_RESERVED_3 = 3;
  }
  enum ElctroicSpdLmtIconType {
    ELCTROIC_SPDLMT_ICON_INVAILD = 0;
    ELCTROIC_SPDLMT_ICON_YES = 1;
    ELCTROIC_SPDLMT_ICON_NO = 2;
    ELCTROIC_SPDLMT_ICON_RESERVED_3 = 3;
  }
  enum ISLAOffsetPrcntgStsType {
    ISLA_OFFSET_PRCNTG_STS_INVAILD = 0;
    ISLA_OFFSET_PRCNTG_STS_ZEROPERCENT = 1;
    ISLA_OFFSET_PRCNTG_STS_MINUS10PERCENT = 2;
    ISLA_OFFSET_PRCNTG_STS_MINUS5PERCENT = 3;
    ISLA_OFFSET_PRCNTG_STS_ADD5PERCENT = 4;
    ISLA_OFFSET_PRCNTG_STS_ADD10PERCENT = 5;
  }
  enum ISLAOffstModeStsType {
    ISLA_OFFST_MODE_STS_INVAILD = 0;
    ISLA_OFFST_MODE_STS_ABSOLUTE_VALUE = 1;
    ISLA_OFFST_MODE_STS_PERCENTAGE = 2;
    ISLA_OFFST_MODE_STS_RESERVED_3 = 3;
  }
  enum ISLANewStsSType {
    ISLA_NEW_STS_S_INVAILD = 0;
    ISLA_NEW_STS_S_AUTO_CONF_MODE = 1;
    ISLA_NEW_STS_S_MANUAL_CONF_MODE = 2;
    ISLA_NEW_STS_S_OFF = 3;
  }
  enum NOAActivationStyleType {
    NOA_ACTIVATIONSTYLE_NONE = 0;
    NOA_ACTIVATIONSTYLE_LEFTPADDLEACTIVATION = 1;
    NOA_ACTIVATIONSTYLE_RIGHTPADDLEACTIVATION = 2;
    NOA_ACTIVATIONSTYLE_DIPLIOTPADDLEACTIVATION = 3;
    NOA_ACTIVATIONSTYLE_RESUMEACTIVATION = 4;
    NOA_ACTIVATIONSTYLE_PADBUTTONACTIVATION = 5;
    NOA_ACTIVATIONSTYLE_ACCAUTOUPGRADE = 6;
    NOA_ACTIVATIONSTYLE_LCCAUTOUPGRADE = 7;
  }
  enum NOAExitStyleType {
    NOA_EXITSTYLE_NONE = 0;
    NOA_EXITSTYLE_EXITTOMANUALDRIVING_BRAKING = 1;
    NOA_EXITSTYLE_EIXTTOMANUALDRIVELEFTPADPRESS = 2;
    NOA_EXITSTYLE_EXITTOMANUDRIVERIGHTPADPRESS = 3;
    NOA_EXITSTYLE_EXITTOMANUALDRIVING_DIPLIOTPRESS = 4;
    NOA_EXITSTYLE_EXITTOLCC_LATERALOVERRIDE = 5;
    NOA_EXITSTYLE_EXITTOLCC_PADBUTTON = 6;
    NOA_EXITSTYLE_EXITTOLCC_MAPLOST = 7;
    NOA_EXITSTYLE_EIXTTOLCC_ODDLOST = 8;
    NOA_EXITSTYLE_EXITTOLCC_REACHDESTINATION = 9;
    NOA_EXITSTYLE_EXITTOLCC_PATHREPLANNING = 10;
    NOA_EXITSTYLE_EXITTOLCC_OTHERCASE = 11;
    NOA_EXITSTYLE_EXITTOACC_OTHERCASE = 12;
    NOA_EXITSTYLE_EXITTOMANUALDRIVING_TOR = 13;
    NOA_EXITSTYLE_EXITTOMANUADRIVOVERRIDETIMEOUT = 14;
    NOA_EXITSTYLE_EXITTOMANUALDRIVOVERRIDESPEED = 15;
    NOA_EXITSTYLE_EXITTOMANUALDRIVING_BADWEATHER = 16;
    NOA_EXITSTYLE_EXITTOMANUALDRIVING_OTHERCASE = 17;
  }
  enum NOAActiveLaneChangeInfoType {
    NOA_ACTIVELANECHANGEINFO_NONE = 0;
    NOA_ACTIVELANECHANGEINFO_READYTOBETTERLANE = 1;
    NOA_ACTIVELANECHANGEINFO_READYTOOVERTAKELEFT = 2;
    NOA_ACTIVELANECHANGEINFO_READYTOOVERTAKERIGHT = 3;
    NOA_ACTIVELANECHANGEINFO_READYTOAVOIDCONFLUENCE = 4;
    NOA_ACTIVELANECHANGEINFO_READYTOLANECHANGELEFT = 5;
    NOA_ACTIVELANECHANGEINFO_READYTOLANECHANGERIGHT = 6;
    NOA_ACTIVELANECHANGEINFO_READYTOLANECHANGERAMP = 7;
    NOA_ACTIVELANECHANGEINFO_READYTOLANECHANGEMAINROAD = 8;
    NOA_ACTIVELANECHANGEINFO_READYTOAVOIDOBSTACLES = 9;
    NOA_ACTIVELANECHANGEINFO_READYTOAVOIDCONSTRUCTIONAREA = 10;
    NOA_ACTIVELANECHANGEINFO_READYTOAVOIDPEDESTRAINS = 11;
    NOA_ACTIVELANECHANGEINFO_READYTOTAKEADETOUR = 12;
    NOA_ACTIVELANECHANGEINFO_READYTODETOUR = 13;
    NOA_ACTIVELANECHANGEINFO_READY_TO_LANECHANGE_MERGE = 14;
    NOA_ACTIVELANECHANGEINFO_READY_TO_LANECHANGE_DIVERT = 15;
    NOA_ACTIVELANECHANGEINFO_LANECHANGEAVOID = 16;
    NOA_ACTIVELANECHANGEINFO_READYTOLANECHANGEAUXILIARYROAD = 17;
    NOA_ACTIVELANECHANGEINFO_READYTOLEAVEBUSLANELEFT = 18;
    NOA_ACTIVELANECHANGEINFO_READYTOLEAVEBUSLANERIGHT = 19;
    NOA_ACTIVELANECHANGEINFO_READYTOLANECHANGEALONGNAVIGATION = 20;
    NOA_ACTIVELANECHANGEINFO_READYTOLANECHANGEALONGNAVIGATIONRIGHT = 21;
  }
  enum ALNWarningTextType {
    ALN_WARNINGTEXT_NO_DISPLAY = 0;
    ALN_WARNINGTEXT_INPARKINGUNABLETOACTIVATE = 1;
    ALN_WARNINGTEXT_PLEASEEXITTOMANUALDRIVING = 2;
    ALN_WARNINGTEXT_PLEASEACTIVATEFUNCTIONFIRST = 3;
    ALN_WARNINGTEXT_SMALLTHROTTLEOVERRIDE = 4;
    ALN_WARNINGTEXT_BIGTHROTTLEOVERRIDE = 5;
    ALN_WARNINGTEXT_BIGOVERRIDE150 = 6;
    ALN_WARNINGTEXT_ILCA_MALFUNCTION_WHEN_SHIFTING_THE_LEVER = 7;
    ALN_WARNINGTEXT_SIDE_VIEW_CAMERA_NOT_AVAILABLE_WHEN_PADDLING = 8;
    ALN_WARNINGTEXT_LOOK_AROUND_CAMERA_NOT_AVAILABLE_WHILE_PADDLING = 9;
    ALN_WARNINGTEXT_PLEASECHANGELANEMANUALLY = 10;
    ALN_WARNINGTEXT_EMERGENCYBRAKINGPLEASEATTENTION = 11;
    ALN_WARNINGTEXT_READYTODETOUR = 12;
    ALN_WARNINGTEXT_READYTOTURNAROUND = 13;
    ALN_WARNINGTEXT_PLEASETAKEOVERTURNAROUND = 14;
    ALN_WARNINGTEXT_READYTOENTERPENDINGTRANSFERAREA = 15;
    ALN_WARNINGTEXT_PLEASEATTENTIONPENDINGTRANSFERAREA = 16;
    ALN_WARNINGTEXT_PLEASEENTERROUNDABOUTMANUALLY = 17;
    ALN_WARNINGTEXT_AUTOMATICALLYUPDATINGCRUISESPEED = 18;
    ALN_WARNINGTEXT_PLEASEATTENTIONTEMPORARYTRAFFICLIGHT = 19;
  }
  enum AdsModeStsResponseSType {
    ADSMODE_STS_RESPONSE_S_INVALID = 0;
    ADSMODE_STS_RESPONSE_S_ACC_ON = 1;
    ADSMODE_STS_RESPONSE_S_LCC_ON = 2;
    ADSMODE_STS_RESPONSE_S_NOA_ON = 3;
  }
  enum LDWVibrationModeStateSType {
    LDW_VIBRATION_MODE_STATE_S_INVALID = 0;
    LDW_VIBRATION_MODE_STATE_S_VIBRATION_SWITCHON = 1;
    LDW_VIBRATION_MODE_STATE_S_VIBRATION_SWITCHOFF = 2;
    LDW_VIBRATION_MODE_STATE_S_RESERVED_3 = 3;
  }
  enum LDWSoundModeStateSType {
    LDW_SOUND_MODE_STATE_S_INVALID = 0;
    LDW_SOUND_MODE_STATE_S_SOUND_SWITCHON = 1;
    LDW_SOUND_MODE_STATE_S_SOUND_SWITCHOFF = 2;
    LDW_SOUND_MODE_STATE_S_RESERVED_3 = 3;
  }
  enum NOAtrafficLightNoticeType {
    NOA_TRAFFICLIGHT_NOTICE_NODISPLAY = 0;
    NOA_TRAFFICLIGHT_NOTICE_REDLIGHTSTOP = 1;
    NOA_TRAFFICLIGHT_NOTICE_GREENLIGHTPASS = 2;
    NOA_TRAFFICLIGHT_NOTICE_YELLOWLIGHTSTOP = 3;
    NOA_TRAFFICLIGHT_NOTICE_YELLOWLIGHTPASS = 4;
    NOA_TRAFFICLIGHT_NOTICE_YELLOWLIGHTSLOWDOWN = 5;
  }
  enum BrakeNoExitAdsStateType {
    BRAKENOEXITADS_STATE_INVALID = 0;
    BRAKENOEXITADS_STATE_OFF = 1;
    BRAKENOEXITADS_STATE_ON = 2;
    BRAKENOEXITADS_STATE_RESERVED_3 = 3;
  }
  enum HNOAMAPType {
    HNOA_MAP_INVAILD = 0;
    HNOA_MAP_HIGHPRECISIONRTK = 1;
    HNOA_MAP_LIGHTHIGHPRECISIONRTK = 2;
    HNOA_MAP_LIGHTHIGHPRECISION = 3;
    HNOA_MAP_RTK = 4;
    HNOA_MAP_EMPTY = 5;
  }
  enum CNOAMAPType {
    CNOA_MAP_INVAILD = 0;
    CNOA_MAP_HIGHPRECISIONRTK = 1;
    CNOA_MAP_LIGHTHIGHPRECISIONRTK = 2;
    CNOA_MAP_LIGHTHIGHPRECISION = 3;
    CNOA_MAP_RTK = 4;
    CNOA_MAP_EMPTY = 5;
  }
  // Child_ID_1FF_S [] [0E-008|255.00000000]
  optional int32 child_id_1_ff_s = 1;
  // ACC_Gray_Sts [] [0E-008|3.00000000]
  optional ACCGrayStsType acc_gray_sts = 2;
  // LCC_Gray_Sts [] [0E-008|3.00000000]
  optional LCCGrayStsType lcc_gray_sts = 3;
  // ILCA_Gray_Sts [] [0E-008|3.00000000]
  optional ILCAGrayStsType ilca_gray_sts = 4;
  // UNP_Gray_Sts [] [0E-008|3.00000000]
  optional UNPGrayStsType unp_gray_sts = 5;
  // HNP_Gray_Sts [] [0E-008|3.00000000]
  optional HNPGrayStsType hnp_gray_sts = 6;
  // NOA_Gray_Sts [] [0E-008|3.00000000]
  optional NOAGrayStsType noa_gray_sts = 7;
  // ESA_Gray_Sts [] [0E-008|3.00000000]
  optional ESAGrayStsType esa_gray_sts = 8;
  // AEB_Gray_Sts [] [0E-008|3.00000000]
  optional AEBGrayStsType aeb_gray_sts = 9;
  // ELK_Gray_Sts [] [0E-008|3.00000000]
  optional ELKGrayStsType elk_gray_sts = 10;
  // ISLC_Gray_Sts [] [0E-008|3.00000000]
  optional ISLCGrayStsType islc_gray_sts = 11;
  // LDP_Gray_Sts [] [0E-008|3.00000000]
  optional LDPGrayStsType ldp_gray_sts = 12;
  // LDW_Gray_Sts [] [0E-008|3.00000000]
  optional LDWGrayStsType ldw_gray_sts = 13;
  // LKC_Gray_Sts [] [0E-008|3.00000000]
  optional LKCGrayStsType lkc_gray_sts = 14;
  // FCW_Gray_Sts [] [0E-008|3.00000000]
  optional FCWGrayStsType fcw_gray_sts = 15;
  // HMA_Gray_Sts [] [0E-008|3.00000000]
  optional HMAGrayStsType hma_gray_sts = 16;
  // TLA_Gray_Sts [] [0E-008|3.00000000]
  optional TLAGrayStsType tla_gray_sts = 17;
  // TSR_Gray_Sts [] [0E-008|3.00000000]
  optional TSRGrayStsType tsr_gray_sts = 18;
  // ISLI_Gray_Sts [] [0E-008|3.00000000]
  optional ISLIGrayStsType isli_gray_sts = 19;
  // TSR_LitSpdChg_Gray_Sts [] [0E-008|3.00000000]
  optional TSRLitSpdChgGrayStsType tsr_lit_spd_chg_gray_sts = 20;
  // CSW_Gray_Sts [] [0E-008|3.00000000]
  optional CSWGrayStsType csw_gray_sts = 21;
  // Elctroic_SpdLmt_Warn [] [0E-008|3.00000000]
  optional ElctroicSpdLmtWarnType elctroic_spd_lmt_warn = 22;
  // Elctroic_SpdLmt_Icon [] [0E-008|3.00000000]
  optional ElctroicSpdLmtIconType elctroic_spd_lmt_icon = 23;
  // ISLA_Offset_Prcntg_Sts [] [0E-008|15.00000000]
  optional ISLAOffsetPrcntgStsType isla_offset_prcntg_sts = 24;
  // ISLA_Offst_Mode_Sts [] [0E-008|3.00000000]
  optional ISLAOffstModeStsType isla_offst_mode_sts = 25;
  // ISLA_New_Sts_S [] [0E-008|7.00000000]
  optional ISLANewStsSType isla_new_sts_s = 26;
  // NOA_ActivationStyle [] [0E-008|15.00000000]
  optional NOAActivationStyleType noa_activation_style = 27;
  // NOA_ExitStyle [] [0E-008|63.00000000]
  optional NOAExitStyleType noa_exit_style = 28;
  // NOA_ActiveLaneChangeInfo [] [0E-008|63.00000000]
  optional NOAActiveLaneChangeInfoType noa_active_lane_change_info = 29;
  // ALN_WarningText [] [0E-008|63.00000000]
  optional ALNWarningTextType aln_warning_text = 30;
  // AdsMode_Sts_Response_S [] [0E-008|7.00000000]
  optional AdsModeStsResponseSType ads_mode_sts_response_s = 31;
  // LDW_Vibration_Mode_State_S [] [0E-008|3.00000000]
  optional LDWVibrationModeStateSType ldw_vibration_mode_state_s = 32;
  // LDW_Sound_Mode_State_S [] [0E-008|3.00000000]
  optional LDWSoundModeStateSType ldw_sound_mode_state_s = 33;
  // NOA_trafficLight_Notice [] [0E-008|15.00000000]
  optional NOAtrafficLightNoticeType noa_traffic_light_notice = 34;
  // BrakeNoExitAds_State [] [0E-008|3.00000000]
  optional BrakeNoExitAdsStateType brake_no_exit_ads_state = 35;
  // 高快领航供应商组合方案 [] [0E-008|31.00000000]
  optional HNOAMAPType hnoa_map = 36;
  // 城市领航供应商组合方案 [] [0E-008|31.00000000]
  optional CNOAMAPType cnoa_map = 37;
}

message MEDIA_0X201 {
// Report Message
  enum MessageTypeID201SType {
    MESSAGE_TYPE_ID_201_S_RESERVED_0 = 0;
    MESSAGE_TYPE_ID_201_S_FRESHNESSVALUESYNCHRONIZATIONMESSAGE = 1;
    MESSAGE_TYPE_ID_201_S_FRESHNESSVALUESYNCHRONIZATIONREQUESTMESSAGE = 2;
    MESSAGE_TYPE_ID_201_S_RESERVED_3 = 3;
  }
  // Message_Type_ID_201_S [] [0|255]
  optional MessageTypeID201SType message_type_id_201_s = 1;
  // PDU_CANID_201_S [] [0|65525]
  optional int32 pdu_canid_201_s = 2;
  // Syn_Request_Flag_201_S [] [0|255]
  optional int32 syn_request_flag_201_s = 3;
  // reserved_19 [] [0|4294967295]
  optional int32 reserved_19 = 4;
}

message TCU_0X212 {
// Report Message
  enum TCUModeSwitchSType {
    TCU_MODE_SWITCH_S_NORMAL = 0;
    TCU_MODE_SWITCH_S_ECO = 1;
    TCU_MODE_SWITCH_S_SPORT = 2;
    TCU_MODE_SWITCH_S_RESERVED_3 = 3;
  }
  enum ActualShiftGearModeSType {
    ACTUAL_SHIFT_GEAR_MODE_S_INVALID = 0;
    ACTUAL_SHIFT_GEAR_MODE_S_P = 1;
    ACTUAL_SHIFT_GEAR_MODE_S_R = 2;
    ACTUAL_SHIFT_GEAR_MODE_S_N = 3;
    ACTUAL_SHIFT_GEAR_MODE_S_D = 4;
    ACTUAL_SHIFT_GEAR_MODE_S_MFUEL = 5;
    ACTUAL_SHIFT_GEAR_MODE_S_SFUEL = 6;
    ACTUAL_SHIFT_GEAR_MODE_S_MPOSITIVEFUEL = 7;
    ACTUAL_SHIFT_GEAR_MODE_S_MNEGATIVEFUEL = 8;
    ACTUAL_SHIFT_GEAR_MODE_S_RESERVED_9 = 9;
    ACTUAL_SHIFT_GEAR_MODE_S_RESERVED_10 = 10;
    ACTUAL_SHIFT_GEAR_MODE_S_RESERVED_11 = 11;
    ACTUAL_SHIFT_GEAR_MODE_S_RESERVED_12 = 12;
    ACTUAL_SHIFT_GEAR_MODE_S_RESERVED_13 = 13;
    ACTUAL_SHIFT_GEAR_MODE_S_RESERVED_14 = 14;
    ACTUAL_SHIFT_GEAR_MODE_S_RESERVED_15 = 15;
  }
  enum ActualGearSType {
    ACTUAL_GEAR_S_INVALID = 0;
    ACTUAL_GEAR_S_FIRSTGEAR = 1;
    ACTUAL_GEAR_S_SECONDGEAR = 2;
    ACTUAL_GEAR_S_THIRDGEAR = 3;
    ACTUAL_GEAR_S_FOURTHGEAR = 4;
    ACTUAL_GEAR_S_FIFTHGEAR = 5;
    ACTUAL_GEAR_S_SIXTHGEAR = 6;
    ACTUAL_GEAR_S_SEVENTHGEAR = 7;
    ACTUAL_GEAR_S_RESERVED_8 = 8;
    ACTUAL_GEAR_S_RESERVED_9 = 9;
    ACTUAL_GEAR_S_RESERVED_10 = 10;
    ACTUAL_GEAR_S_RESERVED_11 = 11;
    ACTUAL_GEAR_S_RESERVED_12 = 12;
    ACTUAL_GEAR_S_RESERVED_13 = 13;
    ACTUAL_GEAR_S_RESERVED_14 = 14;
    ACTUAL_GEAR_S_RESERVED_15 = 15;
  }
  // Gear_Shift_Progress_S [] [0|1]
  optional bool gear_shift_progress_s = 1;
  // Gear_Shift_Progress_State_S [] [0|1]
  optional bool gear_shift_progress_state_s = 2;
  // TCU_Mode_Switch_S [] [0|3]
  optional TCUModeSwitchSType tcu_mode_switch_s = 3;
  // Actual_Shift_Gear_Mode_S [] [0|15]
  optional ActualShiftGearModeSType actual_shift_gear_mode_s = 4;
  // Actual_Gear_S [] [0|15]
  optional ActualGearSType actual_gear_s = 5;
  // Checksum_212_S [] [0|255]
  optional int32 checksum_212_s = 6;
}

message ADS_0X213 {
// Control Message
  enum DiEyeLeftRoad1SType {
    DIEYE_LEFT_ROAD_1_S_DEFAULT = 0;
    DIEYE_LEFT_ROAD_1_S_SPEEDHUMPCHARACTERISTICS = 1;
    DIEYE_LEFT_ROAD_1_S_CHARACTERISTICSOFWELLCOVER = 2;
    DIEYE_LEFT_ROAD_1_S_NONSTANDARDFEATURES = 3;
    DIEYE_LEFT_ROAD_1_S_RESERVED_4 = 4;
    DIEYE_LEFT_ROAD_1_S_RESERVED_5 = 5;
    DIEYE_LEFT_ROAD_1_S_RESERVED_6 = 6;
    DIEYE_LEFT_ROAD_1_S_INVALID = 7;
  }
  enum DiEyeLeftRoad2SType {
    DIEYE_LEFT_ROAD_2_S_DEFAULT = 0;
    DIEYE_LEFT_ROAD_2_S_SPEEDHUMPCHARACTERISTICS = 1;
    DIEYE_LEFT_ROAD_2_S_CHARACTERISTICSOFWELLCOVER = 2;
    DIEYE_LEFT_ROAD_2_S_NONSTANDARDFEATURES = 3;
    DIEYE_LEFT_ROAD_2_S_RESERVED_4 = 4;
    DIEYE_LEFT_ROAD_2_S_RESERVED_5 = 5;
    DIEYE_LEFT_ROAD_2_S_RESERVED_6 = 6;
    DIEYE_LEFT_ROAD_2_S_INVALID = 7;
  }
  enum DiEyeLeftRoad3SType {
    DIEYE_LEFT_ROAD_3_S_DEFAULT = 0;
    DIEYE_LEFT_ROAD_3_S_SPEEDHUMPCHARACTERISTICS = 1;
    DIEYE_LEFT_ROAD_3_S_CHARACTERISTICSOFWELLCOVER = 2;
    DIEYE_LEFT_ROAD_3_S_NONSTANDARDFEATURES = 3;
    DIEYE_LEFT_ROAD_3_S_RESERVED_4 = 4;
    DIEYE_LEFT_ROAD_3_S_RESERVED_5 = 5;
    DIEYE_LEFT_ROAD_3_S_RESERVED_6 = 6;
    DIEYE_LEFT_ROAD_3_S_INVALID = 7;
  }
  enum DiEyeLeftElevationGrade1SType {
    DIEYE_LEFT_ELEVATION_GRADE_1_S_DEFAULT = 0;
    DIEYE_LEFT_ELEVATION_GRADE_1_S_BELOW_MINUS10CM = 1;
    DIEYE_LEFT_ELEVATION_GRADE_1_S_MINUS_RANGE_5_10CM = 2;
    DIEYE_LEFT_ELEVATION_GRADE_1_S_RANGE_MINUS_5_5CM = 3;
    DIEYE_LEFT_ELEVATION_GRADE_1_S_RANGE5_10CM = 4;
    DIEYE_LEFT_ELEVATION_GRADE_1_S_ABOVE_10CM = 5;
    DIEYE_LEFT_ELEVATION_GRADE_1_S_RESERVED_6 = 6;
    DIEYE_LEFT_ELEVATION_GRADE_1_S_INVALID = 7;
  }
  enum DiEyeLeftElevationGrade2SType {
    DIEYE_LEFT_ELEVATION_GRADE_2_S_DEFAULT = 0;
    DIEYE_LEFT_ELEVATION_GRADE_2_S_BELOW_MINUS10CM = 1;
    DIEYE_LEFT_ELEVATION_GRADE_2_S_MINUS_RANGE_5_10CM = 2;
    DIEYE_LEFT_ELEVATION_GRADE_2_S_RANGE_MINUS_5_5CM = 3;
    DIEYE_LEFT_ELEVATION_GRADE_2_S_RANGE5_10CM = 4;
    DIEYE_LEFT_ELEVATION_GRADE_2_S_ABOVE_10CM = 5;
    DIEYE_LEFT_ELEVATION_GRADE_2_S_RESERVED_6 = 6;
    DIEYE_LEFT_ELEVATION_GRADE_2_S_INVALID = 7;
  }
  enum DiEyeRightRoadSignalISType {
    DIEYE_RIGHT_ROAD_SIGNAL_I_S_DEFAULT = 0;
    DIEYE_RIGHT_ROAD_SIGNAL_I_S_SPEEDHUMPCHARACTERISTICS = 1;
    DIEYE_RIGHT_ROAD_SIGNAL_I_S_CHARACTERISTICSOFWELLCOVER = 2;
    DIEYE_RIGHT_ROAD_SIGNAL_I_S_NONSTANDARDFEATURES = 3;
    DIEYE_RIGHT_ROAD_SIGNAL_I_S_RESERVED_4 = 4;
    DIEYE_RIGHT_ROAD_SIGNAL_I_S_RESERVED_5 = 5;
    DIEYE_RIGHT_ROAD_SIGNAL_I_S_RESERVED_6 = 6;
    DIEYE_RIGHT_ROAD_SIGNAL_I_S_INVALID = 7;
  }
  enum DiEyeLeftElevationGrade3SType {
    DIEYE_LEFT_ELEVATION_GRADE_3_S_DEFAULT = 0;
    DIEYE_LEFT_ELEVATION_GRADE_3_S_BELOW_MINUS10CM = 1;
    DIEYE_LEFT_ELEVATION_GRADE_3_S_MINUS_RANGE_5_10CM = 2;
    DIEYE_LEFT_ELEVATION_GRADE_3_S_RANGE_MINUS_5_5CM = 3;
    DIEYE_LEFT_ELEVATION_GRADE_3_S_RANGE5_10CM = 4;
    DIEYE_LEFT_ELEVATION_GRADE_3_S_ABOVE_10CM = 5;
    DIEYE_LEFT_ELEVATION_GRADE_3_S_RESERVED_6 = 6;
    DIEYE_LEFT_ELEVATION_GRADE_3_S_INVALID = 7;
  }
  enum DiEyeRightRoadSignal2SType {
    DIEYE_RIGHT_ROAD_SIGNAL_2_S_DEFAULT = 0;
    DIEYE_RIGHT_ROAD_SIGNAL_2_S_SPEEDHUMPCHARACTERISTICS = 1;
    DIEYE_RIGHT_ROAD_SIGNAL_2_S_CHARACTERISTICSOFWELLCOVER = 2;
    DIEYE_RIGHT_ROAD_SIGNAL_2_S_NONSTANDARDFEATURES = 3;
    DIEYE_RIGHT_ROAD_SIGNAL_2_S_RESERVED_4 = 4;
    DIEYE_RIGHT_ROAD_SIGNAL_2_S_RESERVED_5 = 5;
    DIEYE_RIGHT_ROAD_SIGNAL_2_S_RESERVED_6 = 6;
    DIEYE_RIGHT_ROAD_SIGNAL_2_S_INVALID = 7;
  }
  enum DiEyeRightRoadSignal3SType {
    DIEYE_RIGHT_ROAD_SIGNAL_3_S_DEFAULT = 0;
    DIEYE_RIGHT_ROAD_SIGNAL_3_S_SPEEDHUMPCHARACTERISTICS = 1;
    DIEYE_RIGHT_ROAD_SIGNAL_3_S_CHARACTERISTICSOFWELLCOVER = 2;
    DIEYE_RIGHT_ROAD_SIGNAL_3_S_NONSTANDARDFEATURES = 3;
    DIEYE_RIGHT_ROAD_SIGNAL_3_S_RESERVED_4 = 4;
    DIEYE_RIGHT_ROAD_SIGNAL_3_S_RESERVED_5 = 5;
    DIEYE_RIGHT_ROAD_SIGNAL_3_S_RESERVED_6 = 6;
    DIEYE_RIGHT_ROAD_SIGNAL_3_S_INVALID = 7;
  }
  enum DiEyeRightElevationGrade1SType {
    DIEYE_RIGHT_ELEVATION_GRADE_1_S_DEFAULT = 0;
    DIEYE_RIGHT_ELEVATION_GRADE_1_S_BELOW_MINUS10CM = 1;
    DIEYE_RIGHT_ELEVATION_GRADE_1_S_MINUS_RANGE_5_10CM = 2;
    DIEYE_RIGHT_ELEVATION_GRADE_1_S_RANGE_MINUS_5_5CM = 3;
    DIEYE_RIGHT_ELEVATION_GRADE_1_S_RANGE5_10CM = 4;
    DIEYE_RIGHT_ELEVATION_GRADE_1_S_ABOVE_10CM = 5;
    DIEYE_RIGHT_ELEVATION_GRADE_1_S_RESERVED_6 = 6;
    DIEYE_RIGHT_ELEVATION_GRADE_1_S_INVALID = 7;
  }
  enum DiEyeRightElevationGrade2SType {
    DIEYE_RIGHT_ELEVATION_GRADE_2_S_DEFAULT = 0;
    DIEYE_RIGHT_ELEVATION_GRADE_2_S_BELOW_MINUS10CM = 1;
    DIEYE_RIGHT_ELEVATION_GRADE_2_S_MINUS_RANGE_5_10CM = 2;
    DIEYE_RIGHT_ELEVATION_GRADE_2_S_RANGE_MINUS_5_5CM = 3;
    DIEYE_RIGHT_ELEVATION_GRADE_2_S_RANGE5_10CM = 4;
    DIEYE_RIGHT_ELEVATION_GRADE_2_S_ABOVE_10CM = 5;
    DIEYE_RIGHT_ELEVATION_GRADE_2_S_RESERVED_6 = 6;
    DIEYE_RIGHT_ELEVATION_GRADE_2_S_INVALID = 7;
  }
  enum DiEyeDieyeSystemStatusSType {
    DIEYE_DIEYE_SYSTEM_STATUS_S_INVALID = 0;
    DIEYE_DIEYE_SYSTEM_STATUS_S_NORMALOPERATION = 1;
    DIEYE_DIEYE_SYSTEM_STATUS_S_INHIBITION = 2;
    DIEYE_DIEYE_SYSTEM_STATUS_S_RESERVED_3 = 3;
  }
  enum DiEyeTerrainSystemStatusSType {
    DIEYE_TERRAIN_SYSTEM_STATUS_S_INVALID = 0;
    DIEYE_TERRAIN_SYSTEM_STATUS_S_NORMALOPERATION = 1;
    DIEYE_TERRAIN_SYSTEM_STATUS_S_INHIBITION = 2;
    DIEYE_TERRAIN_SYSTEM_STATUS_S_RESERVED_3 = 3;
  }
  enum DiEyeRightElevationGrade3SType {
    DIEYE_RIGHT_ELEVATION_GRADE_3_S_DEFAULT = 0;
    DIEYE_RIGHT_ELEVATION_GRADE_3_S_BELOW_MINUS10CM = 1;
    DIEYE_RIGHT_ELEVATION_GRADE_3_S_MINUS_RANGE_5_10CM = 2;
    DIEYE_RIGHT_ELEVATION_GRADE_3_S_RANGE_MINUS_5_5CM = 3;
    DIEYE_RIGHT_ELEVATION_GRADE_3_S_RANGE5_10CM = 4;
    DIEYE_RIGHT_ELEVATION_GRADE_3_S_ABOVE_10CM = 5;
    DIEYE_RIGHT_ELEVATION_GRADE_3_S_RESERVED_6 = 6;
    DIEYE_RIGHT_ELEVATION_GRADE_3_S_INVALID = 7;
  }
  enum DiEyeLeftRoadSceneQualitySType {
    DIEYE_LEFT_ROAD_SCENE_QUALITY_S_DEFAULTPOWERON0 = 0;
    DIEYE_LEFT_ROAD_SCENE_QUALITY_S_LOWCONFIDENCENOTVERYCREDIBLE = 1;
    DIEYE_LEFT_ROAD_SCENE_QUALITY_S_MEDIUMCONFIDENCECANBEREFERREDTO = 2;
    DIEYE_LEFT_ROAD_SCENE_QUALITY_S_HIGHCONFIDENCEDIRECTUSE = 3;
    DIEYE_LEFT_ROAD_SCENE_QUALITY_S_FAULT = 4;
    DIEYE_LEFT_ROAD_SCENE_QUALITY_S_RESERVED_5 = 5;
    DIEYE_LEFT_ROAD_SCENE_QUALITY_S_RESERVED_6 = 6;
    DIEYE_LEFT_ROAD_SCENE_QUALITY_S_INVALID = 7;
  }
  enum DiEyeRightRoadSceneQualitySType {
    DIEYE_RIGHT_ROAD_SCENE_QUALITY_S_DEFAULTPOWERON0 = 0;
    DIEYE_RIGHT_ROAD_SCENE_QUALITY_S_LOWCONFIDENCENOTVERYCREDIBLE = 1;
    DIEYE_RIGHT_ROAD_SCENE_QUALITY_S_MEDIUMCONFIDENCECANBEREFERREDTO = 2;
    DIEYE_RIGHT_ROAD_SCENE_QUALITY_S_HIGHCONFIDENCEDIRECTUSE = 3;
    DIEYE_RIGHT_ROAD_SCENE_QUALITY_S_FAULT = 4;
    DIEYE_RIGHT_ROAD_SCENE_QUALITY_S_RESERVED_5 = 5;
    DIEYE_RIGHT_ROAD_SCENE_QUALITY_S_RESERVED_6 = 6;
    DIEYE_RIGHT_ROAD_SCENE_QUALITY_S_INVALID = 7;
  }
  enum DiEyeRoadSceneDecideSType {
    DIEYE_ROAD_SCENE_DECIDE_S_INVALID = 0;
    DIEYE_ROAD_SCENE_DECIDE_S_NORMALSCENARIO = 1;
    DIEYE_ROAD_SCENE_DECIDE_S_SPECIALSCENARIO = 2;
    DIEYE_ROAD_SCENE_DECIDE_S_FUNCTINHIBITIONSCENARIO = 3;
  }
  enum DiEyeLeftRoadTypeSType {
    DIEYE_LEFT_ROAD_TYPE_S_INVALID = 0;
    DIEYE_LEFT_ROAD_TYPE_S_ASPHALTROAD = 1;
    DIEYE_LEFT_ROAD_TYPE_S_ICEANDSNOWTERRAIN = 2;
    DIEYE_LEFT_ROAD_TYPE_S_SAND = 3;
    DIEYE_LEFT_ROAD_TYPE_S_DRYEARTHROAD = 4;
    DIEYE_LEFT_ROAD_TYPE_S_MUDDYGROUND = 5;
    DIEYE_LEFT_ROAD_TYPE_S_ROCKYROAD = 6;
    DIEYE_LEFT_ROAD_TYPE_S_WADINGPAVEMENT = 7;
    DIEYE_LEFT_ROAD_TYPE_S_GRASSLAND = 8;
    DIEYE_LEFT_ROAD_TYPE_S_RESERVED_9 = 9;
    DIEYE_LEFT_ROAD_TYPE_S_RESERVED_10 = 10;
    DIEYE_LEFT_ROAD_TYPE_S_RESERVED_11 = 11;
    DIEYE_LEFT_ROAD_TYPE_S_RESERVED_12 = 12;
    DIEYE_LEFT_ROAD_TYPE_S_RESERVED_13 = 13;
    DIEYE_LEFT_ROAD_TYPE_S_RESERVED_14 = 14;
    DIEYE_LEFT_ROAD_TYPE_S_RESERVED_15 = 15;
  }
  enum DiEyeRightRoadTypeSType {
    DIEYE_RIGHT_ROAD_TYPE_S_INVALID = 0;
    DIEYE_RIGHT_ROAD_TYPE_S_ASPHALTROAD = 1;
    DIEYE_RIGHT_ROAD_TYPE_S_ICEANDSNOWTERRAIN = 2;
    DIEYE_RIGHT_ROAD_TYPE_S_SAND = 3;
    DIEYE_RIGHT_ROAD_TYPE_S_DRYEARTHROAD = 4;
    DIEYE_RIGHT_ROAD_TYPE_S_MUDDYGROUND = 5;
    DIEYE_RIGHT_ROAD_TYPE_S_ROCKYROAD = 6;
    DIEYE_RIGHT_ROAD_TYPE_S_WADINGPAVEMENT = 7;
    DIEYE_RIGHT_ROAD_TYPE_S_GRASSLAND = 8;
    DIEYE_RIGHT_ROAD_TYPE_S_RESERVED_9 = 9;
    DIEYE_RIGHT_ROAD_TYPE_S_RESERVED_10 = 10;
    DIEYE_RIGHT_ROAD_TYPE_S_RESERVED_11 = 11;
    DIEYE_RIGHT_ROAD_TYPE_S_RESERVED_12 = 12;
    DIEYE_RIGHT_ROAD_TYPE_S_RESERVED_13 = 13;
    DIEYE_RIGHT_ROAD_TYPE_S_RESERVED_14 = 14;
    DIEYE_RIGHT_ROAD_TYPE_S_RESERVED_15 = 15;
  }
  // Child_ID_213_S [] [0|255]
  optional int32 child_id_213_s = 1;
  // DiEye_Left_Road_1_S [] [0|7]
  optional DiEyeLeftRoad1SType di_eye_left_road_1_s = 2;
  // DiEye_Left_Road_2_S [] [0|7]
  optional DiEyeLeftRoad2SType di_eye_left_road_2_s = 3;
  // DiEye_Internal_Fault_S [] [0|1]
  optional bool di_eye_internal_fault_s = 4;
  // DiEye_Camera_Signal_Fault_S [] [0|1]
  optional bool di_eye_camera_signal_fault_s = 5;
  // DiEye_Left_Road_3_S [] [0|7]
  optional DiEyeLeftRoad3SType di_eye_left_road_3_s = 6;
  // DiEye_Left_Elevation_Grade_1_S [cm] [0|7]
  optional DiEyeLeftElevationGrade1SType di_eye_left_elevation_grade_1_s = 7;
  // DiEye_Left_Elevation_Grade_2_S [cm] [0|7]
  optional DiEyeLeftElevationGrade2SType di_eye_left_elevation_grade_2_s = 8;
  // DiEye_Right_Road_Signal_I_S [] [0|7]
  optional DiEyeRightRoadSignalISType di_eye_right_road_signal_i_s = 9;
  // DiEye_Left_Elevation_Grade_3_S [cm] [0|7]
  optional DiEyeLeftElevationGrade3SType di_eye_left_elevation_grade_3_s = 10;
  // DiEye_Right_Road_Signal_2_S [] [0|7]
  optional DiEyeRightRoadSignal2SType di_eye_right_road_signal_2_s = 11;
  // DiEye_Right_Road_Signal_3_S [] [0|7]
  optional DiEyeRightRoadSignal3SType di_eye_right_road_signal_3_s = 12;
  // DiEye_Left_lengthways_Dis_1_S [cm] [0|1500]
  optional int32 di_eye_left_lengthways_dis_1_s = 13;
  // DiEye_Left_lengthways_Dis_2_S [cm] [0|1500]
  optional int32 di_eye_left_lengthways_dis_2_s = 14;
  // DiEye_Left_lengthways_Dis_3_S [cm] [0|1500]
  optional int32 di_eye_left_lengthways_dis_3_s = 15;
  // DiEye_Right_Elevation_Grade_1_S [cm] [0|7]
  optional DiEyeRightElevationGrade1SType di_eye_right_elevation_grade_1_s = 16;
  // DiEye_Right_Elevation_Grade_2_S [cm] [0|7]
  optional DiEyeRightElevationGrade2SType di_eye_right_elevation_grade_2_s = 17;
  // DiEye_Dieye_System_Status_S [] [0|3]
  optional DiEyeDieyeSystemStatusSType di_eye_dieye_system_status_s = 18;
  // DiEye_Terrain_System_Status_S [] [0|3]
  optional DiEyeTerrainSystemStatusSType di_eye_terrain_system_status_s = 19;
  // DiEye_Right_Elevation_Grade_3_S [cm] [0|7]
  optional DiEyeRightElevationGrade3SType di_eye_right_elevation_grade_3_s = 20;
  // DiEye_Left_Road_Scene_Quality_S [] [0|7]
  optional DiEyeLeftRoadSceneQualitySType di_eye_left_road_scene_quality_s = 21;
  // DiEye_Right_Road_Scene_Quality_S [] [0|7]
  optional DiEyeRightRoadSceneQualitySType di_eye_right_road_scene_quality_s = 22;
  // DiEye_Right_lengthways_Dis_1_S [cm] [0|1500]
  optional int32 di_eye_right_lengthways_dis_1_s = 23;
  // DiEye_Right_lengthways_Dis_2_S [cm] [0|1500]
  optional int32 di_eye_right_lengthways_dis_2_s = 24;
  // DiEye_Right_lengthways_Dis_3_S [cm] [0|1500]
  optional int32 di_eye_right_lengthways_dis_3_s = 25;
  // DiEye_Road_Scene_Decide_S [] [0|3]
  optional DiEyeRoadSceneDecideSType di_eye_road_scene_decide_s = 26;
  // DiEye_Left_Road_Type_S [] [0|15]
  optional DiEyeLeftRoadTypeSType di_eye_left_road_type_s = 27;
  // DiEye_Right_Road_Type_S [] [0|15]
  optional DiEyeRightRoadTypeSType di_eye_right_road_type_s = 28;
  // Counter_213_01_S [] [0|65535]
  optional int32 counter_213_01_s = 29;
  // Checksum_213_01_S [] [0|65535]
  optional int32 checksum_213_01_s = 30;
}

message REAR_BCM_0X219 {
// Report Message
  // Counter_219_S [] [0|15]
  optional int32 counter_219_s = 1;
  // Chips_Control_Device_Status_S [] [0|1]
  optional bool chips_control_device_status_s = 2;
  // CheckSum_219_S [] [0|255]
  optional int32 check_sum_219_s = 3;
}

message ADS_0X237 {
// Control Message
  enum MRRDriveModeInhibtReq237SType {
    MRR_DRIVEMODEINHIBTREQ_237_S_NOREQUEST = 0;
    MRR_DRIVEMODEINHIBTREQ_237_S_AEBREQUEST = 1;
    MRR_DRIVEMODEINHIBTREQ_237_S_ELKAREQUEST = 2;
    MRR_DRIVEMODEINHIBTREQ_237_S_FCTBREQUEST = 3;
    MRR_DRIVEMODEINHIBTREQ_237_S_RCTBREQUEST = 4;
    MRR_DRIVEMODEINHIBTREQ_237_S_ESAREQUEST = 5;
    MRR_DRIVEMODEINHIBTREQ_237_S_RESERVED_6 = 6;
    MRR_DRIVEMODEINHIBTREQ_237_S_RESERVED_7 = 7;
  }
  // MRR_DriveModeInhibtReq_237_S [] [0E-008|7.00000000]
  optional MRRDriveModeInhibtReq237SType mrr_drive_mode_inhibt_req_237_s = 1;
  // MRR_DriveModeInhibtReq_Valid_S_1 [] [0E-008|1.00000000]
  optional bool mrr_drive_mode_inhibt_req_valid_s_1 = 2;
  // Active_Safety_Fun_Suppression [] [0E-008|1.00000000]
  optional bool active_safety_fun_suppression = 3;
  // 加热丝功能配置 [] [0E-008|1.00000000]
  optional double heating_assemble_status_s = 4;
  // Counter_237_S [] [0E-008|15.00000000]
  optional int32 counter_237_s = 5;
  // CheckSum237_S [] [0E-008|255.00000000]
  optional int32 check_sum237_s = 6;
}

message MEDIA_0X23D {
// Report Message
  // PAD_LVPPauseReq_S [] [0|1]
  optional bool pad_lvp_pause_req_s = 1;
  // PAD_LVPContinueReq_S [] [0|1]
  optional bool pad_lvp_continue_req_s = 2;
  // TBOX_LVPParkInReqSwtRC_S [] [0|15]
  optional int32 tbox_lvp_park_in_req_swt_rc_s = 3;
  // TBOX_LVPParkOutReqSwtRC_S [] [0|15]
  optional int32 tbox_lvp_park_out_req_swt_rc_s = 4;
  // TBOX_LVPCancelReq_S [] [0|1]
  optional bool tbox_lvp_cancel_req_s = 5;
  // TBOX_LVPPauseReq_S [] [0|1]
  optional bool tbox_lvp_pause_req_s = 6;
  // TBOX_LVPContinueReq_S [] [0|1]
  optional bool tbox_lvp_continue_req_s = 7;
  // PAD_SVPPrkingincarReq_S [] [0|1]
  optional bool pad_svp_prkingincar_req_s = 8;
  // PAD_SVPPrkingoutcarReq_S [] [0|1]
  optional bool pad_svp_prkingoutcar_req_s = 9;
  // PAD_SVPPauseReq_S [] [0|1]
  optional bool pad_svp_pause_req_s = 10;
  // PAD_ContinueReq_S [] [0|1]
  optional bool pad_continue_req_s = 11;
  // PAD_SVPHomeReq_S [] [0|1]
  optional bool pad_svp_home_req_s = 12;
  // PAD_SVPReturnReq_S [] [0|1]
  optional bool pad_svp_return_req_s = 13;
  // TBOX_CancelReq_S [] [0|1]
  optional bool tbox_cancel_req_s = 14;
  // PAD_ParkInStartReq_S [] [0|1]
  optional bool pad_park_in_start_req_s = 15;
  // PAD_ParkOutStartReq_S [] [0|1]
  optional bool pad_park_out_start_req_s = 16;
  // PAD_PauseReq_S [] [0|1]
  optional bool pad_pause_req_s = 17;
  // PAD_ResumeReq_S [] [0|1]
  optional bool pad_resume_req_s = 18;
  // PAD_ConfirmReq_S [] [0|1]
  optional bool pad_confirm_req_s = 19;
  // PAD_LVPHomeReq_S [] [0|1]
  optional bool pad_lvp_home_req_s = 20;
  // PAD_LVPReturnReq_S [] [0|1]
  optional bool pad_lvp_return_req_s = 21;
  // PAD_SelectParkReq_S [] [0|1]
  optional bool pad_select_park_req_s = 22;
  // PAD_BackParkReq_S [] [0|1]
  optional bool pad_back_park_req_s = 23;
  // Checksum_23D_S [] [0|255]
  optional int32 checksum_23_d_s = 24;
}

message SEC_0X23F {
// Report Message
  enum SECParkingType23FSType {
    SEC_PARKING_TYPE_23F_S_INVALID = 0;
    SEC_PARKING_TYPE_23F_S_PKIN = 1;
    SEC_PARKING_TYPE_23F_S_PKOUT = 2;
    SEC_PARKING_TYPE_23F_S_RESERVED_3 = 3;
  }
  enum SECParkingPlaceType23FSType {
    SEC_PARKING_PLACE_TYPE_23F_S_INVALID = 0;
    SEC_PARKING_PLACE_TYPE_23F_S_HORIZONTAL = 1;
    SEC_PARKING_PLACE_TYPE_23F_S_VERTICAL = 2;
    SEC_PARKING_PLACE_TYPE_23F_S_OBLIQUEORIENTATION = 3;
    SEC_PARKING_PLACE_TYPE_23F_S_RESERVED_4 = 4;
    SEC_PARKING_PLACE_TYPE_23F_S_RESERVED_5 = 5;
    SEC_PARKING_PLACE_TYPE_23F_S_RESERVED_6 = 6;
    SEC_PARKING_PLACE_TYPE_23F_S_RESERVED_7 = 7;
  }
  enum SECParkingPos23FSType {
    SEC_PARKING_POS_23F_S_INVALID = 0;
    SEC_PARKING_POS_23F_S_L = 1;
    SEC_PARKING_POS_23F_S_R = 2;
    SEC_PARKING_POS_23F_S_RESERVED_3 = 3;
    SEC_PARKING_POS_23F_S_RESERVED_4 = 4;
    SEC_PARKING_POS_23F_S_RESERVED_5 = 5;
    SEC_PARKING_POS_23F_S_RESERVED_6 = 6;
    SEC_PARKING_POS_23F_S_RESERVED_7 = 7;
  }
  enum SECParkingCtrl23FSType {
    SEC_PARKING_CTRL_23F_S_INVALID = 0;
    SEC_PARKING_CTRL_23F_S_STARTPK = 1;
    SEC_PARKING_CTRL_23F_S_PAUSEPK = 2;
    SEC_PARKING_CTRL_23F_S_STOPPK = 3;
    SEC_PARKING_CTRL_23F_S_RESERVED_4 = 4;
    SEC_PARKING_CTRL_23F_S_RESERVED_5 = 5;
    SEC_PARKING_CTRL_23F_S_RESERVED_6 = 6;
    SEC_PARKING_CTRL_23F_S_RESERVED_7 = 7;
  }
  enum SECKeyButton23FSType {
    SEC_KEY_BUTTON_23F_S_INVALID = 0;
    SEC_KEY_BUTTON_23F_S_SHORTPRESS = 1;
    SEC_KEY_BUTTON_23F_S_LONGPRESS = 2;
    SEC_KEY_BUTTON_23F_S_RESERVED_3 = 3;
  }
  enum BluetoothConnectionStatusSType {
    BLUETOOTH_CONNECTION_STATUS_S_DISCONNECT = 0;
    BLUETOOTH_CONNECTION_STATUS_S_CONNECT = 1;
    BLUETOOTH_CONNECTION_STATUS_S_RESERVED_2 = 2;
    BLUETOOTH_CONNECTION_STATUS_S_RESERVED_3 = 3;
  }
  enum RPACancelButtonStatusSType {
    RPA_CANCEL_BUTTON_STATUS_S_NOPRESSED = 0;
    RPA_CANCEL_BUTTON_STATUS_S_PRESSED = 1;
    RPA_CANCEL_BUTTON_STATUS_S_RESERVED_2 = 2;
    RPA_CANCEL_BUTTON_STATUS_S_RESERVED_3 = 3;
  }
  enum RPAActivaButtonStatusSType {
    RPA_ACTIVA_BUTTON_STATUS_S_NOPRESSED = 0;
    RPA_ACTIVA_BUTTON_STATUS_S_PRESSED = 1;
    RPA_ACTIVA_BUTTON_STATUS_S_RESERVED_2 = 2;
    RPA_ACTIVA_BUTTON_STATUS_S_RESERVED_3 = 3;
  }
  enum ParkOutDirectionSelectionSType {
    PARK_OUT_DIRECTION_SELECTION_S_NONE = 0;
    PARK_OUT_DIRECTION_SELECTION_S_FRONTLCROSS = 1;
    PARK_OUT_DIRECTION_SELECTION_S_FRONTLPARALLEL = 2;
    PARK_OUT_DIRECTION_SELECTION_S_FRONTOUT = 3;
    PARK_OUT_DIRECTION_SELECTION_S_FRONTRCROSS = 4;
    PARK_OUT_DIRECTION_SELECTION_S_FRONTRPARALLEL = 5;
    PARK_OUT_DIRECTION_SELECTION_S_BACKOUT = 6;
    PARK_OUT_DIRECTION_SELECTION_S_BACKLCROSS = 7;
    PARK_OUT_DIRECTION_SELECTION_S_BACKRCROSS = 8;
    PARK_OUT_DIRECTION_SELECTION_S_RESERVED_9 = 9;
    PARK_OUT_DIRECTION_SELECTION_S_RESERVED_10 = 10;
    PARK_OUT_DIRECTION_SELECTION_S_RESERVED_11 = 11;
    PARK_OUT_DIRECTION_SELECTION_S_RESERVED_12 = 12;
    PARK_OUT_DIRECTION_SELECTION_S_RESERVED_13 = 13;
    PARK_OUT_DIRECTION_SELECTION_S_RESERVED_14 = 14;
    PARK_OUT_DIRECTION_SELECTION_S_RESERVED_15 = 15;
  }
  enum SECRPAAPPFuncControl23FSType {
    SEC_RPA_APP_FUNC_CONTROL_23F_S_INVALID = 0;
    SEC_RPA_APP_FUNC_CONTROL_23F_S_CLOSED = 1;
    SEC_RPA_APP_FUNC_CONTROL_23F_S_OPEN = 2;
    SEC_RPA_APP_FUNC_CONTROL_23F_S_RESERVED_3 = 3;
  }
  // SEC_Parking_Type_23F_S [] [0|3]
  optional SECParkingType23FSType sec_parking_type_23_f_s = 1;
  // SEC_Parking_Place_Type_23F_S [] [0|7]
  optional SECParkingPlaceType23FSType sec_parking_place_type_23_f_s = 2;
  // SEC_Parking_Pos_23F_S [] [0|7]
  optional SECParkingPos23FSType sec_parking_pos_23_f_s = 3;
  // SEC_Parking_Ctrl_23F_S [] [0|7]
  optional SECParkingCtrl23FSType sec_parking_ctrl_23_f_s = 4;
  // SEC_Key_Button_23F_S [] [0|3]
  optional SECKeyButton23FSType sec_key_button_23_f_s = 5;
  // Bluetooth_Connection_Status_S [] [0|3]
  optional BluetoothConnectionStatusSType bluetooth_connection_status_s = 6;
  // Bluetooth_Fault_Status_Flag_S [] [0|1]
  optional bool bluetooth_fault_status_flag_s = 7;
  // RPA_Cancel_Button_Status_S [] [0|3]
  optional RPACancelButtonStatusSType rpa_cancel_button_status_s = 8;
  // RPA_Activa_Button_Status_S [] [0|3]
  optional RPAActivaButtonStatusSType rpa_activa_button_status_s = 9;
  // Park_Out_Direction_Selection_S [] [0|15]
  optional ParkOutDirectionSelectionSType park_out_direction_selection_s = 10;
  // SEC_RPA_APP_Func_Control_23F_S [] [0|3]
  optional SECRPAAPPFuncControl23FSType sec_rpa_app_func_control_23_f_s = 11;
  // SEC_Remote_Ctrl_Dev_Status_23F_S [] [0|1]
  optional bool sec_remote_ctrl_dev_status_23_f_s = 12;
  // counter_23F_S [] [0|15]
  optional int32 counter_23_f_s = 13;
  // Checksum_23F_S [] [0|255]
  optional int32 checksum_23_f_s = 14;
}

message VCU_0X240 {
// Report Message
  enum PowerSystemFailureSType {
    POWER_SYSTEM_FAILURE_S_POWERSYSTEMSTATUSISNORMAL = 0;
    POWER_SYSTEM_FAILURE_S_EVFUNCTISRESTRICTED = 1;
    POWER_SYSTEM_FAILURE_S_POWERSYSTEMSTATUSISFAULTY = 2;
    POWER_SYSTEM_FAILURE_S_RESERVED_EVORPOWERSYSTEMMAJORFAULTY_DM = 3;
  }
  enum VCUGoalRoadModeSType {
    VCU_GOAL_ROAD_MODE_S_INVALID = 0;
    VCU_GOAL_ROAD_MODE_S_NORMALMODE_EVORNON_TOPOGRAPHIC_MODEL_DM = 1;
    VCU_GOAL_ROAD_MODE_S_GRASSGRAVELGROUNDSNOW = 2;
    VCU_GOAL_ROAD_MODE_S_MUDDYGROUNDRUTGROUND = 3;
    VCU_GOAL_ROAD_MODE_S_SAND = 4;
  }
  enum VCUPracticeRoadModeSType {
    VCU_PRACTICE_ROAD_MODE_S_INVALID = 0;
    VCU_PRACTICE_ROAD_MODE_S_NORMALMODE_EVORNON_TOPOGRAPHIC_MODEL_DM = 1;
    VCU_PRACTICE_ROAD_MODE_S_GRASSGRAVELGROUNDSNOW = 2;
    VCU_PRACTICE_ROAD_MODE_S_MUDDYGROUNDRUTGROUND = 3;
    VCU_PRACTICE_ROAD_MODE_S_SAND = 4;
    VCU_PRACTICE_ROAD_MODE_S_TRAIL = 5;
    VCU_PRACTICE_ROAD_MODE_S_OFF_ROAD = 6;
    VCU_PRACTICE_ROAD_MODE_S_RESERVED_7 = 7;
  }
  // Power_System_Failure_S [] [0|3]
  optional PowerSystemFailureSType power_system_failure_s = 1;
  // VCU_Goal_Road_Mode_S [] [0|7]
  optional VCUGoalRoadModeSType vcu_goal_road_mode_s = 2;
  // VCU_Practice_Road_Mode_S [] [0|7]
  optional VCUPracticeRoadModeSType vcu_practice_road_mode_s = 3;
  // Checksum_240_S [] [0|255]
  optional int32 checksum_240_s = 4;
}

message VCU_0X242 {
// Report Message
  enum AutoParkSts242Type {
    AUTOPARKSTS_242_INVALID = 0;
    AUTOPARKSTS_242_ALLOWED = 1;
    AUTOPARKSTS_242_PARKING = 2;
    AUTOPARKSTS_242_FORBID = 3;
  }
  enum VCUGearSType {
    VCU_GEAR_S_RESERVED_0 = 0;
    VCU_GEAR_S_P = 1;
    VCU_GEAR_S_R = 2;
    VCU_GEAR_S_N = 3;
    VCU_GEAR_S_D = 4;
    VCU_GEAR_S_RESERVED_5 = 5;
    VCU_GEAR_S_RESERVED_6 = 6;
    VCU_GEAR_S_RESERVED_7 = 7;
    VCU_GEAR_S_RESERVED_8 = 8;
    VCU_GEAR_S_RESERVED_9 = 9;
    VCU_GEAR_S_RESERVED_10 = 10;
    VCU_GEAR_S_RESERVED_11 = 11;
    VCU_GEAR_S_RESERVED_12 = 12;
    VCU_GEAR_S_RESERVED_13 = 13;
    VCU_GEAR_S_RESERVED_14 = 14;
    VCU_GEAR_S_RESERVED_15 = 15;
  }
  // VCU_Front_Motor_Speed_RPM_S [] [-3000|3000]
  optional int32 vcu_front_motor_speed_rpm_s = 1;
  // AutoParkSts_242 [] [0|3]
  optional AutoParkSts242Type auto_park_sts_242 = 2;
  // Front_Motor_Speed_Error_S [] [0|1]
  optional bool front_motor_speed_error_s = 3;
  // VCU_Driver_VLC_Request_Torque_S [] [0|1]
  optional bool vcu_driver_vlc_request_torque_s = 4;
  // Acceleration_Pedal_depth_error_S [] [0|1]
  optional bool acceleration_pedal_depth_error_s = 5;
  // VCU_Gear_S [] [0|15]
  optional VCUGearSType vcu_gear_s = 6;
  // VCU_Gear_Stats_S [] [0|1]
  optional bool vcu_gear_stats_s = 7;
  // counter_242_S [] [0|15]
  optional int32 counter_242_s = 8;
  // Checksum242_S [] [0|255]
  optional int32 checksum242_s = 9;
}

message BMS_0X244 {
// Report Message
  enum PowerBattErroralrmType {
    POWER_BATT_ERROR_ALRM_NOTFAULT = 0;
    POWER_BATT_ERROR_ALRM_FAULT = 1;
    POWER_BATT_ERROR_ALRM_RESERVED_2 = 2;
    POWER_BATT_ERROR_ALRM_RESERVED_3 = 3;
  }
  // Power_Batt_Error_alrm [] [0|3]
  optional PowerBattErroralrmType power_batt_error_alrm = 1;
}

message VCU_0X251 {
// Report Message
  // REAE_MOTOR_SPRRD [] [-30000|30000]
  optional int32 reae_motor_sprrd = 1;
  // counter251_S [] [0|15]
  optional int32 counter251_s = 2;
  // Checksum251_S [] [0|255]
  optional int32 checksum251_s = 3;
}

message MEDIA_0X25C {
// Report Message
  enum PADAPPStatusSType {
    PAD_APP_STATUS_S_NORMAL = 0;
    PAD_APP_STATUS_S_PAD_FAULT = 1;
    PAD_APP_STATUS_S_APPFAULT = 2;
    PAD_APP_STATUS_S_APPCONNECTFAULT = 3;
    PAD_APP_STATUS_S_RESERVED_4 = 4;
    PAD_APP_STATUS_S_RESERVED_5 = 5;
    PAD_APP_STATUS_S_RESERVED_6 = 6;
    PAD_APP_STATUS_S_RESERVED_7 = 7;
  }
  // PAD_APP_Status_S [] [0|7]
  optional PADAPPStatusSType pad_app_status_s = 1;
}

message VCU_0X264 {
// Report Message
  // Pump_Back_Inspection_Failure_s [] [0|1]
  optional bool pump_back_inspection_failure_s = 1;
  // CheckSum264_S [] [0|255]
  optional int32 check_sum264_s = 2;
}

message ADS_0X266 {
// Control Message
  enum ADBDetectionsystemStatusSType {
    ADB_DETECTION_SYSTEM_STATUS_S_INVALID = 0;
    ADB_DETECTION_SYSTEM_STATUS_S_TROUBLEFREE = 1;
    ADB_DETECTION_SYSTEM_STATUS_S_OUTOFORDER = 2;
    ADB_DETECTION_SYSTEM_STATUS_S_RESERVED_3 = 3;
  }
  enum RoadilluminatestateType {
    ROAD_ILLUMINATE_STATE_INVALID = 0;
    ROAD_ILLUMINATE_STATE_NOILLUMINATE = 1;
    ROAD_ILLUMINATE_STATE_ILLUMINATED = 2;
    ROAD_ILLUMINATE_STATE_RESERVED_3 = 3;
  }
  enum VehicleObject1IDSType {
    VEHICLE_OBJECT1_ID_S_INVALID = 0;
    VEHICLE_OBJECT1_ID_S_TARGRT1 = 1;
    VEHICLE_OBJECT1_ID_S_TARGRT2 = 2;
    VEHICLE_OBJECT1_ID_S_TARGRT3 = 3;
    VEHICLE_OBJECT1_ID_S_TARGRT4 = 4;
    VEHICLE_OBJECT1_ID_S_TARGRT5 = 5;
    VEHICLE_OBJECT1_ID_S_TARGRT6 = 6;
    VEHICLE_OBJECT1_ID_S_TARGRT7 = 7;
    VEHICLE_OBJECT1_ID_S_TARGRT8 = 8;
    VEHICLE_OBJECT1_ID_S_TARGRT9 = 9;
    VEHICLE_OBJECT1_ID_S_TARGRT10 = 10;
    VEHICLE_OBJECT1_ID_S_TARGRT11 = 11;
    VEHICLE_OBJECT1_ID_S_TARGRT12 = 12;
  }
  enum Target1StateSType {
    TARGET1_STATE_S_INVALID = 0;
    TARGET1_STATE_S_OPPOSITEVEHICLETARGET = 1;
    TARGET1_STATE_S_SIMULTANEOUSVEHICLETARGET = 2;
    TARGET1_STATE_S_RESERVED_3 = 3;
  }
  enum Target1TypeSType {
    TARGET1_TYPE_S_INVALID = 0;
    TARGET1_TYPE_S_FOURWHEELERSEDAN = 1;
    TARGET1_TYPE_S_LARGEVEHICLETRUCK = 2;
    TARGET1_TYPE_S_TWOWHEELERBICYCLE = 3;
    TARGET1_TYPE_S_PEDESTRIAN = 4;
    TARGET1_TYPE_S_SPECIALVEHICLES = 5;
    TARGET1_TYPE_S_TRICYCLE = 6;
    TARGET1_TYPE_S_CONE0IFNOTRECOGNIZED = 7;
    TARGET1_TYPE_S_TWOWHEELEDVEHICLEEVMOTORCYCLE = 8;
    TARGET1_TYPE_S_DOGRESERVED = 9;
    TARGET1_TYPE_S_PASSENGERCARIFTRUCKPASSENGERCARCANNOTBEDISTINGUISHEDSEND2 = 10;
    TARGET1_TYPE_S_SUVIFSEDANSUVCANNOTBEDISTINGUISHEDSEND1 = 11;
    TARGET1_TYPE_S_ANTICOLLISIONBUCKETIFNOTIDENTIFIEDSEND0 = 12;
    TARGET1_TYPE_S_CONSTRUCTIONLABEL0IFNOTRECOGNIZED = 13;
    TARGET1_TYPE_S_TRIPODSEND0IFNOTRECOGNIZED = 14;
    TARGET1_TYPE_S_WATERHORSEIFNOTRECOGNIZEDSEND0 = 15;
  }
  enum VehicleObject2IDSType {
    VEHICLE_OBJECT2_ID_S_INVALID = 0;
    VEHICLE_OBJECT2_ID_S_TARGRT1 = 1;
    VEHICLE_OBJECT2_ID_S_TARGRT2 = 2;
    VEHICLE_OBJECT2_ID_S_TARGRT3 = 3;
    VEHICLE_OBJECT2_ID_S_TARGRT4 = 4;
    VEHICLE_OBJECT2_ID_S_TARGRT5 = 5;
    VEHICLE_OBJECT2_ID_S_TARGRT6 = 6;
    VEHICLE_OBJECT2_ID_S_TARGRT7 = 7;
    VEHICLE_OBJECT2_ID_S_TARGRT8 = 8;
    VEHICLE_OBJECT2_ID_S_TARGRT9 = 9;
    VEHICLE_OBJECT2_ID_S_TARGRT10 = 10;
    VEHICLE_OBJECT2_ID_S_TARGRT11 = 11;
    VEHICLE_OBJECT2_ID_S_TARGRT12 = 12;
  }
  enum Target2StateSType {
    TARGET2_STATE_S_INVALID = 0;
    TARGET2_STATE_S_OPPOSITEVEHICLETARGET = 1;
    TARGET2_STATE_S_SIMULTANEOUSVEHICLETARGET = 2;
    TARGET2_STATE_S_RESERVED_3 = 3;
  }
  enum Target2TypeSType {
    TARGET2_TYPE_S_INVALID = 0;
    TARGET2_TYPE_S_FOURWHEELERSEDAN = 1;
    TARGET2_TYPE_S_LARGEVEHICLETRUCK = 2;
    TARGET2_TYPE_S_TWOWHEELERBICYCLE = 3;
    TARGET2_TYPE_S_PEDESTRIAN = 4;
    TARGET2_TYPE_S_SPECIALVEHICLES = 5;
    TARGET2_TYPE_S_TRICYCLE = 6;
    TARGET2_TYPE_S_CONE0IFNOTRECOGNIZED = 7;
    TARGET2_TYPE_S_TWOWHEELEDVEHICLEEVMOTORCYCLE = 8;
    TARGET2_TYPE_S_DOGRESERVED = 9;
    TARGET2_TYPE_S_PASSENGERCARIFTRUCKPASSENGERCARCANNOTBEDISTINGUISHEDSEND2 = 10;
    TARGET2_TYPE_S_SUVIFSEDANSUVCANNOTBEDISTINGUISHEDSEND1 = 11;
    TARGET2_TYPE_S_ANTICOLLISIONBUCKETIFNOTIDENTIFIEDSEND0 = 12;
    TARGET2_TYPE_S_CONSTRUCTIONLABEL0IFNOTRECOGNIZED = 13;
    TARGET2_TYPE_S_TRIPODSEND0IFNOTRECOGNIZED = 14;
    TARGET2_TYPE_S_WATERHORSEIFNOTRECOGNIZEDSEND0 = 15;
  }
  enum VehicleObject3IDSType {
    VEHICLE_OBJECT3_ID_S_INVALID = 0;
    VEHICLE_OBJECT3_ID_S_TARGRT1 = 1;
    VEHICLE_OBJECT3_ID_S_TARGRT2 = 2;
    VEHICLE_OBJECT3_ID_S_TARGRT3 = 3;
    VEHICLE_OBJECT3_ID_S_TARGRT4 = 4;
    VEHICLE_OBJECT3_ID_S_TARGRT5 = 5;
    VEHICLE_OBJECT3_ID_S_TARGRT6 = 6;
    VEHICLE_OBJECT3_ID_S_TARGRT7 = 7;
    VEHICLE_OBJECT3_ID_S_TARGRT8 = 8;
    VEHICLE_OBJECT3_ID_S_TARGRT9 = 9;
    VEHICLE_OBJECT3_ID_S_TARGRT10 = 10;
    VEHICLE_OBJECT3_ID_S_TARGRT11 = 11;
    VEHICLE_OBJECT3_ID_S_TARGRT12 = 12;
  }
  enum Target3StateSType {
    TARGET3_STATE_S_INVALID = 0;
    TARGET3_STATE_S_OPPOSITEVEHICLETARGET = 1;
    TARGET3_STATE_S_SIMULTANEOUSVEHICLETARGET = 2;
    TARGET3_STATE_S_RESERVED_3 = 3;
  }
  enum Target3TypeSType {
    TARGET3_TYPE_S_INVALID = 0;
    TARGET3_TYPE_S_FOURWHEELERSEDAN = 1;
    TARGET3_TYPE_S_LARGEVEHICLETRUCK = 2;
    TARGET3_TYPE_S_TWOWHEELERBICYCLE = 3;
    TARGET3_TYPE_S_PEDESTRIAN = 4;
    TARGET3_TYPE_S_SPECIALVEHICLES = 5;
    TARGET3_TYPE_S_TRICYCLE = 6;
    TARGET3_TYPE_S_CONE0IFNOTRECOGNIZED = 7;
    TARGET3_TYPE_S_TWOWHEELEDVEHICLEEVMOTORCYCLE = 8;
    TARGET3_TYPE_S_DOGRESERVED = 9;
    TARGET3_TYPE_S_PASSENGERCARIFTRUCKPASSENGERCARCANNOTBEDISTINGUISHEDSEND2 = 10;
    TARGET3_TYPE_S_SUVIFSEDANSUVCANNOTBEDISTINGUISHEDSEND1 = 11;
    TARGET3_TYPE_S_ANTICOLLISIONBUCKETIFNOTIDENTIFIEDSEND0 = 12;
    TARGET3_TYPE_S_CONSTRUCTIONLABEL0IFNOTRECOGNIZED = 13;
    TARGET3_TYPE_S_TRIPODSEND0IFNOTRECOGNIZED = 14;
    TARGET3_TYPE_S_WATERHORSEIFNOTRECOGNIZEDSEND0 = 15;
  }
  enum VehicleObject4IDSType {
    VEHICLE_OBJECT4_ID_S_INVALID = 0;
    VEHICLE_OBJECT4_ID_S_TARGRT1 = 1;
    VEHICLE_OBJECT4_ID_S_TARGRT2 = 2;
    VEHICLE_OBJECT4_ID_S_TARGRT3 = 3;
    VEHICLE_OBJECT4_ID_S_TARGRT4 = 4;
    VEHICLE_OBJECT4_ID_S_TARGRT5 = 5;
    VEHICLE_OBJECT4_ID_S_TARGRT6 = 6;
    VEHICLE_OBJECT4_ID_S_TARGRT7 = 7;
    VEHICLE_OBJECT4_ID_S_TARGRT8 = 8;
    VEHICLE_OBJECT4_ID_S_TARGRT9 = 9;
    VEHICLE_OBJECT4_ID_S_TARGRT10 = 10;
    VEHICLE_OBJECT4_ID_S_TARGRT11 = 11;
    VEHICLE_OBJECT4_ID_S_TARGRT12 = 12;
  }
  enum Target4StateSType {
    TARGET4_STATE_S_INVALID = 0;
    TARGET4_STATE_S_OPPOSITEVEHICLETARGET = 1;
    TARGET4_STATE_S_SIMULTANEOUSVEHICLETARGET = 2;
    TARGET4_STATE_S_RESERVED_3 = 3;
  }
  enum Target4TypeSType {
    TARGET4_TYPE_S_INVALID = 0;
    TARGET4_TYPE_S_FOURWHEELERSEDAN = 1;
    TARGET4_TYPE_S_LARGEVEHICLETRUCK = 2;
    TARGET4_TYPE_S_TWOWHEELERBICYCLE = 3;
    TARGET4_TYPE_S_PEDESTRIAN = 4;
    TARGET4_TYPE_S_SPECIALVEHICLES = 5;
    TARGET4_TYPE_S_TRICYCLE = 6;
    TARGET4_TYPE_S_CONE0IFNOTRECOGNIZED = 7;
    TARGET4_TYPE_S_TWOWHEELEDVEHICLEEVMOTORCYCLE = 8;
    TARGET4_TYPE_S_DOGRESERVED = 9;
    TARGET4_TYPE_S_PASSENGERCARIFTRUCKPASSENGERCARCANNOTBEDISTINGUISHEDSEND2 = 10;
    TARGET4_TYPE_S_SUVIFSEDANSUVCANNOTBEDISTINGUISHEDSEND1 = 11;
    TARGET4_TYPE_S_ANTICOLLISIONBUCKETIFNOTIDENTIFIEDSEND0 = 12;
    TARGET4_TYPE_S_CONSTRUCTIONLABEL0IFNOTRECOGNIZED = 13;
    TARGET4_TYPE_S_TRIPODSEND0IFNOTRECOGNIZED = 14;
    TARGET4_TYPE_S_WATERHORSEIFNOTRECOGNIZEDSEND0 = 15;
  }
  enum VehicleObject5IDSType {
    VEHICLE_OBJECT5_ID_S_INVALID = 0;
    VEHICLE_OBJECT5_ID_S_TARGRT1 = 1;
    VEHICLE_OBJECT5_ID_S_TARGRT2 = 2;
    VEHICLE_OBJECT5_ID_S_TARGRT3 = 3;
    VEHICLE_OBJECT5_ID_S_TARGRT4 = 4;
    VEHICLE_OBJECT5_ID_S_TARGRT5 = 5;
    VEHICLE_OBJECT5_ID_S_TARGRT6 = 6;
    VEHICLE_OBJECT5_ID_S_TARGRT7 = 7;
    VEHICLE_OBJECT5_ID_S_TARGRT8 = 8;
    VEHICLE_OBJECT5_ID_S_TARGRT9 = 9;
    VEHICLE_OBJECT5_ID_S_TARGRT10 = 10;
    VEHICLE_OBJECT5_ID_S_TARGRT11 = 11;
    VEHICLE_OBJECT5_ID_S_TARGRT12 = 12;
  }
  enum Target5StateSType {
    TARGET5_STATE_S_INVALID = 0;
    TARGET5_STATE_S_OPPOSITEVEHICLETARGET = 1;
    TARGET5_STATE_S_SIMULTANEOUSVEHICLETARGET = 2;
    TARGET5_STATE_S_RESERVED_3 = 3;
  }
  enum Target5TypeSType {
    TARGET5_TYPE_S_INVALID = 0;
    TARGET5_TYPE_S_FOURWHEELERSEDAN = 1;
    TARGET5_TYPE_S_LARGEVEHICLETRUCK = 2;
    TARGET5_TYPE_S_TWOWHEELERBICYCLE = 3;
    TARGET5_TYPE_S_PEDESTRIAN = 4;
    TARGET5_TYPE_S_SPECIALVEHICLES = 5;
    TARGET5_TYPE_S_TRICYCLE = 6;
    TARGET5_TYPE_S_CONE0IFNOTRECOGNIZED = 7;
    TARGET5_TYPE_S_TWOWHEELEDVEHICLEEVMOTORCYCLE = 8;
    TARGET5_TYPE_S_DOGRESERVED = 9;
    TARGET5_TYPE_S_PASSENGERCARIFTRUCKPASSENGERCARCANNOTBEDISTINGUISHEDSEND2 = 10;
    TARGET5_TYPE_S_SUVIFSEDANSUVCANNOTBEDISTINGUISHEDSEND1 = 11;
    TARGET5_TYPE_S_ANTICOLLISIONBUCKETIFNOTIDENTIFIEDSEND0 = 12;
    TARGET5_TYPE_S_CONSTRUCTIONLABEL0IFNOTRECOGNIZED = 13;
    TARGET5_TYPE_S_TRIPODSEND0IFNOTRECOGNIZED = 14;
    TARGET5_TYPE_S_WATERHORSEIFNOTRECOGNIZEDSEND0 = 15;
  }
  enum VehicleObject6IDSType {
    VEHICLE_OBJECT6_ID_S_INVALID = 0;
    VEHICLE_OBJECT6_ID_S_TARGRT1 = 1;
    VEHICLE_OBJECT6_ID_S_TARGRT2 = 2;
    VEHICLE_OBJECT6_ID_S_TARGRT3 = 3;
    VEHICLE_OBJECT6_ID_S_TARGRT4 = 4;
    VEHICLE_OBJECT6_ID_S_TARGRT5 = 5;
    VEHICLE_OBJECT6_ID_S_TARGRT6 = 6;
    VEHICLE_OBJECT6_ID_S_TARGRT7 = 7;
    VEHICLE_OBJECT6_ID_S_TARGRT8 = 8;
    VEHICLE_OBJECT6_ID_S_TARGRT9 = 9;
    VEHICLE_OBJECT6_ID_S_TARGRT10 = 10;
    VEHICLE_OBJECT6_ID_S_TARGRT11 = 11;
    VEHICLE_OBJECT6_ID_S_TARGRT12 = 12;
  }
  enum Target6StateSType {
    TARGET6_STATE_S_INVALID = 0;
    TARGET6_STATE_S_OPPOSITEVEHICLETARGET = 1;
    TARGET6_STATE_S_SIMULTANEOUSVEHICLETARGET = 2;
    TARGET6_STATE_S_RESERVED_3 = 3;
  }
  enum Target6TypeSType {
    TARGET6_TYPE_S_INVALID = 0;
    TARGET6_TYPE_S_FOURWHEELERSEDAN = 1;
    TARGET6_TYPE_S_LARGEVEHICLETRUCK = 2;
    TARGET6_TYPE_S_TWOWHEELERBICYCLE = 3;
    TARGET6_TYPE_S_PEDESTRIAN = 4;
    TARGET6_TYPE_S_SPECIALVEHICLES = 5;
    TARGET6_TYPE_S_TRICYCLE = 6;
    TARGET6_TYPE_S_CONE0IFNOTRECOGNIZED = 7;
    TARGET6_TYPE_S_TWOWHEELEDVEHICLEEVMOTORCYCLE = 8;
    TARGET6_TYPE_S_DOGRESERVED = 9;
    TARGET6_TYPE_S_PASSENGERCARIFTRUCKPASSENGERCARCANNOTBEDISTINGUISHEDSEND2 = 10;
    TARGET6_TYPE_S_SUVIFSEDANSUVCANNOTBEDISTINGUISHEDSEND1 = 11;
    TARGET6_TYPE_S_ANTICOLLISIONBUCKETIFNOTIDENTIFIEDSEND0 = 12;
    TARGET6_TYPE_S_CONSTRUCTIONLABEL0IFNOTRECOGNIZED = 13;
    TARGET6_TYPE_S_TRIPODSEND0IFNOTRECOGNIZED = 14;
    TARGET6_TYPE_S_WATERHORSEIFNOTRECOGNIZEDSEND0 = 15;
  }
  enum VehicleObject7IDSType {
    VEHICLE_OBJECT7_ID_S_INVALID = 0;
    VEHICLE_OBJECT7_ID_S_TARGRT1 = 1;
    VEHICLE_OBJECT7_ID_S_TARGRT2 = 2;
    VEHICLE_OBJECT7_ID_S_TARGRT3 = 3;
    VEHICLE_OBJECT7_ID_S_TARGRT4 = 4;
    VEHICLE_OBJECT7_ID_S_TARGRT5 = 5;
    VEHICLE_OBJECT7_ID_S_TARGRT6 = 6;
    VEHICLE_OBJECT7_ID_S_TARGRT7 = 7;
    VEHICLE_OBJECT7_ID_S_TARGRT8 = 8;
    VEHICLE_OBJECT7_ID_S_TARGRT9 = 9;
    VEHICLE_OBJECT7_ID_S_TARGRT10 = 10;
    VEHICLE_OBJECT7_ID_S_TARGRT11 = 11;
    VEHICLE_OBJECT7_ID_S_TARGRT12 = 12;
  }
  enum Target7StateSType {
    TARGET7_STATE_S_INVALID = 0;
    TARGET7_STATE_S_OPPOSITEVEHICLETARGET = 1;
    TARGET7_STATE_S_SIMULTANEOUSVEHICLETARGET = 2;
    TARGET7_STATE_S_RESERVED_3 = 3;
  }
  enum Target7TypeSType {
    TARGET7_TYPE_S_INVALID = 0;
    TARGET7_TYPE_S_FOURWHEELERSEDAN = 1;
    TARGET7_TYPE_S_LARGEVEHICLETRUCK = 2;
    TARGET7_TYPE_S_TWOWHEELERBICYCLE = 3;
    TARGET7_TYPE_S_PEDESTRIAN = 4;
    TARGET7_TYPE_S_SPECIALVEHICLES = 5;
    TARGET7_TYPE_S_TRICYCLE = 6;
    TARGET7_TYPE_S_CONE0IFNOTRECOGNIZED = 7;
    TARGET7_TYPE_S_TWOWHEELEDVEHICLEEVMOTORCYCLE = 8;
    TARGET7_TYPE_S_DOGRESERVED = 9;
    TARGET7_TYPE_S_PASSENGERCARIFTRUCKPASSENGERCARCANNOTBEDISTINGUISHEDSEND2 = 10;
    TARGET7_TYPE_S_SUVIFSEDANSUVCANNOTBEDISTINGUISHEDSEND1 = 11;
    TARGET7_TYPE_S_ANTICOLLISIONBUCKETIFNOTIDENTIFIEDSEND0 = 12;
    TARGET7_TYPE_S_CONSTRUCTIONLABEL0IFNOTRECOGNIZED = 13;
    TARGET7_TYPE_S_TRIPODSEND0IFNOTRECOGNIZED = 14;
    TARGET7_TYPE_S_WATERHORSEIFNOTRECOGNIZEDSEND0 = 15;
  }
  enum VehicleObject8IDSType {
    VEHICLE_OBJECT8_ID_S_INVALID = 0;
    VEHICLE_OBJECT8_ID_S_TARGRT1 = 1;
    VEHICLE_OBJECT8_ID_S_TARGRT2 = 2;
    VEHICLE_OBJECT8_ID_S_TARGRT3 = 3;
    VEHICLE_OBJECT8_ID_S_TARGRT4 = 4;
    VEHICLE_OBJECT8_ID_S_TARGRT5 = 5;
    VEHICLE_OBJECT8_ID_S_TARGRT6 = 6;
    VEHICLE_OBJECT8_ID_S_TARGRT7 = 7;
    VEHICLE_OBJECT8_ID_S_TARGRT8 = 8;
    VEHICLE_OBJECT8_ID_S_TARGRT9 = 9;
    VEHICLE_OBJECT8_ID_S_TARGRT10 = 10;
    VEHICLE_OBJECT8_ID_S_TARGRT11 = 11;
    VEHICLE_OBJECT8_ID_S_TARGRT12 = 12;
  }
  enum Target8StateSType {
    TARGET8_STATE_S_INVALID = 0;
    TARGET8_STATE_S_OPPOSITEVEHICLETARGET = 1;
    TARGET8_STATE_S_SIMULTANEOUSVEHICLETARGET = 2;
    TARGET8_STATE_S_RESERVED_3 = 3;
  }
  enum Target8TypeSType {
    TARGET8_TYPE_S_INVALID = 0;
    TARGET8_TYPE_S_FOURWHEELERSEDAN = 1;
    TARGET8_TYPE_S_LARGEVEHICLETRUCK = 2;
    TARGET8_TYPE_S_TWOWHEELERBICYCLE = 3;
    TARGET8_TYPE_S_PEDESTRIAN = 4;
    TARGET8_TYPE_S_SPECIALVEHICLES = 5;
    TARGET8_TYPE_S_TRICYCLE = 6;
    TARGET8_TYPE_S_CONE0IFNOTRECOGNIZED = 7;
    TARGET8_TYPE_S_TWOWHEELEDVEHICLEEVMOTORCYCLE = 8;
    TARGET8_TYPE_S_DOGRESERVED = 9;
    TARGET8_TYPE_S_PASSENGERCARIFTRUCKPASSENGERCARCANNOTBEDISTINGUISHEDSEND2 = 10;
    TARGET8_TYPE_S_SUVIFSEDANSUVCANNOTBEDISTINGUISHEDSEND1 = 11;
    TARGET8_TYPE_S_ANTICOLLISIONBUCKETIFNOTIDENTIFIEDSEND0 = 12;
    TARGET8_TYPE_S_CONSTRUCTIONLABEL0IFNOTRECOGNIZED = 13;
    TARGET8_TYPE_S_TRIPODSEND0IFNOTRECOGNIZED = 14;
    TARGET8_TYPE_S_WATERHORSEIFNOTRECOGNIZEDSEND0 = 15;
  }
  enum VehicleObject9IDSType {
    VEHICLE_OBJECT9_ID_S_INVALID = 0;
    VEHICLE_OBJECT9_ID_S_TARGRT1 = 1;
    VEHICLE_OBJECT9_ID_S_TARGRT2 = 2;
    VEHICLE_OBJECT9_ID_S_TARGRT3 = 3;
    VEHICLE_OBJECT9_ID_S_TARGRT4 = 4;
    VEHICLE_OBJECT9_ID_S_TARGRT5 = 5;
    VEHICLE_OBJECT9_ID_S_TARGRT6 = 6;
    VEHICLE_OBJECT9_ID_S_TARGRT7 = 7;
    VEHICLE_OBJECT9_ID_S_TARGRT8 = 8;
    VEHICLE_OBJECT9_ID_S_TARGRT9 = 9;
    VEHICLE_OBJECT9_ID_S_TARGRT10 = 10;
    VEHICLE_OBJECT9_ID_S_TARGRT11 = 11;
    VEHICLE_OBJECT9_ID_S_TARGRT12 = 12;
  }
  enum Target9StateSType {
    TARGET9_STATE_S_INVALID = 0;
    TARGET9_STATE_S_OPPOSITEVEHICLETARGET = 1;
    TARGET9_STATE_S_SIMULTANEOUSVEHICLETARGET = 2;
    TARGET9_STATE_S_RESERVED_3 = 3;
  }
  enum Target9TypeSType {
    TARGET9_TYPE_S_INVALID = 0;
    TARGET9_TYPE_S_FOURWHEELERSEDAN = 1;
    TARGET9_TYPE_S_LARGEVEHICLETRUCK = 2;
    TARGET9_TYPE_S_TWOWHEELERBICYCLE = 3;
    TARGET9_TYPE_S_PEDESTRIAN = 4;
    TARGET9_TYPE_S_SPECIALVEHICLES = 5;
    TARGET9_TYPE_S_TRICYCLE = 6;
    TARGET9_TYPE_S_CONE0IFNOTRECOGNIZED = 7;
    TARGET9_TYPE_S_TWOWHEELEDVEHICLEEVMOTORCYCLE = 8;
    TARGET9_TYPE_S_DOGRESERVED = 9;
    TARGET9_TYPE_S_PASSENGERCARIFTRUCKPASSENGERCARCANNOTBEDISTINGUISHEDSEND2 = 10;
    TARGET9_TYPE_S_SUVIFSEDANSUVCANNOTBEDISTINGUISHEDSEND1 = 11;
    TARGET9_TYPE_S_ANTICOLLISIONBUCKETIFNOTIDENTIFIEDSEND0 = 12;
    TARGET9_TYPE_S_CONSTRUCTIONLABEL0IFNOTRECOGNIZED = 13;
    TARGET9_TYPE_S_TRIPODSEND0IFNOTRECOGNIZED = 14;
    TARGET9_TYPE_S_WATERHORSEIFNOTRECOGNIZEDSEND0 = 15;
  }
  enum VehicleObject10IDSType {
    VEHICLE_OBJECT10_ID_S_INVALID = 0;
    VEHICLE_OBJECT10_ID_S_TARGRT1 = 1;
    VEHICLE_OBJECT10_ID_S_TARGRT2 = 2;
    VEHICLE_OBJECT10_ID_S_TARGRT3 = 3;
    VEHICLE_OBJECT10_ID_S_TARGRT4 = 4;
    VEHICLE_OBJECT10_ID_S_TARGRT5 = 5;
    VEHICLE_OBJECT10_ID_S_TARGRT6 = 6;
    VEHICLE_OBJECT10_ID_S_TARGRT7 = 7;
    VEHICLE_OBJECT10_ID_S_TARGRT8 = 8;
    VEHICLE_OBJECT10_ID_S_TARGRT9 = 9;
    VEHICLE_OBJECT10_ID_S_TARGRT10 = 10;
    VEHICLE_OBJECT10_ID_S_TARGRT11 = 11;
    VEHICLE_OBJECT10_ID_S_TARGRT12 = 12;
  }
  enum Target10StateSType {
    TARGET10_STATE_S_INVALID = 0;
    TARGET10_STATE_S_OPPOSITEVEHICLETARGET = 1;
    TARGET10_STATE_S_SIMULTANEOUSVEHICLETARGET = 2;
    TARGET10_STATE_S_RESERVED_3 = 3;
  }
  enum Target10TypeSType {
    TARGET10_TYPE_S_INVALID = 0;
    TARGET10_TYPE_S_FOURWHEELERSEDAN = 1;
    TARGET10_TYPE_S_LARGEVEHICLETRUCK = 2;
    TARGET10_TYPE_S_TWOWHEELERBICYCLE = 3;
    TARGET10_TYPE_S_PEDESTRIAN = 4;
    TARGET10_TYPE_S_SPECIALVEHICLES = 5;
    TARGET10_TYPE_S_TRICYCLE = 6;
    TARGET10_TYPE_S_CONE0IFNOTRECOGNIZED = 7;
    TARGET10_TYPE_S_TWOWHEELEDVEHICLEEVMOTORCYCLE = 8;
    TARGET10_TYPE_S_DOGRESERVED = 9;
    TARGET10_TYPE_S_PASSENGERCARIFTRUCKPASSENGERCARCANNOTBEDISTINGUISHEDSEND2 = 10;
    TARGET10_TYPE_S_SUVIFSEDANSUVCANNOTBEDISTINGUISHEDSEND1 = 11;
    TARGET10_TYPE_S_ANTICOLLISIONBUCKETIFNOTIDENTIFIEDSEND0 = 12;
    TARGET10_TYPE_S_CONSTRUCTIONLABEL0IFNOTRECOGNIZED = 13;
    TARGET10_TYPE_S_TRIPODSEND0IFNOTRECOGNIZED = 14;
    TARGET10_TYPE_S_WATERHORSEIFNOTRECOGNIZEDSEND0 = 15;
  }
  enum VehicleObject11IDSType {
    VEHICLE_OBJECT11_ID_S_INVALID = 0;
    VEHICLE_OBJECT11_ID_S_TARGRT1 = 1;
    VEHICLE_OBJECT11_ID_S_TARGRT2 = 2;
    VEHICLE_OBJECT11_ID_S_TARGRT3 = 3;
    VEHICLE_OBJECT11_ID_S_TARGRT4 = 4;
    VEHICLE_OBJECT11_ID_S_TARGRT5 = 5;
    VEHICLE_OBJECT11_ID_S_TARGRT6 = 6;
    VEHICLE_OBJECT11_ID_S_TARGRT7 = 7;
    VEHICLE_OBJECT11_ID_S_TARGRT8 = 8;
    VEHICLE_OBJECT11_ID_S_TARGRT9 = 9;
    VEHICLE_OBJECT11_ID_S_TARGRT10 = 10;
    VEHICLE_OBJECT11_ID_S_TARGRT11 = 11;
    VEHICLE_OBJECT11_ID_S_TARGRT12 = 12;
  }
  enum Target11StateSType {
    TARGET11_STATE_S_INVALID = 0;
    TARGET11_STATE_S_OPPOSITEVEHICLETARGET = 1;
    TARGET11_STATE_S_SIMULTANEOUSVEHICLETARGET = 2;
    TARGET11_STATE_S_RESERVED_3 = 3;
  }
  enum Target11TypeSType {
    TARGET11_TYPE_S_INVALID = 0;
    TARGET11_TYPE_S_FOURWHEELERSEDAN = 1;
    TARGET11_TYPE_S_LARGEVEHICLETRUCK = 2;
    TARGET11_TYPE_S_TWOWHEELERBICYCLE = 3;
    TARGET11_TYPE_S_PEDESTRIAN = 4;
    TARGET11_TYPE_S_SPECIALVEHICLES = 5;
    TARGET11_TYPE_S_TRICYCLE = 6;
    TARGET11_TYPE_S_CONE0IFNOTRECOGNIZED = 7;
    TARGET11_TYPE_S_TWOWHEELEDVEHICLEEVMOTORCYCLE = 8;
    TARGET11_TYPE_S_DOGRESERVED = 9;
    TARGET11_TYPE_S_PASSENGERCARIFTRUCKPASSENGERCARCANNOTBEDISTINGUISHEDSEND2 = 10;
    TARGET11_TYPE_S_SUVIFSEDANSUVCANNOTBEDISTINGUISHEDSEND1 = 11;
    TARGET11_TYPE_S_ANTICOLLISIONBUCKETIFNOTIDENTIFIEDSEND0 = 12;
    TARGET11_TYPE_S_CONSTRUCTIONLABEL0IFNOTRECOGNIZED = 13;
    TARGET11_TYPE_S_TRIPODSEND0IFNOTRECOGNIZED = 14;
    TARGET11_TYPE_S_WATERHORSEIFNOTRECOGNIZEDSEND0 = 15;
  }
  enum VehicleObject12IDSType {
    VEHICLE_OBJECT12_ID_S_INVALID = 0;
    VEHICLE_OBJECT12_ID_S_TARGRT1 = 1;
    VEHICLE_OBJECT12_ID_S_TARGRT2 = 2;
    VEHICLE_OBJECT12_ID_S_TARGRT3 = 3;
    VEHICLE_OBJECT12_ID_S_TARGRT4 = 4;
    VEHICLE_OBJECT12_ID_S_TARGRT5 = 5;
    VEHICLE_OBJECT12_ID_S_TARGRT6 = 6;
    VEHICLE_OBJECT12_ID_S_TARGRT7 = 7;
    VEHICLE_OBJECT12_ID_S_TARGRT8 = 8;
    VEHICLE_OBJECT12_ID_S_TARGRT9 = 9;
    VEHICLE_OBJECT12_ID_S_TARGRT10 = 10;
    VEHICLE_OBJECT12_ID_S_TARGRT11 = 11;
    VEHICLE_OBJECT12_ID_S_TARGRT12 = 12;
  }
  enum Target12StateSType {
    TARGET12_STATE_S_INVALID = 0;
    TARGET12_STATE_S_OPPOSITEVEHICLETARGET = 1;
    TARGET12_STATE_S_SIMULTANEOUSVEHICLETARGET = 2;
    TARGET12_STATE_S_RESERVED_3 = 3;
  }
  enum Target12TypeSType {
    TARGET12_TYPE_S_INVALID = 0;
    TARGET12_TYPE_S_FOURWHEELERSEDAN = 1;
    TARGET12_TYPE_S_LARGEVEHICLETRUCK = 2;
    TARGET12_TYPE_S_TWOWHEELERBICYCLE = 3;
    TARGET12_TYPE_S_PEDESTRIAN = 4;
    TARGET12_TYPE_S_SPECIALVEHICLES = 5;
    TARGET12_TYPE_S_TRICYCLE = 6;
    TARGET12_TYPE_S_CONE0IFNOTRECOGNIZED = 7;
    TARGET12_TYPE_S_TWOWHEELEDVEHICLEEVMOTORCYCLE = 8;
    TARGET12_TYPE_S_DOGRESERVED = 9;
    TARGET12_TYPE_S_PASSENGERCARIFTRUCKPASSENGERCARCANNOTBEDISTINGUISHEDSEND2 = 10;
    TARGET12_TYPE_S_SUVIFSEDANSUVCANNOTBEDISTINGUISHEDSEND1 = 11;
    TARGET12_TYPE_S_ANTICOLLISIONBUCKETIFNOTIDENTIFIEDSEND0 = 12;
    TARGET12_TYPE_S_CONSTRUCTIONLABEL0IFNOTRECOGNIZED = 13;
    TARGET12_TYPE_S_TRIPODSEND0IFNOTRECOGNIZED = 14;
    TARGET12_TYPE_S_WATERHORSEIFNOTRECOGNIZEDSEND0 = 15;
  }
  // Medium_0x266_ChilD_ID_S [] [0|255]
  optional int32 medium_0x266_chil_d_id_s = 1;
  // ADB_Detection_system_Status_S [] [0|3]
  optional ADBDetectionsystemStatusSType adb_detection_system_status_s = 2;
  // Road_illuminate_state [] [0|3]
  optional RoadilluminatestateType road_illuminate_state = 3;
  // Vehicle_Object1_ID_S [] [0|15]
  optional VehicleObject1IDSType vehicle_object1_id_s = 4;
  // Target1_State_S [] [0|3]
  optional Target1StateSType target1_state_s = 5;
  // Target1_Type_S [] [0|15]
  optional Target1TypeSType target1_type_s = 6;
  // Target1_Abscissa_S [m] [-42|42]
  optional double target1_abscissa_s = 7;
  // Target1_Ordinate_S [m] [0|400]
  optional double target1_ordinate_s = 8;
  // LateralRelativeVelocityOfTar1_S [m/s] [-102.3|102.3]
  optional double lateral_relative_velocity_of_tar1_s = 9;
  // LongitudinalRelativeVelocityTar1 [m/s] [-102.3|102.3]
  optional double longitudinal_relative_velocity_tar1 = 10;
  // Target1_Altitude_S [m] [0|5]
  optional double target1_altitude_s = 11;
  // Target1_Width_S [m] [0|5]
  optional double target1_width_s = 12;
  // Target1_Distance_S [m] [0|400]
  optional double target1_distance_s = 13;
  // Target1_Left_Angle_S [°] [-25|25]
  optional double target1_left_angle_s = 14;
  // Target1_Right_Angle_S [°] [-25|25]
  optional double target1_right_angle_s = 15;
  // Target1_Angular_Velocity_S [rad/s] [-0.21|0.21]
  optional double target1_angular_velocity_s = 16;
  // Vehicle_Object2_ID_S [] [0|15]
  optional VehicleObject2IDSType vehicle_object2_id_s = 17;
  // Target2_State_S [] [0|3]
  optional Target2StateSType target2_state_s = 18;
  // Target2_Type_S [] [0|15]
  optional Target2TypeSType target2_type_s = 19;
  // Target2_Abscissa_S [m] [-42|42]
  optional double target2_abscissa_s = 20;
  // Target2_Ordinate_S [m] [0|400]
  optional double target2_ordinate_s = 21;
  // LateralRelativeVelocityOfTar2_S [m/s] [-102.3|102.3]
  optional double lateral_relative_velocity_of_tar2_s = 22;
  // LongitudinalRelativeVelocityTar2 [m/s] [-102.3|102.3]
  optional double longitudinal_relative_velocity_tar2 = 23;
  // Target2_Altitude_S [m] [0|5]
  optional double target2_altitude_s = 24;
  // Target2_Width_S [m] [0|5]
  optional double target2_width_s = 25;
  // Target2_Distance_S [m] [0|400]
  optional double target2_distance_s = 26;
  // Target2_Left_Angle_S [°] [-25|25]
  optional double target2_left_angle_s = 27;
  // Target2_Right_Angle_S [°] [-25|25]
  optional double target2_right_angle_s = 28;
  // Target2_Angular_Velocity_S [rad/s] [-0.21|0.21]
  optional double target2_angular_velocity_s = 29;
  // Vehicle_Object3_ID_S [] [0|15]
  optional VehicleObject3IDSType vehicle_object3_id_s = 30;
  // Target3_State_S [] [0|3]
  optional Target3StateSType target3_state_s = 31;
  // Target3_Type_S [] [0|15]
  optional Target3TypeSType target3_type_s = 32;
  // Target3_Abscissa_S [m] [-42|42]
  optional double target3_abscissa_s = 33;
  // Target3_Ordinate_S [m] [0|400]
  optional double target3_ordinate_s = 34;
  // LateralRelativeVelocityOfTar3_S [m/s] [-102.3|102.3]
  optional double lateral_relative_velocity_of_tar3_s = 35;
  // LongitudinalRelativeVelocityTar3 [m/s] [-102.3|102.3]
  optional double longitudinal_relative_velocity_tar3 = 36;
  // Target3_Altitude_S [m] [0|5]
  optional double target3_altitude_s = 37;
  // Target3_Width_S [m] [0|5]
  optional double target3_width_s = 38;
  // Target3_Distance_S [m] [0|400]
  optional double target3_distance_s = 39;
  // Target3_Left_Angle_S [°] [-25|25]
  optional double target3_left_angle_s = 40;
  // Target3_Right_Angle_S [°] [-25|25]
  optional double target3_right_angle_s = 41;
  // Target3_Angular_Velocity_S [rad/s] [-0.21|0.21]
  optional double target3_angular_velocity_s = 42;
  // Vehicle_Object4_ID_S [] [0|15]
  optional VehicleObject4IDSType vehicle_object4_id_s = 43;
  // Target4_State_S [] [0|3]
  optional Target4StateSType target4_state_s = 44;
  // Target4_Type_S [] [0|15]
  optional Target4TypeSType target4_type_s = 45;
  // Target4_Abscissa_S [m] [-42|42]
  optional double target4_abscissa_s = 46;
  // Target4_Ordinate_S [m] [0|400]
  optional double target4_ordinate_s = 47;
  // LateralRelativeVelocityOfTar4_S [m/s] [-102.3|102.3]
  optional double lateral_relative_velocity_of_tar4_s = 48;
  // LongitudinalRelativeVelocityTar4 [m/s] [-102.3|102.3]
  optional double longitudinal_relative_velocity_tar4 = 49;
  // Target4_Altitude_S [m] [0|5]
  optional double target4_altitude_s = 50;
  // Target4_Width_S [m] [0|5]
  optional double target4_width_s = 51;
  // Target4_Distance_S [m] [0|400]
  optional double target4_distance_s = 52;
  // Target4_Left_Angle_S [°] [-25|25]
  optional double target4_left_angle_s = 53;
  // Target4_Right_Angle_S [°] [-25|25]
  optional double target4_right_angle_s = 54;
  // Target4_Angular_Velocity_S [rad/s] [-0.21|0.21]
  optional double target4_angular_velocity_s = 55;
  // Alive_counter266_01_S [] [0|65535]
  optional int32 alive_counter266_01_s = 56;
  // Checksum266_01_S [] [0|65535]
  optional int32 checksum266_01_s = 57;
  // Vehicle_Object5_ID_S [] [0|15]
  optional VehicleObject5IDSType vehicle_object5_id_s = 58;
  // Target5_State_S [] [0|3]
  optional Target5StateSType target5_state_s = 59;
  // Target5_Type_S [] [0|15]
  optional Target5TypeSType target5_type_s = 60;
  // Target5_Abscissa_S [m] [-42|42]
  optional double target5_abscissa_s = 61;
  // Target5_Ordinate_S [m] [0|400]
  optional double target5_ordinate_s = 62;
  // LateralRelativeVelocityOfTar5_S [m/s] [-102.3|102.3]
  optional double lateral_relative_velocity_of_tar5_s = 63;
  // LongitudinalRelativeVelocityTar5 [m/s] [-102.3|102.3]
  optional double longitudinal_relative_velocity_tar5 = 64;
  // Target5_Altitude_S [m] [0|5]
  optional double target5_altitude_s = 65;
  // Target5_Width_S [m] [0|5]
  optional double target5_width_s = 66;
  // Target5_Distance_S [m] [0|400]
  optional double target5_distance_s = 67;
  // Target5_Left_Angle_S [°] [-25|25]
  optional double target5_left_angle_s = 68;
  // Target5_Right_Angle_S [°] [-25|25]
  optional double target5_right_angle_s = 69;
  // Target5_Angular_Velocity_S [rad/s] [-0.21|0.21]
  optional double target5_angular_velocity_s = 70;
  // Vehicle_Object6_ID_S [] [0|15]
  optional VehicleObject6IDSType vehicle_object6_id_s = 71;
  // Target6_State_S [] [0|3]
  optional Target6StateSType target6_state_s = 72;
  // Target6_Type_S [] [0|15]
  optional Target6TypeSType target6_type_s = 73;
  // Target6_Abscissa_S [m] [-42|42]
  optional double target6_abscissa_s = 74;
  // Target6_Ordinate_S [m] [0|400]
  optional double target6_ordinate_s = 75;
  // LateralRelativeVelocityOfTar6_S [m/s] [-102.3|102.3]
  optional double lateral_relative_velocity_of_tar6_s = 76;
  // LongitudinalRelativeVelocityTar6 [m/s] [-102.3|102.3]
  optional double longitudinal_relative_velocity_tar6 = 77;
  // Target6_Altitude_S [m] [0|5]
  optional double target6_altitude_s = 78;
  // Target6_Width_S [m] [0|5]
  optional double target6_width_s = 79;
  // Target6_Distance_S [m] [0|400]
  optional double target6_distance_s = 80;
  // Target6_Left_Angle_S [°] [-25|25]
  optional double target6_left_angle_s = 81;
  // Target6_Right_Angle_S [°] [-25|25]
  optional double target6_right_angle_s = 82;
  // Target6_Angular_Velocity_S [rad/s] [-0.21|0.21]
  optional double target6_angular_velocity_s = 83;
  // Vehicle_Object7_ID_S [] [0|15]
  optional VehicleObject7IDSType vehicle_object7_id_s = 84;
  // Target7_State_S [] [0|3]
  optional Target7StateSType target7_state_s = 85;
  // Target7_Type_S [] [0|15]
  optional Target7TypeSType target7_type_s = 86;
  // Target7_Abscissa_S [m] [-42|42]
  optional double target7_abscissa_s = 87;
  // Target7_Ordinate_S [m] [0|400]
  optional double target7_ordinate_s = 88;
  // LateralRelativeVelocityOfTar7_S [m/s] [-102.3|102.3]
  optional double lateral_relative_velocity_of_tar7_s = 89;
  // LongitudinalRelativeVelocityTar7 [m/s] [-102.3|102.3]
  optional double longitudinal_relative_velocity_tar7 = 90;
  // Target7_Altitude_S [m] [0|5]
  optional double target7_altitude_s = 91;
  // Target7_Width_S [m] [0|5]
  optional double target7_width_s = 92;
  // Target7_Distance_S [m] [0|400]
  optional double target7_distance_s = 93;
  // Target7_Left_Angle_S [°] [-25|25]
  optional double target7_left_angle_s = 94;
  // Target7_Right_Angle_S [°] [-25|25]
  optional double target7_right_angle_s = 95;
  // Target7_Angular_Velocity_S [rad/s] [-0.21|0.21]
  optional double target7_angular_velocity_s = 96;
  // Vehicle_Object8_ID_S [] [0|15]
  optional VehicleObject8IDSType vehicle_object8_id_s = 97;
  // Target8_State_S [] [0|3]
  optional Target8StateSType target8_state_s = 98;
  // Target8_Type_S [] [0|15]
  optional Target8TypeSType target8_type_s = 99;
  // Target8_Abscissa_S [m] [-42|42]
  optional double target8_abscissa_s = 100;
  // Target8_Ordinate_S [m] [0|400]
  optional double target8_ordinate_s = 101;
  // LateralRelativeVelocityOfTar8_S [m/s] [-102.3|102.3]
  optional double lateral_relative_velocity_of_tar8_s = 102;
  // LongitudinalRelativeVelocityTar8 [m/s] [-102.3|102.3]
  optional double longitudinal_relative_velocity_tar8 = 103;
  // Target8_Altitude_S [m] [0|5]
  optional double target8_altitude_s = 104;
  // Target8_Width_S [m] [0|5]
  optional double target8_width_s = 105;
  // Target8_Distance_S [m] [0|400]
  optional double target8_distance_s = 106;
  // Target8_Left_Angle_S [°] [-25|25]
  optional double target8_left_angle_s = 107;
  // Target8_Right_Angle_S [°] [-25|25]
  optional double target8_right_angle_s = 108;
  // Target8_Angular_Velocity_S [rad/s] [-0.21|0.21]
  optional double target8_angular_velocity_s = 109;
  // Alive_counter266_02_S [] [0|65535]
  optional int32 alive_counter266_02_s = 110;
  // Checksum266_02_S [] [0|65535]
  optional int32 checksum266_02_s = 111;
  // Vehicle_Object9_ID_S [] [0|15]
  optional VehicleObject9IDSType vehicle_object9_id_s = 112;
  // Target9_State_S [] [0|3]
  optional Target9StateSType target9_state_s = 113;
  // Target9_Type_S [] [0|15]
  optional Target9TypeSType target9_type_s = 114;
  // Target9_Abscissa_S [m] [-42|42]
  optional double target9_abscissa_s = 115;
  // Target9_Ordinate_S [m] [0|400]
  optional double target9_ordinate_s = 116;
  // LateralRelativeVelocityOfTar9_S [m/s] [-102.3|102.3]
  optional double lateral_relative_velocity_of_tar9_s = 117;
  // LongitudinalRelativeVelocityTar9 [m/s] [-102.3|102.3]
  optional double longitudinal_relative_velocity_tar9 = 118;
  // Target9_Altitude_S [m] [0|5]
  optional double target9_altitude_s = 119;
  // Target9_Width_S [m] [0|5]
  optional double target9_width_s = 120;
  // Target9_Distance_S [m] [0|400]
  optional double target9_distance_s = 121;
  // Target9_Left_Angle_S [°] [-25|25]
  optional double target9_left_angle_s = 122;
  // Target9_Right_Angle_S [°] [-25|25]
  optional double target9_right_angle_s = 123;
  // Target9_Angular_Velocity_S [rad/s] [-0.21|0.21]
  optional double target9_angular_velocity_s = 124;
  // Vehicle_Object10_ID_S [] [0|15]
  optional VehicleObject10IDSType vehicle_object10_id_s = 125;
  // Target10_State_S [] [0|3]
  optional Target10StateSType target10_state_s = 126;
  // Target10_Type_S [] [0|15]
  optional Target10TypeSType target10_type_s = 127;
  // Target10_Abscissa_S [m] [-42|42]
  optional double target10_abscissa_s = 128;
  // Target10_Ordinate_S [m] [0|400]
  optional double target10_ordinate_s = 129;
  // LateralRelativeVelocityOfTar10_S [m/s] [-102.3|102.3]
  optional double lateral_relative_velocity_of_tar10_s = 130;
  // LongitudinalRelativeVelocityT10 [m/s] [-102.3|102.3]
  optional double longitudinal_relative_velocity_t10 = 131;
  // Target10_Altitude_S [m] [0|5]
  optional double target10_altitude_s = 132;
  // Target10_Width_S [m] [0|5]
  optional double target10_width_s = 133;
  // Target10_Distance_S [m] [0|400]
  optional double target10_distance_s = 134;
  // Target10_Left_Angle_S [°] [-25|25]
  optional double target10_left_angle_s = 135;
  // Target10_Right_Angle_S [°] [-25|25]
  optional double target10_right_angle_s = 136;
  // Target10_Angular_Velocity_S [rad/s] [-0.21|0.21]
  optional double target10_angular_velocity_s = 137;
  // Vehicle_Object11_ID_S [] [0|15]
  optional VehicleObject11IDSType vehicle_object11_id_s = 138;
  // Target11_State_S [] [0|3]
  optional Target11StateSType target11_state_s = 139;
  // Target11_Type_S [] [0|15]
  optional Target11TypeSType target11_type_s = 140;
  // Target11_Abscissa_S [m] [-42|42]
  optional double target11_abscissa_s = 141;
  // Target11_Ordinate_S [m] [0|400]
  optional double target11_ordinate_s = 142;
  // LateralRelativeVelocityOfTar11_S [m/s] [-102.3|102.3]
  optional double lateral_relative_velocity_of_tar11_s = 143;
  // LongitudinalRelativeVelocityT11 [m/s] [-102.3|102.3]
  optional double longitudinal_relative_velocity_t11 = 144;
  // Target11_Altitude_S [m] [0|5]
  optional double target11_altitude_s = 145;
  // Target11_Width_S [m] [0|5]
  optional double target11_width_s = 146;
  // Target11_Distance_S [m] [0|400]
  optional double target11_distance_s = 147;
  // Target11_Left_Angle_S [°] [-25|25]
  optional double target11_left_angle_s = 148;
  // Target11_Right_Angle_S [°] [-25|25]
  optional double target11_right_angle_s = 149;
  // Target11_Angular_Velocity_S [rad/s] [-0.21|0.21]
  optional double target11_angular_velocity_s = 150;
  // Vehicle_Object12_ID_S [] [0|15]
  optional VehicleObject12IDSType vehicle_object12_id_s = 151;
  // Target12_State_S [] [0|3]
  optional Target12StateSType target12_state_s = 152;
  // Target12_Type_S [] [0|15]
  optional Target12TypeSType target12_type_s = 153;
  // Target12_Abscissa_S [m] [-42|42]
  optional double target12_abscissa_s = 154;
  // Target12_Ordinate_S [m] [0|400]
  optional double target12_ordinate_s = 155;
  // LateralRelativeVelocityOfTar12_S [m/s] [-102.3|102.3]
  optional double lateral_relative_velocity_of_tar12_s = 156;
  // LongitudinalRelativeVelocityT12 [m/s] [-102.3|102.3]
  optional double longitudinal_relative_velocity_t12 = 157;
  // Target12_Altitude_S [m] [0|5]
  optional double target12_altitude_s = 158;
  // Target12_Width_S [m] [0|5]
  optional double target12_width_s = 159;
  // Target12_Distance_S [m] [0|400]
  optional double target12_distance_s = 160;
  // Target12_Left_Angle_S [°] [-25|25]
  optional double target12_left_angle_s = 161;
  // Target12_Right_Angle_S [°] [-25|25]
  optional double target12_right_angle_s = 162;
  // Target12_Angular_Velocity_S [rad/s] [-0.21|0.21]
  optional double target12_angular_velocity_s = 163;
  // Alive_counter266_03_S [] [0|65535]
  optional int32 alive_counter266_03_s = 164;
  // Checksum266_03_S [] [0|65535]
  optional int32 checksum266_03_s = 165;
}

message PAS_0X267 {
// Control Message
  enum PASAlarmStatus267SType {
    PAS_ALARM_STATUS_267_S_INVALID = 0;
    PAS_ALARM_STATUS_267_S_TURNEDON = 1;
    PAS_ALARM_STATUS_267_S_TURNEDOFF = 2;
    PAS_ALARM_STATUS_267_S_RESERVED_3 = 3;
  }
  // PDC_DISTANCE_FL_267_S [cm] [0|60]
  optional double pdc_distance_fl_267_s = 1;
  // PDC_DISTANCE_FML_267_S [cm] [0|120]
  optional double pdc_distance_fml_267_s = 2;
  // PDC_DISTANCE_FMR_267_S [cm] [0|120]
  optional double pdc_distance_fmr_267_s = 3;
  // PDC_DISTANCE_FR_267_S [cm] [0|60]
  optional double pdc_distance_fr_267_s = 4;
  // PDC_DISTANCE_RL_267_S [cm] [0|60]
  optional double pdc_distance_rl_267_s = 5;
  // PDC_DISTANCE_RML_267_S [cm] [0|120]
  optional double pdc_distance_rml_267_s = 6;
  // PDC_DISTANCE_RMR_267_S [cm] [0|120]
  optional double pdc_distance_rmr_267_s = 7;
  // PDC_DISTANCE_RR_267_S [cm] [0|60]
  optional double pdc_distance_rr_267_s = 8;
  // PAS_Status_267_S [] [0|1]
  optional bool pas_status_267_s = 9;
  // PAS_Alarm_Status_267_S [] [0|3]
  optional PASAlarmStatus267SType pas_alarm_status_267_s = 10;
}

message VCU_0X272 {
// Report Message
  // Track_Mode_Status_S [] [0|1]
  optional bool track_mode_status_s = 1;
  // Counter_272_S [] [0|15]
  optional int32 counter_272_s = 2;
  // CheckSum_272_S [] [0|255]
  optional int32 check_sum_272_s = 3;
}

message ADS_0X291 {
// Control Message
  enum TargetWarning291s1SType {
    TARGET_WARNING_291S1_S_NORMAL = 0;
    TARGET_WARNING_291S1_S_REMAND = 1;
    TARGET_WARNING_291S1_S_LOWWARNING = 2;
    TARGET_WARNING_291S1_S_MEDIUMWARNING = 3;
    TARGET_WARNING_291S1_S_HIGHWARNING = 4;
    TARGET_WARNING_291S1_S_RESERVED_5 = 5;
    TARGET_WARNING_291S1_S_RESERVED_6 = 6;
    TARGET_WARNING_291S1_S_RESERVED_7 = 7;
  }
  enum TargetType291s1SType {
    TARGET_TYPE_291S1_S_INVALID = 0;
    TARGET_TYPE_291S1_S_FOURWHEELEDVEHICLE = 1;
    TARGET_TYPE_291S1_S_LARGEVEHICLE = 2;
    TARGET_TYPE_291S1_S_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TYPE_291S1_S_PEDESTRIAN = 4;
    TARGET_TYPE_291S1_S_SPECIALVEHICLE = 5;
    TARGET_TYPE_291S1_S_THREEWHEELEDVEHICLE = 6;
    TARGET_TYPE_291S1_S_CONEBARREL = 7;
    TARGET_TYPE_291S1_S_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TYPE_291S1_S_DOG = 9;
    TARGET_TYPE_291S1_S_BUS = 10;
    TARGET_TYPE_291S1_S_SUV = 11;
    TARGET_TYPE_291S1_S_ANTI_COLLISIONDRUM = 12;
    TARGET_TYPE_291S1_S_CONSTRUCTIONSIGN = 13;
    TARGET_TYPE_291S1_S_TRIPOD = 14;
    TARGET_TYPE_291S1_S_WATERHORSE = 15;
  }
  enum TargetWarning291s2SType {
    TARGET_WARNING_291S2_S_NORMAL = 0;
    TARGET_WARNING_291S2_S_REMAND = 1;
    TARGET_WARNING_291S2_S_LOWWARNING = 2;
    TARGET_WARNING_291S2_S_MEDIUMWARNING = 3;
    TARGET_WARNING_291S2_S_HIGHWARNING = 4;
    TARGET_WARNING_291S2_S_RESERVED_5 = 5;
    TARGET_WARNING_291S2_S_RESERVED_6 = 6;
    TARGET_WARNING_291S2_S_RESERVED_7 = 7;
  }
  enum TargetType291s2SType {
    TARGET_TYPE_291S2_S_INVALID = 0;
    TARGET_TYPE_291S2_S_FOURWHEELEDVEHICLE = 1;
    TARGET_TYPE_291S2_S_LARGEVEHICLE = 2;
    TARGET_TYPE_291S2_S_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TYPE_291S2_S_PEDESTRIAN = 4;
    TARGET_TYPE_291S2_S_SPECIALVEHICLE = 5;
    TARGET_TYPE_291S2_S_THREEWHEELEDVEHICLE = 6;
    TARGET_TYPE_291S2_S_CONEBARREL = 7;
    TARGET_TYPE_291S2_S_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TYPE_291S2_S_DOG = 9;
    TARGET_TYPE_291S2_S_BUS = 10;
    TARGET_TYPE_291S2_S_SUV = 11;
    TARGET_TYPE_291S2_S_ANTI_COLLISIONDRUM = 12;
    TARGET_TYPE_291S2_S_CONSTRUCTIONSIGN = 13;
    TARGET_TYPE_291S2_S_TRIPOD = 14;
    TARGET_TYPE_291S2_S_WATERHORSE = 15;
  }
  enum TargetWarning291s3SType {
    TARGET_WARNING_291S3_S_NORMAL = 0;
    TARGET_WARNING_291S3_S_REMAND = 1;
    TARGET_WARNING_291S3_S_LOWWARNING = 2;
    TARGET_WARNING_291S3_S_MEDIUMWARNING = 3;
    TARGET_WARNING_291S3_S_HIGHWARNING = 4;
    TARGET_WARNING_291S3_S_RESERVED_5 = 5;
    TARGET_WARNING_291S3_S_RESERVED_6 = 6;
    TARGET_WARNING_291S3_S_RESERVED_7 = 7;
  }
  enum TargetType291s3SType {
    TARGET_TYPE_291S3_S_INVALID = 0;
    TARGET_TYPE_291S3_S_FOURWHEELEDVEHICLE = 1;
    TARGET_TYPE_291S3_S_LARGEVEHICLE = 2;
    TARGET_TYPE_291S3_S_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TYPE_291S3_S_PEDESTRIAN = 4;
    TARGET_TYPE_291S3_S_SPECIALVEHICLE = 5;
    TARGET_TYPE_291S3_S_THREEWHEELEDVEHICLE = 6;
    TARGET_TYPE_291S3_S_CONEBARREL = 7;
    TARGET_TYPE_291S3_S_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TYPE_291S3_S_DOG = 9;
    TARGET_TYPE_291S3_S_BUS = 10;
    TARGET_TYPE_291S3_S_SUV = 11;
    TARGET_TYPE_291S3_S_ANTI_COLLISIONDRUM = 12;
    TARGET_TYPE_291S3_S_CONSTRUCTIONSIGN = 13;
    TARGET_TYPE_291S3_S_TRIPOD = 14;
    TARGET_TYPE_291S3_S_WATERHORSE = 15;
  }
  // Child_ID_291_S [] [0|7]
  optional int32 child_id_291_s = 1;
  // Lock_Target_Abscissa_291s1_S [m] [-12|12]
  optional double lock_target_abscissa_291s1_s = 2;
  // Lock_Target_Ordinate_291s1_S [m] [-150|10]
  optional double lock_target_ordinate_291s1_s = 3;
  // Goal_Length_Relative_Spd_291s1_S [km/h] [0|254]
  optional int32 goal_length_relative_spd_291s1_s = 4;
  // Goal_Late_Relative_Spd_291s1_S [km/h] [0|254]
  optional int32 goal_late_relative_spd_291s1_s = 5;
  // Target_Warning_291s1_S [] [0|7]
  optional TargetWarning291s1SType target_warning_291s1_s = 6;
  // Target_State_B1_291s1_S [] [0|1]
  optional bool target_state_b1_291s1_s = 7;
  // Target_Type_291s1_S [] [0|15]
  optional TargetType291s1SType target_type_291s1_s = 8;
  // Counter_291_01_S [] [0|15]
  optional int32 counter_291_01_s = 9;
  // Checksum_291_01_S [] [0|255]
  optional int32 checksum_291_01_s = 10;
  // Lock_Target_Abscissa_291s2_S [m] [-12|12]
  optional double lock_target_abscissa_291s2_s = 11;
  // Lock_Target_Ordinate_291s2_S [m] [-150|10]
  optional double lock_target_ordinate_291s2_s = 12;
  // Goal_Length_Relative_Spd_291s2_S [km/h] [0|254]
  optional int32 goal_length_relative_spd_291s2_s = 13;
  // Goal_Late_Relative_Spd_291s2_S [km/h] [0|254]
  optional int32 goal_late_relative_spd_291s2_s = 14;
  // Target_Warning_291s2_S [] [0|7]
  optional TargetWarning291s2SType target_warning_291s2_s = 15;
  // Target_State_B1_291s2_S [] [0|1]
  optional bool target_state_b1_291s2_s = 16;
  // Target_Type_291s2_S [] [0|15]
  optional TargetType291s2SType target_type_291s2_s = 17;
  // Counter_291_02_S [] [0|15]
  optional int32 counter_291_02_s = 18;
  // Checksum_291_02_S [] [0|255]
  optional int32 checksum_291_02_s = 19;
  // Lock_Target_Abscissa_291s3_S [m] [-12|12]
  optional double lock_target_abscissa_291s3_s = 20;
  // Lock_Target_Ordinate_291s3_S [m] [-150|10]
  optional double lock_target_ordinate_291s3_s = 21;
  // Goal_Length_Relative_Spd_291s3_S [km/h] [0|254]
  optional int32 goal_length_relative_spd_291s3_s = 22;
  // Goal_Late_Relative_Spd_291s3_S [km/h] [0|254]
  optional int32 goal_late_relative_spd_291s3_s = 23;
  // Target_Warning_291s3_S [] [0|7]
  optional TargetWarning291s3SType target_warning_291s3_s = 24;
  // Target_State_B1_291s3_S [] [0|1]
  optional bool target_state_b1_291s3_s = 25;
  // Target_Type_291s3_S [] [0|15]
  optional TargetType291s3SType target_type_291s3_s = 26;
  // Counter_291_03_S [] [0|15]
  optional int32 counter_291_03_s = 27;
  // Checksum_291_03_S [] [0|255]
  optional int32 checksum_291_03_s = 28;
}

message LEFT_BCM_0X294 {
// Report Message
  enum LeftFrontDoorStatus294SType {
    LEFT_FRONT_DOOR_STATUS_294_S_INVALID = 0;
    LEFT_FRONT_DOOR_STATUS_294_S_CLOSE = 1;
    LEFT_FRONT_DOOR_STATUS_294_S_OPEN = 2;
    LEFT_FRONT_DOOR_STATUS_294_S_RESERVED_3 = 3;
  }
  enum RightFrontDoorStatus294SType {
    RIGHT_FRONT_DOOR_STATUS_294_S_INVALID = 0;
    RIGHT_FRONT_DOOR_STATUS_294_S_CLOSE = 1;
    RIGHT_FRONT_DOOR_STATUS_294_S_OPEN = 2;
    RIGHT_FRONT_DOOR_STATUS_294_S_RESERVED_3 = 3;
  }
  enum LeftBackDoorStatus294SType {
    LEFT_BACK_DOOR_STATUS_294_S_INVALID = 0;
    LEFT_BACK_DOOR_STATUS_294_S_CLOSE = 1;
    LEFT_BACK_DOOR_STATUS_294_S_OPEN = 2;
    LEFT_BACK_DOOR_STATUS_294_S_RESERVED_3 = 3;
  }
  enum RightBackDoorStatus294SType {
    RIGHT_BACK_DOOR_STATUS_294_S_INVALID = 0;
    RIGHT_BACK_DOOR_STATUS_294_S_CLOSE = 1;
    RIGHT_BACK_DOOR_STATUS_294_S_OPEN = 2;
    RIGHT_BACK_DOOR_STATUS_294_S_RESERVED_3 = 3;
  }
  enum DriverBeltStatusSType {
    DRIVER_BELT_STATUS_S_INVALID = 0;
    DRIVER_BELT_STATUS_S_UNLOCK = 1;
    DRIVER_BELT_STATUS_S_BUCKLE = 2;
    DRIVER_BELT_STATUS_S_RESERVED_3 = 3;
  }
  enum BackDoorStatus294SType {
    BACK_DOOR_STATUS_294_S_INVALID = 0;
    BACK_DOOR_STATUS_294_S_CLOSE = 1;
    BACK_DOOR_STATUS_294_S_OPEN = 2;
    BACK_DOOR_STATUS_294_S_RESERVED_3 = 3;
  }
  enum FormerHatchStatus294SType {
    FORMER_HATCH_STATUS_294_S_INVALID = 0;
    FORMER_HATCH_STATUS_294_S_CLOSE = 1;
    FORMER_HATCH_STATUS_294_S_OPEN = 2;
    FORMER_HATCH_STATUS_294_S_RESERVED_3 = 3;
  }
  enum EmergencyAlarmStatusSType {
    EMERGENCY_ALARM_STATUS_S_INVALID = 0;
    EMERGENCY_ALARM_STATUS_S_CLOSE = 1;
    EMERGENCY_ALARM_STATUS_S_OPEN = 2;
    EMERGENCY_ALARM_STATUS_S_RESERVED_3 = 3;
  }
  // Left_Front_Door_Status_294_S [] [0|3]
  optional LeftFrontDoorStatus294SType left_front_door_status_294_s = 1;
  // Right_Front_Door_Status_294_S [] [0|3]
  optional RightFrontDoorStatus294SType right_front_door_status_294_s = 2;
  // Left_Back_Door_Status_294_S [] [0|3]
  optional LeftBackDoorStatus294SType left_back_door_status_294_s = 3;
  // Right_Back_Door_Status_294_S [] [0|3]
  optional RightBackDoorStatus294SType right_back_door_status_294_s = 4;
  // LeftF_Door_Stats_Valid_Bit_S [] [0|1]
  optional bool left_f_door_stats_valid_bit_s = 5;
  // RightF_Door_Sts_Valid_Bit_294_S [] [0|1]
  optional bool right_f_door_sts_valid_bit_294_s = 6;
  // LeftR_Door_Stats_Valid_Bit_S [] [0|1]
  optional bool left_r_door_stats_valid_bit_s = 7;
  // RightR_Door_Sts_Valid_Bit_294_S [] [0|1]
  optional bool right_r_door_sts_valid_bit_294_s = 8;
  // Driver_Belt_Stat_Effective_Bit_S [] [0|1]
  optional bool driver_belt_stat_effective_bit_s = 9;
  // Back_Door_Sts_Effectiv_Bit_294_S [] [0|1]
  optional bool back_door_sts_effectiv_bit_294_s = 10;
  // Frnt_Hatch_Stat_Effective_Bit_S [] [0|1]
  optional bool frnt_hatch_stat_effective_bit_s = 11;
  // Emergency_Alarm_Effective_Bit_S [] [0|1]
  optional bool emergency_alarm_effective_bit_s = 12;
  // Driver_Belt_Status_S [] [0|3]
  optional DriverBeltStatusSType driver_belt_status_s = 13;
  // Back_Door_Status_294_S [] [0|3]
  optional BackDoorStatus294SType back_door_status_294_s = 14;
  // Former_Hatch_Status_294_S [] [0|3]
  optional FormerHatchStatus294SType former_hatch_status_294_s = 15;
  // Emergency_Alarm_Status_S [] [0|3]
  optional EmergencyAlarmStatusSType emergency_alarm_status_s = 16;
  // counter_294_S [] [0|15]
  optional int32 counter_294_s = 17;
  // Checksum_294_S [] [0|255]
  optional int32 checksum_294_s = 18;
}

message ADS_0X295 {
// Control Message
  enum TargetWarning295s1SType {
    TARGET_WARNING_295S1_S_NORMAL = 0;
    TARGET_WARNING_295S1_S_REMAND = 1;
    TARGET_WARNING_295S1_S_LOWWARNING = 2;
    TARGET_WARNING_295S1_S_MEDIUMWARNING = 3;
    TARGET_WARNING_295S1_S_HIGHWARNING = 4;
    TARGET_WARNING_295S1_S_RESERVED_5 = 5;
    TARGET_WARNING_295S1_S_RESERVED_6 = 6;
    TARGET_WARNING_295S1_S_RESERVED_7 = 7;
  }
  enum TargetType295s1SType {
    TARGET_TYPE_295S1_S_INVALID = 0;
    TARGET_TYPE_295S1_S_FOURWHEELEDVEHICLE = 1;
    TARGET_TYPE_295S1_S_LARGEVEHICLE = 2;
    TARGET_TYPE_295S1_S_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TYPE_295S1_S_PEDESTRIAN = 4;
    TARGET_TYPE_295S1_S_SPECIALVEHICLE = 5;
    TARGET_TYPE_295S1_S_THREEWHEELEDVEHICLE = 6;
    TARGET_TYPE_295S1_S_CONEBARREL = 7;
    TARGET_TYPE_295S1_S_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TYPE_295S1_S_DOG = 9;
    TARGET_TYPE_295S1_S_BUS = 10;
    TARGET_TYPE_295S1_S_SUV = 11;
    TARGET_TYPE_295S1_S_ANTI_COLLISIONDRUM = 12;
    TARGET_TYPE_295S1_S_CONSTRUCTIONSIGN = 13;
    TARGET_TYPE_295S1_S_TRIPOD = 14;
    TARGET_TYPE_295S1_S_WATERHORSE = 15;
  }
  enum TargetWarning295s2SType {
    TARGET_WARNING_295S2_S_NORMAL = 0;
    TARGET_WARNING_295S2_S_REMAND = 1;
    TARGET_WARNING_295S2_S_LOWWARNING = 2;
    TARGET_WARNING_295S2_S_MEDIUMWARNING = 3;
    TARGET_WARNING_295S2_S_HIGHWARNING = 4;
    TARGET_WARNING_295S2_S_RESERVED_5 = 5;
    TARGET_WARNING_295S2_S_RESERVED_6 = 6;
    TARGET_WARNING_295S2_S_RESERVED_7 = 7;
  }
  enum TargetType295s2SType {
    TARGET_TYPE_295S2_S_INVALID = 0;
    TARGET_TYPE_295S2_S_FOURWHEELEDVEHICLE = 1;
    TARGET_TYPE_295S2_S_LARGEVEHICLE = 2;
    TARGET_TYPE_295S2_S_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TYPE_295S2_S_PEDESTRIAN = 4;
    TARGET_TYPE_295S2_S_SPECIALVEHICLE = 5;
    TARGET_TYPE_295S2_S_THREEWHEELEDVEHICLE = 6;
    TARGET_TYPE_295S2_S_CONEBARREL = 7;
    TARGET_TYPE_295S2_S_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TYPE_295S2_S_DOG = 9;
    TARGET_TYPE_295S2_S_BUS = 10;
    TARGET_TYPE_295S2_S_SUV = 11;
    TARGET_TYPE_295S2_S_ANTI_COLLISIONDRUM = 12;
    TARGET_TYPE_295S2_S_CONSTRUCTIONSIGN = 13;
    TARGET_TYPE_295S2_S_TRIPOD = 14;
    TARGET_TYPE_295S2_S_WATERHORSE = 15;
  }
  enum TargetWarning295s3SType {
    TARGET_WARNING_295S3_S_NORMAL = 0;
    TARGET_WARNING_295S3_S_REMAND = 1;
    TARGET_WARNING_295S3_S_LOWWARNING = 2;
    TARGET_WARNING_295S3_S_MEDIUMWARNING = 3;
    TARGET_WARNING_295S3_S_HIGHWARNING = 4;
    TARGET_WARNING_295S3_S_RESERVED_5 = 5;
    TARGET_WARNING_295S3_S_RESERVED_6 = 6;
    TARGET_WARNING_295S3_S_RESERVED_7 = 7;
  }
  enum TargetType295s3SType {
    TARGET_TYPE_295S3_S_INVALID = 0;
    TARGET_TYPE_295S3_S_FOURWHEELEDVEHICLE = 1;
    TARGET_TYPE_295S3_S_LARGEVEHICLE = 2;
    TARGET_TYPE_295S3_S_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TYPE_295S3_S_PEDESTRIAN = 4;
    TARGET_TYPE_295S3_S_SPECIALVEHICLE = 5;
    TARGET_TYPE_295S3_S_THREEWHEELEDVEHICLE = 6;
    TARGET_TYPE_295S3_S_CONEBARREL = 7;
    TARGET_TYPE_295S3_S_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TYPE_295S3_S_DOG = 9;
    TARGET_TYPE_295S3_S_BUS = 10;
    TARGET_TYPE_295S3_S_SUV = 11;
    TARGET_TYPE_295S3_S_ANTI_COLLISIONDRUM = 12;
    TARGET_TYPE_295S3_S_CONSTRUCTIONSIGN = 13;
    TARGET_TYPE_295S3_S_TRIPOD = 14;
    TARGET_TYPE_295S3_S_WATERHORSE = 15;
  }
  enum TargetWarning295s4SType {
    TARGET_WARNING_295S4_S_NORMAL = 0;
    TARGET_WARNING_295S4_S_REMAND = 1;
    TARGET_WARNING_295S4_S_LOWWARNING = 2;
    TARGET_WARNING_295S4_S_MEDIUMWARNING = 3;
    TARGET_WARNING_295S4_S_HIGHWARNING = 4;
    TARGET_WARNING_295S4_S_RESERVED_5 = 5;
    TARGET_WARNING_295S4_S_RESERVED_6 = 6;
    TARGET_WARNING_295S4_S_RESERVED_7 = 7;
  }
  enum TargetType295s4SType {
    TARGET_TYPE_295S4_S_INVALID = 0;
    TARGET_TYPE_295S4_S_FOURWHEELEDVEHICLE = 1;
    TARGET_TYPE_295S4_S_LARGEVEHICLE = 2;
    TARGET_TYPE_295S4_S_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TYPE_295S4_S_PEDESTRIAN = 4;
    TARGET_TYPE_295S4_S_SPECIALVEHICLE = 5;
    TARGET_TYPE_295S4_S_THREEWHEELEDVEHICLE = 6;
    TARGET_TYPE_295S4_S_CONEBARREL = 7;
    TARGET_TYPE_295S4_S_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TYPE_295S4_S_DOG = 9;
    TARGET_TYPE_295S4_S_BUS = 10;
    TARGET_TYPE_295S4_S_SUV = 11;
    TARGET_TYPE_295S4_S_ANTI_COLLISIONDRUM = 12;
    TARGET_TYPE_295S4_S_CONSTRUCTIONSIGN = 13;
    TARGET_TYPE_295S4_S_TRIPOD = 14;
    TARGET_TYPE_295S4_S_WATERHORSE = 15;
  }
  // Child_ID_295_S [] [0|7]
  optional int32 child_id_295_s = 1;
  // Lock_Target_Abscissa_295s1_S [m] [-12|12]
  optional double lock_target_abscissa_295s1_s = 2;
  // Target_Warning_295s1_S [] [0|7]
  optional TargetWarning295s1SType target_warning_295s1_s = 3;
  // Target_State_B1_295s1_S [] [0|1]
  optional bool target_state_b1_295s1_s = 4;
  // Target_Type_295s1_S [] [0|15]
  optional TargetType295s1SType target_type_295s1_s = 5;
  // Goal_Length_Relative_Spd_295s1_S [km/h] [0|254]
  optional int32 goal_length_relative_spd_295s1_s = 6;
  // Goal_Late_Relative_Spd_295s1_S [km/h] [0|254]
  optional int32 goal_late_relative_spd_295s1_s = 7;
  // Lock_Target_Ordinate_295s1_S [m] [-10|150]
  optional double lock_target_ordinate_295s1_s = 8;
  // Counter_295_01_S [] [0|15]
  optional int32 counter_295_01_s = 9;
  // CheckSum_295_01_S [] [0|255]
  optional int32 check_sum_295_01_s = 10;
  // Lock_Target_Abscissa_295s2_S [m] [-12|12]
  optional double lock_target_abscissa_295s2_s = 11;
  // Target_Warning_295s2_S [] [0|7]
  optional TargetWarning295s2SType target_warning_295s2_s = 12;
  // Target_State_B1_295s2_S [] [0|1]
  optional bool target_state_b1_295s2_s = 13;
  // Target_Type_295s2_S [] [0|15]
  optional TargetType295s2SType target_type_295s2_s = 14;
  // Goal_Length_Relative_Spd_295s2_S [km/h] [0|254]
  optional int32 goal_length_relative_spd_295s2_s = 15;
  // Goal_Late_Relative_Spd_295s2_S [km/h] [0|254]
  optional int32 goal_late_relative_spd_295s2_s = 16;
  // Lock_Target_Ordinate_295s2_S [m] [-10|150]
  optional double lock_target_ordinate_295s2_s = 17;
  // Counter_295s2_S [] [0|15]
  optional int32 counter_295s2_s = 18;
  // CheckSum_295s2_S [] [0|255]
  optional int32 check_sum_295s2_s = 19;
  // Lock_Target_Abscissa_295s3_S [m] [-12|12]
  optional double lock_target_abscissa_295s3_s = 20;
  // Target_Warning_295s3_S [] [0|7]
  optional TargetWarning295s3SType target_warning_295s3_s = 21;
  // Target_State_B1_295s3_S [] [0|1]
  optional bool target_state_b1_295s3_s = 22;
  // Target_Type_295s3_S [] [0|15]
  optional TargetType295s3SType target_type_295s3_s = 23;
  // Goal_Length_Relative_Spd_295s3_S [km/h] [0|254]
  optional int32 goal_length_relative_spd_295s3_s = 24;
  // Goal_Late_Relative_Spd_295s3_S [km/h] [0|254]
  optional int32 goal_late_relative_spd_295s3_s = 25;
  // Lock_Target_Ordinate_295s3_S [m] [-10|150]
  optional double lock_target_ordinate_295s3_s = 26;
  // Counter_295_03_S [] [0|15]
  optional int32 counter_295_03_s = 27;
  // CheckSum_295_03_S [] [0|255]
  optional int32 check_sum_295_03_s = 28;
  // Lock_Target_Abscissa_295s4_S [m] [-12|12]
  optional double lock_target_abscissa_295s4_s = 29;
  // Target_Warning_295s4_S [] [0|7]
  optional TargetWarning295s4SType target_warning_295s4_s = 30;
  // Target_State_B1_295s4_S [] [0|1]
  optional bool target_state_b1_295s4_s = 31;
  // Target_Type_295s4_S [] [0|15]
  optional TargetType295s4SType target_type_295s4_s = 32;
  // Goal_Length_Relative_Spd_295s4_S [km/h] [0|254]
  optional int32 goal_length_relative_spd_295s4_s = 33;
  // Goal_Late_Relative_Spd_295s4_S [km/h] [0|254]
  optional int32 goal_late_relative_spd_295s4_s = 34;
  // Lock_Target_Ordinate_295s4_S [m] [-10|150]
  optional double lock_target_ordinate_295s4_s = 35;
  // Counter_295s4_S [] [0|15]
  optional int32 counter_295s4_s = 36;
  // CheckSum_295s4_S [] [0|255]
  optional int32 check_sum_295s4_s = 37;
}

message ADS_0X297 {
// Control Message
  enum LeftLaneLineTypeSType {
    LEFT_LANE_LINE_TYPE_S_NODISPLAY = 0;
    LEFT_LANE_LINE_TYPE_S_SOLIDLINE = 1;
    LEFT_LANE_LINE_TYPE_S_DASHEDLINE = 2;
    LEFT_LANE_LINE_TYPE_S_ROADSIDE = 3;
  }
  enum RightLaneLineTypeSType {
    RIGHT_LANE_LINE_TYPE_S_NODISPLAY = 0;
    RIGHT_LANE_LINE_TYPE_S_SOLIDLINE = 1;
    RIGHT_LANE_LINE_TYPE_S_DASHEDLINE = 2;
    RIGHT_LANE_LINE_TYPE_S_ROADSIDE = 3;
  }
  enum LeftlaneD2typeType {
    LEFT_LANE_D2_TYPE_NODISPLAY = 0;
    LEFT_LANE_D2_TYPE_SOLIDLINE = 1;
    LEFT_LANE_D2_TYPE_DASHEDLINE = 2;
    LEFT_LANE_D2_TYPE_ROADSIDE = 3;
  }
  enum RightlaneD2typeType {
    RIGHT_LANE_D2_TYPE_NODISPLAY = 0;
    RIGHT_LANE_D2_TYPE_SOLIDLINE = 1;
    RIGHT_LANE_D2_TYPE_DASHEDLINE = 2;
    RIGHT_LANE_D2_TYPE_ROADSIDE = 3;
  }
  // Child_ID_297_S [] [0|7]
  optional int32 child_id_297_s = 1;
  // Left_Lane_Line_Type_S [] [0|3]
  optional LeftLaneLineTypeSType left_lane_line_type_s = 2;
  // Left_Lane_Line_Y_Distance_S [] [-8|7.99609375]
  optional double left_lane_line_y_distance_s = 3;
  // Left_Lane_Line_Curvature_S [] [-0.030705|0.030705]
  optional double left_lane_line_curvature_s = 4;
  // Counter_297_01_S [] [0|15]
  optional int32 counter_297_01_s = 5;
  // CheckSum_297_01_S [] [0|255]
  optional int32 check_sum_297_01_s = 6;
  // Right_Lane_Line_Type_S [] [0|3]
  optional RightLaneLineTypeSType right_lane_line_type_s = 7;
  // Right_Lane_Line_Y_Distance_S [] [-8|7.99609375]
  optional double right_lane_line_y_distance_s = 8;
  // Right_Lane_Line_Curvature_S [] [-0.030705|0.030705]
  optional double right_lane_line_curvature_s = 9;
  // Counter_297_02_S [] [0|15]
  optional int32 counter_297_02_s = 10;
  // CheckSum_297s2_S [] [0|255]
  optional int32 check_sum_297s2_s = 11;
  // Left_lane_D2_type [] [0|3]
  optional LeftlaneD2typeType left_lane_d2_type = 12;
  // Left_lane_D2 [] [-8|7.99609375]
  optional double left_lane_d2 = 13;
  // Left_Lane2_Radius [] [-0.030705|0.030705]
  optional double left_lane2_radius = 14;
  // Counter_297_03_S [] [0|15]
  optional int32 counter_297_03_s = 15;
  // CheckSum_297s3_S [] [0|255]
  optional int32 check_sum_297s3_s = 16;
  // Right_lane_D2_type [] [0|3]
  optional RightlaneD2typeType right_lane_d2_type = 17;
  // Right_lane_D2 [] [-8|7.99609375]
  optional double right_lane_d2 = 18;
  // Right_Lane2_Radius [] [-0.030705|0.030705]
  optional double right_lane2_radius = 19;
  // Counter_297_3S [] [0|15]
  optional int32 counter_297_3_s = 20;
  // CheckSum_297_4S [] [0|255]
  optional int32 check_sum_297_4_s = 21;
}

message ADS_0X29C {
// Control Message
  enum ILCASysStsSType {
    ILCASYSSTS_S_OFF = 0;
    ILCASYSSTS_S_STANDBY = 1;
    ILCASYSSTS_S_REQUEST = 2;
    ILCASYSSTS_S_ACT = 3;
    ILCASYSSTS_S_FINISHED = 4;
    ILCASYSSTS_S_TOR_TAKEOVERREQUEST = 5;
    ILCASYSSTS_S_FUALT = 6;
    ILCASYSSTS_S_RESERVED_7 = 7;
    ILCASYSSTS_S_RESERVED_8 = 8;
    ILCASYSSTS_S_RESERVED_9 = 9;
    ILCASYSSTS_S_RESERVED_10 = 10;
    ILCASYSSTS_S_RESERVED_11 = 11;
    ILCASYSSTS_S_RESERVED_12 = 12;
    ILCASYSSTS_S_RESERVED_13 = 13;
    ILCASYSSTS_S_RESERVED_14 = 14;
    ILCASYSSTS_S_RESERVED_15 = 15;
  }
  enum ACCModeDisplay129CSType {
    ACC_MODE_DISPLAY1_29C_S_OFFMODE = 0;
    ACC_MODE_DISPLAY1_29C_S_PASSIVEMODE = 1;
    ACC_MODE_DISPLAY1_29C_S_STAND_BYMODE = 2;
    ACC_MODE_DISPLAY1_29C_S_ACT_CTRLMODE = 3;
    ACC_MODE_DISPLAY1_29C_S_BRAKE_ONLYMODE = 4;
    ACC_MODE_DISPLAY1_29C_S_OVERRIDE = 5;
    ACC_MODE_DISPLAY1_29C_S_STAND_STILLACTMODE = 6;
    ACC_MODE_DISPLAY1_29C_S_STAND_STILLWAITMODE = 7;
    ACC_MODE_DISPLAY1_29C_S_TEMPORARYFAILUREMODE = 8;
    ACC_MODE_DISPLAY1_29C_S_PERMANENTFAILURE = 9;
    ACC_MODE_DISPLAY1_29C_S_RESERVED_10 = 10;
    ACC_MODE_DISPLAY1_29C_S_RESERVED_11 = 11;
    ACC_MODE_DISPLAY1_29C_S_RESERVED_12 = 12;
    ACC_MODE_DISPLAY1_29C_S_RESERVED_13 = 13;
    ACC_MODE_DISPLAY1_29C_S_RESERVED_14 = 14;
    ACC_MODE_DISPLAY1_29C_S_RESERVED_15 = 15;
  }
  enum ILCALaneStsSType {
    ILCALANESTS_S_NOREQUEST = 0;
    ILCALANESTS_S_LANECGINHIBIT = 1;
    ILCALANESTS_S_LANECGINPROGRESS_L = 2;
    ILCALANESTS_S_LANECGINPROGRESS_R = 3;
    ILCALANESTS_S_LANECGSUCCESS = 4;
    ILCALANESTS_S_LANECGFAILED_L = 5;
    ILCALANESTS_S_LANECGFAILED_R = 6;
    ILCALANESTS_S_RETURNTOEGOLANE = 7;
    ILCALANESTS_S_LANECGINHIBIT_L = 8;
    ILCALANESTS_S_LANECGINHIBIT_R = 9;
    ILCALANESTS_S_LANECG_RECD_L = 10;
    ILCALANESTS_S_LANECG_RECD_R = 11;
    ILCALANESTS_S_LANECG_CONF_L = 12;
    ILCALANESTS_S_LANECG_CONF_R = 13;
    ILCALANESTS_S_LANECG_BREAK = 14;
    ILCALANESTS_S_LANECGCPLTURNOFFTURNSIGNAL = 15;
  }
  enum DNPSensorstatusType {
    DNP_SENSOR_STATUS_NORMAL = 0;
    DNP_SENSOR_STATUS_FRONTCAMERAFAULT = 1;
    DNP_SENSOR_STATUS_SIDEFORWARDCAMERAFAULT = 2;
    DNP_SENSOR_STATUS_SIDEREARWARDCAMERAFAULT = 3;
    DNP_SENSOR_STATUS_FISHEYECAMERASFAULT = 4;
    DNP_SENSOR_STATUS_FRONTCAMERACOVERED = 5;
    DNP_SENSOR_STATUS_SIDECAMERACOVERED = 6;
    DNP_SENSOR_STATUS_FISHEYECAMERACOVERED = 7;
  }
  enum ACCTextInfoForDriver29CSType {
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_NODISPLAY = 0;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_ACCCANNOTBEACTIVATED = 1;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_ACCCANCELED = 2;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_ACCISACTIVATED = 3;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_OVERTAKINGACCELERATION = 4;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_DANGERPLEASEBRAKE = 5;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_PAYATTENTIONTOTHESURROUNDING = 6;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_ACCISOPEN = 7;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_ACCISCLOSED = 8;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_PLEASECHECKADAPTIVECRUISESYSTEM = 9;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_PLEASECONFIRMIFSEATBELTISFASTEN = 10;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_PLEASECONFIRMIFTHEDOORISCLOSED = 11;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_PLEASECONFIRMIFTHEGEARISINDGEAR = 12;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_PLEASECONFIRMIFEPBISRELEASED = 13;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_PLEASECONFIRMIFESPISENABLED = 14;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_ACC_STOPGO = 15;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_UNABLETOACTIVINCURDRIVEMODE = 16;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_ACTIVEADASFLICKEITHERPICKTWICE = 17;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_SLIGHTAVOIDWILLRESUMECENTERLATE = 18;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_ADASFORBIDDENDURINGTHISDRIVCYCL = 19;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_PLEASERELEASINGOFBRAKE = 20;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_LCCCANNOTBEACTIVATED = 21;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_ASSISTEDISABOUTTOEXIT = 22;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_ACCPASSIVEEXIT = 23;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_SETSPEEDTOLIMIT = 24;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_LCCACTIVETOACC = 25;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_LCCPASSIVETOACC = 26;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_ILCASPEEDNOTMET = 27;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_PLEASEACTIVEPILOTFIRST = 28;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_LKCCANNOTBEACTIVATED = 29;
    ACC_TEXT_INFO_FOR_DRIVER_29C_S_ADSCANNOTBEACTIVATED = 30;
  }
  enum ADSTurnLightRequestType {
    ADS_TURNLIGHT_REQUEST_NOREQUEST = 0;
    ADS_TURNLIGHT_REQUEST_TURNLREQUEST = 1;
    ADS_TURNLIGHT_REQUEST_TURNRREQUEST = 2;
    ADS_TURNLIGHT_REQUEST_DANGERWARNIGNALREQUEST = 3;
    ADS_TURNLIGHT_REQUEST_RESERVED_4 = 4;
    ADS_TURNLIGHT_REQUEST_RESERVED_5 = 5;
    ADS_TURNLIGHT_REQUEST_RESERVED_6 = 6;
    ADS_TURNLIGHT_REQUEST_RESERVED_7 = 7;
  }
  enum DNPStatsSType {
    DNP_STATS_S_OFF = 0;
    DNP_STATS_S_PASSIVE = 1;
    DNP_STATS_S_ICC_READY = 2;
    DNP_STATS_S_DNP_READY = 3;
    DNP_STATS_S_ICC_ACTIVE2 = 4;
    DNP_STATS_S_ILCA_ACTIVE = 5;
    DNP_STATS_S_DNP_ACTIVE = 6;
    DNP_STATS_S_FAULT = 7;
    DNP_STATS_S_MRC = 8;
    DNP_STATS_S_FORBIDDEN = 9;
    DNP_STATS_S_ICC_ACTIVE1 = 10;
    DNP_STATS_S_DNP_ACTIVE1 = 11;
  }
  enum ADSSOSRequestType {
    ADS_SOS_REQUEST_NOREQUEST = 0;
    ADS_SOS_REQUEST_REQUEST = 1;
    ADS_SOS_REQUEST_RESERVED_2 = 2;
  }
  enum ADSAutoLampRequestType {
    ADS_AUTOLAMP_REQUEST_NOREQUEST = 0;
    ADS_AUTOLAMP_REQUEST_CLOSE = 1;
    ADS_AUTOLAMP_REQUEST_OPEN = 2;
    ADS_AUTOLAMP_REQUEST_RESERVED_3 = 3;
  }
  enum ADSOvertakingLampRequestType {
    ADS_OVERTAKINGLAMP_REQUEST_NOREQUEST = 0;
    ADS_OVERTAKINGLAMP_REQUEST_CLOSE = 1;
    ADS_OVERTAKINGLAMP_REQUEST_OPEN = 2;
    ADS_OVERTAKINGLAMP_REQUEST_RESERVED_3 = 3;
  }
  enum CSWStatsSType {
    CSW_STATS_S_OFF = 0;
    CSW_STATS_S_PASSIVE = 1;
    CSW_STATS_S_STANDBY = 2;
    CSW_STATS_S_ACT = 3;
    CSW_STATS_S_FAULT = 4;
    CSW_STATS_S_RESERVED_5 = 5;
    CSW_STATS_S_RESERVED_6 = 6;
    CSW_STATS_S_RESERVED_7 = 7;
  }
  enum DNPTakeOverReqSType {
    DNP_TAKE_OVER_REQ_S_INACT = 0;
    DNP_TAKE_OVER_REQ_S_WARNING_LEVEL1 = 1;
    DNP_TAKE_OVER_REQ_S_WARNING_LEVEL2 = 2;
    DNP_TAKE_OVER_REQ_S_WARNING_LEVEL3 = 3;
    DNP_TAKE_OVER_REQ_S_SAFESTOP = 4;
    DNP_TAKE_OVER_REQ_S_EXIT = 5;
    DNP_TAKE_OVER_REQ_S_RESERVED_6 = 6;
    DNP_TAKE_OVER_REQ_S_RESERVED_7 = 7;
  }
  enum DNPwarningtextinfoType {
    DNP_WARNING_TEXT_INFO_ND = 0;
    DNP_WARNING_TEXT_INFO_OA = 1;
    DNP_WARNING_TEXT_INFO_PHSWL = 2;
    DNP_WARNING_TEXT_INFO_PSDITC = 3;
    DNP_WARNING_TEXT_INFO_DATQ100 = 4;
    DNP_WARNING_TEXT_INFO_LLLOBSDNPICCQ = 5;
    DNP_WARNING_TEXT_INFO_SLCLP = 6;
    DNP_WARNING_TEXT_INFO_ZCA = 7;
    DNP_WARNING_TEXT_INFO_RPSD = 8;
    DNP_WARNING_TEXT_INFO_EMRM = 9;
    DNP_WARNING_TEXT_INFO_CLTETR = 10;
    DNP_WARNING_TEXT_INFO_DATQ500 = 11;
    DNP_WARNING_TEXT_INFO_PATYS = 12;
    DNP_WARNING_TEXT_INFO_CC = 13;
    DNP_WARNING_TEXT_INFO_DATQ1000 = 14;
    DNP_WARNING_TEXT_INFO_ITRHSWL = 15;
    DNP_WARNING_TEXT_INFO_AO = 16;
    DNP_WARNING_TEXT_INFO_MRATE = 17;
    DNP_WARNING_TEXT_INFO_PPATS = 18;
    DNP_WARNING_TEXT_INFO_DMSINADCBA = 19;
    DNP_WARNING_TEXT_INFO_DCANNBA = 20;
    DNP_WARNING_TEXT_INFO_RPD = 21;
    DNP_WARNING_TEXT_INFO_SFDNPFD = 22;
    DNP_WARNING_TEXT_INFO_SFCCFD = 23;
    DNP_WARNING_TEXT_INFO_IATLT = 24;
    DNP_WARNING_TEXT_INFO_IATR = 25;
    DNP_WARNING_TEXT_INFO_ISATAR = 26;
    DNP_WARNING_TEXT_INFO_OTADASL = 27;
    DNP_WARNING_TEXT_INFO_LANECHANGLIMITED = 28;
    DNP_WARNING_TEXT_INFO_PLEASEATTENTIONTRAFFICLIGHT = 29;
    DNP_WARNING_TEXT_INFO_PLEASEATTENTIONNAVIGATIONROUTE = 30;
    DNP_WARNING_TEXT_INFO_RESERVED_31 = 31;
  }
  enum HNPStsResponseSType {
    HNP_STS_RESPONSE_S_OFF = 0;
    HNP_STS_RESPONSE_S_ON = 1;
    HNP_STS_RESPONSE_S_FAULT = 2;
    HNP_STS_RESPONSE_S_RESERVED_3 = 3;
  }
  enum UNPStsResponseSType {
    UNP_STS_RESPONSE_S_OFF = 0;
    UNP_STS_RESPONSE_S_ON = 1;
    UNP_STS_RESPONSE_S_FAULT = 2;
    UNP_STS_RESPONSE_S_RESERVED_3 = 3;
  }
  // ILCASysSts_S [] [0|15]
  optional ILCASysStsSType ilca_sys_sts_s = 1;
  // ACC_Mode_Display1_29C_S [] [0|15]
  optional ACCModeDisplay129CSType acc_mode_display1_29_c_s = 2;
  // ILCALaneSts_S [] [0|15]
  optional ILCALaneStsSType ilca_lane_sts_s = 3;
  // DNP_Sensor_status [] [0|7]
  optional DNPSensorstatusType dnp_sensor_status = 4;
  // ISLC_confirm_sts [] [0|1]
  optional bool islc_confirm_sts = 5;
  // ACC_Text_Info_For_Driver_29C_S [] [0|31]
  optional ACCTextInfoForDriver29CSType acc_text_info_for_driver_29_c_s = 6;
  // ADS_TurnLight_Request [] [0|7]
  optional ADSTurnLightRequestType ads_turn_light_request = 7;
  // DNP_Stats_S [] [0|15]
  optional DNPStatsSType dnp_stats_s = 8;
  // ADS_SOS_Request [] [0|3]
  optional ADSSOSRequestType ads_sos_request = 9;
  // ADS_AutoLamp_Request [] [0|3]
  optional ADSAutoLampRequestType ads_auto_lamp_request = 10;
  // ACC_State_29C_S [] [0|1]
  optional bool acc_state_29_c_s = 11;
  // Take_Over_Req_29C_S [] [0|1]
  optional bool take_over_req_29_c_s = 12;
  // ADS_OvertakingLamp_Request [] [0|3]
  optional ADSOvertakingLampRequestType ads_overtaking_lamp_request = 13;
  // CSW_Stats_S [] [0|7]
  optional CSWStatsSType csw_stats_s = 14;
  // DNP_Take_Over_Req_S [] [0|7]
  optional DNPTakeOverReqSType dnp_take_over_req_s = 15;
  // DNP_warning_text_info [] [0|31]
  optional DNPwarningtextinfoType dnp_warning_text_info = 16;
  // HNP_Sts_Response_S [] [0|3]
  optional HNPStsResponseSType hnp_sts_response_s = 17;
  // UNP_Sts_Response_S [] [0|3]
  optional UNPStsResponseSType unp_sts_response_s = 18;
  // Counter_29C_S [] [0|15]
  optional int32 counter_29_c_s = 19;
  // CheckSum_29C_S [] [0|255]
  optional int32 check_sum_29_c_s = 20;
}

message ADS_0X2AC {
// Control Message
  enum TargetWarning2ACs1SType {
    TARGET_WARNING_2ACS1_S_NORMAL = 0;
    TARGET_WARNING_2ACS1_S_REMAND = 1;
    TARGET_WARNING_2ACS1_S_LOWWARNING = 2;
    TARGET_WARNING_2ACS1_S_MEDIUMWARNING = 3;
    TARGET_WARNING_2ACS1_S_HIGHWARNING = 4;
    TARGET_WARNING_2ACS1_S_RESERVED_5 = 5;
    TARGET_WARNING_2ACS1_S_RESERVED_6 = 6;
    TARGET_WARNING_2ACS1_S_RESERVED_7 = 7;
  }
  enum TargetType2ACs1SType {
    TARGET_TYPE_2ACS1_S_INVALID = 0;
    TARGET_TYPE_2ACS1_S_FOURWHEELEDVEHICLE = 1;
    TARGET_TYPE_2ACS1_S_LARGEVEHICLE = 2;
    TARGET_TYPE_2ACS1_S_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TYPE_2ACS1_S_PEDESTRIAN = 4;
    TARGET_TYPE_2ACS1_S_SPECIALVEHICLE = 5;
    TARGET_TYPE_2ACS1_S_THREEWHEELEDVEHICLE = 6;
    TARGET_TYPE_2ACS1_S_CONEBARREL = 7;
    TARGET_TYPE_2ACS1_S_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TYPE_2ACS1_S_DOG = 9;
    TARGET_TYPE_2ACS1_S_BUS = 10;
    TARGET_TYPE_2ACS1_S_SUV = 11;
    TARGET_TYPE_2ACS1_S_ANTI_COLLISIONDRUM = 12;
    TARGET_TYPE_2ACS1_S_CONSTRUCTIONSIGN = 13;
    TARGET_TYPE_2ACS1_S_TRIPOD = 14;
    TARGET_TYPE_2ACS1_S_WATERHORSE = 15;
  }
  enum TargetWarning2ACs2SType {
    TARGET_WARNING_2ACS2_S_NORMAL = 0;
    TARGET_WARNING_2ACS2_S_REMAND = 1;
    TARGET_WARNING_2ACS2_S_LOWWARNING = 2;
    TARGET_WARNING_2ACS2_S_MEDIUMWARNING = 3;
    TARGET_WARNING_2ACS2_S_HIGHWARNING = 4;
    TARGET_WARNING_2ACS2_S_RESERVED_5 = 5;
    TARGET_WARNING_2ACS2_S_RESERVED_6 = 6;
    TARGET_WARNING_2ACS2_S_RESERVED_7 = 7;
  }
  enum TargetType2ACs2SType {
    TARGET_TYPE_2ACS2_S_INVALID = 0;
    TARGET_TYPE_2ACS2_S_FOURWHEELEDVEHICLE = 1;
    TARGET_TYPE_2ACS2_S_LARGEVEHICLE = 2;
    TARGET_TYPE_2ACS2_S_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TYPE_2ACS2_S_PEDESTRIAN = 4;
    TARGET_TYPE_2ACS2_S_SPECIALVEHICLE = 5;
    TARGET_TYPE_2ACS2_S_THREEWHEELEDVEHICLE = 6;
    TARGET_TYPE_2ACS2_S_CONEBARREL = 7;
    TARGET_TYPE_2ACS2_S_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TYPE_2ACS2_S_DOG = 9;
    TARGET_TYPE_2ACS2_S_BUS = 10;
    TARGET_TYPE_2ACS2_S_SUV = 11;
    TARGET_TYPE_2ACS2_S_ANTI_COLLISIONDRUM = 12;
    TARGET_TYPE_2ACS2_S_CONSTRUCTIONSIGN = 13;
    TARGET_TYPE_2ACS2_S_TRIPOD = 14;
    TARGET_TYPE_2ACS2_S_WATERHORSE = 15;
  }
  enum TargetWarning2ACs3SType {
    TARGET_WARNING_2ACS3_S_NORMAL = 0;
    TARGET_WARNING_2ACS3_S_REMAND = 1;
    TARGET_WARNING_2ACS3_S_LOWWARNING = 2;
    TARGET_WARNING_2ACS3_S_MEDIUMWARNING = 3;
    TARGET_WARNING_2ACS3_S_HIGHWARNING = 4;
    TARGET_WARNING_2ACS3_S_RESERVED_5 = 5;
    TARGET_WARNING_2ACS3_S_RESERVED_6 = 6;
    TARGET_WARNING_2ACS3_S_RESERVED_7 = 7;
  }
  enum TargetType2ACs3SType {
    TARGET_TYPE_2ACS3_S_INVALID = 0;
    TARGET_TYPE_2ACS3_S_FOURWHEELEDVEHICLE = 1;
    TARGET_TYPE_2ACS3_S_LARGEVEHICLE = 2;
    TARGET_TYPE_2ACS3_S_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TYPE_2ACS3_S_PEDESTRIAN = 4;
    TARGET_TYPE_2ACS3_S_SPECIALVEHICLE = 5;
    TARGET_TYPE_2ACS3_S_THREEWHEELEDVEHICLE = 6;
    TARGET_TYPE_2ACS3_S_CONEBARREL = 7;
    TARGET_TYPE_2ACS3_S_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TYPE_2ACS3_S_DOG = 9;
    TARGET_TYPE_2ACS3_S_BUS = 10;
    TARGET_TYPE_2ACS3_S_SUV = 11;
    TARGET_TYPE_2ACS3_S_ANTI_COLLISIONDRUM = 12;
    TARGET_TYPE_2ACS3_S_CONSTRUCTIONSIGN = 13;
    TARGET_TYPE_2ACS3_S_TRIPOD = 14;
    TARGET_TYPE_2ACS3_S_WATERHORSE = 15;
  }
  enum TargetWarning2ACs4SType {
    TARGET_WARNING_2ACS4_S_NORMAL = 0;
    TARGET_WARNING_2ACS4_S_REMAND = 1;
    TARGET_WARNING_2ACS4_S_LOWWARNING = 2;
    TARGET_WARNING_2ACS4_S_MEDIUMWARNING = 3;
    TARGET_WARNING_2ACS4_S_HIGHWARNING = 4;
    TARGET_WARNING_2ACS4_S_RESERVED_5 = 5;
    TARGET_WARNING_2ACS4_S_RESERVED_6 = 6;
    TARGET_WARNING_2ACS4_S_RESERVED_7 = 7;
  }
  enum TargetType2ACs4SType {
    TARGET_TYPE_2ACS4_S_INVALID = 0;
    TARGET_TYPE_2ACS4_S_FOURWHEELEDVEHICLE = 1;
    TARGET_TYPE_2ACS4_S_LARGEVEHICLE = 2;
    TARGET_TYPE_2ACS4_S_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TYPE_2ACS4_S_PEDESTRIAN = 4;
    TARGET_TYPE_2ACS4_S_SPECIALVEHICLE = 5;
    TARGET_TYPE_2ACS4_S_THREEWHEELEDVEHICLE = 6;
    TARGET_TYPE_2ACS4_S_CONEBARREL = 7;
    TARGET_TYPE_2ACS4_S_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TYPE_2ACS4_S_DOG = 9;
    TARGET_TYPE_2ACS4_S_BUS = 10;
    TARGET_TYPE_2ACS4_S_SUV = 11;
    TARGET_TYPE_2ACS4_S_ANTI_COLLISIONDRUM = 12;
    TARGET_TYPE_2ACS4_S_CONSTRUCTIONSIGN = 13;
    TARGET_TYPE_2ACS4_S_TRIPOD = 14;
    TARGET_TYPE_2ACS4_S_WATERHORSE = 15;
  }
  // Child_ID_2AC_S1 [] [0E-008|7.00000000]
  optional double child_id_2_ac_s = 1;
  // Lock_Target_Abscissa_2ACs1_S [m] [-12.00000000|12.00000000]
  optional double lock_target_abscissa_2_a_cs1_s = 2;
  // Target_Warning_2ACs1_S [] [0E-008|7.00000000]
  optional TargetWarning2ACs1SType target_warning_2_a_cs1_s = 3;
  // Target_State_B1_2ACs1_S [] [0E-008|1.00000000]
  optional bool target_state_b1_2_a_cs1_s = 4;
  // Target_Type_2ACs1_S [] [0E-008|15.00000000]
  optional TargetType2ACs1SType target_type_2_a_cs1_s = 5;
  // Goal_Length_Relative_Spd_2ACs1_S [km/h] [0E-008|254.00000000]
  optional double goal_length_relative_spd_2_a_cs1_s = 6;
  // Goal_Late_Relative_Spd_2ACs1_S [km/h] [0E-008|254.00000000]
  optional double goal_late_relative_spd_2_a_cs1_s = 7;
  // Lock_Target_Ordinate_2ACs1_S [m] [-10.00000000|150.00000000]
  optional double lock_target_ordinate_2_a_cs1_s = 8;
  // Counter_2AC_01_S [] [0E-008|15.00000000]
  optional int32 counter_2_ac_01_s = 9;
  // CheckSum_2ACs1_S [] [0E-008|255.00000000]
  optional int32 check_sum_2_a_cs1_s = 10;
  // Lock_Target_Abscissa_2ACs2_S [potm] [-12.00000000|12.00000000]
  optional double lock_target_abscissa_2_a_cs2_s = 11;
  // Target_Warning_2ACs2_S [] [0E-008|7.00000000]
  optional TargetWarning2ACs2SType target_warning_2_a_cs2_s = 12;
  // Target_State_B1_2ACs2_S [] [0E-008|1.00000000]
  optional bool target_state_b1_2_a_cs2_s = 13;
  // Target_Type_2ACs2_S [] [0E-008|15.00000000]
  optional TargetType2ACs2SType target_type_2_a_cs2_s = 14;
  // Goal_Length_Relative_Spd_2ACs2_S [km/h] [0E-008|254.00000000]
  optional double goal_length_relative_spd_2_a_cs2_s = 15;
  // Goal_Late_Relative_Spd_2ACs2_S [km/h] [0E-008|254.00000000]
  optional double goal_late_relative_spd_2_a_cs2_s = 16;
  // Lock_Target_Ordinate_2ACs2_S [m] [-10.00000000|150.00000000]
  optional double lock_target_ordinate_2_a_cs2_s = 17;
  // Counter_2AC_02_S [] [0E-008|15.00000000]
  optional int32 counter_2_ac_02_s = 18;
  // CheckSum_2ACs2_S [] [0E-008|255.00000000]
  optional int32 check_sum_2_a_cs2_s = 19;
  // Lock_Target_Abscissa_2ACs3_S [m] [-12.00000000|12.00000000]
  optional double lock_target_abscissa_2_a_cs3_s = 20;
  // Target_Warning_2ACs3_S [] [0E-008|7.00000000]
  optional TargetWarning2ACs3SType target_warning_2_a_cs3_s = 21;
  // Target_State_B1_2ACs3_S [] [0E-008|1.00000000]
  optional bool target_state_b1_2_a_cs3_s = 22;
  // Target_Type_2ACs3_S [] [0E-008|15.00000000]
  optional TargetType2ACs3SType target_type_2_a_cs3_s = 23;
  // Goal_Length_Relative_Spd_2ACs3_S [km/h] [0E-008|254.00000000]
  optional double goal_length_relative_spd_2_a_cs3_s = 24;
  // Goal_Late_Relative_Spd_2ACs3_S [km/h] [0E-008|254.00000000]
  optional double goal_late_relative_spd_2_a_cs3_s = 25;
  // Lock_Target_Ordinate_2ACs3_S [m] [-10.00000000|150.00000000]
  optional double lock_target_ordinate_2_a_cs3_s = 26;
  // Counter_2ACs3_S [] [0E-008|15.00000000]
  optional int32 counter_2_a_cs3_s = 27;
  // CheckSum_2ACs3_S [] [0E-008|255.00000000]
  optional int32 check_sum_2_a_cs3_s = 28;
  // Lock_Target_Abscissa_2ACs4_S [potm] [-12.00000000|12.00000000]
  optional double lock_target_abscissa_2_a_cs4_s = 29;
  // Target_Warning_2ACs4_S [] [0E-008|7.00000000]
  optional TargetWarning2ACs4SType target_warning_2_a_cs4_s = 30;
  // Target_State_B1_2ACs4_S [] [0E-008|1.00000000]
  optional bool target_state_b1_2_a_cs4_s = 31;
  // Target_Type_2ACs4_S [] [0E-008|15.00000000]
  optional TargetType2ACs4SType target_type_2_a_cs4_s = 32;
  // Goal_Length_Relative_Spd_2ACs4_S [km/h] [0E-008|254.00000000]
  optional double goal_length_relative_spd_2_a_cs4_s = 33;
  // Goal_Late_Relative_Spd_2ACs4_S [km/h] [0E-008|254.00000000]
  optional double goal_late_relative_spd_2_a_cs4_s = 34;
  // Lock_Target_Ordinate_2ACs4_S [m] [-10.00000000|150.00000000]
  optional double lock_target_ordinate_2_a_cs4_s = 35;
  // Counter_2ACs4_S [] [0E-008|15.00000000]
  optional int32 counter_2_a_cs4_s = 36;
  // CheckSum_2AC_04_S [] [0E-008|255.00000000]
  optional int32 check_sum_2_ac_04_s = 37;
}

message ADS_0X2B4 {
// Control Message
  enum HMAStatsSType {
    HMA_STATS_S_OFF = 0;
    HMA_STATS_S_PASSIVE = 1;
    HMA_STATS_S_TANDBY = 2;
    HMA_STATS_S_ACT = 3;
    HMA_STATS_S_FAULT = 4;
    HMA_STATS_S_CAMERABLOCKED = 5;
    HMA_STATS_S_RESERVED_6 = 6;
    HMA_STATS_S_RESERVED_7 = 7;
  }
  enum MPCSpdLimOffsSLASType {
    MPC_SPDLIMOFFS_SLA_S_0 = 0;
    MPC_SPDLIMOFFS_SLA_S_NEGATIVE_10_KPH = 1;
    MPC_SPDLIMOFFS_SLA_S_NEGATIVE_5_KPH = 2;
    MPC_SPDLIMOFFS_SLA_S_5_KPH = 3;
    MPC_SPDLIMOFFS_SLA_S_10_KPH = 4;
    MPC_SPDLIMOFFS_SLA_S_NEGATIVE_5_MPH = 5;
    MPC_SPDLIMOFFS_SLA_S_NEGATIVE_3_MPH = 6;
    MPC_SPDLIMOFFS_SLA_S_3_MPH = 7;
    MPC_SPDLIMOFFS_SLA_S_5_MPH = 8;
  }
  enum TLAStsSType {
    TLA_STS_S_OFF = 0;
    TLA_STS_S_STANDBY = 1;
    TLA_STS_S_ACTIVE = 2;
    TLA_STS_S_FAULT = 3;
  }
  enum ESAFuncstatusSType {
    ESA_FUNC_STATUS_S_OFF = 0;
    ESA_FUNC_STATUS_S_STANDBY = 1;
    ESA_FUNC_STATUS_S_PASSIVE = 2;
    ESA_FUNC_STATUS_S_ACT = 3;
    ESA_FUNC_STATUS_S_FAILURE = 4;
    ESA_FUNC_STATUS_S_RESERVED_5 = 5;
    ESA_FUNC_STATUS_S_RESERVED_6 = 6;
    ESA_FUNC_STATUS_S_RESERVED_7 = 7;
  }
  enum ADASESAEnableSType {
    ADAS_ESA_ENABLE_S_INVALID = 0;
    ADAS_ESA_ENABLE_S_SWITCHOFF = 1;
    ADAS_ESA_ENABLE_S_SWITCHON = 2;
    ADAS_ESA_ENABLE_S_RESERVED_3 = 3;
  }
  // HMA_Stats_S [] [0|7]
  optional HMAStatsSType hma_stats_s = 1;
  // HMA_High_Beam_Request_S [] [0|1]
  optional bool hma_high_beam_request_s = 2;
  // MPC_ReTrsmReq_S [] [0|1]
  optional bool mpc_re_trsm_req_s = 3;
  // MPC_SpdLimOffs_SLA_S [] [0|15]
  optional MPCSpdLimOffsSLASType mpc_spd_lim_offs_sla_s = 4;
  // TLA_Sts_S [] [0|3]
  optional TLAStsSType tla_sts_s = 5;
  // ESA_Func_status_S [] [0|7]
  optional ESAFuncstatusSType esa_func_status_s = 6;
  // ADAS_ESA_Enable_S [] [0|3]
  optional ADASESAEnableSType adas_esa_enable_s = 7;
}

message MEDIA_0X2B6 {
// Report Message
  enum DateInformationYear2B6SType {
    DATE_INFORMATION_YEAR_2B6_S_INVALID = 0;
    DATE_INFORMATION_YEAR_2B6_S_2001YEAR = 1;
    DATE_INFORMATION_YEAR_2B6_S_2002YEAR = 2;
    DATE_INFORMATION_YEAR_2B6_S_2003YEAR = 3;
    DATE_INFORMATION_YEAR_2B6_S_2004YEAR = 4;
    DATE_INFORMATION_YEAR_2B6_S_2005YEAR = 5;
    DATE_INFORMATION_YEAR_2B6_S_2006YEAR = 6;
    DATE_INFORMATION_YEAR_2B6_S_2007YEAR = 7;
    DATE_INFORMATION_YEAR_2B6_S_2008YEAR = 8;
    DATE_INFORMATION_YEAR_2B6_S_2009YEAR = 9;
    DATE_INFORMATION_YEAR_2B6_S_2010YEAR = 10;
    DATE_INFORMATION_YEAR_2B6_S_2011YEAR = 11;
    DATE_INFORMATION_YEAR_2B6_S_2012YEAR = 12;
    DATE_INFORMATION_YEAR_2B6_S_2013YEAR = 13;
    DATE_INFORMATION_YEAR_2B6_S_2014YEAR = 14;
    DATE_INFORMATION_YEAR_2B6_S_2015YEAR = 15;
    DATE_INFORMATION_YEAR_2B6_S_2016YEAR = 16;
    DATE_INFORMATION_YEAR_2B6_S_2017YEAR = 17;
    DATE_INFORMATION_YEAR_2B6_S_2018YEAR = 18;
    DATE_INFORMATION_YEAR_2B6_S_2019YEAR = 19;
    DATE_INFORMATION_YEAR_2B6_S_2020YEAR = 20;
    DATE_INFORMATION_YEAR_2B6_S_2021YEAR = 21;
    DATE_INFORMATION_YEAR_2B6_S_2022YEAR = 22;
    DATE_INFORMATION_YEAR_2B6_S_2023YEAR = 23;
    DATE_INFORMATION_YEAR_2B6_S_2024YEAR = 24;
    DATE_INFORMATION_YEAR_2B6_S_2025YEAR = 25;
    DATE_INFORMATION_YEAR_2B6_S_2026YEAR = 26;
    DATE_INFORMATION_YEAR_2B6_S_2027YEAR = 27;
    DATE_INFORMATION_YEAR_2B6_S_2028YEAR = 28;
    DATE_INFORMATION_YEAR_2B6_S_2029YEAR = 29;
    DATE_INFORMATION_YEAR_2B6_S_2030YEAR = 30;
    DATE_INFORMATION_YEAR_2B6_S_2031YEAR = 31;
    DATE_INFORMATION_YEAR_2B6_S_2032YEAR = 32;
    DATE_INFORMATION_YEAR_2B6_S_2033YEAR = 33;
    DATE_INFORMATION_YEAR_2B6_S_2034YEAR = 34;
    DATE_INFORMATION_YEAR_2B6_S_2035YEAR = 35;
    DATE_INFORMATION_YEAR_2B6_S_2036YEAR = 36;
    DATE_INFORMATION_YEAR_2B6_S_2037YEAR = 37;
    DATE_INFORMATION_YEAR_2B6_S_2038YEAR = 38;
    DATE_INFORMATION_YEAR_2B6_S_2039YEAR = 39;
    DATE_INFORMATION_YEAR_2B6_S_2040YEAR = 40;
    DATE_INFORMATION_YEAR_2B6_S_2041YEAR = 41;
    DATE_INFORMATION_YEAR_2B6_S_2042YEAR = 42;
    DATE_INFORMATION_YEAR_2B6_S_2043YEAR = 43;
    DATE_INFORMATION_YEAR_2B6_S_2044YEAR = 44;
    DATE_INFORMATION_YEAR_2B6_S_2045YEAR = 45;
    DATE_INFORMATION_YEAR_2B6_S_2046YEAR = 46;
    DATE_INFORMATION_YEAR_2B6_S_2047YEAR = 47;
    DATE_INFORMATION_YEAR_2B6_S_2048YEAR = 48;
    DATE_INFORMATION_YEAR_2B6_S_2049YEAR = 49;
    DATE_INFORMATION_YEAR_2B6_S_2050YEAR = 50;
    DATE_INFORMATION_YEAR_2B6_S_2051YEAR = 51;
    DATE_INFORMATION_YEAR_2B6_S_2052YEAR = 52;
    DATE_INFORMATION_YEAR_2B6_S_2053YEAR = 53;
    DATE_INFORMATION_YEAR_2B6_S_2054YEAR = 54;
    DATE_INFORMATION_YEAR_2B6_S_2055YEAR = 55;
    DATE_INFORMATION_YEAR_2B6_S_2056YEAR = 56;
    DATE_INFORMATION_YEAR_2B6_S_2057YEAR = 57;
    DATE_INFORMATION_YEAR_2B6_S_2058YEAR = 58;
    DATE_INFORMATION_YEAR_2B6_S_2059YEAR = 59;
    DATE_INFORMATION_YEAR_2B6_S_2060YEAR = 60;
    DATE_INFORMATION_YEAR_2B6_S_2061YEAR = 61;
    DATE_INFORMATION_YEAR_2B6_S_2062YEAR = 62;
    DATE_INFORMATION_YEAR_2B6_S_2063YEAR = 63;
    DATE_INFORMATION_YEAR_2B6_S_2064YEAR = 64;
    DATE_INFORMATION_YEAR_2B6_S_2065YEAR = 65;
    DATE_INFORMATION_YEAR_2B6_S_2066YEAR = 66;
    DATE_INFORMATION_YEAR_2B6_S_2067YEAR = 67;
    DATE_INFORMATION_YEAR_2B6_S_2068YEAR = 68;
    DATE_INFORMATION_YEAR_2B6_S_2069YEAR = 69;
    DATE_INFORMATION_YEAR_2B6_S_2070YEAR = 70;
    DATE_INFORMATION_YEAR_2B6_S_2071YEAR = 71;
    DATE_INFORMATION_YEAR_2B6_S_2072YEAR = 72;
    DATE_INFORMATION_YEAR_2B6_S_2073YEAR = 73;
    DATE_INFORMATION_YEAR_2B6_S_2074YEAR = 74;
    DATE_INFORMATION_YEAR_2B6_S_2075YEAR = 75;
    DATE_INFORMATION_YEAR_2B6_S_2076YEAR = 76;
    DATE_INFORMATION_YEAR_2B6_S_2077YEAR = 77;
    DATE_INFORMATION_YEAR_2B6_S_2078YEAR = 78;
    DATE_INFORMATION_YEAR_2B6_S_2079YEAR = 79;
    DATE_INFORMATION_YEAR_2B6_S_2080YEAR = 80;
    DATE_INFORMATION_YEAR_2B6_S_2081YEAR = 81;
    DATE_INFORMATION_YEAR_2B6_S_2082YEAR = 82;
    DATE_INFORMATION_YEAR_2B6_S_2083YEAR = 83;
    DATE_INFORMATION_YEAR_2B6_S_2084YEAR = 84;
    DATE_INFORMATION_YEAR_2B6_S_2085YEAR = 85;
    DATE_INFORMATION_YEAR_2B6_S_2086YEAR = 86;
    DATE_INFORMATION_YEAR_2B6_S_2087YEAR = 87;
    DATE_INFORMATION_YEAR_2B6_S_2088YEAR = 88;
    DATE_INFORMATION_YEAR_2B6_S_2089YEAR = 89;
    DATE_INFORMATION_YEAR_2B6_S_2090YEAR = 90;
    DATE_INFORMATION_YEAR_2B6_S_2091YEAR = 91;
    DATE_INFORMATION_YEAR_2B6_S_2092YEAR = 92;
    DATE_INFORMATION_YEAR_2B6_S_2093YEAR = 93;
    DATE_INFORMATION_YEAR_2B6_S_2094YEAR = 94;
    DATE_INFORMATION_YEAR_2B6_S_2095YEAR = 95;
    DATE_INFORMATION_YEAR_2B6_S_2096YEAR = 96;
    DATE_INFORMATION_YEAR_2B6_S_2097YEAR = 97;
    DATE_INFORMATION_YEAR_2B6_S_2098YEAR = 98;
    DATE_INFORMATION_YEAR_2B6_S_2099YEAR = 99;
    DATE_INFORMATION_YEAR_2B6_S_2100YEAR = 100;
    DATE_INFORMATION_YEAR_2B6_S_2101YEAR = 101;
    DATE_INFORMATION_YEAR_2B6_S_2102YEAR = 102;
    DATE_INFORMATION_YEAR_2B6_S_2103YEAR = 103;
    DATE_INFORMATION_YEAR_2B6_S_2104YEAR = 104;
    DATE_INFORMATION_YEAR_2B6_S_2105YEAR = 105;
    DATE_INFORMATION_YEAR_2B6_S_2106YEAR = 106;
    DATE_INFORMATION_YEAR_2B6_S_2107YEAR = 107;
    DATE_INFORMATION_YEAR_2B6_S_2108YEAR = 108;
    DATE_INFORMATION_YEAR_2B6_S_2109YEAR = 109;
    DATE_INFORMATION_YEAR_2B6_S_2110YEAR = 110;
    DATE_INFORMATION_YEAR_2B6_S_2111YEAR = 111;
    DATE_INFORMATION_YEAR_2B6_S_2112YEAR = 112;
    DATE_INFORMATION_YEAR_2B6_S_2113YEAR = 113;
    DATE_INFORMATION_YEAR_2B6_S_2114YEAR = 114;
    DATE_INFORMATION_YEAR_2B6_S_2115YEAR = 115;
    DATE_INFORMATION_YEAR_2B6_S_2116YEAR = 116;
    DATE_INFORMATION_YEAR_2B6_S_2117YEAR = 117;
    DATE_INFORMATION_YEAR_2B6_S_2118YEAR = 118;
    DATE_INFORMATION_YEAR_2B6_S_2119YEAR = 119;
    DATE_INFORMATION_YEAR_2B6_S_2120YEAR = 120;
    DATE_INFORMATION_YEAR_2B6_S_2121YEAR = 121;
    DATE_INFORMATION_YEAR_2B6_S_2122YEAR = 122;
    DATE_INFORMATION_YEAR_2B6_S_2123YEAR = 123;
    DATE_INFORMATION_YEAR_2B6_S_2124YEAR = 124;
    DATE_INFORMATION_YEAR_2B6_S_2125YEAR = 125;
    DATE_INFORMATION_YEAR_2B6_S_2126YEAR = 126;
    DATE_INFORMATION_YEAR_2B6_S_2127YEAR = 127;
    DATE_INFORMATION_YEAR_2B6_S_2128YEAR = 128;
    DATE_INFORMATION_YEAR_2B6_S_2129YEAR = 129;
    DATE_INFORMATION_YEAR_2B6_S_2130YEAR = 130;
    DATE_INFORMATION_YEAR_2B6_S_2131YEAR = 131;
    DATE_INFORMATION_YEAR_2B6_S_2132YEAR = 132;
    DATE_INFORMATION_YEAR_2B6_S_2133YEAR = 133;
    DATE_INFORMATION_YEAR_2B6_S_2134YEAR = 134;
    DATE_INFORMATION_YEAR_2B6_S_2135YEAR = 135;
    DATE_INFORMATION_YEAR_2B6_S_2136YEAR = 136;
    DATE_INFORMATION_YEAR_2B6_S_2137YEAR = 137;
    DATE_INFORMATION_YEAR_2B6_S_2138YEAR = 138;
    DATE_INFORMATION_YEAR_2B6_S_2139YEAR = 139;
    DATE_INFORMATION_YEAR_2B6_S_2140YEAR = 140;
    DATE_INFORMATION_YEAR_2B6_S_2141YEAR = 141;
    DATE_INFORMATION_YEAR_2B6_S_2142YEAR = 142;
    DATE_INFORMATION_YEAR_2B6_S_2143YEAR = 143;
    DATE_INFORMATION_YEAR_2B6_S_2144YEAR = 144;
    DATE_INFORMATION_YEAR_2B6_S_2145YEAR = 145;
    DATE_INFORMATION_YEAR_2B6_S_2146YEAR = 146;
    DATE_INFORMATION_YEAR_2B6_S_2147YEAR = 147;
    DATE_INFORMATION_YEAR_2B6_S_2148YEAR = 148;
    DATE_INFORMATION_YEAR_2B6_S_2149YEAR = 149;
    DATE_INFORMATION_YEAR_2B6_S_2150YEAR = 150;
    DATE_INFORMATION_YEAR_2B6_S_2151YEAR = 151;
    DATE_INFORMATION_YEAR_2B6_S_2152YEAR = 152;
    DATE_INFORMATION_YEAR_2B6_S_2153YEAR = 153;
    DATE_INFORMATION_YEAR_2B6_S_2154YEAR = 154;
    DATE_INFORMATION_YEAR_2B6_S_2155YEAR = 155;
    DATE_INFORMATION_YEAR_2B6_S_2156YEAR = 156;
    DATE_INFORMATION_YEAR_2B6_S_2157YEAR = 157;
    DATE_INFORMATION_YEAR_2B6_S_2158YEAR = 158;
    DATE_INFORMATION_YEAR_2B6_S_2159YEAR = 159;
    DATE_INFORMATION_YEAR_2B6_S_2160YEAR = 160;
    DATE_INFORMATION_YEAR_2B6_S_2161YEAR = 161;
    DATE_INFORMATION_YEAR_2B6_S_2162YEAR = 162;
    DATE_INFORMATION_YEAR_2B6_S_2163YEAR = 163;
    DATE_INFORMATION_YEAR_2B6_S_2164YEAR = 164;
    DATE_INFORMATION_YEAR_2B6_S_2165YEAR = 165;
    DATE_INFORMATION_YEAR_2B6_S_2166YEAR = 166;
    DATE_INFORMATION_YEAR_2B6_S_2167YEAR = 167;
    DATE_INFORMATION_YEAR_2B6_S_2168YEAR = 168;
    DATE_INFORMATION_YEAR_2B6_S_2169YEAR = 169;
    DATE_INFORMATION_YEAR_2B6_S_2170YEAR = 170;
    DATE_INFORMATION_YEAR_2B6_S_2171YEAR = 171;
    DATE_INFORMATION_YEAR_2B6_S_2172YEAR = 172;
    DATE_INFORMATION_YEAR_2B6_S_2173YEAR = 173;
    DATE_INFORMATION_YEAR_2B6_S_2174YEAR = 174;
    DATE_INFORMATION_YEAR_2B6_S_2175YEAR = 175;
    DATE_INFORMATION_YEAR_2B6_S_2176YEAR = 176;
    DATE_INFORMATION_YEAR_2B6_S_2177YEAR = 177;
    DATE_INFORMATION_YEAR_2B6_S_2178YEAR = 178;
    DATE_INFORMATION_YEAR_2B6_S_2179YEAR = 179;
    DATE_INFORMATION_YEAR_2B6_S_2180YEAR = 180;
    DATE_INFORMATION_YEAR_2B6_S_2181YEAR = 181;
    DATE_INFORMATION_YEAR_2B6_S_2182YEAR = 182;
    DATE_INFORMATION_YEAR_2B6_S_2183YEAR = 183;
    DATE_INFORMATION_YEAR_2B6_S_2184YEAR = 184;
    DATE_INFORMATION_YEAR_2B6_S_2185YEAR = 185;
    DATE_INFORMATION_YEAR_2B6_S_2186YEAR = 186;
    DATE_INFORMATION_YEAR_2B6_S_2187YEAR = 187;
    DATE_INFORMATION_YEAR_2B6_S_2188YEAR = 188;
    DATE_INFORMATION_YEAR_2B6_S_2189YEAR = 189;
    DATE_INFORMATION_YEAR_2B6_S_2190YEAR = 190;
    DATE_INFORMATION_YEAR_2B6_S_2191YEAR = 191;
    DATE_INFORMATION_YEAR_2B6_S_2192YEAR = 192;
    DATE_INFORMATION_YEAR_2B6_S_2193YEAR = 193;
    DATE_INFORMATION_YEAR_2B6_S_2194YEAR = 194;
    DATE_INFORMATION_YEAR_2B6_S_2195YEAR = 195;
    DATE_INFORMATION_YEAR_2B6_S_2196YEAR = 196;
    DATE_INFORMATION_YEAR_2B6_S_2197YEAR = 197;
    DATE_INFORMATION_YEAR_2B6_S_2198YEAR = 198;
    DATE_INFORMATION_YEAR_2B6_S_2199YEAR = 199;
    DATE_INFORMATION_YEAR_2B6_S_2200YEAR = 200;
    DATE_INFORMATION_YEAR_2B6_S_2201YEAR = 201;
    DATE_INFORMATION_YEAR_2B6_S_2202YEAR = 202;
    DATE_INFORMATION_YEAR_2B6_S_2203YEAR = 203;
    DATE_INFORMATION_YEAR_2B6_S_2204YEAR = 204;
    DATE_INFORMATION_YEAR_2B6_S_2205YEAR = 205;
    DATE_INFORMATION_YEAR_2B6_S_2206YEAR = 206;
    DATE_INFORMATION_YEAR_2B6_S_2207YEAR = 207;
    DATE_INFORMATION_YEAR_2B6_S_2208YEAR = 208;
    DATE_INFORMATION_YEAR_2B6_S_2209YEAR = 209;
    DATE_INFORMATION_YEAR_2B6_S_2210YEAR = 210;
    DATE_INFORMATION_YEAR_2B6_S_2211YEAR = 211;
    DATE_INFORMATION_YEAR_2B6_S_2212YEAR = 212;
    DATE_INFORMATION_YEAR_2B6_S_2213YEAR = 213;
    DATE_INFORMATION_YEAR_2B6_S_2214YEAR = 214;
    DATE_INFORMATION_YEAR_2B6_S_2215YEAR = 215;
    DATE_INFORMATION_YEAR_2B6_S_2216YEAR = 216;
    DATE_INFORMATION_YEAR_2B6_S_2217YEAR = 217;
    DATE_INFORMATION_YEAR_2B6_S_2218YEAR = 218;
    DATE_INFORMATION_YEAR_2B6_S_2219YEAR = 219;
    DATE_INFORMATION_YEAR_2B6_S_2220YEAR = 220;
    DATE_INFORMATION_YEAR_2B6_S_2221YEAR = 221;
    DATE_INFORMATION_YEAR_2B6_S_2222YEAR = 222;
    DATE_INFORMATION_YEAR_2B6_S_2223YEAR = 223;
    DATE_INFORMATION_YEAR_2B6_S_2224YEAR = 224;
    DATE_INFORMATION_YEAR_2B6_S_2225YEAR = 225;
    DATE_INFORMATION_YEAR_2B6_S_2226YEAR = 226;
    DATE_INFORMATION_YEAR_2B6_S_2227YEAR = 227;
    DATE_INFORMATION_YEAR_2B6_S_2228YEAR = 228;
    DATE_INFORMATION_YEAR_2B6_S_2229YEAR = 229;
    DATE_INFORMATION_YEAR_2B6_S_2230YEAR = 230;
    DATE_INFORMATION_YEAR_2B6_S_2231YEAR = 231;
    DATE_INFORMATION_YEAR_2B6_S_2232YEAR = 232;
    DATE_INFORMATION_YEAR_2B6_S_2233YEAR = 233;
    DATE_INFORMATION_YEAR_2B6_S_2234YEAR = 234;
    DATE_INFORMATION_YEAR_2B6_S_2235YEAR = 235;
    DATE_INFORMATION_YEAR_2B6_S_2236YEAR = 236;
    DATE_INFORMATION_YEAR_2B6_S_2237YEAR = 237;
    DATE_INFORMATION_YEAR_2B6_S_2238YEAR = 238;
    DATE_INFORMATION_YEAR_2B6_S_2239YEAR = 239;
    DATE_INFORMATION_YEAR_2B6_S_2240YEAR = 240;
    DATE_INFORMATION_YEAR_2B6_S_2241YEAR = 241;
    DATE_INFORMATION_YEAR_2B6_S_2242YEAR = 242;
    DATE_INFORMATION_YEAR_2B6_S_2243YEAR = 243;
    DATE_INFORMATION_YEAR_2B6_S_2244YEAR = 244;
    DATE_INFORMATION_YEAR_2B6_S_2245YEAR = 245;
    DATE_INFORMATION_YEAR_2B6_S_2246YEAR = 246;
    DATE_INFORMATION_YEAR_2B6_S_2247YEAR = 247;
    DATE_INFORMATION_YEAR_2B6_S_2248YEAR = 248;
    DATE_INFORMATION_YEAR_2B6_S_2249YEAR = 249;
    DATE_INFORMATION_YEAR_2B6_S_2250YEAR = 250;
    DATE_INFORMATION_YEAR_2B6_S_2251YEAR = 251;
    DATE_INFORMATION_YEAR_2B6_S_2252YEAR = 252;
    DATE_INFORMATION_YEAR_2B6_S_2253YEAR = 253;
    DATE_INFORMATION_YEAR_2B6_S_2254YEAR = 254;
    DATE_INFORMATION_YEAR_2B6_S_2255YEAR = 255;
  }
  enum DateInformationMonth2B6SType {
    DATE_INFORMATION_MONTH_2B6_S_INVALID = 0;
    DATE_INFORMATION_MONTH_2B6_S_JANUARY = 1;
    DATE_INFORMATION_MONTH_2B6_S_FEBRUARY = 2;
    DATE_INFORMATION_MONTH_2B6_S_MARCH = 3;
    DATE_INFORMATION_MONTH_2B6_S_APRIL = 4;
    DATE_INFORMATION_MONTH_2B6_S_MAY = 5;
    DATE_INFORMATION_MONTH_2B6_S_JUNE = 6;
    DATE_INFORMATION_MONTH_2B6_S_JULY = 7;
    DATE_INFORMATION_MONTH_2B6_S_AUGUST = 8;
    DATE_INFORMATION_MONTH_2B6_S_SEPTEMBER = 9;
    DATE_INFORMATION_MONTH_2B6_S_OCTOBER = 10;
    DATE_INFORMATION_MONTH_2B6_S_NOVEMBER = 11;
    DATE_INFORMATION_MONTH_2B6_S_DECEMBER = 12;
  }
  enum DateInformationDay2B6SType {
    DATE_INFORMATION_DAY_2B6_S_INVALID = 0;
    DATE_INFORMATION_DAY_2B6_S_D1 = 1;
    DATE_INFORMATION_DAY_2B6_S_D2 = 2;
    DATE_INFORMATION_DAY_2B6_S_D3 = 3;
    DATE_INFORMATION_DAY_2B6_S_D4 = 4;
    DATE_INFORMATION_DAY_2B6_S_D5 = 5;
    DATE_INFORMATION_DAY_2B6_S_D6 = 6;
    DATE_INFORMATION_DAY_2B6_S_D7 = 7;
    DATE_INFORMATION_DAY_2B6_S_D8 = 8;
    DATE_INFORMATION_DAY_2B6_S_D9 = 9;
    DATE_INFORMATION_DAY_2B6_S_D10 = 10;
    DATE_INFORMATION_DAY_2B6_S_D11 = 11;
    DATE_INFORMATION_DAY_2B6_S_D12 = 12;
    DATE_INFORMATION_DAY_2B6_S_D13 = 13;
    DATE_INFORMATION_DAY_2B6_S_D14 = 14;
    DATE_INFORMATION_DAY_2B6_S_D15 = 15;
    DATE_INFORMATION_DAY_2B6_S_D16 = 16;
    DATE_INFORMATION_DAY_2B6_S_D17 = 17;
    DATE_INFORMATION_DAY_2B6_S_D18 = 18;
    DATE_INFORMATION_DAY_2B6_S_D19 = 19;
    DATE_INFORMATION_DAY_2B6_S_D20 = 20;
    DATE_INFORMATION_DAY_2B6_S_D21 = 21;
    DATE_INFORMATION_DAY_2B6_S_D22 = 22;
    DATE_INFORMATION_DAY_2B6_S_D23 = 23;
    DATE_INFORMATION_DAY_2B6_S_D24 = 24;
    DATE_INFORMATION_DAY_2B6_S_D25 = 25;
    DATE_INFORMATION_DAY_2B6_S_D26 = 26;
    DATE_INFORMATION_DAY_2B6_S_D27 = 27;
    DATE_INFORMATION_DAY_2B6_S_D28 = 28;
    DATE_INFORMATION_DAY_2B6_S_D29 = 29;
    DATE_INFORMATION_DAY_2B6_S_D30 = 30;
    DATE_INFORMATION_DAY_2B6_S_D31 = 31;
  }
  enum DateInformationHour2B6SType {
    DATE_INFORMATION_HOUR_2B6_S_0H = 0;
    DATE_INFORMATION_HOUR_2B6_S_1H = 1;
    DATE_INFORMATION_HOUR_2B6_S_2H = 2;
    DATE_INFORMATION_HOUR_2B6_S_3H = 3;
    DATE_INFORMATION_HOUR_2B6_S_4H = 4;
    DATE_INFORMATION_HOUR_2B6_S_5H = 5;
    DATE_INFORMATION_HOUR_2B6_S_6H = 6;
    DATE_INFORMATION_HOUR_2B6_S_7H = 7;
    DATE_INFORMATION_HOUR_2B6_S_8H = 8;
    DATE_INFORMATION_HOUR_2B6_S_9H = 9;
    DATE_INFORMATION_HOUR_2B6_S_10H = 10;
    DATE_INFORMATION_HOUR_2B6_S_11H = 11;
    DATE_INFORMATION_HOUR_2B6_S_12H = 12;
    DATE_INFORMATION_HOUR_2B6_S_13H = 13;
    DATE_INFORMATION_HOUR_2B6_S_14H = 14;
    DATE_INFORMATION_HOUR_2B6_S_15H = 15;
    DATE_INFORMATION_HOUR_2B6_S_16H = 16;
    DATE_INFORMATION_HOUR_2B6_S_17H = 17;
    DATE_INFORMATION_HOUR_2B6_S_18H = 18;
    DATE_INFORMATION_HOUR_2B6_S_19H = 19;
    DATE_INFORMATION_HOUR_2B6_S_20H = 20;
    DATE_INFORMATION_HOUR_2B6_S_21H = 21;
    DATE_INFORMATION_HOUR_2B6_S_22H = 22;
    DATE_INFORMATION_HOUR_2B6_S_23H = 23;
  }
  enum DateInformationMinute2B6SType {
    DATE_INFORMATION_MINUTE_2B6_S_0MINUTE = 0;
    DATE_INFORMATION_MINUTE_2B6_S_1MINUTE = 1;
    DATE_INFORMATION_MINUTE_2B6_S_2MINUTE = 2;
    DATE_INFORMATION_MINUTE_2B6_S_3MINUTE = 3;
    DATE_INFORMATION_MINUTE_2B6_S_4MINUTE = 4;
    DATE_INFORMATION_MINUTE_2B6_S_5MINUTE = 5;
    DATE_INFORMATION_MINUTE_2B6_S_6MINUTE = 6;
    DATE_INFORMATION_MINUTE_2B6_S_7MINUTE = 7;
    DATE_INFORMATION_MINUTE_2B6_S_8MINUTE = 8;
    DATE_INFORMATION_MINUTE_2B6_S_9MINUTE = 9;
    DATE_INFORMATION_MINUTE_2B6_S_10MINUTE = 10;
    DATE_INFORMATION_MINUTE_2B6_S_11MINUTE = 11;
    DATE_INFORMATION_MINUTE_2B6_S_12MINUTE = 12;
    DATE_INFORMATION_MINUTE_2B6_S_13MINUTE = 13;
    DATE_INFORMATION_MINUTE_2B6_S_14MINUTE = 14;
    DATE_INFORMATION_MINUTE_2B6_S_15MINUTE = 15;
    DATE_INFORMATION_MINUTE_2B6_S_16MINUTE = 16;
    DATE_INFORMATION_MINUTE_2B6_S_17MINUTE = 17;
    DATE_INFORMATION_MINUTE_2B6_S_18MINUTE = 18;
    DATE_INFORMATION_MINUTE_2B6_S_19MINUTE = 19;
    DATE_INFORMATION_MINUTE_2B6_S_20MINUTE = 20;
    DATE_INFORMATION_MINUTE_2B6_S_21MINUTE = 21;
    DATE_INFORMATION_MINUTE_2B6_S_22MINUTE = 22;
    DATE_INFORMATION_MINUTE_2B6_S_23MINUTE = 23;
    DATE_INFORMATION_MINUTE_2B6_S_24MINUTE = 24;
    DATE_INFORMATION_MINUTE_2B6_S_25MINUTE = 25;
    DATE_INFORMATION_MINUTE_2B6_S_26MINUTE = 26;
    DATE_INFORMATION_MINUTE_2B6_S_27MINUTE = 27;
    DATE_INFORMATION_MINUTE_2B6_S_28MINUTE = 28;
    DATE_INFORMATION_MINUTE_2B6_S_29MINUTE = 29;
    DATE_INFORMATION_MINUTE_2B6_S_30MINUTE = 30;
    DATE_INFORMATION_MINUTE_2B6_S_31MINUTE = 31;
    DATE_INFORMATION_MINUTE_2B6_S_32MINUTE = 32;
    DATE_INFORMATION_MINUTE_2B6_S_33MINUTE = 33;
    DATE_INFORMATION_MINUTE_2B6_S_34MINUTE = 34;
    DATE_INFORMATION_MINUTE_2B6_S_35MINUTE = 35;
    DATE_INFORMATION_MINUTE_2B6_S_36MINUTE = 36;
    DATE_INFORMATION_MINUTE_2B6_S_37MINUTE = 37;
    DATE_INFORMATION_MINUTE_2B6_S_38MINUTE = 38;
    DATE_INFORMATION_MINUTE_2B6_S_39MINUTE = 39;
    DATE_INFORMATION_MINUTE_2B6_S_40MINUTE = 40;
    DATE_INFORMATION_MINUTE_2B6_S_41MINUTE = 41;
    DATE_INFORMATION_MINUTE_2B6_S_42MINUTE = 42;
    DATE_INFORMATION_MINUTE_2B6_S_43MINUTE = 43;
    DATE_INFORMATION_MINUTE_2B6_S_44MINUTE = 44;
    DATE_INFORMATION_MINUTE_2B6_S_45MINUTE = 45;
    DATE_INFORMATION_MINUTE_2B6_S_46MINUTE = 46;
    DATE_INFORMATION_MINUTE_2B6_S_47MINUTE = 47;
    DATE_INFORMATION_MINUTE_2B6_S_48MINUTE = 48;
    DATE_INFORMATION_MINUTE_2B6_S_49MINUTE = 49;
    DATE_INFORMATION_MINUTE_2B6_S_50MINUTE = 50;
    DATE_INFORMATION_MINUTE_2B6_S_51MINUTE = 51;
    DATE_INFORMATION_MINUTE_2B6_S_52MINUTE = 52;
    DATE_INFORMATION_MINUTE_2B6_S_53MINUTE = 53;
    DATE_INFORMATION_MINUTE_2B6_S_54MINUTE = 54;
    DATE_INFORMATION_MINUTE_2B6_S_55MINUTE = 55;
    DATE_INFORMATION_MINUTE_2B6_S_56MINUTE = 56;
    DATE_INFORMATION_MINUTE_2B6_S_57MINUTE = 57;
    DATE_INFORMATION_MINUTE_2B6_S_58MINUTE = 58;
    DATE_INFORMATION_MINUTE_2B6_S_59MINUTES = 59;
  }
  enum DateInformationSecond2B6SType {
    DATE_INFORMATION_SECOND_2B6_S_0SECOND = 0;
    DATE_INFORMATION_SECOND_2B6_S_1SECOND = 1;
    DATE_INFORMATION_SECOND_2B6_S_2SECOND = 2;
    DATE_INFORMATION_SECOND_2B6_S_3SECOND = 3;
    DATE_INFORMATION_SECOND_2B6_S_4SECOND = 4;
    DATE_INFORMATION_SECOND_2B6_S_5SECOND = 5;
    DATE_INFORMATION_SECOND_2B6_S_6SECOND = 6;
    DATE_INFORMATION_SECOND_2B6_S_7SECOND = 7;
    DATE_INFORMATION_SECOND_2B6_S_8SECOND = 8;
    DATE_INFORMATION_SECOND_2B6_S_9SECOND = 9;
    DATE_INFORMATION_SECOND_2B6_S_10SECOND = 10;
    DATE_INFORMATION_SECOND_2B6_S_11SECOND = 11;
    DATE_INFORMATION_SECOND_2B6_S_12SECOND = 12;
    DATE_INFORMATION_SECOND_2B6_S_13SECOND = 13;
    DATE_INFORMATION_SECOND_2B6_S_14SECOND = 14;
    DATE_INFORMATION_SECOND_2B6_S_15SECOND = 15;
    DATE_INFORMATION_SECOND_2B6_S_16SECOND = 16;
    DATE_INFORMATION_SECOND_2B6_S_17SECOND = 17;
    DATE_INFORMATION_SECOND_2B6_S_18SECOND = 18;
    DATE_INFORMATION_SECOND_2B6_S_19SECOND = 19;
    DATE_INFORMATION_SECOND_2B6_S_20SECOND = 20;
    DATE_INFORMATION_SECOND_2B6_S_21SECOND = 21;
    DATE_INFORMATION_SECOND_2B6_S_22SECOND = 22;
    DATE_INFORMATION_SECOND_2B6_S_23SECOND = 23;
    DATE_INFORMATION_SECOND_2B6_S_24SECOND = 24;
    DATE_INFORMATION_SECOND_2B6_S_25SECOND = 25;
    DATE_INFORMATION_SECOND_2B6_S_26SECOND = 26;
    DATE_INFORMATION_SECOND_2B6_S_27SECOND = 27;
    DATE_INFORMATION_SECOND_2B6_S_28SECOND = 28;
    DATE_INFORMATION_SECOND_2B6_S_29SECOND = 29;
    DATE_INFORMATION_SECOND_2B6_S_30SECOND = 30;
    DATE_INFORMATION_SECOND_2B6_S_31SECOND = 31;
    DATE_INFORMATION_SECOND_2B6_S_32SECOND = 32;
    DATE_INFORMATION_SECOND_2B6_S_33SECOND = 33;
    DATE_INFORMATION_SECOND_2B6_S_34SECOND = 34;
    DATE_INFORMATION_SECOND_2B6_S_35SECOND = 35;
    DATE_INFORMATION_SECOND_2B6_S_36SECOND = 36;
    DATE_INFORMATION_SECOND_2B6_S_37SECOND = 37;
    DATE_INFORMATION_SECOND_2B6_S_38SECOND = 38;
    DATE_INFORMATION_SECOND_2B6_S_39SECOND = 39;
    DATE_INFORMATION_SECOND_2B6_S_40SECOND = 40;
    DATE_INFORMATION_SECOND_2B6_S_41SECOND = 41;
    DATE_INFORMATION_SECOND_2B6_S_42SECOND = 42;
    DATE_INFORMATION_SECOND_2B6_S_43SECOND = 43;
    DATE_INFORMATION_SECOND_2B6_S_44SECOND = 44;
    DATE_INFORMATION_SECOND_2B6_S_45SECOND = 45;
    DATE_INFORMATION_SECOND_2B6_S_46SECOND = 46;
    DATE_INFORMATION_SECOND_2B6_S_47SECOND = 47;
    DATE_INFORMATION_SECOND_2B6_S_48SECOND = 48;
    DATE_INFORMATION_SECOND_2B6_S_49SECOND = 49;
    DATE_INFORMATION_SECOND_2B6_S_50SECOND = 50;
    DATE_INFORMATION_SECOND_2B6_S_51SECOND = 51;
    DATE_INFORMATION_SECOND_2B6_S_52SECOND = 52;
    DATE_INFORMATION_SECOND_2B6_S_53SECOND = 53;
    DATE_INFORMATION_SECOND_2B6_S_54SECOND = 54;
    DATE_INFORMATION_SECOND_2B6_S_55SECOND = 55;
    DATE_INFORMATION_SECOND_2B6_S_56SECOND = 56;
    DATE_INFORMATION_SECOND_2B6_S_57SECOND = 57;
    DATE_INFORMATION_SECOND_2B6_S_58SECOND = 58;
    DATE_INFORMATION_SECOND_2B6_S_59SECONDS = 59;
  }
  enum Time2B6SType {
    TIME_2B6_S_INVALID = 0;
    TIME_2B6_S_12H = 1;
    TIME_2B6_S_24H = 2;
    TIME_2B6_S_RESERVED_3 = 3;
  }
  // Date_Information_Year_2B6_S [] [0|255]
  optional DateInformationYear2B6SType date_information_year_2_b6_s = 1;
  // Date_Information_Month_2B6_S [] [0|255]
  optional DateInformationMonth2B6SType date_information_month_2_b6_s = 2;
  // Date_Information_Day_2B6_S [] [0|255]
  optional DateInformationDay2B6SType date_information_day_2_b6_s = 3;
  // Date_Information_Hour_2B6_S [] [0|255]
  optional DateInformationHour2B6SType date_information_hour_2_b6_s = 4;
  // Date_Information_Minute_2B6_S [] [0|255]
  optional DateInformationMinute2B6SType date_information_minute_2_b6_s = 5;
  // Date_Information_Second_2B6_S [] [0|255]
  optional DateInformationSecond2B6SType date_information_second_2_b6_s = 6;
  // Week_2B6_S [] [0|7]
  optional int32 week_2_b6_s = 7;
  // Time_2B6_S [] [0|3]
  optional Time2B6SType time_2_b6_s = 8;
}

message MEDIA_0X2BC {
// Report Message
  enum AMAPSwitchSType {
    AMAP_SWITCH_S_INVALID = 0;
    AMAP_SWITCH_S_SWITCHON = 1;
    AMAP_SWITCH_S_SWITCHOFF = 2;
    AMAP_SWITCH_S_RESERVED_3 = 3;
  }
  // AMAP_Switch_S [] [0|3]
  optional AMAPSwitchSType amap_switch_s = 1;
}

message ADS_0X2CA {
// Control Message
  enum FCRSysStatusSType {
    FCR_SYS_STATUS_S_OFF = 0;
    FCR_SYS_STATUS_S_ON = 1;
    FCR_SYS_STATUS_S_SDAERROR = 2;
    FCR_SYS_STATUS_S_SYSTEMERROR = 3;
  }
  enum FrontradarFCTAStatusType {
    FRONT_RADAR_FCTA_STATUS_OFF = 0;
    FRONT_RADAR_FCTA_STATUS_PASSIVE = 1;
    FRONT_RADAR_FCTA_STATUS_ACT = 2;
    FRONT_RADAR_FCTA_STATUS_FAULT = 3;
  }
  enum FrontradarFCTBStatusType {
    FRONT_RADAR_FCTB_STATUS_OFF = 0;
    FRONT_RADAR_FCTB_STATUS_PASSIVE = 1;
    FRONT_RADAR_FCTB_STATUS_ACT = 2;
    FRONT_RADAR_FCTB_STATUS_FAULT = 3;
  }
  enum FCTBBrkReqSType {
    FCTBBRKREQ_S_NOREQUEST = 0;
    FCTBBRKREQ_S_REQUEST_L = 1;
    FCTBBRKREQ_S_REQUEST_R = 2;
    FCTBBRKREQ_S_REQUEST__L_R = 3;
  }
  enum FCTAGrayStsType {
    FCTA_GRAY_STS_INVALID = 0;
    FCTA_GRAY_STS_GRAY = 1;
    FCTA_GRAY_STS_RESERVED_2 = 2;
    FCTA_GRAY_STS_RESERVED_3 = 3;
  }
  enum FCTBGrayStsType {
    FCTB_GRAY_STS_INVALID = 0;
    FCTB_GRAY_STS_GRAY = 1;
    FCTB_GRAY_STS_RESERVED_2 = 2;
    FCTB_GRAY_STS_RESERVED_3 = 3;
  }
  enum FCTAFCTBStatusSType {
    FCTA_FCTB_STATUS_S_INVALID = 0;
    FCTA_FCTB_STATUS_S_FCTA_OFF_FCTB_OFF = 1;
    FCTA_FCTB_STATUS_S_FCTA_ON_FCTB_OFF = 2;
    FCTA_FCTB_STATUS_S_FCTA_OFF_FCTB_ON = 3;
    FCTA_FCTB_STATUS_S_FCTA_ON_FCTB_ON = 4;
    FCTA_FCTB_STATUS_S_FAULT = 5;
  }
  // FCR_Sys_Status_S [] [0|3]
  optional FCRSysStatusSType fcr_sys_status_s = 1;
  // Front_radar_FCTA_Status [] [0|3]
  optional FrontradarFCTAStatusType front_radar_fcta_status = 2;
  // Front_radar_FCTB_Status [] [0|3]
  optional FrontradarFCTBStatusType front_radar_fctb_status = 3;
  // Frontradar_FCTA_Warning_Right_S [] [0|1]
  optional bool frontradar_fcta_warning_right_s = 4;
  // Frontradar_FCTA_Warning_Left_S [] [0|1]
  optional bool frontradar_fcta_warning_left_s = 5;
  // FCTBBrkReq_S [] [0|3]
  optional FCTBBrkReqSType fctb_brk_req_s = 6;
  // FCTA_Assemble_Status_3S [] [0|1]
  optional bool fcta_assemble_status_3_s = 7;
  // FCTB_Assemble_Status_2S [] [0|1]
  optional bool fctb_assemble_status_2_s = 8;
  // FCTBTargetDecel_S [m/s??] [-10|2.75]
  optional double fctb_target_decel_s = 9;
  // FCTA_Gray_Sts [] [0|3]
  optional FCTAGrayStsType fcta_gray_sts = 10;
  // FCTB_Gray_Sts [] [0|3]
  optional FCTBGrayStsType fctb_gray_sts = 11;
  // FCTA_FCTB_Status_S [] [0|7]
  optional FCTAFCTBStatusSType fcta_fctb_status_s = 12;
  // Counter_2CA_S [] [0|15]
  optional int32 counter_2_ca_s = 13;
  // CheckSum2CA_S [] [0|255]
  optional int32 check_sum2_ca_s = 14;
}

message ADS_0X2CB {
// Control Message
  enum ADSPADHPAParkinBuildMapSwtStsType {
    ADS_PAD_HPAPARKINBUILDMAPSWTSTS_NOTSHOW = 0;
    ADS_PAD_HPAPARKINBUILDMAPSWTSTS_NOTAVAILABLE = 1;
    ADS_PAD_HPAPARKINBUILDMAPSWTSTS_AVAILABLE = 2;
    ADS_PAD_HPAPARKINBUILDMAPSWTSTS_HIGHLIGHT = 3;
  }
  enum ADSPADHPAParkoutBuildMapSwtStsType {
    ADS_PAD_HPAPARKOUTBUILDMAPSWTSTS_NOTSHOW = 0;
    ADS_PAD_HPAPARKOUTBUILDMAPSWTSTS_NOTAVAILABLE = 1;
    ADS_PAD_HPAPARKOUTBUILDMAPSWTSTS_AVAILABLE = 2;
    ADS_PAD_HPAPARKOUTBUILDMAPSWTSTS_HIGHLIGHT = 3;
  }
  enum ADSHPAAutoParkingActiveStsSType {
    ADS_HPAAUTOPARKINGACTIVESTS_S_NOTSHOW = 0;
    ADS_HPAAUTOPARKINGACTIVESTS_S_NOTAVAILABLE = 1;
    ADS_HPAAUTOPARKINGACTIVESTS_S_AVAILABLE = 2;
    ADS_HPAAUTOPARKINGACTIVESTS_S_RESERVED_3 = 3;
  }
  enum ADSPADHPAParkOutSwtStsType {
    ADS_PAD_HPAPARKOUTSWTSTS_NOTSHOW = 0;
    ADS_PAD_HPAPARKOUTSWTSTS_NOTAVAILABLE = 1;
    ADS_PAD_HPAPARKOUTSWTSTS_AVAILABLE = 2;
    ADS_PAD_HPAPARKOUTSWTSTS_HIGHLIGHT = 3;
  }
  enum ADSPADHPAParkInSwtStsType {
    ADS_PAD_HPAPARKINSWTSTS_NOTSHOW = 0;
    ADS_PAD_HPAPARKINSWTSTS_NOTAVAILABLE = 1;
    ADS_PAD_HPAPARKINSWTSTS_AVAILABLE = 2;
    ADS_PAD_HPAPARKINSWTSTS_HIGHLIGHT = 3;
  }
  enum ADSPADHPAPauseSwtStsType {
    ADS_PAD_HPAPAUSESWTSTS_NOTSHOW = 0;
    ADS_PAD_HPAPAUSESWTSTS_NOTAVAILABLE = 1;
    ADS_PAD_HPAPAUSESWTSTS_AVAILABLE = 2;
    ADS_PAD_HPAPAUSESWTSTS_RESERVED_3 = 3;
  }
  enum ADSPADHPAContinueSwtStsType {
    ADS_PAD_HPACONTINUESWTSTS_NOTSHOW = 0;
    ADS_PAD_HPACONTINUESWTSTS_NOTAVAILABLE = 1;
    ADS_PAD_HPACONTINUESWTSTS_AVAILABLE = 2;
    ADS_PAD_HPACONTINUESWTSTS_RESERVED_3 = 3;
  }
  enum ADSPADHPAFuncDisableDspType {
    ADS_PAD_HPAFUNCDISABLEDSP_NONE = 0;
    ADS_PAD_HPAFUNCDISABLEDSP_HPASWFAILURE = 1;
    ADS_PAD_HPAFUNCDISABLEDSP_ASSOCIATEDSYSTEMFAILURE = 2;
    ADS_PAD_HPAFUNCDISABLEDSP_MAPNOTAVAILABLE = 3;
    ADS_PAD_HPAFUNCDISABLEDSP_PHONEMODEINACTONPAD = 4;
    ADS_PAD_HPAFUNCDISABLEDSP_ACTSAFETYFUNCTACT = 5;
    ADS_PAD_HPAFUNCDISABLEDSP_EPBFAILURE = 6;
    ADS_PAD_HPAFUNCDISABLEDSP_ADSACT = 7;
    ADS_PAD_HPAFUNCDISABLEDSP_EPBACT = 8;
    ADS_PAD_HPAFUNCDISABLEDSP_UNPLUGCHARGGUN = 9;
    ADS_PAD_HPAFUNCDISABLEDSP_CCUFAILURE = 10;
    ADS_PAD_HPAFUNCDISABLEDSP_EPSFAILURE = 11;
    ADS_PAD_HPAFUNCDISABLEDSP_IPBFAILURE = 12;
    ADS_PAD_HPAFUNCDISABLEDSP_SCUFAILURE = 13;
    ADS_PAD_HPAFUNCDISABLEDSP_TPMSFAILURE = 14;
    ADS_PAD_HPAFUNCDISABLEDSP_LAMPFAILURE = 15;
    ADS_PAD_HPAFUNCDISABLEDSP_ACTSUSPENSIONINADJUST = 16;
    ADS_PAD_HPAFUNCDISABLEDSP_ILLUMINATIONCONDITIONS = 17;
    ADS_PAD_HPAFUNCDISABLEDSP_RAININGCONDITIONS = 18;
    ADS_PAD_HPAFUNCDISABLEDSP_EXCESSIVESLOPE = 19;
    ADS_PAD_HPAFUNCDISABLEDSP_TRAILERHITCHCONNECTED = 20;
    ADS_PAD_HPAFUNCDISABLEDSP_ACTSUSPENSIONFAILURE = 21;
    ADS_PAD_HPAFUNCDISABLEDSP_RADARFAILURE = 22;
    ADS_PAD_HPAFUNCDISABLEDSP_CAMERAFAILURE = 23;
    ADS_PAD_HPAFUNCDISABLEDSP_IMUFAILURE = 24;
    ADS_PAD_HPAFUNCDISABLEDSP_GNSSFAILURE = 25;
    ADS_PAD_HPAFUNCDISABLEDSP_BCMFAILURE = 26;
    ADS_PAD_HPAFUNCDISABLEDSP_VEHILESTALL = 27;
    ADS_PAD_HPAFUNCDISABLEDSP_PASFAILURE = 28;
    ADS_PAD_HPAFUNCDISABLEDSP_PADFAILURE = 29;
    ADS_PAD_HPAFUNCDISABLEDSP_APPFAILURE = 30;
    ADS_PAD_HPAFUNCDISABLEDSP_PHONEBATTERYLOWER = 31;
    ADS_PAD_HPAFUNCDISABLEDSP_EXITTRAILERMODE = 32;
    ADS_PAD_HPAFUNCDISABLEDSP_EXITCARWASH = 33;
    ADS_PAD_HPAFUNCDISABLEDSP_EGOCOLLIDED = 34;
    ADS_PAD_HPAFUNCDISABLEDSP_STARTHPAUNDERGROUNDPK = 35;
    ADS_PAD_HPAFUNCDISABLEDSP_ADCUHWFAILURE = 36;
    ADS_PAD_HPAFUNCDISABLEDSP_NONECOORCOMFORTACT = 37;
    ADS_PAD_HPAFUNCDISABLEDSP_POWERSYSTEMSTATUSLIMITED = 38;
    ADS_PAD_HPAFUNCDISABLEDSP_CRAWLCTRLACT = 39;
    ADS_PAD_HPAFUNCDISABLEDSP_AVMCALIBRATIONFAIL = 40;
    ADS_PAD_HPAFUNCDISABLEDSP_MAPCHECKPROCESS = 41;
    ADS_PAD_HPAFUNCDISABLEDSP_VEHICLERANGETOOLOW = 42;
    ADS_PAD_HPAFUNCDISABLEDSP_SYSTEMFAILURE = 43;
    ADS_PAD_HPAFUNCDISABLEDSP_STOP = 44;
    ADS_PAD_HPAFUNCDISABLEDSP_SLOWDOWN = 45;
    ADS_PAD_HPAFUNCDISABLEDSP_RESERVED_46 = 46;
    ADS_PAD_HPAFUNCDISABLEDSP_RESERVED_47 = 47;
    ADS_PAD_HPAFUNCDISABLEDSP_RESERVED_48 = 48;
    ADS_PAD_HPAFUNCDISABLEDSP_RESERVED_49 = 49;
    ADS_PAD_HPAFUNCDISABLEDSP_RESERVED_50 = 50;
    ADS_PAD_HPAFUNCDISABLEDSP_RESERVED_51 = 51;
    ADS_PAD_HPAFUNCDISABLEDSP_RESERVED_52 = 52;
    ADS_PAD_HPAFUNCDISABLEDSP_RESERVED_53 = 53;
    ADS_PAD_HPAFUNCDISABLEDSP_RESERVED_54 = 54;
    ADS_PAD_HPAFUNCDISABLEDSP_RESERVED_55 = 55;
    ADS_PAD_HPAFUNCDISABLEDSP_RESERVED_56 = 56;
    ADS_PAD_HPAFUNCDISABLEDSP_RESERVED_57 = 57;
    ADS_PAD_HPAFUNCDISABLEDSP_RESERVED_58 = 58;
    ADS_PAD_HPAFUNCDISABLEDSP_RESERVED_59 = 59;
    ADS_PAD_HPAFUNCDISABLEDSP_RESERVED_60 = 60;
    ADS_PAD_HPAFUNCDISABLEDSP_RESERVED_61 = 61;
    ADS_PAD_HPAFUNCDISABLEDSP_RESERVED_62 = 62;
    ADS_PAD_HPAFUNCDISABLEDSP_RESERVED_63 = 63;
  }
  enum ADSPADHPAPrkinStartSwtAvlType {
    ADS_PAD_HPAPRKINSTARTSWTAVL_NOTSHOW = 0;
    ADS_PAD_HPAPRKINSTARTSWTAVL_NOTAVAILABLE = 1;
    ADS_PAD_HPAPRKINSTARTSWTAVL_AVAILABLE = 2;
    ADS_PAD_HPAPRKINSTARTSWTAVL_RESERVED_3 = 3;
  }
  enum ADSTBOXHPAStsAvailType {
    ADS_TBOX_HPASTSAVAIL_INVALID = 0;
    ADS_TBOX_HPASTSAVAIL_NOTAVAILABLE = 1;
    ADS_TBOX_HPASTSAVAIL_AVAILABLE = 2;
    ADS_TBOX_HPASTSAVAIL_RESERVED_3 = 3;
  }
  enum ADSLVPMapStsType {
    ADS_LVP_MAPSTS_NONE = 0;
    ADS_LVP_MAPSTS_RECOMMANDPKINMAPBUILDING = 1;
    ADS_LVP_MAPSTS_RECOMMANDPKOUTMAPBUILDING = 2;
    ADS_LVP_MAPSTS_PK_INAVAILABLE = 3;
    ADS_LVP_MAPSTS_PK_OUT_AVAILABLE = 4;
    ADS_LVP_MAPSTS_PK_INREADY = 5;
    ADS_LVP_MAPSTS_PK_OUTREADY = 6;
    ADS_LVP_MAPSTS_PKINANDPKOUTMAPAVAILABLE = 7;
    ADS_LVP_MAPSTS_NOPKINANDPKOUTMAP = 8;
  }
  enum ADSLVPParkingModType {
    ADS_LVP_PARKING_MOD_NONE = 0;
    ADS_LVP_PARKING_MOD_PK_INMODE = 1;
    ADS_LVP_PARKING_MOD_PK_OUTMODE = 2;
    ADS_LVP_PARKING_MOD_RESERVED_3 = 3;
  }
  enum ADSLVPLearningProcessInfoType {
    ADS_LVP_LEARNING_PROCESS_INFO_NONE = 0;
    ADS_LVP_LEARNING_PROCESS_INFO_REQUESTSTOP = 1;
    ADS_LVP_LEARNING_PROCESS_INFO_REQUESTCLOSEENGINEHOOD = 2;
    ADS_LVP_LEARNING_PROCESS_INFO_REQUESTCLOSETRUNK = 3;
    ADS_LVP_LEARNING_PROCESS_INFO_REQUESTUNFOLDREARVIEWMIRROR = 4;
    ADS_LVP_LEARNING_PROCESS_INFO_REQUESTCLOSEDOOR = 5;
    ADS_LVP_LEARNING_PROCESS_INFO_EXCESSIVESLOPE = 6;
    ADS_LVP_LEARNING_PROCESS_INFO_LLIUMINATIONCONDITIONS = 7;
    ADS_LVP_LEARNING_PROCESS_INFO_REQUESTPKINSTART = 8;
    ADS_LVP_LEARNING_PROCESS_INFO_REQUESTPKOUTSTART = 9;
    ADS_LVP_LEARNING_PROCESS_INFO_REQUESTSLOWDOWN = 10;
    ADS_LVP_LEARNING_PROCESS_INFO_REQUESTDIST = 11;
    ADS_LVP_LEARNING_PROCESS_INFO_ENGINEHOODOPEN = 12;
    ADS_LVP_LEARNING_PROCESS_INFO_TRUNKOPEN = 13;
    ADS_LVP_LEARNING_PROCESS_INFO_REARVIEWMIRRORFOLD = 14;
    ADS_LVP_LEARNING_PROCESS_INFO_DOOROPEN = 15;
    ADS_LVP_LEARNING_PROCESS_INFO_SPEEDEXCEED = 16;
    ADS_LVP_LEARNING_PROCESS_INFO_APAAFUSSBLINDNESS = 17;
    ADS_LVP_LEARNING_PROCESS_INFO_DISTEXCEED = 18;
    ADS_LVP_LEARNING_PROCESS_INFO_TIMEEXCEED = 19;
    ADS_LVP_LEARNING_PROCESS_INFO_CAMERADUTY = 20;
    ADS_LVP_LEARNING_PROCESS_INFO_LIDARBLOCKED = 21;
    ADS_LVP_LEARNING_PROCESS_INFO_PKOUTMAPBUILDING = 22;
    ADS_LVP_LEARNING_PROCESS_INFO_EXCESSIVESLOPE_REPEAT = 23;
    ADS_LVP_LEARNING_PROCESS_INFO_REVERSEDISTEXCEED = 24;
    ADS_LVP_LEARNING_PROCESS_INFO_MAPBUILDING = 25;
    ADS_LVP_LEARNING_PROCESS_INFO_NOTINPLOT = 26;
    ADS_LVP_LEARNING_PROCESS_INFO_TAILINPLOT = 27;
    ADS_LVP_LEARNING_PROCESS_INFO_MAPBUILDSUCCESS = 28;
    ADS_LVP_LEARNING_PROCESS_INFO_MAPBUILDFAIL = 29;
    ADS_LVP_LEARNING_PROCESS_INFO_LEARNINGMAP = 30;
    ADS_LVP_LEARNING_PROCESS_INFO_DRIVETOTARGETSLOT = 31;
    ADS_LVP_LEARNING_PROCESS_INFO_PGEARFINISHEDPK = 32;
    ADS_LVP_LEARNING_PROCESS_INFO_DRIVETOTARGETPICKUP = 33;
    ADS_LVP_LEARNING_PROCESS_INFO_APAAFCCUFAILURE = 34;
    ADS_LVP_LEARNING_PROCESS_INFO_ADSSYSTEMFAILURE = 35;
    ADS_LVP_LEARNING_PROCESS_INFO_APAAFNONECOORCOMFORTORSPORTMODEACT = 36;
    ADS_LVP_LEARNING_PROCESS_INFO_APAPASUEFOROBSTACLE = 37;
    ADS_LVP_LEARNING_PROCESS_INFO_APAPASUEFORSEATBELTLOOSEN = 38;
    ADS_LVP_LEARNING_PROCESS_INFO_REQUESTFRONTPKOUTINPLOT = 39;
    ADS_LVP_LEARNING_PROCESS_INFO_DRIVETOSTARTPOINTIFTRYHPA = 40;
    ADS_LVP_LEARNING_PROCESS_INFO_ACTSUSPENSIONINADJUST_PROCESS = 41;
    ADS_LVP_LEARNING_PROCESS_INFO_CHOOSEMAPBUILDMODE = 42;
    ADS_LVP_LEARNING_PROCESS_INFO_REQUESTREBUILDPKINMAP = 43;
    ADS_LVP_LEARNING_PROCESS_INFO_REQUESTREBUILDPKOUTMAP = 44;
    ADS_LVP_LEARNING_PROCESS_INFO_TRAILERHITCHCONNECTED = 45;
    ADS_LVP_LEARNING_PROCESS_INFO_CHOOSEMANUALPKORAPATOFINISHMAP = 46;
    ADS_LVP_LEARNING_PROCESS_INFO_POWERSYSTEMSTATUSLIMITED = 47;
    ADS_LVP_LEARNING_PROCESS_INFO_NUMBEROFMAPLIMITED = 48;
    ADS_LVP_LEARNING_PROCESS_INFO_RELEASEBRAKEPEDALANDSTEERING = 49;
    ADS_LVP_LEARNING_PROCESS_INFO_USERPAUSEDAUTOPK = 50;
    ADS_LVP_LEARNING_PROCESS_INFO_BRAKEPEDALDEPRESSED = 51;
    ADS_LVP_LEARNING_PROCESS_INFO_APAAFASSOCIATEDSYSTEMFAILURE = 52;
    ADS_LVP_LEARNING_PROCESS_INFO_APAAFACTSAFETYFUNCTACT = 53;
    ADS_LVP_LEARNING_PROCESS_INFO_APAAFDRIVEROVERRIDE = 54;
    ADS_LVP_LEARNING_PROCESS_INFO_APAAFCHARGGUNACT = 55;
    ADS_LVP_LEARNING_PROCESS_INFO_APAAFAUTOPKFAILURE = 56;
    ADS_LVP_LEARNING_PROCESS_INFO_APAPASUEFORENGINEHOODOPEN = 57;
    ADS_LVP_LEARNING_PROCESS_INFO_APAPASUEFORTRUNKOPEN = 58;
    ADS_LVP_LEARNING_PROCESS_INFO_APAPASUEFORDOOROPEN = 59;
    ADS_LVP_LEARNING_PROCESS_INFO_APAPASUEFORREARVIEWMIRRORFOLD = 60;
    ADS_LVP_LEARNING_PROCESS_INFO_RESERVED_61 = 61;
    ADS_LVP_LEARNING_PROCESS_INFO_RESERVED_62 = 62;
    ADS_LVP_LEARNING_PROCESS_INFO_RESERVED_63 = 63;
  }
  enum ADSLVPFunctionDspType {
    ADS_LVP_FUNCTIONDSP_NONE = 0;
    ADS_LVP_FUNCTIONDSP_REQUESTSTOP = 1;
    ADS_LVP_FUNCTIONDSP_REQUESTCLOSEENGINEHOOD = 2;
    ADS_LVP_FUNCTIONDSP_REQUESTCLOSETRUNK = 3;
    ADS_LVP_FUNCTIONDSP_REQUESTUNFOLDREARVIEWMIRROR = 4;
    ADS_LVP_FUNCTIONDSP_REQUESTCLOSEDOOR = 5;
    ADS_LVP_FUNCTIONDSP_REQUESTFASTENSEATBELT = 6;
    ADS_LVP_FUNCTIONDSP_ACTSAFETYFUNCTACT = 7;
    ADS_LVP_FUNCTIONDSP_RETURNTOSTEERINGWHEEL = 8;
    ADS_LVP_FUNCTIONDSP_RELEASEACCELERATEPEDAL = 9;
    ADS_LVP_FUNCTIONDSP_REQUESTPKINBYAPPORPAD = 10;
    ADS_LVP_FUNCTIONDSP_LIDARBLOCKED = 11;
    ADS_LVP_FUNCTIONDSP_TIREPRESSUREISTOOLOW = 12;
    ADS_LVP_FUNCTIONDSP_ILLUMINATIONCONDITIONS = 13;
    ADS_LVP_FUNCTIONDSP_RAININGCONDITIONS = 14;
    ADS_LVP_FUNCTIONDSP_EXCESSIVESLOPE = 15;
    ADS_LVP_FUNCTIONDSP_REQUESTDISCONNECTCHARGPLUG = 16;
    ADS_LVP_FUNCTIONDSP_PK_INPREACT = 17;
    ADS_LVP_FUNCTIONDSP_PK_OUTPREACT = 18;
    ADS_LVP_FUNCTIONDSP_RELEASEBRAKEPEDALANDSTEERING = 19;
    ADS_LVP_FUNCTIONDSP_VEHICLEPOWERMODEISINPOWEROFF = 20;
    ADS_LVP_FUNCTIONDSP_EXITTRAILERMODE = 21;
    ADS_LVP_FUNCTIONDSP_EXITCARWASH = 22;
    ADS_LVP_FUNCTIONDSP_RADARBLINDNESS = 23;
    ADS_LVP_FUNCTIONDSP_MAPNOTAVAILABLE = 24;
    ADS_LVP_FUNCTIONDSP_CAMERADUTY = 25;
    ADS_LVP_FUNCTIONDSP_PK_INAVAILABLE = 26;
    ADS_LVP_FUNCTIONDSP_PK_OUT_AVAILABLE = 27;
    ADS_LVP_FUNCTIONDSP_PK_INCUS = 28;
    ADS_LVP_FUNCTIONDSP_PK_INPK = 29;
    ADS_LVP_FUNCTIONDSP_PK_OUTPK = 30;
    ADS_LVP_FUNCTIONDSP_PK_OUTCUS = 31;
    ADS_LVP_FUNCTIONDSP_CUSCLOSETOTARGETSLOT = 32;
    ADS_LVP_FUNCTIONDSP_CUSCLOSETOPICKUP = 33;
    ADS_LVP_FUNCTIONDSP_PK_INFINISH = 34;
    ADS_LVP_FUNCTIONDSP_PK_OUTFINISH = 35;
    ADS_LVP_FUNCTIONDSP_PKINFINISHBUTFTOCLOSEWINDOW = 36;
    ADS_LVP_FUNCTIONDSP_REQUESTACTHPAONPAD = 37;
    ADS_LVP_FUNCTIONDSP_PKINFINISHBUTFTOCLOSESKYLIGHT = 38;
    ADS_LVP_FUNCTIONDSP_PKINFINISHBUTFTOLOCKCAR = 39;
    ADS_LVP_FUNCTIONDSP_PKINCUSDISTPERCENTAGE50PERCENT = 40;
    ADS_LVP_FUNCTIONDSP_PKOUTCUSDISTPERCENTAGE50PERCENT = 41;
    ADS_LVP_FUNCTIONDSP_RESERVED_42 = 42;
    ADS_LVP_FUNCTIONDSP_PKOUTCUSDISTPERCENTAGE25PERCENT = 43;
    ADS_LVP_FUNCTIONDSP_PKINCUSREMAINDIST25M = 44;
    ADS_LVP_FUNCTIONDSP_PKOUTCUSREMAINDIST25M = 45;
    ADS_LVP_FUNCTIONDSP_POSITIONINGUNSUCCESSFULPKINMAP = 46;
    ADS_LVP_FUNCTIONDSP_POSITIONUNSUCCESSINPKOUTSLOTMAP = 47;
    ADS_LVP_FUNCTIONDSP_ACTSUSPENSIONFAILURE = 48;
    ADS_LVP_FUNCTIONDSP_PKINFINISHBUTFTOSTALL = 49;
    ADS_LVP_FUNCTIONDSP_TURNRSOON = 50;
    ADS_LVP_FUNCTIONDSP_TURNLSOON = 51;
    ADS_LVP_FUNCTIONDSP_WATCHPEDESTRIANSVEH_ONCROSSROAD = 52;
    ADS_LVP_FUNCTIONDSP_DETOURINGOBSTACLE = 53;
    ADS_LVP_FUNCTIONDSP_WATCHNARROWROAD = 54;
    ADS_LVP_FUNCTIONDSP_NONECOORCOMFORTORSPORTMODEACT = 55;
    ADS_LVP_FUNCTIONDSP_RESERVED_56 = 56;
    ADS_LVP_FUNCTIONDSP_RESERVED_57 = 57;
    ADS_LVP_FUNCTIONDSP_CHOOSEPKINORPKOUTMODE = 58;
    ADS_LVP_FUNCTIONDSP_CUSTOSEARCHRANDOMSLOT = 59;
    ADS_LVP_FUNCTIONDSP_PKINRANDOMSLOT = 60;
    ADS_LVP_FUNCTIONDSP_SLOTAVAILABLENEARBYTARGETSLOT = 61;
    ADS_LVP_FUNCTIONDSP_BRAKESTOPIFREQUESTPKINBYAPP = 62;
    ADS_LVP_FUNCTIONDSP_RESERVED_63 = 63;
  }
  enum ADSLVPAbortDspType {
    ADS_LVP_ABORTDSP_NONE = 0;
    ADS_LVP_ABORTDSP_AVP_FAILURE = 1;
    ADS_LVP_ABORTDSP_ASSOCIATEDSYSTEMFAILURE = 2;
    ADS_LVP_ABORTDSP_POSITIONINGUNSUCCESSFUL = 3;
    ADS_LVP_ABORTDSP_CUSTIMEOUT = 4;
    ADS_LVP_ABORTDSP_PKTIMEOUT = 5;
    ADS_LVP_ABORTDSP_SPEEDEXCEEDEDCUSBYPAD = 6;
    ADS_LVP_ABORTDSP_SPEEDEXCEEDEDCUSBYAPP = 7;
    ADS_LVP_ABORTDSP_SPEEDEXCEEDEDPK = 8;
    ADS_LVP_ABORTDSP_NUMBEROFPAUSESEXCEEDED = 9;
    ADS_LVP_ABORTDSP_VEHICLERANGETOOLOW = 10;
    ADS_LVP_ABORTDSP_ACTSAFETYFUNCTACT = 11;
    ADS_LVP_ABORTDSP_AVMCALIBRATIONFAIL = 12;
    ADS_LVP_ABORTDSP_IPBFAILURE = 13;
    ADS_LVP_ABORTDSP_CRAWLCTRLACT = 14;
    ADS_LVP_ABORTDSP_LIDARBLOCKED = 15;
    ADS_LVP_ABORTDSP_TPMSFAILURE = 16;
    ADS_LVP_ABORTDSP_ILLUMINATIONCONDITIONS = 17;
    ADS_LVP_ABORTDSP_RAININGCONDITIONS = 18;
    ADS_LVP_ABORTDSP_EXCESSIVESLOPE = 19;
    ADS_LVP_ABORTDSP_ADSFUNCTACT = 20;
    ADS_LVP_ABORTDSP_DRIVERHANDOVER = 21;
    ADS_LVP_ABORTDSP_RADARFAILURE = 22;
    ADS_LVP_ABORTDSP_CAMERAMALFUNCTION = 23;
    ADS_LVP_ABORTDSP_IMUFAILURE = 24;
    ADS_LVP_ABORTDSP_GNSSFAILURE = 25;
    ADS_LVP_ABORTDSP_BCMFAILURE = 26;
    ADS_LVP_ABORTDSP_VEHILESTALL = 27;
    ADS_LVP_ABORTDSP_PASFAILURE = 28;
    ADS_LVP_ABORTDSP_PADFAILURE = 29;
    ADS_LVP_ABORTDSP_EPSFAILURE = 30;
    ADS_LVP_ABORTDSP_CCUFAILURE = 31;
    ADS_LVP_ABORTDSP_NUMBEROFGEARCGSOVERTH = 32;
    ADS_LVP_ABORTDSP_COLLISIONACCIDENT = 33;
    ADS_LVP_ABORTDSP_INTERVENTIONSTEERING = 34;
    ADS_LVP_ABORTDSP_NONECOORCOMFORTORSPORTMODEACT = 35;
    ADS_LVP_ABORTDSP_INTERVENTIONGEAR = 36;
    ADS_LVP_ABORTDSP_PULLUPEPB = 37;
    ADS_LVP_ABORTDSP_USEREXITHPAONPAD = 38;
    ADS_LVP_ABORTDSP_USEREXITHPAONAPP = 39;
    ADS_LVP_ABORTDSP_ACTSUSPENSIONFAILURE = 40;
    ADS_LVP_ABORTDSP_TARGETSLOTNOTAVAILABLE = 41;
    ADS_LVP_ABORTDSP_SLOTUNAVAILABLEINPKINMAP = 42;
    ADS_LVP_ABORTDSP_SYSTEMPNCFAILUREFORNARROWROAD = 43;
    ADS_LVP_ABORTDSP_TRAILERHITCHCONNECTED = 44;
    ADS_LVP_ABORTDSP_ACTSUSPENSIONINADJUST_PROCESS = 45;
    ADS_LVP_ABORTDSP_PAUSETIMEOUT = 46;
    ADS_LVP_ABORTDSP_POWERSYSTEMSTATUSLIMITED = 47;
    ADS_LVP_ABORTDSP_ACCELERATEPEDALOVERRIDE = 48;
    ADS_LVP_ABORTDSP_TARGETPICKUPUNAVAILABLE = 49;
    ADS_LVP_ABORTDSP_LAMPFAILURE = 50;
    ADS_LVP_ABORTDSP_RESERVED_51 = 51;
    ADS_LVP_ABORTDSP_RESERVED_52 = 52;
    ADS_LVP_ABORTDSP_RESERVED_53 = 53;
    ADS_LVP_ABORTDSP_RESERVED_55 = 55;
    ADS_LVP_ABORTDSP_RESERVED_56 = 56;
    ADS_LVP_ABORTDSP_RESERVED_57 = 57;
    ADS_LVP_ABORTDSP_RESERVED_58 = 58;
    ADS_LVP_ABORTDSP_RESERVED_59 = 59;
    ADS_LVP_ABORTDSP_RESERVED_60 = 60;
    ADS_LVP_ABORTDSP_RESERVED_61 = 61;
    ADS_LVP_ABORTDSP_RESERVED_62 = 62;
    ADS_LVP_ABORTDSP_RESERVED_63 = 63;
  }
  enum ADSLVPCtrlModType {
    ADS_LVP_CTRLMOD_NONE = 0;
    ADS_LVP_CTRLMOD_PADCTRLMODE = 1;
    ADS_LVP_CTRLMOD_APPCTRLMODE = 2;
    ADS_LVP_CTRLMOD_RESERVED_3 = 3;
  }
  enum ADSLVPPausedDspType {
    ADS_LVP_PAUSEDDSP_NONE = 0;
    ADS_LVP_PAUSEDDSP_USERPAUSEDHPAONPAD = 1;
    ADS_LVP_PAUSEDDSP_ENGINEHOODOPEN = 2;
    ADS_LVP_PAUSEDDSP_TRUNKOPEN = 3;
    ADS_LVP_PAUSEDDSP_DOOROPEN = 4;
    ADS_LVP_PAUSEDDSP_REARVIEWMIRRORFOLD = 5;
    ADS_LVP_PAUSEDDSP_CHARGPLUGCONNECT = 6;
    ADS_LVP_PAUSEDDSP_SEATBELTLOOSEN = 7;
    ADS_LVP_PAUSEDDSP_BRAKEPEDALPRESSED = 8;
    ADS_LVP_PAUSEDDSP_FCTA = 9;
    ADS_LVP_PAUSEDDSP_DYNAMICOBSTACLE = 10;
    ADS_LVP_PAUSEDDSP_STATISTICOBSTACLE = 11;
    ADS_LVP_PAUSEDDSP_STATISTICOBSTACLE30S = 12;
    ADS_LVP_PAUSEDDSP_TBOXCONNECTBREAKOFF = 13;
    ADS_LVP_PAUSEDDSP_RCTA = 14;
    ADS_LVP_PAUSEDDSP_WINDOWSOPEN = 15;
    ADS_LVP_PAUSEDDSP_BTPHONE = 16;
    ADS_LVP_PAUSEDDSP_SUNROOFOPEN = 17;
    ADS_LVP_PAUSEDDSP_AUTOLIGHTCLOSE = 18;
    ADS_LVP_PAUSEDDSP_SLOTAVAILABLENEARBYTARGETSLOT = 19;
    ADS_LVP_PAUSEDDSP_ACCELERATEPEDALOVERRIDE = 20;
    ADS_LVP_PAUSEDDSP_USERPAUSEDHPAONAPP = 21;
    ADS_LVP_PAUSEDDSP_DOORUNLOCKED = 22;
    ADS_LVP_PAUSEDDSP_RADARBLINDNESS = 23;
    ADS_LVP_PAUSEDDSP_CAMERABLINDNESS = 24;
    ADS_LVP_PAUSEDDSP_RESERVED_25 = 25;
    ADS_LVP_PAUSEDDSP_RESERVED_26 = 26;
    ADS_LVP_PAUSEDDSP_RESERVED_27 = 27;
    ADS_LVP_PAUSEDDSP_RESERVED_28 = 28;
    ADS_LVP_PAUSEDDSP_RESERVED_29 = 29;
    ADS_LVP_PAUSEDDSP_RESERVED_30 = 30;
    ADS_LVP_PAUSEDDSP_RESERVED_31 = 31;
  }
  enum ADSHPAPushRequestType {
    ADS_HPAPUSHREQUEST_NONE = 0;
    ADS_HPAPUSHREQUEST_PUSHMAPREQUEST = 1;
    ADS_HPAPUSHREQUEST_PUSHPKREQUEST = 2;
    ADS_HPAPUSHREQUEST_RESERVED_3 = 3;
  }
  enum ADSPADLVPStsType {
    ADS_PAD_LVPSTS_OFF = 0;
    ADS_PAD_LVPSTS_STANDBY = 1;
    ADS_PAD_LVPSTS_LVPSTANDBY_RESERVED_2 = 2;
    ADS_PAD_LVPSTS_PK_INPREACT = 3;
    ADS_PAD_LVPSTS_PK_OUTPREACT = 4;
    ADS_PAD_LVPSTS_CUS = 5;
    ADS_PAD_LVPSTS_PKINPROCESS = 6;
    ADS_PAD_LVPSTS_PKOUTPROCESS = 7;
    ADS_PAD_LVPSTS_PAUSE = 8;
    ADS_PAD_LVPSTS_CPL = 9;
    ADS_PAD_LVPSTS_MRM = 10;
    ADS_PAD_LVPSTS_PK_INMAPBUILDING = 11;
    ADS_PAD_LVPSTS_PK_OUTMAPBUILDING = 12;
    ADS_PAD_LVPSTS_MAPCHECK = 13;
    ADS_PAD_LVPSTS_RESERVED_14 = 14;
    ADS_PAD_LVPSTS_RESERVED_15 = 15;
  }
  enum ADSTBOXLVPStsType {
    ADS_TBOX_LVPSTS_OFF = 0;
    ADS_TBOX_LVPSTS_STANDBY = 1;
    ADS_TBOX_LVPSTS_PK_INPREACT = 2;
    ADS_TBOX_LVPSTS_PK_OUTPREACT = 3;
    ADS_TBOX_LVPSTS_PAUSE = 4;
    ADS_TBOX_LVPSTS_CONTINUE = 5;
    ADS_TBOX_LVPSTS_CUS = 6;
    ADS_TBOX_LVPSTS_PKINPROCESS = 7;
    ADS_TBOX_LVPSTS_PKOUTPROCESS = 8;
    ADS_TBOX_LVPSTS_MRM = 9;
    ADS_TBOX_LVPSTS_RESERVED_10 = 10;
    ADS_TBOX_LVPSTS_RESERVED_11 = 11;
    ADS_TBOX_LVPSTS_RESERVED_12 = 12;
    ADS_TBOX_LVPSTS_RESERVED_13 = 13;
    ADS_TBOX_LVPSTS_RESERVED_14 = 14;
    ADS_TBOX_LVPSTS_RESERVED_15 = 15;
  }
  enum GNSSrtkstatus2CBSType {
    GNSS_RTK_STATUS_2CB_S_NOFIX = 0;
    GNSS_RTK_STATUS_2CB_S_SPP = 1;
    GNSS_RTK_STATUS_2CB_S_DGPS = 2;
    GNSS_RTK_STATUS_2CB_S_RESVERED_3 = 3;
    GNSS_RTK_STATUS_2CB_S_RTK_FIX = 4;
    GNSS_RTK_STATUS_2CB_S_RTK_FLOAT = 5;
    GNSS_RTK_STATUS_2CB_S_RESVERED_6 = 6;
    GNSS_RTK_STATUS_2CB_S_RESVERED_7 = 7;
  }
  enum Pkg2PADSpdRankStateFBSType {
    PKG2PAD_SPDRANK_STATE_FB_S_INVALID = 0;
    PKG2PAD_SPDRANK_STATE_FB_S_COMFORT_MODE = 1;
    PKG2PAD_SPDRANK_STATE_FB_S_EXTREME_SPEED_MODE = 2;
    PKG2PAD_SPDRANK_STATE_FB_S_RESERVED_3 = 3;
  }
  enum PkgVOT2PADInterfaceReqSType {
    PKGVOT2PAD_INTERFACE_REQ_S_INVALID = 0;
    PKGVOT2PAD_INTERFACE_REQ_S_NO_REQUEST = 1;
    PKGVOT2PAD_INTERFACE_REQ_S_REQUEST = 2;
    PKGVOT2PAD_INTERFACE_REQ_S_RESERVED_3 = 3;
  }
  enum PKGVOT2PADStateFBSType {
    PKGVOT2PAD_STATE_FB_S_INVALID = 0;
    PKGVOT2PAD_STATE_FB_S_OFF = 1;
    PKGVOT2PAD_STATE_FB_S_ON = 2;
    PKGVOT2PAD_STATE_FB_S_RESERVED_3 = 3;
  }
  enum ADSSVPParkinginModType {
    ADS_SVP_PARKING_IN_MOD_NONE = 0;
    ADS_SVP_PARKING_IN_MOD_STOREPKSLOTRECOMMEND = 1;
    ADS_SVP_PARKING_IN_MOD_CHARGPKSLOTRECOMMEND = 2;
    ADS_SVP_PARKING_IN_MOD_FUNCTRECOMMEND = 3;
  }
  enum AVPPADFunctipsType {
    AVP_PAD_FUNCTIPS_NONE = 0;
    AVP_PAD_FUNCTIPS_REQUESTSTOP = 1;
    AVP_PAD_FUNCTIPS_REQUESTCLOSEENGINEHOOD = 2;
    AVP_PAD_FUNCTIPS_REQUESTCLOSETRUNK = 3;
    AVP_PAD_FUNCTIPS_REQUESTUNFOLDREARVIEWMIRROR = 4;
    AVP_PAD_FUNCTIPS_REQUESTCLOSEDOOR = 5;
    AVP_PAD_FUNCTIPS_REQUESTFASTENSEATBELT = 6;
    AVP_PAD_FUNCTIPS_RCTBORFCTBACT = 7;
    AVP_PAD_FUNCTIPS_AEBACT = 8;
    AVP_PAD_FUNCTIPS_TCSORABSACT = 9;
    AVP_PAD_FUNCTIPS_ESPACT = 10;
    AVP_PAD_FUNCTIPS_HDCACT = 11;
    AVP_PAD_FUNCTIPS_TIREPRESSUREISTOOLOW = 12;
    AVP_PAD_FUNCTIPS_ILLUMINATIONCONDITIONS = 13;
    AVP_PAD_FUNCTIPS_RAININGCONDITIONS = 14;
    AVP_PAD_FUNCTIPS_EXCESSIVESLOPE = 15;
    AVP_PAD_FUNCTIPS_REQUESTDISCONNECTCHARGPLUG = 16;
    AVP_PAD_FUNCTIPS_PK_INPREACT = 17;
    AVP_PAD_FUNCTIPS_PK_OUTPREACT = 18;
    AVP_PAD_FUNCTIPS_RELEASEBRAKEPEDALANDSTEERING = 19;
    AVP_PAD_FUNCTIPS_REQUESTSTARTPOWER = 20;
    AVP_PAD_FUNCTIPS_EXITTRAILERMODE = 21;
    AVP_PAD_FUNCTIPS_EXITCARWASH = 22;
    AVP_PAD_FUNCTIPS_REQUESTPKINBYAPPORPAD = 23;
    AVP_PAD_FUNCTIPS_REQUESTCGPATH = 24;
    AVP_PAD_FUNCTIPS_PK_INCUSRANDOM = 25;
    AVP_PAD_FUNCTIPS_PK_INCUSSLOT = 26;
    AVP_PAD_FUNCTIPS_PK_INCUSAREA = 27;
    AVP_PAD_FUNCTIPS_PK_INCUS = 28;
    AVP_PAD_FUNCTIPS_PK_INPK = 29;
    AVP_PAD_FUNCTIPS_PK_OUTPK = 30;
    AVP_PAD_FUNCTIPS_PK_OUTCUS = 31;
    AVP_PAD_FUNCTIPS_CUSTOPKLOTEXIT = 32;
    AVP_PAD_FUNCTIPS_CUSTOENTRANCEOFELEVATOR = 33;
    AVP_PAD_FUNCTIPS_PNPREACHENTRANCEOFELEVATOR = 34;
    AVP_PAD_FUNCTIPS_PNPREACHPKLOTEXIT = 35;
    AVP_PAD_FUNCTIPS_CUSTODEFAULTENTRANCEOFELEVATOR = 36;
    AVP_PAD_FUNCTIPS_PNPREACHDEFAULTENTRANCEOFELEVATO = 37;
    AVP_PAD_FUNCTIPS_REQUESTUNDERGROUNDPK = 38;
    AVP_PAD_FUNCTIPS_STUDYAVP_ON_PAD = 39;
    AVP_PAD_FUNCTIPS_REQUESTLOGINACCOUNTONPAD = 40;
    AVP_PAD_FUNCTIPS_REQUESTLOGINACCOUNTONMOBILEPHONE = 41;
    AVP_PAD_FUNCTIPS_NOMAPONCAR = 42;
    AVP_PAD_FUNCTIPS_NOMAPONPHONE = 43;
    AVP_PAD_FUNCTIPS_MAPUPDATINGONCAR = 44;
    AVP_PAD_FUNCTIPS_MAPUPDATINGONPHONE = 45;
    AVP_PAD_FUNCTIPS_PK_INFINISH = 46;
    AVP_PAD_FUNCTIPS_PK_OUTFINISH = 47;
    AVP_PAD_FUNCTIPS_MAPUPDATEFAILEDONCAR = 48;
    AVP_PAD_FUNCTIPS_MAPUPDATEFAILEDONPHONE = 49;
    AVP_PAD_FUNCTIPS_ACTSUSPENSIONFAILURE = 50;
    AVP_PAD_FUNCTIPS_PKINCUSDISTPERCENTAGE50PERCENT = 51;
    AVP_PAD_FUNCTIPS_PKOUTCUSDISTPERCENTAGE50PERCENT = 52;
    AVP_PAD_FUNCTIPS_PKINCUSDISTPERCENTAGE25PERCENT = 53;
    AVP_PAD_FUNCTIPS_PKOUTCUSDISTPERCENTAGE25PERCENT = 54;
    AVP_PAD_FUNCTIPS_PKINCUSREMAINDIST25M = 55;
    AVP_PAD_FUNCTIPS_PKOUTCUSREMAINDIST25M = 56;
    AVP_PAD_FUNCTIPS_TURNRSOON = 57;
    AVP_PAD_FUNCTIPS_TURNLSOON = 58;
    AVP_PAD_FUNCTIPS_WATCHPEDESTRIANSANDVEH_ONCROSSROAD = 59;
    AVP_PAD_FUNCTIPS_DETOURINGOBSTACLE = 60;
    AVP_PAD_FUNCTIPS_WATCHNARROWROAD = 61;
    AVP_PAD_FUNCTIPS_PKINSLOT = 62;
    AVP_PAD_FUNCTIPS_NONECOORCOMFORTORSPORTMODEACT = 63;
  }
  enum ADSSVPHDMAPstsType {
    ADS_SVP_HDMAPSTS_NONE = 0;
    ADS_SVP_HDMAPSTS_MAPUPDATING = 1;
    ADS_SVP_HDMAPSTS_MAPREADY = 2;
    ADS_SVP_HDMAPSTS_MAPUPDATEFAILED = 3;
  }
  enum AVPPADAPEnterfailReasonType {
    AVP_PAD_AP_ENTERFAILREASON_NONE = 0;
    AVP_PAD_AP_ENTERFAILREASON_AVP_FAILURE = 1;
    AVP_PAD_AP_ENTERFAILREASON_ASSOCIATEDSYSTEMFAILURE = 2;
    AVP_PAD_AP_ENTERFAILREASON_POSITIONINGUNSUCCESSFUL = 3;
    AVP_PAD_AP_ENTERFAILREASON_TIMEOUTCUS = 4;
    AVP_PAD_AP_ENTERFAILREASON_TIMEOUTPK = 5;
    AVP_PAD_AP_ENTERFAILREASON_SPEEDEXCEEDEDCUSBYPAD = 6;
    AVP_PAD_AP_ENTERFAILREASON_SPEEDEXCEEDEDCUSBYAPP = 7;
    AVP_PAD_AP_ENTERFAILREASON_SPEEDEXCEEDEDPK = 8;
    AVP_PAD_AP_ENTERFAILREASON_NUMBEROFPAUSESEXCEEDED = 9;
    AVP_PAD_AP_ENTERFAILREASON_VEHICLERANGETOOLOW = 10;
    AVP_PAD_AP_ENTERFAILREASON_DOOROPEN = 11;
    AVP_PAD_AP_ENTERFAILREASON_LOOSENDRIVERSEATBELT = 12;
    AVP_PAD_AP_ENTERFAILREASON_REARVIEWMIRRORFOLDING = 13;
    AVP_PAD_AP_ENTERFAILREASON_RCTBORFCTBACT = 14;
    AVP_PAD_AP_ENTERFAILREASON_AEBACT = 15;
    AVP_PAD_AP_ENTERFAILREASON_TCSORABSACT = 16;
    AVP_PAD_AP_ENTERFAILREASON_ESPACT = 17;
    AVP_PAD_AP_ENTERFAILREASON_HDCACT = 18;
    AVP_PAD_AP_ENTERFAILREASON_TIREPRESSUREISTOOLOW = 19;
    AVP_PAD_AP_ENTERFAILREASON_ILLUMINATIONCONDITIONS = 20;
    AVP_PAD_AP_ENTERFAILREASON_RAININGCONDITIONS = 21;
    AVP_PAD_AP_ENTERFAILREASON_EXCESSIVESLOPE = 22;
    AVP_PAD_AP_ENTERFAILREASON_HANDSHAKEFAIL = 23;
    AVP_PAD_AP_ENTERFAILREASON_DRIVERHANDOVER = 24;
    AVP_PAD_AP_ENTERFAILREASON_RADARBLINDNESS = 25;
    AVP_PAD_AP_ENTERFAILREASON_CAMERADUTY = 26;
    AVP_PAD_AP_ENTERFAILREASON_INTERVENTIONSTEERING = 27;
    AVP_PAD_AP_ENTERFAILREASON_INTERVENTIONACCELERATORPEDAL = 28;
    AVP_PAD_AP_ENTERFAILREASON_INTERVENTIONGEAR = 29;
    AVP_PAD_AP_ENTERFAILREASON_PULLUPEPB = 30;
    AVP_PAD_AP_ENTERFAILREASON_SUSPENDONPAD = 31;
    AVP_PAD_AP_ENTERFAILREASON_SUSPENDONPHONE = 32;
    AVP_PAD_AP_ENTERFAILREASON_ACTSUSPENSIONFAILURE = 33;
    AVP_PAD_AP_ENTERFAILREASON_PHONEBATTERYLOWER = 34;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_35 = 35;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_36 = 36;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_37 = 37;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_38 = 38;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_39 = 39;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_40 = 40;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_41 = 41;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_42 = 42;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_43 = 43;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_44 = 44;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_45 = 45;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_46 = 46;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_47 = 47;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_49 = 49;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_50 = 50;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_51 = 51;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_52 = 52;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_53 = 53;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_55 = 55;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_56 = 56;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_57 = 57;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_58 = 58;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_59 = 59;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_60 = 60;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_61 = 61;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_62 = 62;
    AVP_PAD_AP_ENTERFAILREASON_RESERVED_63 = 63;
  }
  enum ADSAPABackParkSwtAvlType {
    ADS_APA_BACKPARKSWTAVL_NOTSHOW = 0;
    ADS_APA_BACKPARKSWTAVL_UNAVAILABLE = 1;
    ADS_APA_BACKPARKSWTAVL_HIGHLIGHT = 2;
    ADS_APA_BACKPARKSWTAVL_AVAILABLE = 3;
  }
  enum AVPPADAPNAVTipsType {
    AVP_PAD_AP_NAV_TIPS_NONE = 0;
    AVP_PAD_AP_NAV_TIPS_USERPAUSED = 1;
    AVP_PAD_AP_NAV_TIPS_ENGINEHOODOPEN = 2;
    AVP_PAD_AP_NAV_TIPS_TRUNKOPEN = 3;
    AVP_PAD_AP_NAV_TIPS_DOOROPEN = 4;
    AVP_PAD_AP_NAV_TIPS_REARVIEWMIRRORFOLD = 5;
    AVP_PAD_AP_NAV_TIPS_CHARGPLUGCONNECT = 6;
    AVP_PAD_AP_NAV_TIPS_SEATBELTLOOSEN = 7;
    AVP_PAD_AP_NAV_TIPS_DRIVENOTINSIDE = 8;
    AVP_PAD_AP_NAV_TIPS_TIMEOUT = 9;
    AVP_PAD_AP_NAV_TIPS_DYNAMICOBSTACLE = 10;
    AVP_PAD_AP_NAV_TIPS_STATISTICOBSTACLE = 11;
    AVP_PAD_AP_NAV_TIPS_STATISTICOBSTACLE30S = 12;
    AVP_PAD_AP_NAV_TIPS_SLOTNOTAVAILABLE = 13;
    AVP_PAD_AP_NAV_TIPS_TBOXCONNECTBREAKOFF = 14;
    AVP_PAD_AP_NAV_TIPS_VIDEOTRANSMISSIONUNSTABLE = 15;
    AVP_PAD_AP_NAV_TIPS_RESERVED_16 = 16;
    AVP_PAD_AP_NAV_TIPS_RESERVED_17 = 17;
    AVP_PAD_AP_NAV_TIPS_RESERVED_18 = 18;
    AVP_PAD_AP_NAV_TIPS_RESERVED_19 = 19;
    AVP_PAD_AP_NAV_TIPS_RESERVED_20 = 20;
    AVP_PAD_AP_NAV_TIPS_RESERVED_21 = 21;
    AVP_PAD_AP_NAV_TIPS_RESERVED_22 = 22;
    AVP_PAD_AP_NAV_TIPS_RESERVED_23 = 23;
    AVP_PAD_AP_NAV_TIPS_RESERVED_24 = 24;
    AVP_PAD_AP_NAV_TIPS_RESERVED_25 = 25;
    AVP_PAD_AP_NAV_TIPS_RESERVED_26 = 26;
    AVP_PAD_AP_NAV_TIPS_RESERVED_27 = 27;
    AVP_PAD_AP_NAV_TIPS_RESERVED_28 = 28;
    AVP_PAD_AP_NAV_TIPS_RESERVED_29 = 29;
    AVP_PAD_AP_NAV_TIPS_RESERVED_30 = 30;
    AVP_PAD_AP_NAV_TIPS_RESERVED_31 = 31;
  }
  enum ADSParkingDisplayRequestType {
    ADS_PARKINGDISPLAY_REQUEST_NOREQUEST = 0;
    ADS_PARKINGDISPLAY_REQUEST_REQUESTDISPLAYSEARCHING = 1;
    ADS_PARKINGDISPLAY_REQUEST_REQUESTDISPLAYPK = 2;
    ADS_PARKINGDISPLAY_REQUEST_PKPAUSE = 3;
    ADS_PARKINGDISPLAY_REQUEST_PKCPLD = 4;
    ADS_PARKINGDISPLAY_REQUEST_PKABORT = 5;
    ADS_PARKINGDISPLAY_REQUEST_REQUESTDISPLAYSEARCHING_FRONT = 6;
    ADS_PARKINGDISPLAY_REQUEST_RESERVED_7 = 7;
  }
  enum ADSPADSVPStsType {
    ADS_PAD_SVPSTS_OFF = 0;
    ADS_PAD_SVPSTS_STANDBY = 1;
    ADS_PAD_SVPSTS_MAPLOADING = 2;
    ADS_PAD_SVPSTS_LOCALIZED_RESERVED_3 = 3;
    ADS_PAD_SVPSTS_NAVIGATIONFUNCT = 4;
    ADS_PAD_SVPSTS_PNP = 5;
    ADS_PAD_SVPSTS_PK_INPREACT = 6;
    ADS_PAD_SVPSTS_PK_OUTPREACT = 7;
    ADS_PAD_SVPSTS_PKINPROCESS = 8;
    ADS_PAD_SVPSTS_PKOUTPROCESS = 9;
    ADS_PAD_SVPSTS_CUS = 10;
    ADS_PAD_SVPSTS_PAUSE = 11;
    ADS_PAD_SVPSTS_SUSPEND_RESERVED_12 = 12;
    ADS_PAD_SVPSTS_CPL = 13;
    ADS_PAD_SVPSTS_MRM = 14;
    ADS_PAD_SVPSTS_DISABLE_RESERVED_15 = 15;
  }
  enum ADSQuickEntryFunctStateFBSType {
    ADS_QUICKENTRY_FUNCT_STATE_FB_S_INVALID = 0;
    ADS_QUICKENTRY_FUNCT_STATE_FB_S_OFF = 1;
    ADS_QUICKENTRY_FUNCT_STATE_FB_S_ON = 2;
    ADS_QUICKENTRY_FUNCT_STATE_FB_S_RESERVED_3 = 3;
  }
  enum ADSAPASearchSuspendedReasonSType {
    ADS_APA_SEARCHSUSPENDEDREASON_S_NONE = 0;
    ADS_APA_SEARCHSUSPENDEDREASON_S_ANYDOOROPENDOORISNOTCLOSED = 1;
    ADS_APA_SEARCHSUSPENDEDREASON_S_MIRRORFOLD = 2;
    ADS_APA_SEARCHSUSPENDEDREASON_S_ENGINEHOODOPEN = 3;
    ADS_APA_SEARCHSUSPENDEDREASON_S_TRUNKOPEN = 4;
    ADS_APA_SEARCHSUSPENDEDREASON_S_PLEASERETURNTOTHESTEERINGWHEEL = 5;
    ADS_APA_SEARCHSUSPENDEDREASON_S_SEATBELTRELEASED = 6;
    ADS_APA_SEARCHSUSPENDEDREASON_S_PLEASE_BE_AWARE_OF_THE_CAR_SLIP = 7;
  }
  enum ADSAPAFrontParkStartSwtAvlType {
    ADS_APA_FRONTPARKSTARTSWTAVL_NOTSHOW = 0;
    ADS_APA_FRONTPARKSTARTSWTAVL_UNAVAILABLE = 1;
    ADS_APA_FRONTPARKSTARTSWTAVL_HIGHLIGHT = 2;
    ADS_APA_FRONTPARKSTARTSWTAVL_AVAILABLE = 3;
  }
  enum ADSAPAParkModeSType {
    ADS_APA_PARK_MODE_S_IDLE = 0;
    ADS_APA_PARK_MODE_S_PKIN = 1;
    ADS_APA_PARK_MODE_S_PKOUT = 2;
    ADS_APA_PARK_MODE_S_SELED = 3;
  }
  enum NotifyDataUploadStateType {
    NOTIFY_DATAUPLOAD_STATE_INVALID = 0;
    NOTIFY_DATAUPLOAD_STATE_DATAUPLOADOPENED = 1;
    NOTIFY_DATAUPLOAD_STATE_DATAUPLOADCLOSED = 2;
    NOTIFY_DATAUPLOAD_STATE_RESERVED_3 = 3;
  }
  enum ADSAPAParkInStartSwtAvlType {
    ADS_APA_PARKINSTARTSWTAVL_NOTSHOW = 0;
    ADS_APA_PARKINSTARTSWTAVL_UNAVAILABLE = 1;
    ADS_APA_PARKINSTARTSWTAVL_HIGHLIGHT = 2;
    ADS_APA_PARKINSTARTSWTAVL_AVAILABLE = 3;
  }
  enum ADSAPAPkgDispType {
    ADS_APA_PKGDISP_NONE = 0;
    ADS_APA_PKGDISP_SEARCHING_PROCESS = 1;
    ADS_APA_PKGDISP_FOUND_PARKING_SLOT_STOP = 2;
    ADS_APA_PKGDISP_PRESS_START_PARK_IN_BUTTON = 3;
    ADS_APA_PKGDISP_RELEASE_BRAKEPEDAL_STEERING = 4;
    ADS_APA_PKGDISP_PRESS_START_PARK_OUT_BUTTON = 5;
    ADS_APA_PKGDISP_PARKING_IN_PROCESS = 6;
    ADS_APA_PKGDISP_PARKING_OUT_PROCESS = 7;
    ADS_APA_PKGDISP_APA_COMPLETED = 8;
    ADS_APA_PKGDISP_PARKING_SLOT_TOO_SMALL_SUGGEST_TO_USE_RPA = 9;
    ADS_APA_PKGDISP_SLOW_DOWN = 10;
    ADS_APA_PKGDISP_STOP_SELECT_PSL = 11;
    ADS_APA_PKGDISP_SELECT_POC_DIRECTION = 12;
    ADS_APA_PKGDISP_NO_FRONT_OBJECT_DETECTED = 13;
    ADS_APA_PKGDISP_CONNECT_PHONE = 14;
    ADS_APA_PKGDISP_RPA_DISABLED_SUGGEST_TO_USE_APA = 15;
    ADS_APA_PKGDISP_BLUETOOTH_CONNECTED = 16;
    ADS_APA_PKGDISP_APPLIED_GEAR_P = 17;
    ADS_APA_PKGDISP_APPLIED_EPB = 18;
    ADS_APA_PKGDISP_LEAVE_CAR = 19;
    ADS_APA_PKGDISP_PRESS_START_BUTTON_BY_PHONE = 20;
    ADS_APA_PKGDISP_RPA_PROCESS = 21;
    ADS_APA_PKGDISP_RPA_COMPLETED = 22;
    ADS_APA_PKGDISP_PLEASE_CLOSE_THE_DOOR = 23;
    ADS_APA_PKGDISP_PLEASE_CLOSE_THE_FRONT_CABIN_COVER = 24;
    ADS_APA_PKGDISP_PLEASE_CLOSE_THE_TRUNK = 25;
    ADS_APA_PKGDISP_PLEASE_UNFOLD_THE_OUTSIDE_MIRROR = 26;
    ADS_APA_PKGDISP_PLEASE_BUCKLE_SEAT_BELT = 27;
    ADS_APA_PKGDISP_PLEASE_PRESS_BRAKE_PEDAL = 28;
    ADS_APA_PKGDISP_PLEASE_SELECT_A_PARKING_LOT = 29;
    ADS_APA_PKGDISP_STOP_SELECT_POC_DIRECTION = 30;
    ADS_APA_PKGDISP_STOP = 31;
    ADS_APA_PKGDISP_PLEASE_HOLD_THE_BRAKE_PEDAL_AND_CHOOSE_THE_PARKING_DIRECTION = 32;
    ADS_APA_PKGDISP_PARK_OUT_NOT_AVAILABLE = 33;
    ADS_APA_PKGDISP_RETURN_PROCESS = 34;
    ADS_APA_PKGDISP_RETURN_COMPLETE = 35;
    ADS_APA_PKGDISP_PARK_OUT_NOT_AVAILABLE_REPEAT = 36;
    ADS_APA_PKGDISP_PLEASE_BE_AWARE_OF_THE_CAR_SLIP = 37;
    ADS_APA_PKGDISP_SLOW_DOWN_REPEAT = 38;
    ADS_APA_PKGDISP_RELEASE_BRAKEPEDAL_STEERING_PARK_OUT = 39;
    ADS_APA_PKGDISP_RPA_PROCESS_PARK_OUT = 40;
    ADS_APA_PKGDISP_PARK_OUT_COMPLETED = 41;
    ADS_APA_PKGDISP_E4_PARKING = 42;
    ADS_APA_PKGDISP_SWITCH_TO_COMFORT_MODE = 43;
    ADS_APA_PKGDISP_SWITCH_TO_EXTREME_SPEED_MODE = 44;
    ADS_APA_PKGDISP_CLOSE_TO_OBSTACLE = 45;
    ADS_APA_PKGDISP_OBSTACLE_ON_PATH_PARKING_IS_WAITING = 46;
    ADS_APA_PKGDISP_OBSTACLES_BLOCK_PLEASE_ADJUST_THE_TARGET_PARKING_SPACE = 47;
  }
  enum ADSPADLVPPrkinSlotModType {
    ADS_PAD_LVPPRKINSLOTMOD_NOTAVAILABLE = 0;
    ADS_PAD_LVPPRKINSLOTMOD_PRKINRESERVEDSLOTMODE = 1;
    ADS_PAD_LVPPRKINSLOTMOD_PRKINRANDOMSLOTMODE = 2;
    ADS_PAD_LVPPRKINSLOTMOD_RESERVED_3 = 3;
  }
  enum ADSAPARearParkStartSwtAvlType {
    ADS_APA_REARPARKSTARTSWTAVL_NOTSHOW = 0;
    ADS_APA_REARPARKSTARTSWTAVL_UNAVAILABLE = 1;
    ADS_APA_REARPARKSTARTSWTAVL_AVAILABLE = 2;
    ADS_APA_REARPARKSTARTSWTAVL_RESERVED_3 = 3;
  }
  enum ADSRPAParkModeSType {
    ADS_RPA_PARK_MODE_S_IDLE = 0;
    ADS_RPA_PARK_MODE_S_PKIN = 1;
    ADS_RPA_PARK_MODE_S_PKOUT = 2;
    ADS_RPA_PARK_MODE_S_RESERVED_3 = 3;
  }
  enum ADSAPASuspendedReasonSType {
    ADS_APA_SUSPENDEDREASON_S_NOTSUSPENDEDNOPROMPT = 0;
    ADS_APA_SUSPENDEDREASON_S_AUTOPARPAUSECOMMANDISENABLED = 1;
    ADS_APA_SUSPENDEDREASON_S_OBSTACLEONPATH = 2;
    ADS_APA_SUSPENDEDREASON_S_ANYDOOROPENDOORISNOTCLOSED = 3;
    ADS_APA_SUSPENDEDREASON_S_BRAKEPEDALDEPRESSED = 4;
    ADS_APA_SUSPENDEDREASON_S_MIRRORFOLD = 5;
    ADS_APA_SUSPENDEDREASON_S_SEATBELTRELEASED = 6;
    ADS_APA_SUSPENDEDREASON_S_BTCONNECTIONISDISCONNECTED = 7;
    ADS_APA_SUSPENDEDREASON_S_HOODOPEN = 8;
    ADS_APA_SUSPENDEDREASON_S_TRUNCKOPEN = 9;
    ADS_APA_SUSPENDEDREASON_S_FCTA = 10;
    ADS_APA_SUSPENDEDREASON_S_RCTA = 11;
    ADS_APA_SUSPENDEDREASON_S_RESERVED_12 = 12;
    ADS_APA_SUSPENDEDREASON_S_RESERVED_13 = 13;
    ADS_APA_SUSPENDEDREASON_S_RESERVED_14 = 14;
    ADS_APA_SUSPENDEDREASON_S_RESERVED_15 = 15;
  }
  enum ADSAPAAutoParkingStatusSType {
    ADS_APA_AUTO_PARKING_STATUS_S_STATEMANUALDRIVE = 0;
    ADS_APA_AUTO_PARKING_STATUS_S_PK_INPREACT = 1;
    ADS_APA_AUTO_PARKING_STATUS_S_MANUALDRIVINGSEARCHING = 2;
    ADS_APA_AUTO_PARKING_STATUS_S_PK_OUTPREACT = 3;
    ADS_APA_AUTO_PARKING_STATUS_S_ACT = 4;
    ADS_APA_AUTO_PARKING_STATUS_S_PAUSE = 5;
    ADS_APA_AUTO_PARKING_STATUS_S_CPLD = 6;
    ADS_APA_AUTO_PARKING_STATUS_S_MRM = 7;
  }
  enum ADSAPAPauseSwtAvlType {
    ADS_APA_PAUSESWTAVL_NOTSHOW = 0;
    ADS_APA_PAUSESWTAVL_UNAVAILABLE = 1;
    ADS_APA_PAUSESWTAVL_AVAILABLE = 2;
    ADS_APA_PAUSESWTAVL_RESERVED_3 = 3;
  }
  enum ADSLVPPrkinStsByMobileSType {
    ADS_LVPPRKINSTSBYMOBILE_S_NOTSHOW = 0;
    ADS_LVPPRKINSTSBYMOBILE_S_NOTAVAILABLE = 1;
    ADS_LVPPRKINSTSBYMOBILE_S_AVAILABLE = 2;
    ADS_LVPPRKINSTSBYMOBILE_S_SELED = 3;
  }
  enum ADSAPAAbortReasonSType {
    ADS_APA_ABORTREASON_S_NOFAULT = 0;
    ADS_APA_ABORTREASON_S_EPSFAILURE = 1;
    ADS_APA_ABORTREASON_S_IPBFAILURE = 2;
    ADS_APA_ABORTREASON_S_SCUFAILURE = 3;
    ADS_APA_ABORTREASON_S_SASFAILURE = 4;
    ADS_APA_ABORTREASON_S_APAFAILURE = 5;
    ADS_APA_ABORTREASON_S_INVALIDVEHICLESPEED = 6;
    ADS_APA_ABORTREASON_S_INVALIDBRAKEPEDALSWITCHSTATE = 7;
    ADS_APA_ABORTREASON_S_SASNOTCALIBRATED = 8;
    ADS_APA_ABORTREASON_S_ABSTCSESPACCAEBACT = 9;
    ADS_APA_ABORTREASON_S_EPBACT = 10;
    ADS_APA_ABORTREASON_S_DRIVEROVERRIDE = 11;
    ADS_APA_ABORTREASON_S_CHARGGUNACT = 12;
    ADS_APA_ABORTREASON_S_SPACEISLIMITEDINPKOUTMODE = 13;
    ADS_APA_ABORTREASON_S_CURRENTSTEPNUMBEROVERTH = 14;
    ADS_APA_ABORTREASON_S_INTERRUPTNUMBEROVERTH = 15;
    ADS_APA_ABORTREASON_S_APSTIMEOUT = 16;
    ADS_APA_ABORTREASON_S_VEHICLESPEEDOVERTH = 17;
    ADS_APA_ABORTREASON_S_ROUTEPLANNINGFAILURE = 18;
    ADS_APA_ABORTREASON_S_BTDISCONNECTIONTIMEOUT = 19;
    ADS_APA_ABORTREASON_S_EPBFAILURE = 20;
    ADS_APA_ABORTREASON_S_SEATBELTUNBUCKLE = 21;
    ADS_APA_ABORTREASON_S_EXCESSIVESLOPE = 22;
    ADS_APA_ABORTREASON_S_VEHICLEBLOCK = 23;
    ADS_APA_ABORTREASON_S_SURROUNDVIEW = 24;
    ADS_APA_ABORTREASON_S_DOORLOCK = 25;
    ADS_APA_ABORTREASON_S_TBOXFAILURERPA = 26;
    ADS_APA_ABORTREASON_S_REMOTEDEVICEREASONRPA = 27;
    ADS_APA_ABORTREASON_S_UNSAFEBEHAVIOR = 28;
    ADS_APA_ABORTREASON_S_DOOROPEN = 29;
    ADS_APA_ABORTREASON_S_EXTRECUFAILURE = 30;
    ADS_APA_ABORTREASON_S_RESPONSEOVERTH = 31;
    ADS_APA_ABORTREASON_S_RADARBLINDNESS = 32;
    ADS_APA_ABORTREASON_S_CAMERADUTY = 33;
    ADS_APA_ABORTREASON_S_SEARCHTIMEOUT = 34;
    ADS_APA_ABORTREASON_S_STEERINGOVERRIDE = 35;
    ADS_APA_ABORTREASON_S_GEAROVERRIDE = 36;
    ADS_APA_ABORTREASON_S_ACCELERATEPEDALOVERRIDE = 37;
    ADS_APA_ABORTREASON_S_DISUSFAILURE = 38;
    ADS_APA_ABORTREASON_S_CCUFAILURE = 39;
    ADS_APA_ABORTREASON_S_IF_THE_PATH_IS_CLEAR_PLEASE_PARK_YOURSELF_OUT = 40;
    ADS_APA_ABORTREASON_S_ADJUSTINGTHEACTIVESUSPENSION = 41;
    ADS_APA_ABORTREASON_S_TRAILER_DEVICE_CONNECTED = 42;
    ADS_APA_ABORTREASON_S_THE_CURRENT_DRIVING_MODE_IS_NOT_APPLICABLE = 43;
    ADS_APA_ABORTREASON_S_SURENVRISABNORMAL = 44;
    ADS_APA_ABORTREASON_S_CHASSISACTSAFETYFUNCTACT = 45;
    ADS_APA_ABORTREASON_S_COLLISIONOCCURS = 46;
    ADS_APA_ABORTREASON_S_SLOTISOCCUPIED = 47;
    ADS_APA_ABORTREASON_S_EXCESSIVEVEHICLESPEED = 48;
    ADS_APA_ABORTREASON_S_VOTFAILURE = 49;
    ADS_APA_ABORTREASON_S_RESERVED_50 = 50;
    ADS_APA_ABORTREASON_S_RESERVED_51 = 51;
    ADS_APA_ABORTREASON_S_RESERVED_52 = 52;
    ADS_APA_ABORTREASON_S_RESERVED_53 = 53;
    ADS_APA_ABORTREASON_S_RESERVED_55 = 55;
    ADS_APA_ABORTREASON_S_RESERVED_56 = 56;
    ADS_APA_ABORTREASON_S_RESERVED_57 = 57;
    ADS_APA_ABORTREASON_S_RESERVED_58 = 58;
    ADS_APA_ABORTREASON_S_RESERVED_59 = 59;
    ADS_APA_ABORTREASON_S_RESERVED_60 = 60;
    ADS_APA_ABORTREASON_S_RESERVED_61 = 61;
    ADS_APA_ABORTREASON_S_RESERVED_62 = 62;
    ADS_APA_ABORTREASON_S_RESERVED_63 = 63;
  }
  enum ADSSVPParkingModType {
    ADS_SVP_PARKING_MOD_NONE = 0;
    ADS_SVP_PARKING_MOD_PK_INMODE = 1;
    ADS_SVP_PARKING_MOD_PK_OUTMODE = 2;
    ADS_SVP_PARKING_MOD_RESERVED_3 = 3;
  }
  enum ADSAPASelectParkSwtAvlType {
    ADS_APA_SELECTPARKSWTAVL_NOTSHOW = 0;
    ADS_APA_SELECTPARKSWTAVL_UNAVAILABLE = 1;
    ADS_APA_SELECTPARKSWTAVL_HIGHLIGHT = 2;
    ADS_APA_SELECTPARKSWTAVL_AVAILABLE = 3;
  }
  enum LocationAuthReqSType {
    LOCATION_AUTH_REQ_S_INVALID = 0;
    LOCATION_AUTH_REQ_S_REQUESTAUTHORIZEDLOCATION = 1;
    LOCATION_AUTH_REQ_S_UNREQUESTAUTHORIZEDLOCATION = 2;
    LOCATION_AUTH_REQ_S_RESERVED_3 = 3;
  }
  enum ADSTBOXParkInSwtStsType {
    ADS_TBOX_PARKINSWTSTS_INVALID = 0;
    ADS_TBOX_PARKINSWTSTS_NOTAVAILABLE = 1;
    ADS_TBOX_PARKINSWTSTS_AVAILABLE = 2;
    ADS_TBOX_PARKINSWTSTS_RESERVED_3 = 3;
  }
  enum ADSLVPPushingFuncFBType {
    ADS_LVPPUSHINGFUNCFB_INVALID = 0;
    ADS_LVPPUSHINGFUNCFB_OFF = 1;
    ADS_LVPPUSHINGFUNCFB_ON = 2;
    ADS_LVPPUSHINGFUNCFB_RESERVED_3 = 3;
  }
  enum ADSPSLDispSts1Type {
    ADS_PSLDISPSTS_1_NONE = 0;
    ADS_PSLDISPSTS_1_PSLVACANT = 1;
    ADS_PSLDISPSTS_1_PSLOCCUPIED = 2;
    ADS_PSLDISPSTS_1_RESERVED_3 = 3;
  }
  enum ADSPSLDispSts2Type {
    ADS_PSLDISPSTS_2_NONE = 0;
    ADS_PSLDISPSTS_2_PSLVACANT = 1;
    ADS_PSLDISPSTS_2_PSLOCCUPIED = 2;
    ADS_PSLDISPSTS_2_RESERVED_3 = 3;
  }
  enum ADSPSLDispSts3Type {
    ADS_PSLDISPSTS_3_NONE = 0;
    ADS_PSLDISPSTS_3_PSLVACANT = 1;
    ADS_PSLDISPSTS_3_PSLOCCUPIED = 2;
    ADS_PSLDISPSTS_3_RESERVED_3 = 3;
  }
  enum ADSPSLDispSts4Type {
    ADS_PSLDISPSTS_4_NONE = 0;
    ADS_PSLDISPSTS_4_PSLVACANT = 1;
    ADS_PSLDISPSTS_4_PSLOCCUPIED = 2;
    ADS_PSLDISPSTS_4_RESERVED_3 = 3;
  }
  enum ADSPSLDispSts5Type {
    ADS_PSLDISPSTS_5_NONE = 0;
    ADS_PSLDISPSTS_5_PSLVACANT = 1;
    ADS_PSLDISPSTS_5_PSLOCCUPIED = 2;
    ADS_PSLDISPSTS_5_RESERVED_3 = 3;
  }
  enum ADSPSLDispSts6Type {
    ADS_PSLDISPSTS_6_NONE = 0;
    ADS_PSLDISPSTS_6_PSLVACANT = 1;
    ADS_PSLDISPSTS_6_PSLOCCUPIED = 2;
    ADS_PSLDISPSTS_6_RESERVED_3 = 3;
  }
  enum ADSPADMAParkDisplayReqType {
    ADS_PAD_MAPARKDISPLAYREQ_NO_REQUEST = 0;
    ADS_PAD_MAPARKDISPLAYREQ_MAP_MODE = 1;
    ADS_PAD_MAPARKDISPLAYREQ_PARK_MODE = 2;
    ADS_PAD_MAPARKDISPLAYREQ_RESERVED_3 = 3;
  }
  enum ADSPADHPAResetParkOutMAPSwtStsType {
    ADS_PAD_HPARESETPARKOUTMAPSWTSTS_NOTSHOW = 0;
    ADS_PAD_HPARESETPARKOUTMAPSWTSTS_NOTAVAILABLE = 1;
    ADS_PAD_HPARESETPARKOUTMAPSWTSTS_AVAILABLE = 2;
    ADS_PAD_HPARESETPARKOUTMAPSWTSTS_HIGHLIGHT = 3;
  }
  enum ADSPADHPAResetParkInMAPSwtStsType {
    ADS_PAD_HPARESETPARKINMAPSWTSTS_NOTSHOW = 0;
    ADS_PAD_HPARESETPARKINMAPSWTSTS_NOTAVAILABLE = 1;
    ADS_PAD_HPARESETPARKINMAPSWTSTS_AVAILABLE = 2;
    ADS_PAD_HPARESETPARKINMAPSWTSTS_HIGHLIGHT = 3;
  }
  enum ADSAPAParkOutStartSwtAvlType {
    ADS_APA_PARKOUTSTARTSWTAVL_NOTSHOW = 0;
    ADS_APA_PARKOUTSTARTSWTAVL_UNAVAILABLE = 1;
    ADS_APA_PARKOUTSTARTSWTAVL_HIGHLIGHT = 2;
    ADS_APA_PARKOUTSTARTSWTAVL_AVAILABLE = 3;
  }
  enum ADSAPAPkgResumeSwtAvlType {
    ADS_APA_PKGRESUMESWTAVL_NOTSHOW = 0;
    ADS_APA_PKGRESUMESWTAVL_UNAVAILABLE = 1;
    ADS_APA_PKGRESUMESWTAVL_HIGHLIGHT = 2;
    ADS_APA_PKGRESUMESWTAVL_AVAILABLE = 3;
  }
  enum ADSAPAConfirmSwtAvlType {
    ADS_APA_CONFIRMSWTAVL_NOTSHOW = 0;
    ADS_APA_CONFIRMSWTAVL_UNAVAILABLE = 1;
    ADS_APA_CONFIRMSWTAVL_HIGHLIGHT = 2;
    ADS_APA_CONFIRMSWTAVL_AVAILABLE = 3;
  }
  enum ADSPADHPARoatePadStatusType {
    ADS_PAD_HPAROATEPADSTATUS_INVALID = 0;
    ADS_PAD_HPAROATEPADSTATUS_HORIZONTALSCREEN = 1;
    ADS_PAD_HPAROATEPADSTATUS_VERTICALSCREEN = 2;
    ADS_PAD_HPAROATEPADSTATUS_RESERVED_3 = 3;
  }
  enum ADSPADHPAParkMapEndSetSwtStsType {
    ADS_PAD_HPAPARKMAPENDSETSWTSTS_NOTSHOW = 0;
    ADS_PAD_HPAPARKMAPENDSETSWTSTS_NOTAVAILABLE = 1;
    ADS_PAD_HPAPARKMAPENDSETSWTSTS_AVAILABLE = 2;
    ADS_PAD_HPAPARKMAPENDSETSWTSTS_RESERVED_3 = 3;
  }
  enum MapDownloadfailReaSType {
    MAP_DOWNLOADFAIL_REA_S_INVALID = 0;
    MAP_DOWNLOADFAIL_REA_S_AUNTICATION_FAILED_S = 1;
    MAP_DOWNLOADFAIL_REA_S_CLOUD_CON_FAIL_S = 2;
    MAP_DOWNLOADFAIL_REA_S_MEM_RW_FAIL_S = 3;
    MAP_DOWNLOADFAIL_REA_S_NETWORK_CONN_FAIL_S = 4;
    MAP_DOWNLOADFAIL_REA_S_WIFI_NOT_CONN_S = 5;
    MAP_DOWNLOADFAIL_REA_S_RESERVED_6 = 6;
    MAP_DOWNLOADFAIL_REA_S_RESERVED_7 = 7;
  }
  enum ADSSVPCompleteDspType {
    ADS_SVP_COMPLETEDSP_NONE = 0;
    ADS_SVP_COMPLETEDSP_PKINFINISH = 1;
    ADS_SVP_COMPLETEDSP_PKOUTFINISH = 2;
    ADS_SVP_COMPLETEDSP_RESERVED_3 = 3;
  }
  enum ADSSVPVideoStreamPushStateType {
    ADS_SVPVIDEOSTREAM_PUSHSTATE_NOTPUSH = 0;
    ADS_SVPVIDEOSTREAM_PUSHSTATE_PUSHING = 1;
    ADS_SVPVIDEOSTREAM_PUSHSTATE_FAILURE = 2;
    ADS_SVPVIDEOSTREAM_PUSHSTATE_PUSHINGWIRROR = 3;
    ADS_SVPVIDEOSTREAM_PUSHSTATE_RESERVED_4 = 4;
    ADS_SVPVIDEOSTREAM_PUSHSTATE_RESERVED_5 = 5;
    ADS_SVPVIDEOSTREAM_PUSHSTATE_RESERVED_6 = 6;
    ADS_SVPVIDEOSTREAM_PUSHSTATE_RESERVED_7 = 7;
  }
  enum ADSHighBeamLampRequestType {
    ADS_HIGHBEAMLAMP_REQUEST_NOREQUEST = 0;
    ADS_HIGHBEAMLAMP_REQUEST_REQUESTHIGHBEAM = 1;
    ADS_HIGHBEAMLAMP_REQUEST_REQUESTOVERTAKING = 2;
    ADS_HIGHBEAMLAMP_REQUEST_RESERVED_3 = 3;
  }
  enum ADSMirrorRequestType {
    ADS_MIRROR_REQUEST_NOREQUEST = 0;
    ADS_MIRROR_REQUEST_REQUESTTOFOLD = 1;
    ADS_MIRROR_REQUEST_REQUESTTOUNFOLD = 2;
    ADS_MIRROR_REQUEST_RESERVED_3 = 3;
  }
  enum PKGVOT2PADReturnSwtAvlType {
    PKGVOT2PAD_RETURNSWTAVL_NOTSHOW = 0;
    PKGVOT2PAD_RETURNSWTAVL_UNAVAILABLE = 1;
    PKGVOT2PAD_RETURNSWTAVL_HIGHLIGHT = 2;
    PKGVOT2PAD_RETURNSWTAVL_AVAILABLE = 3;
  }
  // ADS_PAD_HPAParkinBuildMapSwtSts [] [0|3]
  optional ADSPADHPAParkinBuildMapSwtStsType ads_pad_hpa_parkin_build_map_swt_sts = 1;
  // ADS_PAD_HPAParkoutBuildMapSwtSts [] [0|3]
  optional ADSPADHPAParkoutBuildMapSwtStsType ads_pad_hpa_parkout_build_map_swt_sts = 2;
  // ADS_HPAAutoParkingActiveSts_S [] [0|3]
  optional ADSHPAAutoParkingActiveStsSType ads_hpa_auto_parking_active_sts_s = 3;
  // ADS_PAD_HPAParkOutSwtSts [] [0|3]
  optional ADSPADHPAParkOutSwtStsType ads_pad_hpa_park_out_swt_sts = 4;
  // ADS_PAD_HPAParkInSwtSts [] [0|3]
  optional ADSPADHPAParkInSwtStsType ads_pad_hpa_park_in_swt_sts = 5;
  // ADS_PAD_HPAPauseSwtSts [] [0|3]
  optional ADSPADHPAPauseSwtStsType ads_pad_hpa_pause_swt_sts = 6;
  // ADS_PAD_HPAContinueSwtSts [] [0|3]
  optional ADSPADHPAContinueSwtStsType ads_pad_hpa_continue_swt_sts = 7;
  // ADS_PAD_HPAFuncDisableDsp [] [0|63]
  optional ADSPADHPAFuncDisableDspType ads_pad_hpa_func_disable_dsp = 8;
  // ADS_PAD_HPAPrkinStartSwtAvl [] [0|3]
  optional ADSPADHPAPrkinStartSwtAvlType ads_pad_hpa_prkin_start_swt_avl = 9;
  // ADS_TBOX_HPAStsAvail [] [0|3]
  optional ADSTBOXHPAStsAvailType ads_tbox_hpa_sts_avail = 10;
  // ADS_LVP_MapSts [] [0|7]
  optional ADSLVPMapStsType ads_lvp_map_sts = 11;
  // ADS_LVP_ParkInSwtAvail [] [0|1]
  optional bool ads_lvp_park_in_swt_avail = 12;
  // ADS_LVP_ParkOutSwtAvail [] [0|1]
  optional bool ads_lvp_park_out_swt_avail = 13;
  // ADS_LVP_Parking_Mod [] [0|3]
  optional ADSLVPParkingModType ads_lvp_parking_mod = 14;
  // ADS_LVP_LrngDst [] [0|1023]
  optional int32 ads_lvp_lrng_dst = 15;
  // ADS_LVP_Learning_Process_Info [] [0|63]
  optional ADSLVPLearningProcessInfoType ads_lvp_learning_process_info = 16;
  // ADS_LVP_RemainDst [] [0|1023]
  optional int32 ads_lvp_remain_dst = 17;
  // ADS_LVP_FunctionDsp [] [0|63]
  optional ADSLVPFunctionDspType ads_lvp_function_dsp = 18;
  // ADS_LVP_AbortDsp [] [0|63]
  optional ADSLVPAbortDspType ads_lvp_abort_dsp = 19;
  // ADS_LVP_CtrlMod [] [0|3]
  optional ADSLVPCtrlModType ads_lvp_ctrl_mod = 20;
  // ADS_LVP_PausedDsp [] [0|31]
  optional ADSLVPPausedDspType ads_lvp_paused_dsp = 21;
  // ADS_LVP_ContinueSwtAvail [] [0|1]
  optional bool ads_lvp_continue_swt_avail = 22;
  // ADS_PAD_LVPParkinStartSetAvl [] [0|1]
  optional bool ads_pad_lvp_parkin_start_set_avl = 23;
  // ADS_PAD_LVPParkoutStartSetAvl [] [0|1]
  optional bool ads_pad_lvp_parkout_start_set_avl = 24;
  // ADS_PAD_LVPEndSetAvl [] [0|1]
  optional bool ads_pad_lvp_end_set_avl = 25;
  // ADS_HPAPushRequest [] [0|3]
  optional ADSHPAPushRequestType ads_hpa_push_request = 26;
  // ADS_PAD_LVPSts [] [0|15]
  optional ADSPADLVPStsType ads_pad_lvp_sts = 27;
  // ADS_TBOX_LVPSts [] [0|15]
  optional ADSTBOXLVPStsType ads_tbox_lvp_sts = 28;
  // ADS_SVP_Avail [] [0|1]
  optional bool ads_svp_avail = 29;
  // GNSS_rtk_status_2CB_S [] [0|7]
  optional GNSSrtkstatus2CBSType gnss_rtk_status_2_cb_s = 30;
  // ADS_SVP_PathPlanning [] [0|65535]
  optional int32 ads_svp_path_planning = 31;
  // ADS_SVP_Ego_X [] [0|65535]
  optional int32 ads_svp_ego_x = 32;
  // ADS_SVP_Ego_Y [] [0|65535]
  optional int32 ads_svp_ego_y = 33;
  // ADS_SVP_Ego_Angle [] [0|511]
  optional int32 ads_svp_ego_angle = 34;
  // ADS_SVP_Cruising_Progress [] [0|127]
  optional int32 ads_svp_cruising_progress = 35;
  // Pkg2PAD_SpdRank_State_FB_S [] [0|3]
  optional Pkg2PADSpdRankStateFBSType pkg2_pad_spd_rank_state_fb_s = 36;
  // PkgVOT2PAD_Interface_Req_S [] [0|3]
  optional PkgVOT2PADInterfaceReqSType pkg_vot2_pad_interface_req_s = 37;
  // PKGVOT2PAD_State_FB_S [] [0|3]
  optional PKGVOT2PADStateFBSType pkgvot2_pad_state_fb_s = 38;
  // ADS_SVP_Parking_in_Mod [] [0|3]
  optional ADSSVPParkinginModType ads_svp_parking_in_mod = 39;
  // ADS_SVP_ParkinginProgress [] [0|127]
  optional int32 ads_svp_parkingin_progress = 40;
  // ADS_SVP_ContinueSwtAvail [] [0|1]
  optional bool ads_svp_continue_swt_avail = 41;
  // VOT2Pkg_Angle [] [0|180]
  optional int32 vot2_pkg_angle = 42;
  // AVP_PAD_Functips [] [0|63]
  optional AVPPADFunctipsType avp_pad_functips = 43;
  // ADS_SVP_HDMAPsts [] [0|3]
  optional ADSSVPHDMAPstsType ads_svp_hdma_psts = 44;
  // AVP_PAD_AP_EnterfailReason [] [0|63]
  optional AVPPADAPEnterfailReasonType avp_pad_ap_enterfail_reason = 45;
  // ADS_APA_BackParkSwtAvl [] [0|3]
  optional ADSAPABackParkSwtAvlType ads_apa_back_park_swt_avl = 46;
  // AVP_PAD_AP_NAV_Tips [] [0|31]
  optional AVPPADAPNAVTipsType avp_pad_ap_nav_tips = 47;
  // ADS_ParkingDisplay_Request [] [0|7]
  optional ADSParkingDisplayRequestType ads_parking_display_request = 48;
  // ADS_PAD_SVPSts [] [0|15]
  optional ADSPADSVPStsType ads_pad_svp_sts = 49;
  // ADS_QuickEntry_Funct_State_FB_S [] [0|3]
  optional ADSQuickEntryFunctStateFBSType ads_quick_entry_funct_state_fb_s = 50;
  // ADS_RPA_Function_State_FB_S [] [0|1]
  optional bool ads_rpa_function_state_fb_s = 51;
  // ADS_APA_SearchSuspendedReason_S [] [0|15]
  optional ADSAPASearchSuspendedReasonSType ads_apa_search_suspended_reason_s = 52;
  // ADS_APA_FrontParkStartSwtAvl [] [0|3]
  optional ADSAPAFrontParkStartSwtAvlType ads_apa_front_park_start_swt_avl = 53;
  // ADS_APA_Park_Mode_S [] [0|3]
  optional ADSAPAParkModeSType ads_apa_park_mode_s = 54;
  // Notify_DataUpload_State [] [0|3]
  optional NotifyDataUploadStateType notify_data_upload_state = 55;
  // ADS_PAD_LVPPrkinRadomslotSwtAvl [] [0|1]
  optional bool ads_pad_lvp_prkin_radomslot_swt_avl = 56;
  // ADS_APA_ParkInStartSwtAvl [] [0|3]
  optional ADSAPAParkInStartSwtAvlType ads_apa_park_in_start_swt_avl = 57;
  // ADS_APA_PkgDisp [] [0|63]
  optional ADSAPAPkgDispType ads_apa_pkg_disp = 58;
  // ADS_PAD_LVPPrkinSlotMod [] [0|3]
  optional ADSPADLVPPrkinSlotModType ads_pad_lvp_prkin_slot_mod = 59;
  // ADS_APA_RearParkStartSwtAvl [] [0|3]
  optional ADSAPARearParkStartSwtAvlType ads_apa_rear_park_start_swt_avl = 60;
  // ADS_RPA_Park_Mode_S [] [0|3]
  optional ADSRPAParkModeSType ads_rpa_park_mode_s = 61;
  // ADS_APA_SuspendedReason_S [] [0|15]
  optional ADSAPASuspendedReasonSType ads_apa_suspended_reason_s = 62;
  // ADS_APA_Auto_Parking_Status_S [] [0|7]
  optional ADSAPAAutoParkingStatusSType ads_apa_auto_parking_status_s = 63;
  // ADS_APA_PauseSwtAvl [] [0|3]
  optional ADSAPAPauseSwtAvlType ads_apa_pause_swt_avl = 64;
  // ADS_LVPPrkinStsByMobile_S [] [0|3]
  optional ADSLVPPrkinStsByMobileSType ads_lvp_prkin_sts_by_mobile_s = 65;
  // ADS_HPA_Active_S [] [0|1]
  optional bool ads_hpa_active_s = 66;
  // ADS_APA_AbortReason_S [] [0|63]
  optional ADSAPAAbortReasonSType ads_apa_abort_reason_s = 67;
  // ADS_SVP_Parking_Mod [] [0|3]
  optional ADSSVPParkingModType ads_svp_parking_mod = 68;
  // ADS_APA_SelectParkSwtAvl [] [0|3]
  optional ADSAPASelectParkSwtAvlType ads_apa_select_park_swt_avl = 69;
  // Location_Auth_Req_S [] [0|3]
  optional LocationAuthReqSType location_auth_req_s = 70;
  // ADS_TBOX_ParkInSwtSts [] [0|3]
  optional ADSTBOXParkInSwtStsType ads_tbox_park_in_swt_sts = 71;
  // ADS_AVP_Active_S [] [0|1]
  optional bool ads_avp_active_s = 72;
  // ADS_APA_PkgSlot_User [] [0|1]
  optional bool ads_apa_pkg_slot_user = 73;
  // ADS_APA_AutoDrvngRestDist [] [0|102.3]
  optional double ads_apa_auto_drvng_rest_dist = 74;
  // ADS_APA_Active_S [] [0|1]
  optional bool ads_apa_active_s = 75;
  // ADS_LVPPushingFuncFB [] [0|3]
  optional ADSLVPPushingFuncFBType ads_lvp_pushing_func_fb = 76;
  // ADS_PSLDispSts_1 [] [0|3]
  optional ADSPSLDispSts1Type ads_psl_disp_sts_1 = 77;
  // ADS_PSLDispSts_2 [] [0|3]
  optional ADSPSLDispSts2Type ads_psl_disp_sts_2 = 78;
  // ADS_PSLDispSts_3 [] [0|3]
  optional ADSPSLDispSts3Type ads_psl_disp_sts_3 = 79;
  // ADS_PSLDispSts_4 [] [0|3]
  optional ADSPSLDispSts4Type ads_psl_disp_sts_4 = 80;
  // ADS_PSLDispSts_5 [] [0|3]
  optional ADSPSLDispSts5Type ads_psl_disp_sts_5 = 81;
  // ADS_PSLDispSts_6 [] [0|3]
  optional ADSPSLDispSts6Type ads_psl_disp_sts_6 = 82;
  // ADS_PAD_MAParkDisplayReq [] [0|3]
  optional ADSPADMAParkDisplayReqType ads_pad_ma_park_display_req = 83;
  // ADS_PAD_HPAResetParkOutMAPSwtSts [] [0|3]
  optional ADSPADHPAResetParkOutMAPSwtStsType ads_pad_hpa_reset_park_out_map_swt_sts = 84;
  // ADS_PAD_HPAResetParkInMAPSwtSts [] [0|3]
  optional ADSPADHPAResetParkInMAPSwtStsType ads_pad_hpa_reset_park_in_map_swt_sts = 85;
  // ADS_APA_ParkOutStartSwtAvl [] [0|3]
  optional ADSAPAParkOutStartSwtAvlType ads_apa_park_out_start_swt_avl = 86;
  // ADS_APA_PkgResumeSwtAvl [] [0|3]
  optional ADSAPAPkgResumeSwtAvlType ads_apa_pkg_resume_swt_avl = 87;
  // ADS_APA_ConfirmSwtAvl [] [0|3]
  optional ADSAPAConfirmSwtAvlType ads_apa_confirm_swt_avl = 88;
  // Map_Download_Pro_S [] [0|127]
  optional int32 map_download_pro_s = 89;
  // ADS_PAD_HPARoatePadStatus [] [0|3]
  optional ADSPADHPARoatePadStatusType ads_pad_hpa_roate_pad_status = 90;
  // ADS_PAD_HPAParkMapEndSetSwtSts [] [0|3]
  optional ADSPADHPAParkMapEndSetSwtStsType ads_pad_hpa_park_map_end_set_swt_sts = 91;
  // Map_Downloadfail_Rea_S [] [0|7]
  optional MapDownloadfailReaSType map_downloadfail_rea_s = 92;
  // ADS_SVP_ReSearching [] [0|1]
  optional bool ads_svp_re_searching = 93;
  // ADS_SVP_CompleteDsp [] [0|3]
  optional ADSSVPCompleteDspType ads_svp_complete_dsp = 94;
  // ADS_SVPVideoStream_PushState [] [0|7]
  optional ADSSVPVideoStreamPushStateType ads_svp_video_stream_push_state = 95;
  // ADS_SVPVideoStream_Avail [] [0|1]
  optional bool ads_svp_video_stream_avail = 96;
  // PkgVOT2PAD_Intrfa_Req_S [] [0|1]
  optional bool pkg_vot2_pad_intrfa_req_s = 97;
  // ADS_TBOX_LVPParkInReqSwtRC [] [0|15]
  optional int32 ads_tbox_lvp_park_in_req_swt_rc = 98;
  // ADS_TBOX_LVPParkOutReqSwtRC [] [0|15]
  optional int32 ads_tbox_lvp_park_out_req_swt_rc = 99;
  // ADS_TBOX_SVPParkInReqSwtRC [] [0|15]
  optional int32 ads_tbox_svp_park_in_req_swt_rc = 100;
  // ADS_TBOX_SVPParkOutReqSwtRC [] [0|15]
  optional int32 ads_tbox_svp_park_out_req_swt_rc = 101;
  // ADS_HighBeamLamp_Request [] [0|3]
  optional ADSHighBeamLampRequestType ads_high_beam_lamp_request = 102;
  // ADS_Mirror_Request [] [0|3]
  optional ADSMirrorRequestType ads_mirror_request = 103;
  // ADS_AVPWaitingMode_Req [] [0|1]
  optional bool ads_avp_waiting_mode_req = 104;
  // PKGVOT2PAD_Function_State_FB_S [] [0|1]
  optional bool pkgvot2_pad_function_state_fb_s = 105;
  // PKGVOT2PAD_ReturnSwtAvl [] [0|3]
  optional PKGVOT2PADReturnSwtAvlType pkgvot2_pad_return_swt_avl = 106;
  // ADS_SVP_ParkingSlotSearched_S [] [0|65535]
  optional int32 ads_svp_parking_slot_searched_s = 107;
  // Counter_2CB_S [] [0|65535]
  optional int32 counter_2_cb_s = 108;
  // Checknum_2CB_S [] [0|65535]
  optional int32 checknum_2_cb_s = 109;
  // CutOut_Fresh_values [] [0|65535]
  optional int32 cut_out_fresh_values = 110;
  optional int64 cut_out_mac_2_cb_s = 111;
}

message ADS_0X2CE {
// Control Message
  enum LaneLXTypeL1SType {
    LANE_LX_TYPE_L1_S_NODISPLAY = 0;
    LANE_LX_TYPE_L1_S_SOLIDLINE = 1;
    LANE_LX_TYPE_L1_S_DASHEDLINE = 2;
    LANE_LX_TYPE_L1_S_ROADSIDE = 3;
    LANE_LX_TYPE_L1_S_RESERVED_4 = 4;
    LANE_LX_TYPE_L1_S_RESERVED_5 = 5;
    LANE_LX_TYPE_L1_S_RESERVED_6 = 6;
    LANE_LX_TYPE_L1_S_RESERVED_7 = 7;
    LANE_LX_TYPE_L1_S_RESERVED_8 = 8;
    LANE_LX_TYPE_L1_S_RESERVED_9 = 9;
    LANE_LX_TYPE_L1_S_RESERVED_10 = 10;
    LANE_LX_TYPE_L1_S_RESERVED_11 = 11;
    LANE_LX_TYPE_L1_S_RESERVED_12 = 12;
    LANE_LX_TYPE_L1_S_RESERVED_13 = 13;
    LANE_LX_TYPE_L1_S_RESERVED_14 = 14;
    LANE_LX_TYPE_L1_S_RESERVED_15 = 15;
  }
  enum LaneLXTypeL2SType {
    LANE_LX_TYPE_L2_S_NODISPLAY = 0;
    LANE_LX_TYPE_L2_S_SOLIDLINE = 1;
    LANE_LX_TYPE_L2_S_DASHEDLINE = 2;
    LANE_LX_TYPE_L2_S_ROADSIDE = 3;
    LANE_LX_TYPE_L2_S_RESERVED_4 = 4;
    LANE_LX_TYPE_L2_S_RESERVED_5 = 5;
    LANE_LX_TYPE_L2_S_RESERVED_6 = 6;
    LANE_LX_TYPE_L2_S_RESERVED_7 = 7;
    LANE_LX_TYPE_L2_S_RESERVED_8 = 8;
    LANE_LX_TYPE_L2_S_RESERVED_9 = 9;
    LANE_LX_TYPE_L2_S_RESERVED_10 = 10;
    LANE_LX_TYPE_L2_S_RESERVED_11 = 11;
    LANE_LX_TYPE_L2_S_RESERVED_12 = 12;
    LANE_LX_TYPE_L2_S_RESERVED_13 = 13;
    LANE_LX_TYPE_L2_S_RESERVED_14 = 14;
    LANE_LX_TYPE_L2_S_RESERVED_15 = 15;
  }
  enum LaneLXTypeL3SType {
    LANE_LX_TYPE_L3_S_NODISPLAY = 0;
    LANE_LX_TYPE_L3_S_SOLIDLINE = 1;
    LANE_LX_TYPE_L3_S_DASHEDLINE = 2;
    LANE_LX_TYPE_L3_S_ROADSIDE = 3;
    LANE_LX_TYPE_L3_S_RESERVED_4 = 4;
    LANE_LX_TYPE_L3_S_RESERVED_5 = 5;
    LANE_LX_TYPE_L3_S_RESERVED_6 = 6;
    LANE_LX_TYPE_L3_S_RESERVED_7 = 7;
    LANE_LX_TYPE_L3_S_RESERVED_8 = 8;
    LANE_LX_TYPE_L3_S_RESERVED_9 = 9;
    LANE_LX_TYPE_L3_S_RESERVED_10 = 10;
    LANE_LX_TYPE_L3_S_RESERVED_11 = 11;
    LANE_LX_TYPE_L3_S_RESERVED_12 = 12;
    LANE_LX_TYPE_L3_S_RESERVED_13 = 13;
    LANE_LX_TYPE_L3_S_RESERVED_14 = 14;
    LANE_LX_TYPE_L3_S_RESERVED_15 = 15;
  }
  enum LaneLXTypeL4SType {
    LANE_LX_TYPE_L4_S_NODISPLAY = 0;
    LANE_LX_TYPE_L4_S_SOLIDLINE = 1;
    LANE_LX_TYPE_L4_S_DASHEDLINE = 2;
    LANE_LX_TYPE_L4_S_ROADSIDE = 3;
    LANE_LX_TYPE_L4_S_RESERVED_4 = 4;
    LANE_LX_TYPE_L4_S_RESERVED_5 = 5;
    LANE_LX_TYPE_L4_S_RESERVED_6 = 6;
    LANE_LX_TYPE_L4_S_RESERVED_7 = 7;
    LANE_LX_TYPE_L4_S_RESERVED_8 = 8;
    LANE_LX_TYPE_L4_S_RESERVED_9 = 9;
    LANE_LX_TYPE_L4_S_RESERVED_10 = 10;
    LANE_LX_TYPE_L4_S_RESERVED_11 = 11;
    LANE_LX_TYPE_L4_S_RESERVED_12 = 12;
    LANE_LX_TYPE_L4_S_RESERVED_13 = 13;
    LANE_LX_TYPE_L4_S_RESERVED_14 = 14;
    LANE_LX_TYPE_L4_S_RESERVED_15 = 15;
  }
  enum LaneLXTypeL5SType {
    LANE_LX_TYPE_L5_S_NODISPLAY = 0;
    LANE_LX_TYPE_L5_S_SOLIDLINE = 1;
    LANE_LX_TYPE_L5_S_DASHEDLINE = 2;
    LANE_LX_TYPE_L5_S_ROADSIDE = 3;
    LANE_LX_TYPE_L5_S_RESERVED_4 = 4;
    LANE_LX_TYPE_L5_S_RESERVED_5 = 5;
    LANE_LX_TYPE_L5_S_RESERVED_6 = 6;
    LANE_LX_TYPE_L5_S_RESERVED_7 = 7;
    LANE_LX_TYPE_L5_S_RESERVED_8 = 8;
    LANE_LX_TYPE_L5_S_RESERVED_9 = 9;
    LANE_LX_TYPE_L5_S_RESERVED_10 = 10;
    LANE_LX_TYPE_L5_S_RESERVED_11 = 11;
    LANE_LX_TYPE_L5_S_RESERVED_12 = 12;
    LANE_LX_TYPE_L5_S_RESERVED_13 = 13;
    LANE_LX_TYPE_L5_S_RESERVED_14 = 14;
    LANE_LX_TYPE_L5_S_RESERVED_15 = 15;
  }
  enum LaneLXTypeL6SType {
    LANE_LX_TYPE_L6_S_NODISPLAY = 0;
    LANE_LX_TYPE_L6_S_SOLIDLINE = 1;
    LANE_LX_TYPE_L6_S_DASHEDLINE = 2;
    LANE_LX_TYPE_L6_S_ROADSIDE = 3;
    LANE_LX_TYPE_L6_S_RESERVED_4 = 4;
    LANE_LX_TYPE_L6_S_RESERVED_5 = 5;
    LANE_LX_TYPE_L6_S_RESERVED_6 = 6;
    LANE_LX_TYPE_L6_S_RESERVED_7 = 7;
    LANE_LX_TYPE_L6_S_RESERVED_8 = 8;
    LANE_LX_TYPE_L6_S_RESERVED_9 = 9;
    LANE_LX_TYPE_L6_S_RESERVED_10 = 10;
    LANE_LX_TYPE_L6_S_RESERVED_11 = 11;
    LANE_LX_TYPE_L6_S_RESERVED_12 = 12;
    LANE_LX_TYPE_L6_S_RESERVED_13 = 13;
    LANE_LX_TYPE_L6_S_RESERVED_14 = 14;
    LANE_LX_TYPE_L6_S_RESERVED_15 = 15;
  }
  enum LaneLXTypeL7SType {
    LANE_LX_TYPE_L7_S_NODISPLAY = 0;
    LANE_LX_TYPE_L7_S_SOLIDLINE = 1;
    LANE_LX_TYPE_L7_S_DASHEDLINE = 2;
    LANE_LX_TYPE_L7_S_ROADSIDE = 3;
    LANE_LX_TYPE_L7_S_RESERVED_4 = 4;
    LANE_LX_TYPE_L7_S_RESERVED_5 = 5;
    LANE_LX_TYPE_L7_S_RESERVED_6 = 6;
    LANE_LX_TYPE_L7_S_RESERVED_7 = 7;
    LANE_LX_TYPE_L7_S_RESERVED_8 = 8;
    LANE_LX_TYPE_L7_S_RESERVED_9 = 9;
    LANE_LX_TYPE_L7_S_RESERVED_10 = 10;
    LANE_LX_TYPE_L7_S_RESERVED_11 = 11;
    LANE_LX_TYPE_L7_S_RESERVED_12 = 12;
    LANE_LX_TYPE_L7_S_RESERVED_13 = 13;
    LANE_LX_TYPE_L7_S_RESERVED_14 = 14;
    LANE_LX_TYPE_L7_S_RESERVED_15 = 15;
  }
  enum LaneLXTypeL8SType {
    LANE_LX_TYPE_L8_S_NODISPLAY = 0;
    LANE_LX_TYPE_L8_S_SOLIDLINE = 1;
    LANE_LX_TYPE_L8_S_DASHEDLINE = 2;
    LANE_LX_TYPE_L8_S_ROADSIDE = 3;
    LANE_LX_TYPE_L8_S_RESERVED_4 = 4;
    LANE_LX_TYPE_L8_S_RESERVED_5 = 5;
    LANE_LX_TYPE_L8_S_RESERVED_6 = 6;
    LANE_LX_TYPE_L8_S_RESERVED_7 = 7;
    LANE_LX_TYPE_L8_S_RESERVED_8 = 8;
    LANE_LX_TYPE_L8_S_RESERVED_9 = 9;
    LANE_LX_TYPE_L8_S_RESERVED_10 = 10;
    LANE_LX_TYPE_L8_S_RESERVED_11 = 11;
    LANE_LX_TYPE_L8_S_RESERVED_12 = 12;
    LANE_LX_TYPE_L8_S_RESERVED_13 = 13;
    LANE_LX_TYPE_L8_S_RESERVED_14 = 14;
    LANE_LX_TYPE_L8_S_RESERVED_15 = 15;
  }
  enum LaneLXTypeL9SType {
    LANE_LX_TYPE_L9_S_NODISPLAY = 0;
    LANE_LX_TYPE_L9_S_SOLIDLINE = 1;
    LANE_LX_TYPE_L9_S_DASHEDLINE = 2;
    LANE_LX_TYPE_L9_S_ROADSIDE = 3;
    LANE_LX_TYPE_L9_S_RESERVED_4 = 4;
    LANE_LX_TYPE_L9_S_RESERVED_5 = 5;
    LANE_LX_TYPE_L9_S_RESERVED_6 = 6;
    LANE_LX_TYPE_L9_S_RESERVED_7 = 7;
    LANE_LX_TYPE_L9_S_RESERVED_8 = 8;
    LANE_LX_TYPE_L9_S_RESERVED_9 = 9;
    LANE_LX_TYPE_L9_S_RESERVED_10 = 10;
    LANE_LX_TYPE_L9_S_RESERVED_11 = 11;
    LANE_LX_TYPE_L9_S_RESERVED_12 = 12;
    LANE_LX_TYPE_L9_S_RESERVED_13 = 13;
    LANE_LX_TYPE_L9_S_RESERVED_14 = 14;
    LANE_LX_TYPE_L9_S_RESERVED_15 = 15;
  }
  enum LaneLXTypeL10SType {
    LANE_LX_TYPE_L10_S_NODISPLAY = 0;
    LANE_LX_TYPE_L10_S_SOLIDLINE = 1;
    LANE_LX_TYPE_L10_S_DASHEDLINE = 2;
    LANE_LX_TYPE_L10_S_ROADSIDE = 3;
    LANE_LX_TYPE_L10_S_RESERVED_4 = 4;
    LANE_LX_TYPE_L10_S_RESERVED_5 = 5;
    LANE_LX_TYPE_L10_S_RESERVED_6 = 6;
    LANE_LX_TYPE_L10_S_RESERVED_7 = 7;
    LANE_LX_TYPE_L10_S_RESERVED_8 = 8;
    LANE_LX_TYPE_L10_S_RESERVED_9 = 9;
    LANE_LX_TYPE_L10_S_RESERVED_10 = 10;
    LANE_LX_TYPE_L10_S_RESERVED_11 = 11;
    LANE_LX_TYPE_L10_S_RESERVED_12 = 12;
    LANE_LX_TYPE_L10_S_RESERVED_13 = 13;
    LANE_LX_TYPE_L10_S_RESERVED_14 = 14;
    LANE_LX_TYPE_L10_S_RESERVED_15 = 15;
  }
  enum LaneLXTypeL11SType {
    LANE_LX_TYPE_L11_S_NODISPLAY = 0;
    LANE_LX_TYPE_L11_S_SOLIDLINE = 1;
    LANE_LX_TYPE_L11_S_DASHEDLINE = 2;
    LANE_LX_TYPE_L11_S_ROADSIDE = 3;
    LANE_LX_TYPE_L11_S_RESERVED_4 = 4;
    LANE_LX_TYPE_L11_S_RESERVED_5 = 5;
    LANE_LX_TYPE_L11_S_RESERVED_6 = 6;
    LANE_LX_TYPE_L11_S_RESERVED_7 = 7;
    LANE_LX_TYPE_L11_S_RESERVED_8 = 8;
    LANE_LX_TYPE_L11_S_RESERVED_9 = 9;
    LANE_LX_TYPE_L11_S_RESERVED_10 = 10;
    LANE_LX_TYPE_L11_S_RESERVED_11 = 11;
    LANE_LX_TYPE_L11_S_RESERVED_12 = 12;
    LANE_LX_TYPE_L11_S_RESERVED_13 = 13;
    LANE_LX_TYPE_L11_S_RESERVED_14 = 14;
    LANE_LX_TYPE_L11_S_RESERVED_15 = 15;
  }
  enum LaneLXTypeL12SType {
    LANE_LX_TYPE_L12_S_NODISPLAY = 0;
    LANE_LX_TYPE_L12_S_SOLIDLINE = 1;
    LANE_LX_TYPE_L12_S_DASHEDLINE = 2;
    LANE_LX_TYPE_L12_S_ROADSIDE = 3;
    LANE_LX_TYPE_L12_S_RESERVED_4 = 4;
    LANE_LX_TYPE_L12_S_RESERVED_5 = 5;
    LANE_LX_TYPE_L12_S_RESERVED_6 = 6;
    LANE_LX_TYPE_L12_S_RESERVED_7 = 7;
    LANE_LX_TYPE_L12_S_RESERVED_8 = 8;
    LANE_LX_TYPE_L12_S_RESERVED_9 = 9;
    LANE_LX_TYPE_L12_S_RESERVED_10 = 10;
    LANE_LX_TYPE_L12_S_RESERVED_11 = 11;
    LANE_LX_TYPE_L12_S_RESERVED_12 = 12;
    LANE_LX_TYPE_L12_S_RESERVED_13 = 13;
    LANE_LX_TYPE_L12_S_RESERVED_14 = 14;
    LANE_LX_TYPE_L12_S_RESERVED_15 = 15;
  }
  enum LaneLXTypeL13SType {
    LANE_LX_TYPE_L13_S_NODISPLAY = 0;
    LANE_LX_TYPE_L13_S_SOLIDLINE = 1;
    LANE_LX_TYPE_L13_S_DASHEDLINE = 2;
    LANE_LX_TYPE_L13_S_ROADSIDE = 3;
    LANE_LX_TYPE_L13_S_RESERVED_4 = 4;
    LANE_LX_TYPE_L13_S_RESERVED_5 = 5;
    LANE_LX_TYPE_L13_S_RESERVED_6 = 6;
    LANE_LX_TYPE_L13_S_RESERVED_7 = 7;
    LANE_LX_TYPE_L13_S_RESERVED_8 = 8;
    LANE_LX_TYPE_L13_S_RESERVED_9 = 9;
    LANE_LX_TYPE_L13_S_RESERVED_10 = 10;
    LANE_LX_TYPE_L13_S_RESERVED_11 = 11;
    LANE_LX_TYPE_L13_S_RESERVED_12 = 12;
    LANE_LX_TYPE_L13_S_RESERVED_13 = 13;
    LANE_LX_TYPE_L13_S_RESERVED_14 = 14;
    LANE_LX_TYPE_L13_S_RESERVED_15 = 15;
  }
  enum LaneLXTypeL14SType {
    LANE_LX_TYPE_L14_S_NODISPLAY = 0;
    LANE_LX_TYPE_L14_S_SOLIDLINE = 1;
    LANE_LX_TYPE_L14_S_DASHEDLINE = 2;
    LANE_LX_TYPE_L14_S_ROADSIDE = 3;
    LANE_LX_TYPE_L14_S_RESERVED_4 = 4;
    LANE_LX_TYPE_L14_S_RESERVED_5 = 5;
    LANE_LX_TYPE_L14_S_RESERVED_6 = 6;
    LANE_LX_TYPE_L14_S_RESERVED_7 = 7;
    LANE_LX_TYPE_L14_S_RESERVED_8 = 8;
    LANE_LX_TYPE_L14_S_RESERVED_9 = 9;
    LANE_LX_TYPE_L14_S_RESERVED_10 = 10;
    LANE_LX_TYPE_L14_S_RESERVED_11 = 11;
    LANE_LX_TYPE_L14_S_RESERVED_12 = 12;
    LANE_LX_TYPE_L14_S_RESERVED_13 = 13;
    LANE_LX_TYPE_L14_S_RESERVED_14 = 14;
    LANE_LX_TYPE_L14_S_RESERVED_15 = 15;
  }
  // Child_ID_2CE_S [] [0|255]
  optional int32 child_id_2_ce_s = 1;
  // Lane_LX_Type_L1_S [] [0|15]
  optional LaneLXTypeL1SType lane_lx_type_l1_s = 2;
  // Lane_LX_Y_Distance_C0_L1 [] [-8|7.99609375]
  optional double lane_lx_y_distance_c0_l1 = 3;
  // Lane_LX_heading_C1_L1 [] [-180|180]
  optional double lane_lx_heading_c1_l1 = 4;
  // Lane_LX_Curvature_C2_L1 [] [-0.030705|0.030705]
  optional double lane_lx_curvature_c2_l1 = 5;
  // Lane_LX_CurvatureVariation_L1 [] [-0.024|0.024]
  optional double lane_lx_curvature_variation_l1 = 6;
  // Lane_LX_LongitudinalStart_L1 [] [-10|250]
  optional double lane_lx_longitudinal_start_l1 = 7;
  // Lane_LX_LongitudinalEnd_L1 [] [-10|250]
  optional double lane_lx_longitudinal_end_l1 = 8;
  // Lane_LX_Type_L2_S [] [0|15]
  optional LaneLXTypeL2SType lane_lx_type_l2_s = 9;
  // Lane_LX_Y_Distance_C0_L2 [] [-8|7.99609375]
  optional double lane_lx_y_distance_c0_l2 = 10;
  // Lane_LX_heading_C1_L2 [] [-180|180]
  optional double lane_lx_heading_c1_l2 = 11;
  // Lane_LX_Curvature_C2_L2 [] [-0.030705|0.030705]
  optional double lane_lx_curvature_c2_l2 = 12;
  // Lane_LX_CurvatureVariation_L2 [] [-0.024|0.024]
  optional double lane_lx_curvature_variation_l2 = 13;
  // Lane_LX_LongitudinalStart_L2 [] [-10|250]
  optional double lane_lx_longitudinal_start_l2 = 14;
  // Lane_LX_LongitudinalEnd_L2 [] [-10|250]
  optional double lane_lx_longitudinal_end_l2 = 15;
  // Lane_LX_Type_L3_S [] [0|15]
  optional LaneLXTypeL3SType lane_lx_type_l3_s = 16;
  // Lane_LX_Y_Distance_C0_L3 [] [-8|7.99609375]
  optional double lane_lx_y_distance_c0_l3 = 17;
  // Lane_LX_heading_C1_L3 [] [-180|180]
  optional double lane_lx_heading_c1_l3 = 18;
  // Lane_LX_Curvature_C2_L3 [] [-0.030705|0.030705]
  optional double lane_lx_curvature_c2_l3 = 19;
  // Lane_LX_CurvatureVariation_L3 [] [-0.024|0.024]
  optional double lane_lx_curvature_variation_l3 = 20;
  // Lane_LX_LongitudinalStart_L3 [] [-10|250]
  optional double lane_lx_longitudinal_start_l3 = 21;
  // Lane_LX_LongitudinalEnd_L3 [] [-10|250]
  optional double lane_lx_longitudinal_end_l3 = 22;
  // Lane_LX_Type_L4_S [] [0|15]
  optional LaneLXTypeL4SType lane_lx_type_l4_s = 23;
  // Lane_LX_Y_Distance_C0_L4 [] [-8|7.99609375]
  optional double lane_lx_y_distance_c0_l4 = 24;
  // Lane_LX_heading_C1_L4 [] [-180|180]
  optional double lane_lx_heading_c1_l4 = 25;
  // Lane_LX_Curvature_C2_L4 [] [-0.030705|0.030705]
  optional double lane_lx_curvature_c2_l4 = 26;
  // Lane_LX_CurvatureVariation_L4 [] [-0.024|0.024]
  optional double lane_lx_curvature_variation_l4 = 27;
  // Lane_LX_LongitudinalStart_L4 [] [-10|250]
  optional double lane_lx_longitudinal_start_l4 = 28;
  // Lane_LX_LongitudinalEnd_L4 [] [-10|250]
  optional double lane_lx_longitudinal_end_l4 = 29;
  // Lane_LX_Type_L5_S [] [0|15]
  optional LaneLXTypeL5SType lane_lx_type_l5_s = 30;
  // Lane_LX_Y_Distance_C0_L5 [] [-8|7.99609375]
  optional double lane_lx_y_distance_c0_l5 = 31;
  // Lane_LX_heading_C1_L5 [] [-180|180]
  optional double lane_lx_heading_c1_l5 = 32;
  // Lane_LX_Curvature_C2_L5 [] [-0.030705|0.030705]
  optional double lane_lx_curvature_c2_l5 = 33;
  // Lane_LX_LongitudinalStart_L5 [] [-10|250]
  optional double lane_lx_longitudinal_start_l5 = 34;
  // Lane_LX_LongitudinalEnd_L5 [] [-10|250]
  optional double lane_lx_longitudinal_end_l5 = 35;
  // Lane_LX_Type_L6_S [] [0|15]
  optional LaneLXTypeL6SType lane_lx_type_l6_s = 36;
  // Lane_LX_Y_Distance_C0_L6 [] [-8|7.99609375]
  optional double lane_lx_y_distance_c0_l6 = 37;
  // Lane_LX_heading_C1_L6 [] [-180|180]
  optional double lane_lx_heading_c1_l6 = 38;
  // Lane_LX_Curvature_C2_L6 [] [-0.030705|0.030705]
  optional double lane_lx_curvature_c2_l6 = 39;
  // Lane_LX_LongitudinalStart_L6 [] [-10|250]
  optional double lane_lx_longitudinal_start_l6 = 40;
  // Lane_LX_LongitudinalEnd_L6 [] [-10|250]
  optional double lane_lx_longitudinal_end_l6 = 41;
  // Counter_2CE_01_S [] [0|65535]
  optional int32 counter_2_ce_01_s = 42;
  // Checksum_2CE_01_S [] [0|65535]
  optional int32 checksum_2_ce_01_s = 43;
  // Lane_LX_Type_L7_S [] [0|15]
  optional LaneLXTypeL7SType lane_lx_type_l7_s = 44;
  // Lane_LX_Y_Distance_C0_L7 [] [-8|7.99609375]
  optional double lane_lx_y_distance_c0_l7 = 45;
  // Lane_LX_heading_C1_L7 [] [-180|180]
  optional double lane_lx_heading_c1_l7 = 46;
  // Lane_LX_Curvature_C2_L7 [] [-0.030705|0.030705]
  optional double lane_lx_curvature_c2_l7 = 47;
  // Lane_LX_LongitudinalStart_L7 [] [-10|250]
  optional double lane_lx_longitudinal_start_l7 = 48;
  // Lane_LX_LongitudinalEnd_L7 [] [-10|250]
  optional double lane_lx_longitudinal_end_l7 = 49;
  // Lane_LX_Type_L8_S [] [0|15]
  optional LaneLXTypeL8SType lane_lx_type_l8_s = 50;
  // Lane_LX_Y_Distance_C0_L8 [] [-8|7.99609375]
  optional double lane_lx_y_distance_c0_l8 = 51;
  // Lane_LX_heading_C1_L8 [] [-180|180]
  optional double lane_lx_heading_c1_l8 = 52;
  // Lane_LX_Curvature_C2_L8 [] [-0.030705|0.030705]
  optional double lane_lx_curvature_c2_l8 = 53;
  // Lane_LX_LongitudinalStart_L8 [] [-10|250]
  optional double lane_lx_longitudinal_start_l8 = 54;
  // Lane_LX_LongitudinalEnd_L8 [] [-10|250]
  optional double lane_lx_longitudinal_end_l8 = 55;
  // Lane_LX_Type_L9_S [] [0|15]
  optional LaneLXTypeL9SType lane_lx_type_l9_s = 56;
  // Lane_LX_Y_Distance_C0_L9 [] [-8|7.99609375]
  optional double lane_lx_y_distance_c0_l9 = 57;
  // Lane_LX_heading_C1_L9 [] [-180|180]
  optional double lane_lx_heading_c1_l9 = 58;
  // Lane_LX_Curvature_C2_L9 [] [-0.030705|0.030705]
  optional double lane_lx_curvature_c2_l9 = 59;
  // Lane_LX_LongitudinalStart_L9 [] [-10|250]
  optional double lane_lx_longitudinal_start_l9 = 60;
  // Lane_LX_LongitudinalEnd_L9 [] [-10|250]
  optional double lane_lx_longitudinal_end_l9 = 61;
  // Lane_LX_Type_L10_S [] [0|15]
  optional LaneLXTypeL10SType lane_lx_type_l10_s = 62;
  // Lane_LX_Y_Distance_C0_L10 [] [-8|7.99609375]
  optional double lane_lx_y_distance_c0_l10 = 63;
  // Lane_LX_heading_C1_L10 [] [-180|180]
  optional double lane_lx_heading_c1_l10 = 64;
  // Lane_LX_Curvature_C2_L10 [] [-0.030705|0.030705]
  optional double lane_lx_curvature_c2_l10 = 65;
  // Lane_LX_LongitudinalStart_L10 [] [-10|250]
  optional double lane_lx_longitudinal_start_l10 = 66;
  // Lane_LX_LongitudinalEnd_L10 [] [-10|250]
  optional double lane_lx_longitudinal_end_l10 = 67;
  // Lane_LX_Type_L11_S [] [0|15]
  optional LaneLXTypeL11SType lane_lx_type_l11_s = 68;
  // Lane_LX_Y_Distance_C0_L11 [] [-8|7.99609375]
  optional double lane_lx_y_distance_c0_l11 = 69;
  // Lane_LX_heading_C1_L11 [] [-180|180]
  optional double lane_lx_heading_c1_l11 = 70;
  // Lane_LX_Curvature_C2_L11 [] [-0.030705|0.030705]
  optional double lane_lx_curvature_c2_l11 = 71;
  // Lane_LX_LongitudinalStart_L11 [] [-10|250]
  optional double lane_lx_longitudinal_start_l11 = 72;
  // Lane_LX_LongitudinalEnd_L11 [] [-10|250]
  optional double lane_lx_longitudinal_end_l11 = 73;
  // Lane_LX_Type_L12_S [] [0|15]
  optional LaneLXTypeL12SType lane_lx_type_l12_s = 74;
  // Lane_LX_Y_Distance_C0_L12 [] [-8|7.99609375]
  optional double lane_lx_y_distance_c0_l12 = 75;
  // Lane_LX_heading_C1_L12 [] [-180|180]
  optional double lane_lx_heading_c1_l12 = 76;
  // Lane_LX_Curvature_C2_L12 [] [-0.030705|0.030705]
  optional double lane_lx_curvature_c2_l12 = 77;
  // Lane_LX_LongitudinalStart_L12 [] [-10|250]
  optional double lane_lx_longitudinal_start_l12 = 78;
  // Lane_LX_LongitudinalEnd_L12 [] [-10|250]
  optional double lane_lx_longitudinal_end_l12 = 79;
  // Lane_LX_Type_L13_S [] [0|15]
  optional LaneLXTypeL13SType lane_lx_type_l13_s = 80;
  // Lane_LX_Y_Distance_C0_L132 [] [-8|7.99609375]
  optional double lane_lx_y_distance_c0_l132 = 81;
  // Lane_LX_heading_C1_L13 [] [-180|180]
  optional double lane_lx_heading_c1_l13 = 82;
  // Lane_LX_Curvature_C2_L13 [] [-0.030705|0.030705]
  optional double lane_lx_curvature_c2_l13 = 83;
  // Lane_LX_LongitudinalStart_L13 [] [-10|250]
  optional double lane_lx_longitudinal_start_l13 = 84;
  // Lane_LX_Longitudinal_End_L13 [] [-10|250]
  optional double lane_lx_longitudinal_end_l13 = 85;
  // Counter_2CE_02_S [] [0|65535]
  optional int32 counter_2_ce_02_s = 86;
  // Checksum_2CE_02_S [] [0|65535]
  optional int32 checksum_2_ce_02_s = 87;
  // Lane_LX_Type_L14_S [] [0|15]
  optional LaneLXTypeL14SType lane_lx_type_l14_s = 88;
  // Lane_LX_Y_Distance_C0_L14 [] [-8|7.99609375]
  optional double lane_lx_y_distance_c0_l14 = 89;
  // Lane_LX_heading_C1_L14 [] [-180|180]
  optional double lane_lx_heading_c1_l14 = 90;
  // Lane_LX_Curvature_C2_L14 [] [-0.030705|0.030705]
  optional double lane_lx_curvature_c2_l14 = 91;
  // Lane_LX_LongitudinalStart_L14 [] [-10|250]
  optional double lane_lx_longitudinal_start_l14 = 92;
  // Lane_LX_LongitudinalEnd_L14 [] [-10|250]
  optional double lane_lx_longitudinal_end_l14 = 93;
  // Guide_Line_GLX1_width [] [-8|7.99609375]
  optional double guide_line_glx1_width = 94;
  // Guide_Line_GLX1_Y_Distance_C0 [] [-8|7.99609375]
  optional double guide_line_glx1_y_distance_c0 = 95;
  // Guide_Line_GLX1_heading_C1 [] [-180|180]
  optional double guide_line_glx1_heading_c1 = 96;
  // Guide_Line_GLX1_Curvature_C2 [] [-0.030705|0.030705]
  optional double guide_line_glx1_curvature_c2 = 97;
  // Guide_Line_GLX1_CurvatureVar_C3 [] [-0.024|0.024]
  optional double guide_line_glx1_curvature_var_c3 = 98;
  // Guide_Line_GLX1_LonginalStart [] [-10|250]
  optional double guide_line_glx1_longinal_start = 99;
  // Guide_Line_GLX1_LongitudinalEnd [] [-10|250]
  optional double guide_line_glx1_longitudinal_end = 100;
  // Guide_Line_GLX2_width [] [-8|7.99609375]
  optional double guide_line_glx2_width = 101;
  // Guide_Line_GLX2_Y_Distance_C0 [] [-8|7.99609375]
  optional double guide_line_glx2_y_distance_c0 = 102;
  // Guide_Line_GLX2_heading_C1 [] [-180|180]
  optional double guide_line_glx2_heading_c1 = 103;
  // Guide_Line_GLX2_Curvature_C2 [] [-0.030705|0.030705]
  optional double guide_line_glx2_curvature_c2 = 104;
  // Guide_Line_GLX2_CurvatureVar_C3 [] [-0.024|0.024]
  optional double guide_line_glx2_curvature_var_c3 = 105;
  // Guide_Line_GLX2_LonginalStart [] [-10|250]
  optional double guide_line_glx2_longinal_start = 106;
  // Guide_Line_GLX2_LongitudinalEnd [] [-10|250]
  optional double guide_line_glx2_longitudinal_end = 107;
  // Guide_Line_GLX3_width [] [-8|7.99609375]
  optional double guide_line_glx3_width = 108;
  // Guide_Line_GLX3_Y_Distance_C0 [] [-8|7.99609375]
  optional double guide_line_glx3_y_distance_c0 = 109;
  // Guide_Line_GLX3_heading_C1 [] [-180|180]
  optional double guide_line_glx3_heading_c1 = 110;
  // Guide_Line_GLX3_Curvature_C2 [] [-0.030705|0.030705]
  optional double guide_line_glx3_curvature_c2 = 111;
  // Guide_Line_GLX3_CurvatureVar_C3 [] [-0.024|0.024]
  optional double guide_line_glx3_curvature_var_c3 = 112;
  // Guide_Line_GLX3_LonginalStart [] [-10|250]
  optional double guide_line_glx3_longinal_start = 113;
  // Guide_Line_GLX3_LongitudinalEnd [] [-10|250]
  optional double guide_line_glx3_longitudinal_end = 114;
  // Counter_2CE_03_S [] [0|65535]
  optional int32 counter_2_ce_03_s = 115;
  // Checksum_2CE_03_S [] [0|65535]
  optional int32 checksum_2_ce_03_s = 116;
}

message MEDIA_0X2D4 {
// Report Message
  // Latitd_Info_Decimal_Part_S [] [0|127]
  optional int32 latitd_info_decimal_part_s = 1;
  // Latitude_Direction_2D4_S [] [0|1]
  optional bool latitude_direction_2_d4_s = 2;
  // Latitd_Info_Integ_Part_S [] [0|255]
  optional int32 latitd_info_integ_part_s = 3;
  // Longitd_Info_Deciml_Part_S [] [0|127]
  optional int32 longitd_info_deciml_part_s = 4;
  // Longitd_Direction_2D4_S [] [0|1]
  optional bool longitd_direction_2_d4_s = 5;
  // Longitd_Info_Integr_Part_S [] [0|255]
  optional int32 longitd_info_integr_part_s = 6;
  // Orientation_Info_2D4_S [] [0|4095]
  optional int32 orientation_info_2_d4_s = 7;
  // Height_Decimal_Part_2D4_S [] [0|15]
  optional int32 height_decimal_part_2_d4_s = 8;
  // Height_Integer_Part_2D4_S [] [0|16383]
  optional int32 height_integer_part_2_d4_s = 9;
  // Altitude_2D4_S [] [0|1]
  optional bool altitude_2_d4_s = 10;
  // GPS_Signal_2D4_S [] [0|1]
  optional bool gps_signal_2_d4_s = 11;
}

message ADS_0X2D5 {
// Control Message
  enum TSRfunctionstatus2D5SType {
    TSR_FUNCTION_STATUS_2D5_S_OFF = 0;
    TSR_FUNCTION_STATUS_2D5_S_STANDBY = 1;
    TSR_FUNCTION_STATUS_2D5_S_ACT_FUSIONMODE = 2;
    TSR_FUNCTION_STATUS_2D5_S_ACT_VISIONMODE = 3;
    TSR_FUNCTION_STATUS_2D5_S_ACT_NAVIGATIONONLYMODE = 4;
    TSR_FUNCTION_STATUS_2D5_S_ACT_HDMAPMODE = 5;
    TSR_FUNCTION_STATUS_2D5_S_FAULT = 6;
    TSR_FUNCTION_STATUS_2D5_S_RESERVED_7 = 7;
  }
  enum ISLIWarningStatus2D5SType {
    ISLI_WARNING_STATUS_2D5_S_NOWARNING = 0;
    ISLI_WARNING_STATUS_2D5_S_WARNINGLEVEL1 = 1;
    ISLI_WARNING_STATUS_2D5_S_RESERVED_2 = 2;
    ISLI_WARNING_STATUS_2D5_S_RESERVED_3 = 3;
  }
  enum RSISignMisc2D5SType {
    RSI_SIGNMISC_2D5_S_DEFAULT_NODISPLAY = 0;
    RSI_SIGNMISC_2D5_S_NOENTRYSIGN = 1;
    RSI_SIGNMISC_2D5_S_PROHIBITMOTORVEHICLES = 2;
    RSI_SIGNMISC_2D5_S_PROHIBITSTANDINGANDPK = 3;
    RSI_SIGNMISC_2D5_S_NOPK = 4;
    RSI_SIGNMISC_2D5_S_OVERTAKINGFORBIDDEN = 5;
    RSI_SIGNMISC_2D5_S_OVERTAKINGFORBIDDENCANCEL = 6;
    RSI_SIGNMISC_2D5_S_NOTURNLSIGN = 7;
    RSI_SIGNMISC_2D5_S_NOTURNRSIGN = 8;
    RSI_SIGNMISC_2D5_S_NOTURNUSIGN = 9;
    RSI_SIGNMISC_2D5_S_STOPSIGN = 10;
    RSI_SIGNMISC_2D5_S_GIVEWAYSIGN = 11;
    RSI_SIGNMISC_2D5_S_NOHORNSIGN = 12;
    RSI_SIGNMISC_2D5_S_CHILDRENSIGN = 13;
    RSI_SIGNMISC_2D5_S_PEDESTRIANCROSSINGS = 14;
    RSI_SIGNMISC_2D5_S_ROADWORKSIGN = 15;
    RSI_SIGNMISC_2D5_S_CAUTIONSLIPPERY = 16;
    RSI_SIGNMISC_2D5_S_CAUTIONDANGER = 17;
    RSI_SIGNMISC_2D5_S_CONFLUENCER = 18;
    RSI_SIGNMISC_2D5_S_MOTORWAYSTART = 19;
    RSI_SIGNMISC_2D5_S_MOTORWAYSTART_REPEAT = 20;
    RSI_SIGNMISC_2D5_S_WARNINGCURVER = 21;
    RSI_SIGNMISC_2D5_S_WARNINGCURVEL = 22;
    RSI_SIGNMISC_2D5_S_PROHIBITPK = 23;
    RSI_SIGNMISC_2D5_S_CONFLUENCEL = 24;
    RSI_SIGNMISC_2D5_S_STEEPASCENT = 25;
    RSI_SIGNMISC_2D5_S_STEEPDESCENT = 26;
    RSI_SIGNMISC_2D5_S_RESERVED_27 = 27;
    RSI_SIGNMISC_2D5_S_RESERVED_28 = 28;
    RSI_SIGNMISC_2D5_S_RESERVED_29 = 29;
    RSI_SIGNMISC_2D5_S_RESERVED_30 = 30;
    RSI_SIGNMISC_2D5_S_RESERVED_31 = 31;
  }
  enum SpeedUnitSetSType {
    SPEED_UNIT_SET_S_INVALID = 0;
    SPEED_UNIT_SET_S_KMH = 1;
    SPEED_UNIT_SET_S_MPH = 2;
    SPEED_UNIT_SET_S_RESERVED_3 = 3;
  }
  enum MPCSpdLimOffsSLA2D5SType {
    MPC_SPDLIMOFFS_SLA_2D5_S_ZERO = 0;
    MPC_SPDLIMOFFS_SLA_2D5_S_TENKPH = 1;
    MPC_SPDLIMOFFS_SLA_2D5_S_FIVEKPH = 2;
    MPC_SPDLIMOFFS_SLA_2D5_S_ADD5KPH = 3;
    MPC_SPDLIMOFFS_SLA_2D5_S_ADD10KPH = 4;
    MPC_SPDLIMOFFS_SLA_2D5_S_FIVEMPH = 5;
    MPC_SPDLIMOFFS_SLA_2D5_S_THREEMPH = 6;
    MPC_SPDLIMOFFS_SLA_2D5_S_ADD3MPH = 7;
    MPC_SPDLIMOFFS_SLA_2D5_S_ADD5MPH = 8;
    MPC_SPDLIMOFFS_SLA_2D5_S_RESERVED_9 = 9;
    MPC_SPDLIMOFFS_SLA_2D5_S_RESERVED_10 = 10;
    MPC_SPDLIMOFFS_SLA_2D5_S_RESERVED_11 = 11;
    MPC_SPDLIMOFFS_SLA_2D5_S_RESERVED_12 = 12;
    MPC_SPDLIMOFFS_SLA_2D5_S_RESERVED_13 = 13;
    MPC_SPDLIMOFFS_SLA_2D5_S_RESERVED_14 = 14;
    MPC_SPDLIMOFFS_SLA_2D5_S_RESERVED_15 = 15;
  }
  enum MPCWarnTLAlefttypeSType {
    MPC_WARN_TLA_LEFT_TYPE_S_ROUND = 0;
    MPC_WARN_TLA_LEFT_TYPE_S_ARROW = 1;
    MPC_WARN_TLA_LEFT_TYPE_S_TURNAROUND = 2;
    MPC_WARN_TLA_LEFT_TYPE_S_RESERVED_3 = 3;
  }
  enum TLASts2D5SType {
    TLA_STS_2D5_S_OFF = 0;
    TLA_STS_2D5_S_STANDBY = 1;
    TLA_STS_2D5_S_ACT = 2;
    TLA_STS_2D5_S_FAULT = 3;
  }
  enum MPCWarnTLAleft2D5SType {
    MPC_WARN_TLA_LEFT_2D5_S_NODISPLAY = 0;
    MPC_WARN_TLA_LEFT_2D5_S_GREEN = 1;
    MPC_WARN_TLA_LEFT_2D5_S_GREENTOYELLOW = 2;
    MPC_WARN_TLA_LEFT_2D5_S_YELLOW = 3;
    MPC_WARN_TLA_LEFT_2D5_S_YELLOWTORED = 4;
    MPC_WARN_TLA_LEFT_2D5_S_RED = 5;
    MPC_WARN_TLA_LEFT_2D5_S_REDTOGREEN = 6;
    MPC_WARN_TLA_LEFT_2D5_S_RESERVED_7 = 7;
  }
  enum MPCWarnTLAstright2D5SType {
    MPC_WARN_TLA_STRIGHT_2D5_S_NODISPLAY = 0;
    MPC_WARN_TLA_STRIGHT_2D5_S_GREEN = 1;
    MPC_WARN_TLA_STRIGHT_2D5_S_GREENTOYELLOW = 2;
    MPC_WARN_TLA_STRIGHT_2D5_S_YELLOW = 3;
    MPC_WARN_TLA_STRIGHT_2D5_S_YELLOWTORED = 4;
    MPC_WARN_TLA_STRIGHT_2D5_S_RED = 5;
    MPC_WARN_TLA_STRIGHT_2D5_S_REDTOGREEN = 6;
    MPC_WARN_TLA_STRIGHT_2D5_S_RESERVED_7 = 7;
  }
  enum MPCWarnTLAright2D5SType {
    _MPC_WARN_TLA_RIGHT_2D5_S_NODISPLAY = 0;
    _MPC_WARN_TLA_RIGHT_2D5_S_GREEN = 1;
    _MPC_WARN_TLA_RIGHT_2D5_S_GREENTOYELLOW = 2;
    _MPC_WARN_TLA_RIGHT_2D5_S_YELLOW = 3;
    _MPC_WARN_TLA_RIGHT_2D5_S_YELLOWTORED = 4;
    _MPC_WARN_TLA_RIGHT_2D5_S_RED = 5;
    _MPC_WARN_TLA_RIGHT_2D5_S_REDTOGREEN = 6;
    _MPC_WARN_TLA_RIGHT_2D5_S_RESERVED_7 = 7;
  }
  enum MPCWarnTLATround2D5SType {
    MPC_WARN_TLA_TROUND_2D5_S_NODISPLAY = 0;
    MPC_WARN_TLA_TROUND_2D5_S_GREEN = 1;
    MPC_WARN_TLA_TROUND_2D5_S_GREENTOYELLOW = 2;
    MPC_WARN_TLA_TROUND_2D5_S_YELLOW = 3;
    MPC_WARN_TLA_TROUND_2D5_S_YELLOWTORED = 4;
    MPC_WARN_TLA_TROUND_2D5_S_RED = 5;
    MPC_WARN_TLA_TROUND_2D5_S_REDTOGREEN = 6;
    MPC_WARN_TLA_TROUND_2D5_S_RESERVED_7 = 7;
  }
  enum ISLCSpeedcontrolStateType {
    ISLC_SPEEDCONTROL_STATE_INVAILD = 0;
    ISLC_SPEEDCONTROL_STATE_ISLC_SPEED_CTRLLING = 1;
    ISLC_SPEEDCONTROL_STATE_ISLC_SPEED_CTRL_STOPPED = 2;
    ISLC_SPEEDCONTROL_STATE_RESERVED_3 = 3;
  }
  enum TauGapSetS2D5SType {
    TAU_GAP_SET_S_2D5_S_TAUGAP0 = 0;
    TAU_GAP_SET_S_2D5_S_TAUGAP1 = 1;
    TAU_GAP_SET_S_2D5_S_TAUGAP2 = 2;
    TAU_GAP_SET_S_2D5_S_TAUGAP3 = 3;
    TAU_GAP_SET_S_2D5_S_TAUGAP4 = 4;
    TAU_GAP_SET_S_2D5_S_TAUGAP5 = 5;
    TAU_GAP_SET_S_2D5_S_TAUGAP6 = 6;
    TAU_GAP_SET_S_2D5_S_TAUGAP7 = 7;
  }
  enum DxTarObj2D5SType {
    DX_TAR_OBJ_2D5_S_DIST0 = 0;
    DX_TAR_OBJ_2D5_S_DIST1 = 1;
    DX_TAR_OBJ_2D5_S_DIST2 = 2;
    DX_TAR_OBJ_2D5_S_DIST3 = 3;
    DX_TAR_OBJ_2D5_S_DIST4 = 4;
    DX_TAR_OBJ_2D5_S_DIST5 = 5;
    DX_TAR_OBJ_2D5_S_DIST6 = 6;
    DX_TAR_OBJ_2D5_S_DIST7 = 7;
  }
  // TSR_function_status_2D5_S [] [0|7]
  optional TSRfunctionstatus2D5SType tsr_function_status_2_d5_s = 1;
  // ISLC_Sts_2D5_S [] [0|1]
  optional bool islc_sts_2_d5_s = 2;
  // ISLC_Warnning_2D5_S [] [0|1]
  optional bool islc_warnning_2_d5_s = 3;
  // ISLI_Warning_Status_2D5_S [] [0|3]
  optional ISLIWarningStatus2D5SType isli_warning_status_2_d5_s = 4;
  // ISLI_Sta_2D5_S [] [0|1]
  optional bool isli_sta_2_d5_s = 5;
  // RSI_SignMisc_2D5_S [] [0|31]
  optional RSISignMisc2D5SType rsi_sign_misc_2_d5_s = 6;
  // Speed_Unit_Set_S [] [0|3]
  optional SpeedUnitSetSType speed_unit_set_s = 7;
  // MPC_SpdLimOffs_SLA_2D5_S [] [0|15]
  optional MPCSpdLimOffsSLA2D5SType mpc_spd_lim_offs_sla_2_d5_s = 8;
  // MPC_Warn_TLA_left_type_S [] [0|3]
  optional MPCWarnTLAlefttypeSType mpc_warn_tla_left_type_s = 9;
  // MPC_Warn_TLA_stright_type_S [] [0|1]
  optional bool mpc_warn_tla_stright_type_s = 10;
  // MPC_Warn_TLA_right_type_S [] [0|1]
  optional bool mpc_warn_tla_right_type_s = 11;
  // SLA_Output_Speed_Limit_2D5_S [] [0|255]
  optional int32 sla_output_speed_limit_2_d5_s = 12;
  // TLA_Sts_2D5_S [] [0|3]
  optional TLASts2D5SType tla_sts_2_d5_s = 13;
  // MPC_Warn_TLA_left_2D5_S [] [0|7]
  optional MPCWarnTLAleft2D5SType mpc_warn_tla_left_2_d5_s = 14;
  // MPC_Warn_TLA_stright_2D5_S [] [0|7]
  optional MPCWarnTLAstright2D5SType mpc_warn_tla_stright_2_d5_s = 15;
  // MPC_Warn_TLA_right_2D5_S [] [0|7]
  optional MPCWarnTLAright2D5SType mpc_warn_tla_right_2_d5_s = 16;
  // MPC_Warn_TLA_Tround_2D5_S [] [0|7]
  optional MPCWarnTLATround2D5SType mpc_warn_tla_tround_2_d5_s = 17;
  // ISLC_Speedcontrol_State [] [0|3]
  optional ISLCSpeedcontrolStateType islc_speedcontrol_state = 18;
  // Set_Speed_2D5_S [km/h] [0|255.5]
  optional double set_speed_2_d5_s = 19;
  // Tau_Gap_Set_S_2D5_S [] [0|7]
  optional TauGapSetS2D5SType tau_gap_set_s_2_d5_s = 20;
  // Obj_Valid_2D5_S [] [0|1]
  optional bool obj_valid_2_d5_s = 21;
  // Dx_Tar_Obj_2D5_S [] [0|7]
  optional DxTarObj2D5SType dx_tar_obj_2_d5_s = 22;
}

message MEDIA_0X2EA {
// Report Message
  enum SentryModeCommandSType {
    SENTRY_MODE_COMMAND_S_INVALID = 0;
    SENTRY_MODE_COMMAND_S_ENTER = 1;
    SENTRY_MODE_COMMAND_S_EXIT = 2;
    SENTRY_MODE_COMMAND_S_RESERVED_3 = 3;
  }
  // Local_Ready_Ent_Sentry_mode_S [] [0|1]
  optional bool local_ready_ent_sentry_mode_s = 1;
  // Sentry_Mode_Command_S [] [0|3]
  optional SentryModeCommandSType sentry_mode_command_s = 2;
}

message MEDIA_0X2EC {
// Report Message
  enum FatigueMonitoringStatusSType {
    FATIGUE_MONITORING_STATUS_S_INVALID = 0;
    FATIGUE_MONITORING_STATUS_S_MILDFATIGUE = 1;
    FATIGUE_MONITORING_STATUS_S_MODERATEFATIGUE = 2;
    FATIGUE_MONITORING_STATUS_S_SEVEREFATIGUE = 3;
    FATIGUE_MONITORING_STATUS_S_NOFATIGUE = 4;
    FATIGUE_MONITORING_STATUS_S_CLOSE = 5;
    FATIGUE_MONITORING_STATUS_S_UNKNOWN = 6;
    FATIGUE_MONITORING_STATUS_S_RESERVED_7 = 7;
  }
  enum DistractionMonitoringStatusSType {
    DISTRACTION_MONITORING_STATUS_S_NODANGEROUSACTION = 0;
    DISTRACTION_MONITORING_STATUS_S_DANGEROUSACTION = 1;
    DISTRACTION_MONITORING_STATUS_S_SMOKING = 2;
    DISTRACTION_MONITORING_STATUS_S_MAKEACALL = 3;
  }
  enum LongTermDrivingMonitorStsSType {
    LONG_TERM_DRIVING_MONITOR_STS_S_INVALID = 0;
    LONG_TERM_DRIVING_MONITOR_STS_S_DRIVINGFORALONGTIME = 1;
    LONG_TERM_DRIVING_MONITOR_STS_S_DRIVINGFORALONGTIME_REPEAT = 2;
    LONG_TERM_DRIVING_MONITOR_STS_S_RESERVED_3 = 3;
  }
  enum DMSSelfCheckStatusSType {
    DMS_SELF_CHECK_STATUS_S_INVALID = 0;
    DMS_SELF_CHECK_STATUS_S_FAULT_FAULTSTATE = 1;
    DMS_SELF_CHECK_STATUS_S_INIT_INITIALIZATION = 2;
    DMS_SELF_CHECK_STATUS_S_ACTIVE_NORMALWORK = 3;
    DMS_SELF_CHECK_STATUS_S_CAMERABLOCKED_DOMESTIC = 4;
    DMS_SELF_CHECK_STATUS_S_CAMERABLOCKED_OVERSEAS = 5;
    DMS_SELF_CHECK_STATUS_S_OFF_FUNCTIONCLOSED = 6;
    DMS_SELF_CHECK_STATUS_S_FAIL_INITIALIZATIONFAILED = 7;
    DMS_SELF_CHECK_STATUS_S_PRIVACYMODE = 8;
    DMS_SELF_CHECK_STATUS_S_RESERVED_9 = 9;
    DMS_SELF_CHECK_STATUS_S_RESERVED_10 = 10;
    DMS_SELF_CHECK_STATUS_S_RESERVED_11 = 11;
    DMS_SELF_CHECK_STATUS_S_RESERVED_12 = 12;
    DMS_SELF_CHECK_STATUS_S_RESERVED_13 = 13;
    DMS_SELF_CHECK_STATUS_S_RESERVED_14 = 14;
    DMS_SELF_CHECK_STATUS_S_RESERVED_15 = 15;
  }
  enum DriverAreaOfInterestSType {
    DRIVER_AREA_OF_INTEREST_S_UNAVAILAVLE = 0;
    DRIVER_AREA_OF_INTEREST_S_WINDSHIELD = 1;
    DRIVER_AREA_OF_INTEREST_S_REARVIEWMIRROR = 2;
    DRIVER_AREA_OF_INTEREST_S_DRIVERSIDEWINDOW = 3;
    DRIVER_AREA_OF_INTEREST_S_INSTRUMENTCLUSTER = 4;
    DRIVER_AREA_OF_INTEREST_S_INFOTAIMENTDISPLAY = 5;
    DRIVER_AREA_OF_INTEREST_S_LEFTSIDEMIRROR = 6;
    DRIVER_AREA_OF_INTEREST_S_RIGHTSIDEMIRROR = 7;
    DRIVER_AREA_OF_INTEREST_S_DRIVERSIDEFOOTWELL = 8;
    DRIVER_AREA_OF_INTEREST_S_AIRCONDITIONINGPORT = 9;
    DRIVER_AREA_OF_INTEREST_S_PASSENGERSIDEDOORPANEL = 10;
    DRIVER_AREA_OF_INTEREST_S_DRIVERSIDEDOORPANEL = 11;
    DRIVER_AREA_OF_INTEREST_S_PASSENGERSIDEFOOTWELL = 12;
    DRIVER_AREA_OF_INTEREST_S_RESERVED_13 = 13;
    DRIVER_AREA_OF_INTEREST_S_RESERVED_14 = 14;
    DRIVER_AREA_OF_INTEREST_S_RESERVED_15 = 15;
    DRIVER_AREA_OF_INTEREST_S_RESERVED_16 = 16;
    DRIVER_AREA_OF_INTEREST_S_RESERVED_17 = 17;
    DRIVER_AREA_OF_INTEREST_S_RESERVED_18 = 18;
    DRIVER_AREA_OF_INTEREST_S_RESERVED_19 = 19;
    DRIVER_AREA_OF_INTEREST_S_RESERVED_20 = 20;
    DRIVER_AREA_OF_INTEREST_S_RESERVED_21 = 21;
    DRIVER_AREA_OF_INTEREST_S_RESERVED_22 = 22;
    DRIVER_AREA_OF_INTEREST_S_RESERVED_23 = 23;
    DRIVER_AREA_OF_INTEREST_S_RESERVED_24 = 24;
    DRIVER_AREA_OF_INTEREST_S_RESERVED_25 = 25;
    DRIVER_AREA_OF_INTEREST_S_RESERVED_26 = 26;
    DRIVER_AREA_OF_INTEREST_S_RESERVED_27 = 27;
    DRIVER_AREA_OF_INTEREST_S_RESERVED_28 = 28;
    DRIVER_AREA_OF_INTEREST_S_RESERVED_29 = 29;
    DRIVER_AREA_OF_INTEREST_S_RESERVED_30 = 30;
    DRIVER_AREA_OF_INTEREST_S_RESERVED_31 = 31;
  }
  enum DriverPresenceMonitoringSType {
    DRIVER_PRESENCE_MONITORING_S_UNAVAILABLE = 0;
    DRIVER_PRESENCE_MONITORING_S_DRIVER_NOT_PRESENT = 1;
    DRIVER_PRESENCE_MONITORING_S_DRIVER_LONG_TIME_NOT_PRESENT = 2;
    DRIVER_PRESENCE_MONITORING_S_DRIVER_PRESENT = 3;
    DRIVER_PRESENCE_MONITORING_S_RESERVED_4 = 4;
    DRIVER_PRESENCE_MONITORING_S_RESERVED_5 = 5;
    DRIVER_PRESENCE_MONITORING_S_RESERVED_6 = 6;
    DRIVER_PRESENCE_MONITORING_S_RESERVED_7 = 7;
  }
  enum DistractMonitattentionMonitSType {
    DISTRACT_MONIT_ATTENTION_MONIT_S_UNAVAILABLE = 0;
    DISTRACT_MONIT_ATTENTION_MONIT_S_NONDISTRACTIVE = 1;
    DISTRACT_MONIT_ATTENTION_MONIT_S_LOWLEVELDISTRACTIVE = 2;
    DISTRACT_MONIT_ATTENTION_MONIT_S_MIDDLELEVELDISTRACTIVE = 3;
    DISTRACT_MONIT_ATTENTION_MONIT_S_HIGHLEVELDISTRACTIVE = 4;
    DISTRACT_MONIT_ATTENTION_MONIT_S_OFF = 5;
    DISTRACT_MONIT_ATTENTION_MONIT_S_UNKNOWN = 6;
    DISTRACT_MONIT_ATTENTION_MONIT_S_RESERVED_7 = 7;
    DISTRACT_MONIT_ATTENTION_MONIT_S_RESERVED_8 = 8;
    DISTRACT_MONIT_ATTENTION_MONIT_S_RESERVED_9 = 9;
    DISTRACT_MONIT_ATTENTION_MONIT_S_RESERVED_10 = 10;
    DISTRACT_MONIT_ATTENTION_MONIT_S_RESERVED_11 = 11;
    DISTRACT_MONIT_ATTENTION_MONIT_S_RESERVED_12 = 12;
    DISTRACT_MONIT_ATTENTION_MONIT_S_RESERVED_13 = 13;
    DISTRACT_MONIT_ATTENTION_MONIT_S_RESERVED_14 = 14;
    DISTRACT_MONIT_ATTENTION_MONIT_S_RESERVED_15 = 15;
  }
  enum RequestUNPAndHNPToCloseSType {
    REQUEST_UNP_AND_HNP_TO_CLOSE_S_INVALID = 0;
    REQUEST_UNP_AND_HNP_TO_CLOSE_S_UNPANDHNPAREOFF = 1;
    REQUEST_UNP_AND_HNP_TO_CLOSE_S_RESERVED_2 = 2;
    REQUEST_UNP_AND_HNP_TO_CLOSE_S_RESERVED_3 = 3;
  }
  enum DMSModeSType {
    DMS_MODE_S_INVALID = 0;
    DMS_MODE_S_STANDARD = 1;
    DMS_MODE_S_OFF = 2;
    DMS_MODE_S_SENSITIVE = 3;
  }
  // Fatigue_Monitoring_Status_S [] [0|7]
  optional FatigueMonitoringStatusSType fatigue_monitoring_status_s = 1;
  // Distraction_Monitoring_Status_S [] [0|3]
  optional DistractionMonitoringStatusSType distraction_monitoring_status_s = 2;
  // Long_Term_Driving_Monitor_Sts_S [] [0|3]
  optional LongTermDrivingMonitorStsSType long_term_driving_monitor_sts_s = 3;
  // DMS_Self_Check_Status_S [] [0|3]
  optional DMSSelfCheckStatusSType dms_self_check_status_s = 4;
  // Driver_Area_Of_Interest_S [] [0|31]
  optional DriverAreaOfInterestSType driver_area_of_interest_s = 5;
  // Driver_Presence_Monitoring_S [] [0|7]
  optional DriverPresenceMonitoringSType driver_presence_monitoring_s = 6;
  // Distract_Monit_attention_Monit_S [] [0|15]
  optional DistractMonitattentionMonitSType distract_monit_attention_monit_s = 7;
  // Request_UNP_And_HNP_To_Close_S [] [0|3]
  optional RequestUNPAndHNPToCloseSType request_unp_and_hnp_to_close_s = 8;
  // Dangerous_Action_Switch_S [] [0|1]
  optional bool dangerous_action_switch_s = 9;
  // DMS_Mode_S [] [0|3]
  optional DMSModeSType dms_mode_s = 10;
  // Fatigue_Switch_S [] [0|1]
  optional bool fatigue_switch_s = 11;
  // Distraction_Switch_S [] [0|1]
  optional bool distraction_switch_s = 12;
  // Counter_2EC_S [] [0|15]
  optional int32 counter_2_ec_s = 13;
  // Checksum_2EC_S [] [0|255]
  optional int32 checksum_2_ec_s = 14;
}

message ADS_0X2F0 {
// Control Message
  enum ADSELKstatusSType {
    ADS_ELK_STATUS_S_OFF = 0;
    ADS_ELK_STATUS_S_PASSIVE = 1;
    ADS_ELK_STATUS_S_ACT = 2;
    ADS_ELK_STATUS_S_FAILURE = 3;
  }
  enum ADSSta2F0SType {
    ADS_STA_2F0_S_NORMAL = 0;
    ADS_STA_2F0_S_TEMFAILED = 1;
    ADS_STA_2F0_S_PEMFAILED = 2;
    ADS_STA_2F0_S_REDUNDANTFAILED = 3;
  }
  enum AVMvideostatusType {
    AVM_VIDEO_STATUS_DEFAULT = 0;
    AVM_VIDEO_STATUS_AVMVIDEONORMAL = 1;
    AVM_VIDEO_STATUS_AVMVIDEOERROR = 2;
    AVM_VIDEO_STATUS_RESERVED_3 = 3;
  }
  enum DVRvideostatusType {
    DVR_VIDEO_STATUS_DEFAULT = 0;
    DVR_VIDEO_STATUS_DVRVIDEONORMAL = 1;
    DVR_VIDEO_STATUS_DVRVIDEOERROR = 2;
    DVR_VIDEO_STATUS_RESERVED_3 = 3;
  }
  enum FLPeriViewCamSType {
    FL_PERI_VIEW_CAM_S_DEFAULT = 0;
    FL_PERI_VIEW_CAM_S_FLSIDEVIDEONORMAL = 1;
    FL_PERI_VIEW_CAM_S_FLSIDEVIDEOERROR = 2;
    FL_PERI_VIEW_CAM_S_RESERVED_3 = 3;
  }
  enum FRPeriViewCamSType {
    FR_PERI_VIEW_CAM_S_DEFAULT = 0;
    FR_PERI_VIEW_CAM_S_FRSIDEVIDEONORMAL = 1;
    FR_PERI_VIEW_CAM_S_FRSIDEVIDEOERROR = 2;
    FR_PERI_VIEW_CAM_S_RESERVED_3 = 3;
  }
  enum RLPeriViewCamSType {
    RL_PERI_VIEW_CAM_S_DEFAULT = 0;
    RL_PERI_VIEW_CAM_S_RLSIDEVIDEONORMAL = 1;
    RL_PERI_VIEW_CAM_S_RLSIDEVIDEOERROR = 2;
    RL_PERI_VIEW_CAM_S_RESERVED_3 = 3;
  }
  enum RRPeriViewCamSType {
    RR_PERI_VIEW_CAM_S_DEFAULT = 0;
    RR_PERI_VIEW_CAM_S_RRSIDEVIDEONORMAL = 1;
    RR_PERI_VIEW_CAM_S_RRSIDEVIDEOERROR = 2;
    RR_PERI_VIEW_CAM_S_RESERVED_3 = 3;
  }
  enum NRPAutopassBlockingTargetSType {
    NRP_AUTOPASS_BLOCKINGTARGET_S_NONE = 0;
    NRP_AUTOPASS_BLOCKINGTARGET_S_PEDESTRIAN = 1;
    NRP_AUTOPASS_BLOCKINGTARGET_S_CYCLIST = 2;
    NRP_AUTOPASS_BLOCKINGTARGET_S_VEHICLE = 3;
    NRP_AUTOPASS_BLOCKINGTARGET_S_ANIMAL = 4;
    NRP_AUTOPASS_BLOCKINGTARGET_S_UNKNOWN = 5;
    NRP_AUTOPASS_BLOCKINGTARGET_S_RESERVED_6 = 6;
    NRP_AUTOPASS_BLOCKINGTARGET_S_RESERVED_7 = 7;
    NRP_AUTOPASS_BLOCKINGTARGET_S_RESERVED_8 = 8;
    NRP_AUTOPASS_BLOCKINGTARGET_S_RESERVED_9 = 9;
    NRP_AUTOPASS_BLOCKINGTARGET_S_RESERVED_10 = 10;
    NRP_AUTOPASS_BLOCKINGTARGET_S_RESERVED_11 = 11;
    NRP_AUTOPASS_BLOCKINGTARGET_S_RESERVED_12 = 12;
    NRP_AUTOPASS_BLOCKINGTARGET_S_RESERVED_13 = 13;
    NRP_AUTOPASS_BLOCKINGTARGET_S_RESERVED_14 = 14;
    NRP_AUTOPASS_BLOCKINGTARGET_S_RESERVED_15 = 15;
  }
  enum NRPStatusSType {
    NRP_STATUS_S_OFF = 0;
    NRP_STATUS_S_PASSIVE = 1;
    NRP_STATUS_S_STANDBY = 2;
    NRP_STATUS_S_ACT1 = 3;
    NRP_STATUS_S_ACT2 = 4;
    NRP_STATUS_S_FAULT = 5;
    NRP_STATUS_S_RESERVED_6 = 6;
    NRP_STATUS_S_RESERVED_7 = 7;
  }
  enum NRPSettingStatusSType {
    NRP_SETTING_STATUS_S_INVALID = 0;
    NRP_SETTING_STATUS_S_OFF = 1;
    NRP_SETTING_STATUS_S_ON = 2;
    NRP_SETTING_STATUS_S_RESERVED_3 = 3;
  }
  enum TBASettingStatesSType {
    TBA_SETTING_STATES_S_INVALID = 0;
    TBA_SETTING_STATES_S_OFF = 1;
    TBA_SETTING_STATES_S_ON = 2;
    TBA_SETTING_STATES_S_RESERVED_3 = 3;
  }
  enum TBAStatusSType {
    TBA_STATUS_S_OFF = 0;
    TBA_STATUS_S_PASSIVE = 1;
    TBA_STATUS_S_STANDBY = 2;
    TBA_STATUS_S_ACT = 3;
    TBA_STATUS_S_WAIT = 4;
    TBA_STATUS_S_SUSPEND = 5;
    TBA_STATUS_S_ABORT = 6;
    TBA_STATUS_S_FINISH = 7;
    TBA_STATUS_S_FAULT = 8;
    TBA_STATUS_S_RESERVED_9 = 9;
    TBA_STATUS_S_RESERVED_10 = 10;
    TBA_STATUS_S_RESERVED_11 = 11;
    TBA_STATUS_S_RESERVED_12 = 12;
    TBA_STATUS_S_RESERVED_13 = 13;
    TBA_STATUS_S_RESERVED_14 = 14;
    TBA_STATUS_S_RESERVED_15 = 15;
  }
  enum TBADisplaySType {
    TBA_DISPLAY_S_NONE = 0;
    TBA_DISPLAY_S_OBSTACLEINPATH = 1;
    TBA_DISPLAY_S_RELEASEBRAKEPEDAL = 2;
    TBA_DISPLAY_S_RELEASEACCELPEDAL = 3;
    TBA_DISPLAY_S_FASTENSEATBELT = 4;
    TBA_DISPLAY_S_RESERVED_5 = 5;
    TBA_DISPLAY_S_RESERVED_6 = 6;
    TBA_DISPLAY_S_RESERVED_7 = 7;
  }
  enum TBABlockingTargetStatusSType {
    TBA_BLOCKINGTARGET_STATUS_S_NONE = 0;
    TBA_BLOCKINGTARGET_STATUS_S_WARNING1 = 1;
    TBA_BLOCKINGTARGET_STATUS_S_WARNING2 = 2;
    TBA_BLOCKINGTARGET_STATUS_S_RESERVED_3 = 3;
  }
  enum NRPODDStatusSType {
    NRP_ODD_STATUS_S_NONE = 0;
    NRP_ODD_STATUS_S_YES = 1;
    NRP_ODD_STATUS_S_NO = 2;
    NRP_ODD_STATUS_S_RESERVED_3 = 3;
  }
  enum NRPNarrowStatusSType {
    NRP_NARROW_STATUS_S_NORMAL = 0;
    NRP_NARROW_STATUS_S_BLOCKEDVERTICAL = 1;
    NRP_NARROW_STATUS_S_BLOCKEDHORIZON = 2;
    NRP_NARROW_STATUS_S_WARNINGVERTICAL = 3;
    NRP_NARROW_STATUS_S_WARNINGHORIZON = 4;
    NRP_NARROW_STATUS_S_AUTOPASSHORIZON = 5;
    NRP_NARROW_STATUS_S_BRAKETOSTANDSTILL = 6;
    NRP_NARROW_STATUS_S_OBSTACLEINPATH = 7;
    NRP_NARROW_STATUS_S_RELEASEBRAKEPEDAL = 8;
    NRP_NARROW_STATUS_S_RELEASEACCELPEDAL = 9;
    NRP_NARROW_STATUS_S_FASTENSEATBELT = 10;
  }
  enum NRPAPBlockingTargetStatusSType {
    NRP_AP_BLOCKINGTARGET_STATUS_S_NONE = 0;
    NRP_AP_BLOCKINGTARGET_STATUS_S_WARNING1 = 1;
    NRP_AP_BLOCKINGTARGET_STATUS_S_WARNING2 = 2;
    NRP_AP_BLOCKINGTARGET_STATUS_S_RESERVED_3 = 3;
  }
  enum NRPAutopassStatusSType {
    NRP_AUTOPASS_STATUS_S_NONE = 0;
    NRP_AUTOPASS_STATUS_S_WAIT = 1;
    NRP_AUTOPASS_STATUS_S_BLOCKED = 2;
    NRP_AUTOPASS_STATUS_S_ASKFOROVERRIDE = 3;
    NRP_AUTOPASS_STATUS_S_DONE = 4;
    NRP_AUTOPASS_STATUS_S_ERROR = 5;
    NRP_AUTOPASS_STATUS_S_ACT = 6;
    NRP_AUTOPASS_STATUS_S_RESERVED_7 = 7;
    NRP_AUTOPASS_STATUS_S_RESERVED_8 = 8;
    NRP_AUTOPASS_STATUS_S_RESERVED_9 = 9;
    NRP_AUTOPASS_STATUS_S_RESERVED_10 = 10;
    NRP_AUTOPASS_STATUS_S_RESERVED_11 = 11;
    NRP_AUTOPASS_STATUS_S_RESERVED_12 = 12;
    NRP_AUTOPASS_STATUS_S_RESERVED_13 = 13;
    NRP_AUTOPASS_STATUS_S_RESERVED_14 = 14;
    NRP_AUTOPASS_STATUS_S_RESERVED_15 = 15;
  }
  // ADS_ELK_OT_Fault_Status_Flag_S [] [0|1]
  optional bool ads_elk_ot_fault_status_flag_s = 1;
  // ADS_ELK_status_S [] [0|3]
  optional ADSELKstatusSType ads_elk_status_s = 2;
  // DriveModeInhibitReq_S [] [0|1]
  optional bool drive_mode_inhibit_req_s = 3;
  // DriveModeInhibitReq_Valid_S [] [0|1]
  optional bool drive_mode_inhibit_req_valid_s = 4;
  // ADS_Sta_2F0_S [] [0|3]
  optional ADSSta2F0SType ads_sta_2_f0_s = 5;
  // AVM_video_status [] [0|3]
  optional AVMvideostatusType avm_video_status = 6;
  // DVR_video_status [] [0|3]
  optional DVRvideostatusType dvr_video_status = 7;
  // FL_Peri_View_Cam_S [] [0|3]
  optional FLPeriViewCamSType fl_peri_view_cam_s = 8;
  // FR_Peri_View_Cam_S [] [0|3]
  optional FRPeriViewCamSType fr_peri_view_cam_s = 9;
  // RL_Peri_View_Cam_S [] [0|3]
  optional RLPeriViewCamSType rl_peri_view_cam_s = 10;
  // RR_Peri_View_Cam_S [] [0|3]
  optional RRPeriViewCamSType rr_peri_view_cam_s = 11;
  // NRP_Autopass_BlockingTarget_S [] [0|15]
  optional NRPAutopassBlockingTargetSType nrp_autopass_blocking_target_s = 12;
  // NRP_Status_S [] [0|7]
  optional NRPStatusSType nrp_status_s = 13;
  // NRP_Setting_Status_S [] [0|3]
  optional NRPSettingStatusSType nrp_setting_status_s = 14;
  // TBA_Setting_States_S [] [0|3]
  optional TBASettingStatesSType tba_setting_states_s = 15;
  // TBA_Status_S [] [0|15]
  optional TBAStatusSType tba_status_s = 16;
  // TBA_Display_S [] [0|7]
  optional TBADisplaySType tba_display_s = 17;
  // TBA_BlockingTarget_Status_S [] [0|3]
  optional TBABlockingTargetStatusSType tba_blocking_target_status_s = 18;
  // NRP_ODD_Status_S [] [0|3]
  optional NRPODDStatusSType nrp_odd_status_s = 19;
  // NRP_Narrow_Status_S [] [0|15]
  optional NRPNarrowStatusSType nrp_narrow_status_s = 20;
  // NRP_AP_BlockingTarget_Status_S [] [0|3]
  optional NRPAPBlockingTargetStatusSType nrp_ap_blocking_target_status_s = 21;
  // NRP_Autopass_Status_S [] [0|15]
  optional NRPAutopassStatusSType nrp_autopass_status_s = 22;
  // Counter_2F0_S [] [0|15]
  optional int32 counter_2_f0_s = 23;
  // CheckSum2F0_S [] [0|255]
  optional int32 check_sum2_f0_s = 24;
}

message ADS_0X2F2 {
// Control Message
  enum TargetTGX1WarningType {
    TARGET_TGX1_WARNING_NORMAL = 0;
    TARGET_TGX1_WARNING_REMAND = 1;
    TARGET_TGX1_WARNING_LOWWARNING = 2;
    TARGET_TGX1_WARNING_MEDIUMWARNING = 3;
    TARGET_TGX1_WARNING_HIGHWARNING = 4;
    TARGET_TGX1_WARNING_RESERVED_5 = 5;
    TARGET_TGX1_WARNING_RESERVED_6 = 6;
    TARGET_TGX1_WARNING_RESERVED_7 = 7;
  }
  enum TargetTGX1TypeType {
    TARGET_TGX1_TYPE_INVALID = 0;
    TARGET_TGX1_TYPE_FOURWHEELEDVEHICLE = 1;
    TARGET_TGX1_TYPE_LARGEVEHICLE = 2;
    TARGET_TGX1_TYPE_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TGX1_TYPE_PEDESTRIAN = 4;
    TARGET_TGX1_TYPE_SPECIALVEHICLE = 5;
    TARGET_TGX1_TYPE_THREEWHEELEDVEHICLE = 6;
    TARGET_TGX1_TYPE_CONEBARREL = 7;
    TARGET_TGX1_TYPE_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TGX1_TYPE_DOG = 9;
    TARGET_TGX1_TYPE_BUS = 10;
    TARGET_TGX1_TYPE_SUV = 11;
    TARGET_TGX1_TYPE_ANTI_COLLISIONDRUM = 12;
    TARGET_TGX1_TYPE_CONSTRUCTIONSIGN = 13;
    TARGET_TGX1_TYPE_TRIPOD = 14;
    TARGET_TGX1_TYPE_WATERHORSE = 15;
    TARGET_TGX1_TYPE_RESERVED_16 = 16;
    TARGET_TGX1_TYPE_RESERVED_17 = 17;
    TARGET_TGX1_TYPE_RESERVED_18 = 18;
    TARGET_TGX1_TYPE_RESERVED_19 = 19;
    TARGET_TGX1_TYPE_RESERVED_20 = 20;
    TARGET_TGX1_TYPE_RESERVED_21 = 21;
    TARGET_TGX1_TYPE_RESERVED_22 = 22;
    TARGET_TGX1_TYPE_RESERVED_23 = 23;
    TARGET_TGX1_TYPE_RESERVED_24 = 24;
    TARGET_TGX1_TYPE_RESERVED_25 = 25;
    TARGET_TGX1_TYPE_RESERVED_26 = 26;
    TARGET_TGX1_TYPE_RESERVED_27 = 27;
    TARGET_TGX1_TYPE_RESERVED_28 = 28;
    TARGET_TGX1_TYPE_RESERVED_29 = 29;
    TARGET_TGX1_TYPE_RESERVED_30 = 30;
    TARGET_TGX1_TYPE_RESERVED_31 = 31;
  }
  enum TargetTGX2WarningType {
    TARGET_TGX2_WARNING_NORMAL = 0;
    TARGET_TGX2_WARNING_REMAND = 1;
    TARGET_TGX2_WARNING_LOWWARNING = 2;
    TARGET_TGX2_WARNING_MEDIUMWARNING = 3;
    TARGET_TGX2_WARNING_HIGHWARNING = 4;
    TARGET_TGX2_WARNING_RESERVED_5 = 5;
    TARGET_TGX2_WARNING_RESERVED_6 = 6;
    TARGET_TGX2_WARNING_RESERVED_7 = 7;
  }
  enum TargetTGX2TypeType {
    TARGET_TGX2_TYPE_INVALID = 0;
    TARGET_TGX2_TYPE_FOURWHEELEDVEHICLE = 1;
    TARGET_TGX2_TYPE_LARGEVEHICLE = 2;
    TARGET_TGX2_TYPE_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TGX2_TYPE_PEDESTRIAN = 4;
    TARGET_TGX2_TYPE_SPECIALVEHICLE = 5;
    TARGET_TGX2_TYPE_THREEWHEELEDVEHICLE = 6;
    TARGET_TGX2_TYPE_CONEBARREL = 7;
    TARGET_TGX2_TYPE_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TGX2_TYPE_DOG = 9;
    TARGET_TGX2_TYPE_BUS = 10;
    TARGET_TGX2_TYPE_SUV = 11;
    TARGET_TGX2_TYPE_ANTI_COLLISIONDRUM = 12;
    TARGET_TGX2_TYPE_CONSTRUCTIONSIGN = 13;
    TARGET_TGX2_TYPE_TRIPOD = 14;
    TARGET_TGX2_TYPE_WATERHORSE = 15;
    TARGET_TGX2_TYPE_RESERVED_16 = 16;
    TARGET_TGX2_TYPE_RESERVED_17 = 17;
    TARGET_TGX2_TYPE_RESERVED_18 = 18;
    TARGET_TGX2_TYPE_RESERVED_19 = 19;
    TARGET_TGX2_TYPE_RESERVED_20 = 20;
    TARGET_TGX2_TYPE_RESERVED_21 = 21;
    TARGET_TGX2_TYPE_RESERVED_22 = 22;
    TARGET_TGX2_TYPE_RESERVED_23 = 23;
    TARGET_TGX2_TYPE_RESERVED_24 = 24;
    TARGET_TGX2_TYPE_RESERVED_25 = 25;
    TARGET_TGX2_TYPE_RESERVED_26 = 26;
    TARGET_TGX2_TYPE_RESERVED_27 = 27;
    TARGET_TGX2_TYPE_RESERVED_28 = 28;
    TARGET_TGX2_TYPE_RESERVED_29 = 29;
    TARGET_TGX2_TYPE_RESERVED_30 = 30;
    TARGET_TGX2_TYPE_RESERVED_31 = 31;
  }
  enum TargetTGX3WarningType {
    TARGET_TGX3_WARNING_NORMAL = 0;
    TARGET_TGX3_WARNING_REMAND = 1;
    TARGET_TGX3_WARNING_LOWWARNING = 2;
    TARGET_TGX3_WARNING_MEDIUMWARNING = 3;
    TARGET_TGX3_WARNING_HIGHWARNING = 4;
    TARGET_TGX3_WARNING_RESERVED_5 = 5;
    TARGET_TGX3_WARNING_RESERVED_6 = 6;
    TARGET_TGX3_WARNING_RESERVED_7 = 7;
  }
  enum TargetTGX3TypeType {
    TARGET_TGX3_TYPE_INVALID = 0;
    TARGET_TGX3_TYPE_FOURWHEELEDVEHICLE = 1;
    TARGET_TGX3_TYPE_LARGEVEHICLE = 2;
    TARGET_TGX3_TYPE_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TGX3_TYPE_PEDESTRIAN = 4;
    TARGET_TGX3_TYPE_SPECIALVEHICLE = 5;
    TARGET_TGX3_TYPE_THREEWHEELEDVEHICLE = 6;
    TARGET_TGX3_TYPE_CONEBARREL = 7;
    TARGET_TGX3_TYPE_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TGX3_TYPE_DOG = 9;
    TARGET_TGX3_TYPE_BUS = 10;
    TARGET_TGX3_TYPE_SUV = 11;
    TARGET_TGX3_TYPE_ANTI_COLLISIONDRUM = 12;
    TARGET_TGX3_TYPE_CONSTRUCTIONSIGN = 13;
    TARGET_TGX3_TYPE_TRIPOD = 14;
    TARGET_TGX3_TYPE_WATERHORSE = 15;
    TARGET_TGX3_TYPE_RESERVED_16 = 16;
    TARGET_TGX3_TYPE_RESERVED_17 = 17;
    TARGET_TGX3_TYPE_RESERVED_18 = 18;
    TARGET_TGX3_TYPE_RESERVED_19 = 19;
    TARGET_TGX3_TYPE_RESERVED_20 = 20;
    TARGET_TGX3_TYPE_RESERVED_21 = 21;
    TARGET_TGX3_TYPE_RESERVED_22 = 22;
    TARGET_TGX3_TYPE_RESERVED_23 = 23;
    TARGET_TGX3_TYPE_RESERVED_24 = 24;
    TARGET_TGX3_TYPE_RESERVED_25 = 25;
    TARGET_TGX3_TYPE_RESERVED_26 = 26;
    TARGET_TGX3_TYPE_RESERVED_27 = 27;
    TARGET_TGX3_TYPE_RESERVED_28 = 28;
    TARGET_TGX3_TYPE_RESERVED_29 = 29;
    TARGET_TGX3_TYPE_RESERVED_30 = 30;
    TARGET_TGX3_TYPE_RESERVED_31 = 31;
  }
  enum TargetTGX4WarningType {
    TARGET_TGX4_WARNING_NORMAL = 0;
    TARGET_TGX4_WARNING_REMAND = 1;
    TARGET_TGX4_WARNING_LOWWARNING = 2;
    TARGET_TGX4_WARNING_MEDIUMWARNING = 3;
    TARGET_TGX4_WARNING_HIGHWARNING = 4;
    TARGET_TGX4_WARNING_RESERVED_5 = 5;
    TARGET_TGX4_WARNING_RESERVED_6 = 6;
    TARGET_TGX4_WARNING_RESERVED_7 = 7;
  }
  enum TargetTGX4TypeType {
    TARGET_TGX4_TYPE_INVALID = 0;
    TARGET_TGX4_TYPE_FOURWHEELEDVEHICLE = 1;
    TARGET_TGX4_TYPE_LARGEVEHICLE = 2;
    TARGET_TGX4_TYPE_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TGX4_TYPE_PEDESTRIAN = 4;
    TARGET_TGX4_TYPE_SPECIALVEHICLE = 5;
    TARGET_TGX4_TYPE_THREEWHEELEDVEHICLE = 6;
    TARGET_TGX4_TYPE_CONEBARREL = 7;
    TARGET_TGX4_TYPE_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TGX4_TYPE_DOG = 9;
    TARGET_TGX4_TYPE_BUS = 10;
    TARGET_TGX4_TYPE_SUV = 11;
    TARGET_TGX4_TYPE_ANTI_COLLISIONDRUM = 12;
    TARGET_TGX4_TYPE_CONSTRUCTIONSIGN = 13;
    TARGET_TGX4_TYPE_TRIPOD = 14;
    TARGET_TGX4_TYPE_WATERHORSE = 15;
    TARGET_TGX4_TYPE_RESERVED_16 = 16;
    TARGET_TGX4_TYPE_RESERVED_17 = 17;
    TARGET_TGX4_TYPE_RESERVED_18 = 18;
    TARGET_TGX4_TYPE_RESERVED_19 = 19;
    TARGET_TGX4_TYPE_RESERVED_20 = 20;
    TARGET_TGX4_TYPE_RESERVED_21 = 21;
    TARGET_TGX4_TYPE_RESERVED_22 = 22;
    TARGET_TGX4_TYPE_RESERVED_23 = 23;
    TARGET_TGX4_TYPE_RESERVED_24 = 24;
    TARGET_TGX4_TYPE_RESERVED_25 = 25;
    TARGET_TGX4_TYPE_RESERVED_26 = 26;
    TARGET_TGX4_TYPE_RESERVED_27 = 27;
    TARGET_TGX4_TYPE_RESERVED_28 = 28;
    TARGET_TGX4_TYPE_RESERVED_29 = 29;
    TARGET_TGX4_TYPE_RESERVED_30 = 30;
    TARGET_TGX4_TYPE_RESERVED_31 = 31;
  }
  enum TargetTGX5WarningType {
    TARGET_TGX5_WARNING_NORMAL = 0;
    TARGET_TGX5_WARNING_REMAND = 1;
    TARGET_TGX5_WARNING_LOWWARNING = 2;
    TARGET_TGX5_WARNING_MEDIUMWARNING = 3;
    TARGET_TGX5_WARNING_HIGHWARNING = 4;
    TARGET_TGX5_WARNING_RESERVED_5 = 5;
    TARGET_TGX5_WARNING_RESERVED_6 = 6;
    TARGET_TGX5_WARNING_RESERVED_7 = 7;
  }
  enum TargetTGX5TypeType {
    TARGET_TGX5_TYPE_INVALID = 0;
    TARGET_TGX5_TYPE_FOURWHEELEDVEHICLE = 1;
    TARGET_TGX5_TYPE_LARGEVEHICLE = 2;
    TARGET_TGX5_TYPE_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TGX5_TYPE_PEDESTRIAN = 4;
    TARGET_TGX5_TYPE_SPECIALVEHICLE = 5;
    TARGET_TGX5_TYPE_THREEWHEELEDVEHICLE = 6;
    TARGET_TGX5_TYPE_CONEBARREL = 7;
    TARGET_TGX5_TYPE_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TGX5_TYPE_DOG = 9;
    TARGET_TGX5_TYPE_BUS = 10;
    TARGET_TGX5_TYPE_SUV = 11;
    TARGET_TGX5_TYPE_ANTI_COLLISIONDRUM = 12;
    TARGET_TGX5_TYPE_CONSTRUCTIONSIGN = 13;
    TARGET_TGX5_TYPE_TRIPOD = 14;
    TARGET_TGX5_TYPE_WATERHORSE = 15;
    TARGET_TGX5_TYPE_RESERVED_16 = 16;
    TARGET_TGX5_TYPE_RESERVED_17 = 17;
    TARGET_TGX5_TYPE_RESERVED_18 = 18;
    TARGET_TGX5_TYPE_RESERVED_19 = 19;
    TARGET_TGX5_TYPE_RESERVED_20 = 20;
    TARGET_TGX5_TYPE_RESERVED_21 = 21;
    TARGET_TGX5_TYPE_RESERVED_22 = 22;
    TARGET_TGX5_TYPE_RESERVED_23 = 23;
    TARGET_TGX5_TYPE_RESERVED_24 = 24;
    TARGET_TGX5_TYPE_RESERVED_25 = 25;
    TARGET_TGX5_TYPE_RESERVED_26 = 26;
    TARGET_TGX5_TYPE_RESERVED_27 = 27;
    TARGET_TGX5_TYPE_RESERVED_28 = 28;
    TARGET_TGX5_TYPE_RESERVED_29 = 29;
    TARGET_TGX5_TYPE_RESERVED_30 = 30;
    TARGET_TGX5_TYPE_RESERVED_31 = 31;
  }
  enum TargetTGX6WarningType {
    TARGET_TGX6_WARNING_NORMAL = 0;
    TARGET_TGX6_WARNING_REMAND = 1;
    TARGET_TGX6_WARNING_LOWWARNING = 2;
    TARGET_TGX6_WARNING_MEDIUMWARNING = 3;
    TARGET_TGX6_WARNING_HIGHWARNING = 4;
    TARGET_TGX6_WARNING_RESERVED_5 = 5;
    TARGET_TGX6_WARNING_RESERVED_6 = 6;
    TARGET_TGX6_WARNING_RESERVED_7 = 7;
  }
  enum TargetTGX6TypeType {
    TARGET_TGX6_TYPE_INVALID = 0;
    TARGET_TGX6_TYPE_FOURWHEELEDVEHICLE = 1;
    TARGET_TGX6_TYPE_LARGEVEHICLE = 2;
    TARGET_TGX6_TYPE_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TGX6_TYPE_PEDESTRIAN = 4;
    TARGET_TGX6_TYPE_SPECIALVEHICLE = 5;
    TARGET_TGX6_TYPE_THREEWHEELEDVEHICLE = 6;
    TARGET_TGX6_TYPE_CONEBARREL = 7;
    TARGET_TGX6_TYPE_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TGX6_TYPE_DOG = 9;
    TARGET_TGX6_TYPE_BUS = 10;
    TARGET_TGX6_TYPE_SUV = 11;
    TARGET_TGX6_TYPE_ANTI_COLLISIONDRUM = 12;
    TARGET_TGX6_TYPE_CONSTRUCTIONSIGN = 13;
    TARGET_TGX6_TYPE_TRIPOD = 14;
    TARGET_TGX6_TYPE_WATERHORSE = 15;
    TARGET_TGX6_TYPE_RESERVED_16 = 16;
    TARGET_TGX6_TYPE_RESERVED_17 = 17;
    TARGET_TGX6_TYPE_RESERVED_18 = 18;
    TARGET_TGX6_TYPE_RESERVED_19 = 19;
    TARGET_TGX6_TYPE_RESERVED_20 = 20;
    TARGET_TGX6_TYPE_RESERVED_21 = 21;
    TARGET_TGX6_TYPE_RESERVED_22 = 22;
    TARGET_TGX6_TYPE_RESERVED_23 = 23;
    TARGET_TGX6_TYPE_RESERVED_24 = 24;
    TARGET_TGX6_TYPE_RESERVED_25 = 25;
    TARGET_TGX6_TYPE_RESERVED_26 = 26;
    TARGET_TGX6_TYPE_RESERVED_27 = 27;
    TARGET_TGX6_TYPE_RESERVED_28 = 28;
    TARGET_TGX6_TYPE_RESERVED_29 = 29;
    TARGET_TGX6_TYPE_RESERVED_30 = 30;
    TARGET_TGX6_TYPE_RESERVED_31 = 31;
  }
  enum TargetTGX7WarningType {
    TARGET_TGX7_WARNING_NORMAL = 0;
    TARGET_TGX7_WARNING_REMAND = 1;
    TARGET_TGX7_WARNING_LOWWARNING = 2;
    TARGET_TGX7_WARNING_MEDIUMWARNING = 3;
    TARGET_TGX7_WARNING_HIGHWARNING = 4;
    TARGET_TGX7_WARNING_RESERVED_5 = 5;
    TARGET_TGX7_WARNING_RESERVED_6 = 6;
    TARGET_TGX7_WARNING_RESERVED_7 = 7;
  }
  enum TargetTGX7TypeType {
    TARGET_TGX7_TYPE_INVALID = 0;
    TARGET_TGX7_TYPE_FOURWHEELEDVEHICLE = 1;
    TARGET_TGX7_TYPE_LARGEVEHICLE = 2;
    TARGET_TGX7_TYPE_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TGX7_TYPE_PEDESTRIAN = 4;
    TARGET_TGX7_TYPE_SPECIALVEHICLE = 5;
    TARGET_TGX7_TYPE_THREEWHEELEDVEHICLE = 6;
    TARGET_TGX7_TYPE_CONEBARREL = 7;
    TARGET_TGX7_TYPE_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TGX7_TYPE_DOG = 9;
    TARGET_TGX7_TYPE_BUS = 10;
    TARGET_TGX7_TYPE_SUV = 11;
    TARGET_TGX7_TYPE_ANTI_COLLISIONDRUM = 12;
    TARGET_TGX7_TYPE_CONSTRUCTIONSIGN = 13;
    TARGET_TGX7_TYPE_TRIPOD = 14;
    TARGET_TGX7_TYPE_WATERHORSE = 15;
    TARGET_TGX7_TYPE_RESERVED_16 = 16;
    TARGET_TGX7_TYPE_RESERVED_17 = 17;
    TARGET_TGX7_TYPE_RESERVED_18 = 18;
    TARGET_TGX7_TYPE_RESERVED_19 = 19;
    TARGET_TGX7_TYPE_RESERVED_20 = 20;
    TARGET_TGX7_TYPE_RESERVED_21 = 21;
    TARGET_TGX7_TYPE_RESERVED_22 = 22;
    TARGET_TGX7_TYPE_RESERVED_23 = 23;
    TARGET_TGX7_TYPE_RESERVED_24 = 24;
    TARGET_TGX7_TYPE_RESERVED_25 = 25;
    TARGET_TGX7_TYPE_RESERVED_26 = 26;
    TARGET_TGX7_TYPE_RESERVED_27 = 27;
    TARGET_TGX7_TYPE_RESERVED_28 = 28;
    TARGET_TGX7_TYPE_RESERVED_29 = 29;
    TARGET_TGX7_TYPE_RESERVED_30 = 30;
    TARGET_TGX7_TYPE_RESERVED_31 = 31;
  }
  enum TargetTGX8WarningType {
    TARGET_TGX8_WARNING_NORMAL = 0;
    TARGET_TGX8_WARNING_REMAND = 1;
    TARGET_TGX8_WARNING_LOWWARNING = 2;
    TARGET_TGX8_WARNING_MEDIUMWARNING = 3;
    TARGET_TGX8_WARNING_HIGHWARNING = 4;
    TARGET_TGX8_WARNING_RESERVED_5 = 5;
    TARGET_TGX8_WARNING_RESERVED_6 = 6;
    TARGET_TGX8_WARNING_RESERVED_7 = 7;
  }
  enum TargetTGX8TypeType {
    TARGET_TGX8_TYPE_INVALID = 0;
    TARGET_TGX8_TYPE_FOURWHEELEDVEHICLE = 1;
    TARGET_TGX8_TYPE_LARGEVEHICLE = 2;
    TARGET_TGX8_TYPE_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TGX8_TYPE_PEDESTRIAN = 4;
    TARGET_TGX8_TYPE_SPECIALVEHICLE = 5;
    TARGET_TGX8_TYPE_THREEWHEELEDVEHICLE = 6;
    TARGET_TGX8_TYPE_CONEBARREL = 7;
    TARGET_TGX8_TYPE_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TGX8_TYPE_DOG = 9;
    TARGET_TGX8_TYPE_BUS = 10;
    TARGET_TGX8_TYPE_SUV = 11;
    TARGET_TGX8_TYPE_ANTI_COLLISIONDRUM = 12;
    TARGET_TGX8_TYPE_CONSTRUCTIONSIGN = 13;
    TARGET_TGX8_TYPE_TRIPOD = 14;
    TARGET_TGX8_TYPE_WATERHORSE = 15;
    TARGET_TGX8_TYPE_RESERVED_16 = 16;
    TARGET_TGX8_TYPE_RESERVED_17 = 17;
    TARGET_TGX8_TYPE_RESERVED_18 = 18;
    TARGET_TGX8_TYPE_RESERVED_19 = 19;
    TARGET_TGX8_TYPE_RESERVED_20 = 20;
    TARGET_TGX8_TYPE_RESERVED_21 = 21;
    TARGET_TGX8_TYPE_RESERVED_22 = 22;
    TARGET_TGX8_TYPE_RESERVED_23 = 23;
    TARGET_TGX8_TYPE_RESERVED_24 = 24;
    TARGET_TGX8_TYPE_RESERVED_25 = 25;
    TARGET_TGX8_TYPE_RESERVED_26 = 26;
    TARGET_TGX8_TYPE_RESERVED_27 = 27;
    TARGET_TGX8_TYPE_RESERVED_28 = 28;
    TARGET_TGX8_TYPE_RESERVED_29 = 29;
    TARGET_TGX8_TYPE_RESERVED_30 = 30;
    TARGET_TGX8_TYPE_RESERVED_31 = 31;
  }
  enum TargetTGX9WarningType {
    TARGET_TGX9_WARNING_NORMAL = 0;
    TARGET_TGX9_WARNING_REMAND = 1;
    TARGET_TGX9_WARNING_LOWWARNING = 2;
    TARGET_TGX9_WARNING_MEDIUMWARNING = 3;
    TARGET_TGX9_WARNING_HIGHWARNING = 4;
    TARGET_TGX9_WARNING_RESERVED_5 = 5;
    TARGET_TGX9_WARNING_RESERVED_6 = 6;
    TARGET_TGX9_WARNING_RESERVED_7 = 7;
  }
  enum TargetTGX9TypeType {
    TARGET_TGX9_TYPE_INVALID = 0;
    TARGET_TGX9_TYPE_FOURWHEELEDVEHICLE = 1;
    TARGET_TGX9_TYPE_LARGEVEHICLE = 2;
    TARGET_TGX9_TYPE_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TGX9_TYPE_PEDESTRIAN = 4;
    TARGET_TGX9_TYPE_SPECIALVEHICLE = 5;
    TARGET_TGX9_TYPE_THREEWHEELEDVEHICLE = 6;
    TARGET_TGX9_TYPE_CONEBARREL = 7;
    TARGET_TGX9_TYPE_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TGX9_TYPE_DOG = 9;
    TARGET_TGX9_TYPE_BUS = 10;
    TARGET_TGX9_TYPE_SUV = 11;
    TARGET_TGX9_TYPE_ANTI_COLLISIONDRUM = 12;
    TARGET_TGX9_TYPE_CONSTRUCTIONSIGN = 13;
    TARGET_TGX9_TYPE_TRIPOD = 14;
    TARGET_TGX9_TYPE_WATERHORSE = 15;
    TARGET_TGX9_TYPE_RESERVED_16 = 16;
    TARGET_TGX9_TYPE_RESERVED_17 = 17;
    TARGET_TGX9_TYPE_RESERVED_18 = 18;
    TARGET_TGX9_TYPE_RESERVED_19 = 19;
    TARGET_TGX9_TYPE_RESERVED_20 = 20;
    TARGET_TGX9_TYPE_RESERVED_21 = 21;
    TARGET_TGX9_TYPE_RESERVED_22 = 22;
    TARGET_TGX9_TYPE_RESERVED_23 = 23;
    TARGET_TGX9_TYPE_RESERVED_24 = 24;
    TARGET_TGX9_TYPE_RESERVED_25 = 25;
    TARGET_TGX9_TYPE_RESERVED_26 = 26;
    TARGET_TGX9_TYPE_RESERVED_27 = 27;
    TARGET_TGX9_TYPE_RESERVED_28 = 28;
    TARGET_TGX9_TYPE_RESERVED_29 = 29;
    TARGET_TGX9_TYPE_RESERVED_30 = 30;
    TARGET_TGX9_TYPE_RESERVED_31 = 31;
  }
  enum TargetTGX10WarningType {
    TARGET_TGX10_WARNING_NORMAL = 0;
    TARGET_TGX10_WARNING_REMAND = 1;
    TARGET_TGX10_WARNING_LOWWARNING = 2;
    TARGET_TGX10_WARNING_MEDIUMWARNING = 3;
    TARGET_TGX10_WARNING_HIGHWARNING = 4;
    TARGET_TGX10_WARNING_RESERVED_5 = 5;
    TARGET_TGX10_WARNING_RESERVED_6 = 6;
    TARGET_TGX10_WARNING_RESERVED_7 = 7;
  }
  enum TargetTGX10TypeType {
    TARGET_TGX10_TYPE_INVALID = 0;
    TARGET_TGX10_TYPE_FOURWHEELEDVEHICLE = 1;
    TARGET_TGX10_TYPE_LARGEVEHICLE = 2;
    TARGET_TGX10_TYPE_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TGX10_TYPE_PEDESTRIAN = 4;
    TARGET_TGX10_TYPE_SPECIALVEHICLE = 5;
    TARGET_TGX10_TYPE_THREEWHEELEDVEHICLE = 6;
    TARGET_TGX10_TYPE_CONEBARREL = 7;
    TARGET_TGX10_TYPE_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TGX10_TYPE_DOG = 9;
    TARGET_TGX10_TYPE_BUS = 10;
    TARGET_TGX10_TYPE_SUV = 11;
    TARGET_TGX10_TYPE_ANTI_COLLISIONDRUM = 12;
    TARGET_TGX10_TYPE_CONSTRUCTIONSIGN = 13;
    TARGET_TGX10_TYPE_TRIPOD = 14;
    TARGET_TGX10_TYPE_WATERHORSE = 15;
    TARGET_TGX10_TYPE_RESERVED_16 = 16;
    TARGET_TGX10_TYPE_RESERVED_17 = 17;
    TARGET_TGX10_TYPE_RESERVED_18 = 18;
    TARGET_TGX10_TYPE_RESERVED_19 = 19;
    TARGET_TGX10_TYPE_RESERVED_20 = 20;
    TARGET_TGX10_TYPE_RESERVED_21 = 21;
    TARGET_TGX10_TYPE_RESERVED_22 = 22;
    TARGET_TGX10_TYPE_RESERVED_23 = 23;
    TARGET_TGX10_TYPE_RESERVED_24 = 24;
    TARGET_TGX10_TYPE_RESERVED_25 = 25;
    TARGET_TGX10_TYPE_RESERVED_26 = 26;
    TARGET_TGX10_TYPE_RESERVED_27 = 27;
    TARGET_TGX10_TYPE_RESERVED_28 = 28;
    TARGET_TGX10_TYPE_RESERVED_29 = 29;
    TARGET_TGX10_TYPE_RESERVED_30 = 30;
    TARGET_TGX10_TYPE_RESERVED_31 = 31;
  }
  enum TargetTGX11WarningType {
    TARGET_TGX11_WARNING_NORMAL = 0;
    TARGET_TGX11_WARNING_REMAND = 1;
    TARGET_TGX11_WARNING_LOWWARNING = 2;
    TARGET_TGX11_WARNING_MEDIUMWARNING = 3;
    TARGET_TGX11_WARNING_HIGHWARNING = 4;
    TARGET_TGX11_WARNING_RESERVED_5 = 5;
    TARGET_TGX11_WARNING_RESERVED_6 = 6;
    TARGET_TGX11_WARNING_RESERVED_7 = 7;
  }
  enum TargetTGX11TypeType {
    TARGET_TGX11_TYPE_INVALID = 0;
    TARGET_TGX11_TYPE_FOURWHEELEDVEHICLE = 1;
    TARGET_TGX11_TYPE_LARGEVEHICLE = 2;
    TARGET_TGX11_TYPE_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TGX11_TYPE_PEDESTRIAN = 4;
    TARGET_TGX11_TYPE_SPECIALVEHICLE = 5;
    TARGET_TGX11_TYPE_THREEWHEELEDVEHICLE = 6;
    TARGET_TGX11_TYPE_CONEBARREL = 7;
    TARGET_TGX11_TYPE_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TGX11_TYPE_DOG = 9;
    TARGET_TGX11_TYPE_BUS = 10;
    TARGET_TGX11_TYPE_SUV = 11;
    TARGET_TGX11_TYPE_ANTI_COLLISIONDRUM = 12;
    TARGET_TGX11_TYPE_CONSTRUCTIONSIGN = 13;
    TARGET_TGX11_TYPE_TRIPOD = 14;
    TARGET_TGX11_TYPE_WATERHORSE = 15;
    TARGET_TGX11_TYPE_RESERVED_16 = 16;
    TARGET_TGX11_TYPE_RESERVED_17 = 17;
    TARGET_TGX11_TYPE_RESERVED_18 = 18;
    TARGET_TGX11_TYPE_RESERVED_19 = 19;
    TARGET_TGX11_TYPE_RESERVED_20 = 20;
    TARGET_TGX11_TYPE_RESERVED_21 = 21;
    TARGET_TGX11_TYPE_RESERVED_22 = 22;
    TARGET_TGX11_TYPE_RESERVED_23 = 23;
    TARGET_TGX11_TYPE_RESERVED_24 = 24;
    TARGET_TGX11_TYPE_RESERVED_25 = 25;
    TARGET_TGX11_TYPE_RESERVED_26 = 26;
    TARGET_TGX11_TYPE_RESERVED_27 = 27;
    TARGET_TGX11_TYPE_RESERVED_28 = 28;
    TARGET_TGX11_TYPE_RESERVED_29 = 29;
    TARGET_TGX11_TYPE_RESERVED_30 = 30;
    TARGET_TGX11_TYPE_RESERVED_31 = 31;
  }
  enum TargetTGX12WarningType {
    TARGET_TGX12_WARNING_NORMAL = 0;
    TARGET_TGX12_WARNING_REMAND = 1;
    TARGET_TGX12_WARNING_LOWWARNING = 2;
    TARGET_TGX12_WARNING_MEDIUMWARNING = 3;
    TARGET_TGX12_WARNING_HIGHWARNING = 4;
    TARGET_TGX12_WARNING_RESERVED_5 = 5;
    TARGET_TGX12_WARNING_RESERVED_6 = 6;
    TARGET_TGX12_WARNING_RESERVED_7 = 7;
  }
  enum TargetTGX12TypeType {
    TARGET_TGX12_TYPE_INVALID = 0;
    TARGET_TGX12_TYPE_FOURWHEELEDVEHICLE = 1;
    TARGET_TGX12_TYPE_LARGEVEHICLE = 2;
    TARGET_TGX12_TYPE_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TGX12_TYPE_PEDESTRIAN = 4;
    TARGET_TGX12_TYPE_SPECIALVEHICLE = 5;
    TARGET_TGX12_TYPE_THREEWHEELEDVEHICLE = 6;
    TARGET_TGX12_TYPE_CONEBARREL = 7;
    TARGET_TGX12_TYPE_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TGX12_TYPE_DOG = 9;
    TARGET_TGX12_TYPE_BUS = 10;
    TARGET_TGX12_TYPE_SUV = 11;
    TARGET_TGX12_TYPE_ANTI_COLLISIONDRUM = 12;
    TARGET_TGX12_TYPE_CONSTRUCTIONSIGN = 13;
    TARGET_TGX12_TYPE_TRIPOD = 14;
    TARGET_TGX12_TYPE_WATERHORSE = 15;
    TARGET_TGX12_TYPE_RESERVED_16 = 16;
    TARGET_TGX12_TYPE_RESERVED_17 = 17;
    TARGET_TGX12_TYPE_RESERVED_18 = 18;
    TARGET_TGX12_TYPE_RESERVED_19 = 19;
    TARGET_TGX12_TYPE_RESERVED_20 = 20;
    TARGET_TGX12_TYPE_RESERVED_21 = 21;
    TARGET_TGX12_TYPE_RESERVED_22 = 22;
    TARGET_TGX12_TYPE_RESERVED_23 = 23;
    TARGET_TGX12_TYPE_RESERVED_24 = 24;
    TARGET_TGX12_TYPE_RESERVED_25 = 25;
    TARGET_TGX12_TYPE_RESERVED_26 = 26;
    TARGET_TGX12_TYPE_RESERVED_27 = 27;
    TARGET_TGX12_TYPE_RESERVED_28 = 28;
    TARGET_TGX12_TYPE_RESERVED_29 = 29;
    TARGET_TGX12_TYPE_RESERVED_30 = 30;
    TARGET_TGX12_TYPE_RESERVED_31 = 31;
  }
  enum TargetTGX13WarningType {
    TARGET_TGX13_WARNING_NORMAL = 0;
    TARGET_TGX13_WARNING_REMAND = 1;
    TARGET_TGX13_WARNING_LOWWARNING = 2;
    TARGET_TGX13_WARNING_MEDIUMWARNING = 3;
    TARGET_TGX13_WARNING_HIGHWARNING = 4;
    TARGET_TGX13_WARNING_RESERVED_5 = 5;
    TARGET_TGX13_WARNING_RESERVED_6 = 6;
    TARGET_TGX13_WARNING_RESERVED_7 = 7;
  }
  enum TargetTGX13TypeType {
    TARGET_TGX13_TYPE_INVALID = 0;
    TARGET_TGX13_TYPE_FOURWHEELEDVEHICLE = 1;
    TARGET_TGX13_TYPE_LARGEVEHICLE = 2;
    TARGET_TGX13_TYPE_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TGX13_TYPE_PEDESTRIAN = 4;
    TARGET_TGX13_TYPE_SPECIALVEHICLE = 5;
    TARGET_TGX13_TYPE_THREEWHEELEDVEHICLE = 6;
    TARGET_TGX13_TYPE_CONEBARREL = 7;
    TARGET_TGX13_TYPE_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TGX13_TYPE_DOG = 9;
    TARGET_TGX13_TYPE_BUS = 10;
    TARGET_TGX13_TYPE_SUV = 11;
    TARGET_TGX13_TYPE_ANTI_COLLISIONDRUM = 12;
    TARGET_TGX13_TYPE_CONSTRUCTIONSIGN = 13;
    TARGET_TGX13_TYPE_TRIPOD = 14;
    TARGET_TGX13_TYPE_WATERHORSE = 15;
    TARGET_TGX13_TYPE_RESERVED_16 = 16;
    TARGET_TGX13_TYPE_RESERVED_17 = 17;
    TARGET_TGX13_TYPE_RESERVED_18 = 18;
    TARGET_TGX13_TYPE_RESERVED_19 = 19;
    TARGET_TGX13_TYPE_RESERVED_20 = 20;
    TARGET_TGX13_TYPE_RESERVED_21 = 21;
    TARGET_TGX13_TYPE_RESERVED_22 = 22;
    TARGET_TGX13_TYPE_RESERVED_23 = 23;
    TARGET_TGX13_TYPE_RESERVED_24 = 24;
    TARGET_TGX13_TYPE_RESERVED_25 = 25;
    TARGET_TGX13_TYPE_RESERVED_26 = 26;
    TARGET_TGX13_TYPE_RESERVED_27 = 27;
    TARGET_TGX13_TYPE_RESERVED_28 = 28;
    TARGET_TGX13_TYPE_RESERVED_29 = 29;
    TARGET_TGX13_TYPE_RESERVED_30 = 30;
    TARGET_TGX13_TYPE_RESERVED_31 = 31;
  }
  enum TargetTGX14WarningType {
    TARGET_TGX14_WARNING_NORMAL = 0;
    TARGET_TGX14_WARNING_REMAND = 1;
    TARGET_TGX14_WARNING_LOWWARNING = 2;
    TARGET_TGX14_WARNING_MEDIUMWARNING = 3;
    TARGET_TGX14_WARNING_HIGHWARNING = 4;
    TARGET_TGX14_WARNING_RESERVED_5 = 5;
    TARGET_TGX14_WARNING_RESERVED_6 = 6;
    TARGET_TGX14_WARNING_RESERVED_7 = 7;
  }
  enum TargetTGX14TypeType {
    TARGET_TGX14_TYPE_INVALID = 0;
    TARGET_TGX14_TYPE_FOURWHEELEDVEHICLE = 1;
    TARGET_TGX14_TYPE_LARGEVEHICLE = 2;
    TARGET_TGX14_TYPE_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TGX14_TYPE_PEDESTRIAN = 4;
    TARGET_TGX14_TYPE_SPECIALVEHICLE = 5;
    TARGET_TGX14_TYPE_THREEWHEELEDVEHICLE = 6;
    TARGET_TGX14_TYPE_CONEBARREL = 7;
    TARGET_TGX14_TYPE_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TGX14_TYPE_DOG = 9;
    TARGET_TGX14_TYPE_BUS = 10;
    TARGET_TGX14_TYPE_SUV = 11;
    TARGET_TGX14_TYPE_ANTI_COLLISIONDRUM = 12;
    TARGET_TGX14_TYPE_CONSTRUCTIONSIGN = 13;
    TARGET_TGX14_TYPE_TRIPOD = 14;
    TARGET_TGX14_TYPE_WATERHORSE = 15;
    TARGET_TGX14_TYPE_RESERVED_16 = 16;
    TARGET_TGX14_TYPE_RESERVED_17 = 17;
    TARGET_TGX14_TYPE_RESERVED_18 = 18;
    TARGET_TGX14_TYPE_RESERVED_19 = 19;
    TARGET_TGX14_TYPE_RESERVED_20 = 20;
    TARGET_TGX14_TYPE_RESERVED_21 = 21;
    TARGET_TGX14_TYPE_RESERVED_22 = 22;
    TARGET_TGX14_TYPE_RESERVED_23 = 23;
    TARGET_TGX14_TYPE_RESERVED_24 = 24;
    TARGET_TGX14_TYPE_RESERVED_25 = 25;
    TARGET_TGX14_TYPE_RESERVED_26 = 26;
    TARGET_TGX14_TYPE_RESERVED_27 = 27;
    TARGET_TGX14_TYPE_RESERVED_28 = 28;
    TARGET_TGX14_TYPE_RESERVED_29 = 29;
    TARGET_TGX14_TYPE_RESERVED_30 = 30;
    TARGET_TGX14_TYPE_RESERVED_31 = 31;
  }
  enum TargetTGX15WarningType {
    TARGET_TGX15_WARNING_NORMAL = 0;
    TARGET_TGX15_WARNING_REMAND = 1;
    TARGET_TGX15_WARNING_LOWWARNING = 2;
    TARGET_TGX15_WARNING_MEDIUMWARNING = 3;
    TARGET_TGX15_WARNING_HIGHWARNING = 4;
    TARGET_TGX15_WARNING_RESERVED_5 = 5;
    TARGET_TGX15_WARNING_RESERVED_6 = 6;
    TARGET_TGX15_WARNING_RESERVED_7 = 7;
  }
  enum TargetTGX15TypeType {
    TARGET_TGX15_TYPE_INVALID = 0;
    TARGET_TGX15_TYPE_FOURWHEELEDVEHICLE = 1;
    TARGET_TGX15_TYPE_LARGEVEHICLE = 2;
    TARGET_TGX15_TYPE_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TGX15_TYPE_PEDESTRIAN = 4;
    TARGET_TGX15_TYPE_SPECIALVEHICLE = 5;
    TARGET_TGX15_TYPE_THREEWHEELEDVEHICLE = 6;
    TARGET_TGX15_TYPE_CONEBARREL = 7;
    TARGET_TGX15_TYPE_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TGX15_TYPE_DOG = 9;
    TARGET_TGX15_TYPE_BUS = 10;
    TARGET_TGX15_TYPE_SUV = 11;
    TARGET_TGX15_TYPE_ANTI_COLLISIONDRUM = 12;
    TARGET_TGX15_TYPE_CONSTRUCTIONSIGN = 13;
    TARGET_TGX15_TYPE_TRIPOD = 14;
    TARGET_TGX15_TYPE_WATERHORSE = 15;
    TARGET_TGX15_TYPE_RESERVED_16 = 16;
    TARGET_TGX15_TYPE_RESERVED_17 = 17;
    TARGET_TGX15_TYPE_RESERVED_18 = 18;
    TARGET_TGX15_TYPE_RESERVED_19 = 19;
    TARGET_TGX15_TYPE_RESERVED_20 = 20;
    TARGET_TGX15_TYPE_RESERVED_21 = 21;
    TARGET_TGX15_TYPE_RESERVED_22 = 22;
    TARGET_TGX15_TYPE_RESERVED_23 = 23;
    TARGET_TGX15_TYPE_RESERVED_24 = 24;
    TARGET_TGX15_TYPE_RESERVED_25 = 25;
    TARGET_TGX15_TYPE_RESERVED_26 = 26;
    TARGET_TGX15_TYPE_RESERVED_27 = 27;
    TARGET_TGX15_TYPE_RESERVED_28 = 28;
    TARGET_TGX15_TYPE_RESERVED_29 = 29;
    TARGET_TGX15_TYPE_RESERVED_30 = 30;
    TARGET_TGX15_TYPE_RESERVED_31 = 31;
  }
  enum TargetTGX16WarningType {
    TARGET_TGX16_WARNING_NORMAL = 0;
    TARGET_TGX16_WARNING_REMAND = 1;
    TARGET_TGX16_WARNING_LOWWARNING = 2;
    TARGET_TGX16_WARNING_MEDIUMWARNING = 3;
    TARGET_TGX16_WARNING_HIGHWARNING = 4;
    TARGET_TGX16_WARNING_RESERVED_5 = 5;
    TARGET_TGX16_WARNING_RESERVED_6 = 6;
    TARGET_TGX16_WARNING_RESERVED_7 = 7;
  }
  enum TargetTGX16TypeType {
    TARGET_TGX16_TYPE_INVALID = 0;
    TARGET_TGX16_TYPE_FOURWHEELEDVEHICLE = 1;
    TARGET_TGX16_TYPE_LARGEVEHICLE = 2;
    TARGET_TGX16_TYPE_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TGX16_TYPE_PEDESTRIAN = 4;
    TARGET_TGX16_TYPE_SPECIALVEHICLE = 5;
    TARGET_TGX16_TYPE_THREEWHEELEDVEHICLE = 6;
    TARGET_TGX16_TYPE_CONEBARREL = 7;
    TARGET_TGX16_TYPE_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TGX16_TYPE_DOG = 9;
    TARGET_TGX16_TYPE_BUS = 10;
    TARGET_TGX16_TYPE_SUV = 11;
    TARGET_TGX16_TYPE_ANTI_COLLISIONDRUM = 12;
    TARGET_TGX16_TYPE_CONSTRUCTIONSIGN = 13;
    TARGET_TGX16_TYPE_TRIPOD = 14;
    TARGET_TGX16_TYPE_WATERHORSE = 15;
    TARGET_TGX16_TYPE_RESERVED_16 = 16;
    TARGET_TGX16_TYPE_RESERVED_17 = 17;
    TARGET_TGX16_TYPE_RESERVED_18 = 18;
    TARGET_TGX16_TYPE_RESERVED_19 = 19;
    TARGET_TGX16_TYPE_RESERVED_20 = 20;
    TARGET_TGX16_TYPE_RESERVED_21 = 21;
    TARGET_TGX16_TYPE_RESERVED_22 = 22;
    TARGET_TGX16_TYPE_RESERVED_23 = 23;
    TARGET_TGX16_TYPE_RESERVED_24 = 24;
    TARGET_TGX16_TYPE_RESERVED_25 = 25;
    TARGET_TGX16_TYPE_RESERVED_26 = 26;
    TARGET_TGX16_TYPE_RESERVED_27 = 27;
    TARGET_TGX16_TYPE_RESERVED_28 = 28;
    TARGET_TGX16_TYPE_RESERVED_29 = 29;
    TARGET_TGX16_TYPE_RESERVED_30 = 30;
    TARGET_TGX16_TYPE_RESERVED_31 = 31;
  }
  enum TargetTGX17WarningType {
    TARGET_TGX17_WARNING_NORMAL = 0;
    TARGET_TGX17_WARNING_REMAND = 1;
    TARGET_TGX17_WARNING_LOWWARNING = 2;
    TARGET_TGX17_WARNING_MEDIUMWARNING = 3;
    TARGET_TGX17_WARNING_HIGHWARNING = 4;
    TARGET_TGX17_WARNING_RESERVED_5 = 5;
    TARGET_TGX17_WARNING_RESERVED_6 = 6;
    TARGET_TGX17_WARNING_RESERVED_7 = 7;
  }
  enum TargetTGX17TypeType {
    TARGET_TGX17_TYPE_INVALID = 0;
    TARGET_TGX17_TYPE_FOURWHEELEDVEHICLE = 1;
    TARGET_TGX17_TYPE_LARGEVEHICLE = 2;
    TARGET_TGX17_TYPE_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TGX17_TYPE_PEDESTRIAN = 4;
    TARGET_TGX17_TYPE_SPECIALVEHICLE = 5;
    TARGET_TGX17_TYPE_THREEWHEELEDVEHICLE = 6;
    TARGET_TGX17_TYPE_CONEBARREL = 7;
    TARGET_TGX17_TYPE_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TGX17_TYPE_DOG = 9;
    TARGET_TGX17_TYPE_BUS = 10;
    TARGET_TGX17_TYPE_SUV = 11;
    TARGET_TGX17_TYPE_ANTI_COLLISIONDRUM = 12;
    TARGET_TGX17_TYPE_CONSTRUCTIONSIGN = 13;
    TARGET_TGX17_TYPE_TRIPOD = 14;
    TARGET_TGX17_TYPE_WATERHORSE = 15;
    TARGET_TGX17_TYPE_RESERVED_16 = 16;
    TARGET_TGX17_TYPE_RESERVED_17 = 17;
    TARGET_TGX17_TYPE_RESERVED_18 = 18;
    TARGET_TGX17_TYPE_RESERVED_19 = 19;
    TARGET_TGX17_TYPE_RESERVED_20 = 20;
    TARGET_TGX17_TYPE_RESERVED_21 = 21;
    TARGET_TGX17_TYPE_RESERVED_22 = 22;
    TARGET_TGX17_TYPE_RESERVED_23 = 23;
    TARGET_TGX17_TYPE_RESERVED_24 = 24;
    TARGET_TGX17_TYPE_RESERVED_25 = 25;
    TARGET_TGX17_TYPE_RESERVED_26 = 26;
    TARGET_TGX17_TYPE_RESERVED_27 = 27;
    TARGET_TGX17_TYPE_RESERVED_28 = 28;
    TARGET_TGX17_TYPE_RESERVED_29 = 29;
    TARGET_TGX17_TYPE_RESERVED_30 = 30;
    TARGET_TGX17_TYPE_RESERVED_31 = 31;
  }
  enum TargetTGX18WarningType {
    TARGET_TGX18_WARNING_NORMAL = 0;
    TARGET_TGX18_WARNING_REMAND = 1;
    TARGET_TGX18_WARNING_LOWWARNING = 2;
    TARGET_TGX18_WARNING_MEDIUMWARNING = 3;
    TARGET_TGX18_WARNING_HIGHWARNING = 4;
    TARGET_TGX18_WARNING_RESERVED_5 = 5;
    TARGET_TGX18_WARNING_RESERVED_6 = 6;
    TARGET_TGX18_WARNING_RESERVED_7 = 7;
  }
  enum TargetTGX18TypeType {
    TARGET_TGX18_TYPE_INVALID = 0;
    TARGET_TGX18_TYPE_FOURWHEELEDVEHICLE = 1;
    TARGET_TGX18_TYPE_LARGEVEHICLE = 2;
    TARGET_TGX18_TYPE_TWOWHEELEDVEHICLE_BICYCLE = 3;
    TARGET_TGX18_TYPE_PEDESTRIAN = 4;
    TARGET_TGX18_TYPE_SPECIALVEHICLE = 5;
    TARGET_TGX18_TYPE_THREEWHEELEDVEHICLE = 6;
    TARGET_TGX18_TYPE_CONEBARREL = 7;
    TARGET_TGX18_TYPE_TWOWHEELEDVEHICLE_EVM = 8;
    TARGET_TGX18_TYPE_DOG = 9;
    TARGET_TGX18_TYPE_BUS = 10;
    TARGET_TGX18_TYPE_SUV = 11;
    TARGET_TGX18_TYPE_ANTI_COLLISIONDRUM = 12;
    TARGET_TGX18_TYPE_CONSTRUCTIONSIGN = 13;
    TARGET_TGX18_TYPE_TRIPOD = 14;
    TARGET_TGX18_TYPE_WATERHORSE = 15;
    TARGET_TGX18_TYPE_RESERVED_16 = 16;
    TARGET_TGX18_TYPE_RESERVED_17 = 17;
    TARGET_TGX18_TYPE_RESERVED_18 = 18;
    TARGET_TGX18_TYPE_RESERVED_19 = 19;
    TARGET_TGX18_TYPE_RESERVED_20 = 20;
    TARGET_TGX18_TYPE_RESERVED_21 = 21;
    TARGET_TGX18_TYPE_RESERVED_22 = 22;
    TARGET_TGX18_TYPE_RESERVED_23 = 23;
    TARGET_TGX18_TYPE_RESERVED_24 = 24;
    TARGET_TGX18_TYPE_RESERVED_25 = 25;
    TARGET_TGX18_TYPE_RESERVED_26 = 26;
    TARGET_TGX18_TYPE_RESERVED_27 = 27;
    TARGET_TGX18_TYPE_RESERVED_28 = 28;
    TARGET_TGX18_TYPE_RESERVED_29 = 29;
    TARGET_TGX18_TYPE_RESERVED_30 = 30;
    TARGET_TGX18_TYPE_RESERVED_31 = 31;
  }
  // Child_ID_2F2_S [] [0|255]
  optional int32 child_id_2_f2_s = 1;
  // Lock_Target_TGX1_State [] [0|1]
  optional bool lock_target_tgx1_state = 2;
  // Target_TGX1_Warning [] [0|7]
  optional TargetTGX1WarningType target_tgx1_warning = 3;
  // Target_TGX1_Abscissa [m] [-12|12]
  optional double target_tgx1_abscissa = 4;
  // Target_TGX1_Ordinate [m] [-10|150]
  optional double target_tgx1_ordinate = 5;
  // Target_TGX1_Absolute_SpdX [m/s] [0|51.1]
  optional double target_tgx1_absolute_spd_x = 6;
  // Target_TGX1_Absolute_SpdY [m/s] [-6.2|6.2]
  optional double target_tgx1_absolute_spd_y = 7;
  // Target_TGX1_Type [] [0|31]
  optional TargetTGX1TypeType target_tgx1_type = 8;
  // Target_TGX1_Direction [] [-180|180]
  optional double target_tgx1_direction = 9;
  // Lock_Target_TGX2_State [] [0|1]
  optional bool lock_target_tgx2_state = 10;
  // Target_TGX2_Warning [] [0|7]
  optional TargetTGX2WarningType target_tgx2_warning = 11;
  // Target_TGX2_Abscissa [m] [-12|12]
  optional double target_tgx2_abscissa = 12;
  // Target_TGX2_Ordinate [m] [-10|150]
  optional double target_tgx2_ordinate = 13;
  // Target_TGX2_Absolute_SpdX [m/s] [0|51.1]
  optional double target_tgx2_absolute_spd_x = 14;
  // Target_TGX2_Absolute_SpdY [m/s] [-6.2|6.2]
  optional double target_tgx2_absolute_spd_y = 15;
  // Target_TGX2_Type [] [0|31]
  optional TargetTGX2TypeType target_tgx2_type = 16;
  // Target_TGX2_Direction [] [-180|180]
  optional double target_tgx2_direction = 17;
  // Lock_Target_TGX3_State [] [0|1]
  optional bool lock_target_tgx3_state = 18;
  // Target_TGX3_Warning [] [0|7]
  optional TargetTGX3WarningType target_tgx3_warning = 19;
  // Target_TGX3_Abscissa [m] [-12|12]
  optional double target_tgx3_abscissa = 20;
  // Target_TGX3_Ordinate [m] [-10|150]
  optional double target_tgx3_ordinate = 21;
  // Target_TGX3_Absolute_SpdX [m/s] [0|51.1]
  optional double target_tgx3_absolute_spd_x = 22;
  // Target_TGX3_Absolute_SpdY [m/s] [-6.2|6.2]
  optional double target_tgx3_absolute_spd_y = 23;
  // Target_TGX3_Type [] [0|31]
  optional TargetTGX3TypeType target_tgx3_type = 24;
  // Target_TGX3_Direction [] [-180|180]
  optional double target_tgx3_direction = 25;
  // Lock_Target_TGX4_State [] [0|1]
  optional bool lock_target_tgx4_state = 26;
  // Target_TGX4_Warning [] [0|7]
  optional TargetTGX4WarningType target_tgx4_warning = 27;
  // Target_TGX4_Abscissa [m] [-12|12]
  optional double target_tgx4_abscissa = 28;
  // Target_TGX4_Ordinate [m] [-10|150]
  optional double target_tgx4_ordinate = 29;
  // Target_TGX4_Absolute_SpdX [m/s] [0|51.1]
  optional double target_tgx4_absolute_spd_x = 30;
  // Target_TGX4_Absolute_SpdY [m/s] [-6.2|6.2]
  optional double target_tgx4_absolute_spd_y = 31;
  // Target_TGX4_Type [] [0|31]
  optional TargetTGX4TypeType target_tgx4_type = 32;
  // Target_TGX4_Direction [] [-180|180]
  optional double target_tgx4_direction = 33;
  // Lock_Target_TGX5_State [] [0|1]
  optional bool lock_target_tgx5_state = 34;
  // Target_TGX5_Warning [] [0|7]
  optional TargetTGX5WarningType target_tgx5_warning = 35;
  // Target_TGX5_Abscissa [m] [-12|12]
  optional double target_tgx5_abscissa = 36;
  // Target_TGX5_Ordinate [m] [-10|150]
  optional double target_tgx5_ordinate = 37;
  // Target_TGX5_Absolute_SpdX [m/s] [0|51.1]
  optional double target_tgx5_absolute_spd_x = 38;
  // Target_TGX5_Absolute_SpdY [m/s] [-6.2|6.2]
  optional double target_tgx5_absolute_spd_y = 39;
  // Target_TGX5_Type [] [0|31]
  optional TargetTGX5TypeType target_tgx5_type = 40;
  // Target_TGX5_Direction [] [-180|180]
  optional double target_tgx5_direction = 41;
  // Lock_Target_TGX6_State [] [0|1]
  optional bool lock_target_tgx6_state = 42;
  // Target_TGX6_Warning [] [0|7]
  optional TargetTGX6WarningType target_tgx6_warning = 43;
  // Target_TGX6_Abscissa [m] [-12|12]
  optional double target_tgx6_abscissa = 44;
  // Target_TGX6_Ordinate [m] [-10|150]
  optional double target_tgx6_ordinate = 45;
  // Target_TGX6_Absolute_SpdX [m/s] [0|51.1]
  optional double target_tgx6_absolute_spd_x = 46;
  // Target_TGX6_Absolute_SpdY [m/s] [-6.2|6.2]
  optional double target_tgx6_absolute_spd_y = 47;
  // Target_TGX6_Type [] [0|31]
  optional TargetTGX6TypeType target_tgx6_type = 48;
  // Target_TGX6_Direction [] [-180|180]
  optional double target_tgx6_direction = 49;
  // Lock_Target_TGX7_State [] [0|1]
  optional bool lock_target_tgx7_state = 50;
  // Target_TGX7_Warning [] [0|7]
  optional TargetTGX7WarningType target_tgx7_warning = 51;
  // Target_TGX7_Abscissa [m] [-12|12]
  optional double target_tgx7_abscissa = 52;
  // Target_TGX7_Ordinate [m] [-10|150]
  optional double target_tgx7_ordinate = 53;
  // Target_TGX7_Absolute_SpdX [m/s] [0|51.1]
  optional double target_tgx7_absolute_spd_x = 54;
  // Target_TGX7_Absolute_SpdY [m/s] [-6.2|6.2]
  optional double target_tgx7_absolute_spd_y = 55;
  // Target_TGX7_Type [] [0|31]
  optional TargetTGX7TypeType target_tgx7_type = 56;
  // Target_TGX7_Direction [] [-180|180]
  optional double target_tgx7_direction = 57;
  // Lock_Target_TGX8_State [] [0|1]
  optional bool lock_target_tgx8_state = 58;
  // Target_TGX8_Warning [] [0|7]
  optional TargetTGX8WarningType target_tgx8_warning = 59;
  // Target_TGX8_Abscissa [m] [-12|12]
  optional double target_tgx8_abscissa = 60;
  // Target_TGX8_Ordinate [m] [-10|150]
  optional double target_tgx8_ordinate = 61;
  // Target_TGX8_Absolute_SpdX [m/s] [0|51.1]
  optional double target_tgx8_absolute_spd_x = 62;
  // Target_TGX8_Absolute_SpdY [m/s] [-6.2|6.2]
  optional double target_tgx8_absolute_spd_y = 63;
  // Target_TGX8_Type [] [0|31]
  optional TargetTGX8TypeType target_tgx8_type = 64;
  // Target_TGX8_Direction [] [-180|180]
  optional double target_tgx8_direction = 65;
  // Counter_2F2_01_S [] [0|65535]
  optional int32 counter_2_f2_01_s = 66;
  // Checksum_2F2_01_S [] [0|65535]
  optional int32 checksum_2_f2_01_s = 67;
  // Lock_Target_TGX9_State [] [0|1]
  optional bool lock_target_tgx9_state = 68;
  // Target_TGX9_Warning [] [0|7]
  optional TargetTGX9WarningType target_tgx9_warning = 69;
  // Target_TGX9_Abscissa [m] [-12|12]
  optional double target_tgx9_abscissa = 70;
  // Target_TGX9_Ordinate [m] [-10|150]
  optional double target_tgx9_ordinate = 71;
  // Target_TGX9_Absolute_SpdX [m/s] [0|51.1]
  optional double target_tgx9_absolute_spd_x = 72;
  // Target_TGX9_Absolute_SpdY [m/s] [-6.2|6.2]
  optional double target_tgx9_absolute_spd_y = 73;
  // Target_TGX9_Type [] [0|31]
  optional TargetTGX9TypeType target_tgx9_type = 74;
  // Target_TGX9_Direction [] [-180|180]
  optional double target_tgx9_direction = 75;
  // Lock_Target_TGX10_State [] [0|1]
  optional bool lock_target_tgx10_state = 76;
  // Target_TGX10_Warning [] [0|7]
  optional TargetTGX10WarningType target_tgx10_warning = 77;
  // Target_TGX10_Abscissa [m] [-12|12]
  optional double target_tgx10_abscissa = 78;
  // Target_TGX10_Ordinate [m] [-10|150]
  optional double target_tgx10_ordinate = 79;
  // Target_TGX10_Absolute_SpdX [m/s] [0|51.1]
  optional double target_tgx10_absolute_spd_x = 80;
  // Target_TGX10_Absolute_SpdY [m/s] [-6.2|6.2]
  optional double target_tgx10_absolute_spd_y = 81;
  // Target_TGX10_Type [] [0|31]
  optional TargetTGX10TypeType target_tgx10_type = 82;
  // Target_TGX10_Direction [] [-180|180]
  optional double target_tgx10_direction = 83;
  // Lock_Target_TGX11_State [] [0|1]
  optional bool lock_target_tgx11_state = 84;
  // Target_TGX11_Warning [] [0|7]
  optional TargetTGX11WarningType target_tgx11_warning = 85;
  // Target_TGX11_Abscissa [m] [-12|12]
  optional double target_tgx11_abscissa = 86;
  // Target_TGX11_Ordinate [m] [-10|150]
  optional double target_tgx11_ordinate = 87;
  // Target_TGX11_Absolute_SpdX [m/s] [0|51.1]
  optional double target_tgx11_absolute_spd_x = 88;
  // Target_TGX11_Absolute_SpdY [m/s] [-6.2|6.2]
  optional double target_tgx11_absolute_spd_y = 89;
  // Target_TGX11_Type [] [0|31]
  optional TargetTGX11TypeType target_tgx11_type = 90;
  // Target_TGX11_Direction [] [-180|180]
  optional double target_tgx11_direction = 91;
  // Lock_Target_TGX12_State [] [0|1]
  optional bool lock_target_tgx12_state = 92;
  // Target_TGX12_Warning [] [0|7]
  optional TargetTGX12WarningType target_tgx12_warning = 93;
  // Target_TGX12_Abscissa [m] [-12|12]
  optional double target_tgx12_abscissa = 94;
  // Target_TGX12_Ordinate [m] [-10|150]
  optional double target_tgx12_ordinate = 95;
  // Target_TGX12_Absolute_SpdX [m/s] [0|51.1]
  optional double target_tgx12_absolute_spd_x = 96;
  // Target_TGX12_Absolute_SpdY [m/s] [-6.2|6.2]
  optional double target_tgx12_absolute_spd_y = 97;
  // Target_TGX12_Type [] [0|31]
  optional TargetTGX12TypeType target_tgx12_type = 98;
  // Target_TGX12_Direction [] [-180|180]
  optional double target_tgx12_direction = 99;
  // Lock_Target_TGX13_State [] [0|1]
  optional bool lock_target_tgx13_state = 100;
  // Target_TGX13_Warning [] [0|7]
  optional TargetTGX13WarningType target_tgx13_warning = 101;
  // Target_TGX13_Abscissa [m] [-12|12]
  optional double target_tgx13_abscissa = 102;
  // Target_TGX13_Ordinate [m] [-10|150]
  optional double target_tgx13_ordinate = 103;
  // Target_TGX13_Absolute_SpdX [m/s] [0|51.1]
  optional double target_tgx13_absolute_spd_x = 104;
  // Target_TGX13_Absolute_SpdY [m/s] [-6.2|6.2]
  optional double target_tgx13_absolute_spd_y = 105;
  // Target_TGX13_Type [] [0|31]
  optional TargetTGX13TypeType target_tgx13_type = 106;
  // Target_TGX13_Direction [] [-180|180]
  optional double target_tgx13_direction = 107;
  // Lock_Target_TGX14_State [] [0|1]
  optional bool lock_target_tgx14_state = 108;
  // Target_TGX14_Warning [] [0|7]
  optional TargetTGX14WarningType target_tgx14_warning = 109;
  // Target_TGX14_Abscissa [m] [-12|12]
  optional double target_tgx14_abscissa = 110;
  // Target_TGX14_Ordinate [m] [-10|150]
  optional double target_tgx14_ordinate = 111;
  // Target_TGX14_Absolute_SpdX [m/s] [0|51.1]
  optional double target_tgx14_absolute_spd_x = 112;
  // Target_TGX14_Absolute_SpdY [m/s] [-6.2|6.2]
  optional double target_tgx14_absolute_spd_y = 113;
  // Target_TGX14_Type [] [0|31]
  optional TargetTGX14TypeType target_tgx14_type = 114;
  // Target_TGX14_Direction [] [-180|180]
  optional double target_tgx14_direction = 115;
  // Lock_Target_TGX15_State [] [0|1]
  optional bool lock_target_tgx15_state = 116;
  // Target_TGX15_Warning [] [0|7]
  optional TargetTGX15WarningType target_tgx15_warning = 117;
  // Target_TGX15_Abscissa [m] [-12|12]
  optional double target_tgx15_abscissa = 118;
  // Target_TGX15_Ordinate [m] [-10|150]
  optional double target_tgx15_ordinate = 119;
  // Target_TGX15_Absolute_SpdX [m/s] [0|51.1]
  optional double target_tgx15_absolute_spd_x = 120;
  // Target_TGX15_Absolute_SpdY [m/s] [-6.2|6.2]
  optional double target_tgx15_absolute_spd_y = 121;
  // Target_TGX15_Type [] [0|31]
  optional TargetTGX15TypeType target_tgx15_type = 122;
  // Target_TGX15_Direction [] [-180|180]
  optional double target_tgx15_direction = 123;
  // Lock_Target_TGX16_State [] [0|1]
  optional bool lock_target_tgx16_state = 124;
  // Target_TGX16_Warning [] [0|7]
  optional TargetTGX16WarningType target_tgx16_warning = 125;
  // Target_TGX16_Abscissa [m] [-12|12]
  optional double target_tgx16_abscissa = 126;
  // Target_TGX16_Ordinate [m] [-10|150]
  optional double target_tgx16_ordinate = 127;
  // Target_TGX16_Absolute_SpdX [m/s] [0|51.1]
  optional double target_tgx16_absolute_spd_x = 128;
  // Target_TGX16_Absolute_SpdY [m/s] [-6.2|6.2]
  optional double target_tgx16_absolute_spd_y = 129;
  // Target_TGX16_Type [] [0|31]
  optional TargetTGX16TypeType target_tgx16_type = 130;
  // Target_TGX16_Direction [] [-180|180]
  optional double target_tgx16_direction = 131;
  // Counter_2F2_02_S [] [0|65535]
  optional int32 counter_2_f2_02_s = 132;
  // Checksum_2F2_02_S [] [0|65535]
  optional int32 checksum_2_f2_02_s = 133;
  // Lock_Target_TGX17_State [] [0|1]
  optional bool lock_target_tgx17_state = 134;
  // Target_TGX17_Warning [] [0|7]
  optional TargetTGX17WarningType target_tgx17_warning = 135;
  // Target_TGX17_Abscissa [m] [-12|12]
  optional double target_tgx17_abscissa = 136;
  // Target_TGX17_Ordinate [m] [-10|150]
  optional double target_tgx17_ordinate = 137;
  // Target_TGX17_Absolute_SpdX [m/s] [0|51.1]
  optional double target_tgx17_absolute_spd_x = 138;
  // Target_TGX17_Absolute_SpdY [m/s] [-6.2|6.2]
  optional double target_tgx17_absolute_spd_y = 139;
  // Target_TGX17_Type [] [0|31]
  optional TargetTGX17TypeType target_tgx17_type = 140;
  // Target_TGX17_Direction [] [-180|180]
  optional double target_tgx17_direction = 141;
  // Lock_Target_TGX18_State [] [0|1]
  optional bool lock_target_tgx18_state = 142;
  // Target_TGX18_Warning [] [0|7]
  optional TargetTGX18WarningType target_tgx18_warning = 143;
  // Target_TGX18_Abscissa [m] [-12|12]
  optional double target_tgx18_abscissa = 144;
  // Target_TGX18_Ordinate [m] [-10|150]
  optional double target_tgx18_ordinate = 145;
  // Target_TGX18_Absolute_SpdX [m/s] [0|51.1]
  optional double target_tgx18_absolute_spd_x = 146;
  // Target_TGX18_Absolute_SpdY [m/s] [-6.2|6.2]
  optional double target_tgx18_absolute_spd_y = 147;
  // Target_TGX18_Type [] [0|31]
  optional TargetTGX18TypeType target_tgx18_type = 148;
  // Target_TGX18_Direction [] [-180|180]
  optional double target_tgx18_direction = 149;
  // Counter_2F2_03_S [] [0|65535]
  optional int32 counter_2_f2_03_s = 150;
  // Checksum_2F2_03_S [] [0|65535]
  optional int32 checksum_2_f2_03_s = 151;
}

message ADS_0X2F6 {
// Control Message
  // ADAS_SYNC_Type [] [0E-008|255.00000000]
  optional int32 adas_sync_type = 1;
  // Checksum_2F6_S [] [0E-008|255.00000000]
  optional int32 checksum_2_f6_s = 2;
  // Counter_2F6_S [] [0E-008|15.00000000]
  optional int32 counter_2_f6_s = 3;
  // ADAS_SYNC_TimeDomain [] [0E-008|15.00000000]
  optional int32 adas_sync_time_domain = 4;
  // ADAS_SYNC_OVS [] [0E-008|3.00000000]
  optional int32 adas_sync_ovs = 5;
  // ADAS_SYNC_SGW [] [0E-008|1.00000000]
  optional bool adas_sync_sgw = 6;
  // ADAS_SYNC_reserved [] [0E-008|31.00000000]
  optional int32 adas_sync_reserved = 7;
  // ADAS_SYNC_SyncTime [s/ns] [0E-008|2147483647.00000000]
  optional double adas_sync_sync_time = 8;
}

message LEFT_BCM_0X312 {
// Report Message
  enum CoPilotSeatBeltStatus312SType {
    COPILOT_SEAT_BELT_STATUS_312_S_INVALID = 0;
    COPILOT_SEAT_BELT_STATUS_312_S_UNFASTENED = 1;
    COPILOT_SEAT_BELT_STATUS_312_S_FASTENED = 2;
    COPILOT_SEAT_BELT_STATUS_312_S_RESERVED = 3;
  }
  enum RearLeftSecondRowSeatBeltSType {
    REAR_LEFT_SECOND_ROW_SEAT_BELT_S_INVALID = 0;
    REAR_LEFT_SECOND_ROW_SEAT_BELT_S_UNFASTENED = 1;
    REAR_LEFT_SECOND_ROW_SEAT_BELT_S_FASTENED = 2;
    REAR_LEFT_SECOND_ROW_SEAT_BELT_S_RESERVED = 3;
  }
  enum RearRightSecondRowSeatBeltType {
    REAR_RIGHT_SECOND_ROW_SEAT_BELT_INVALID = 0;
    REAR_RIGHT_SECOND_ROW_SEAT_BELT_UNFASTENED = 1;
    REAR_RIGHT_SECOND_ROW_SEAT_BELT_FASTENED = 2;
    REAR_RIGHT_SECOND_ROW_SEAT_BELT_RESERVED = 3;
  }
  enum MiddleRearSecondRowSeatBeltType {
    MIDDLE_REAR_SECOND_ROW_SEAT_BELT_INVALID = 0;
    MIDDLE_REAR_SECOND_ROW_SEAT_BELT_UNFASTENED = 1;
    MIDDLE_REAR_SECOND_ROW_SEAT_BELT_FASTENED = 2;
    MIDDLE_REAR_SECOND_ROW_SEAT_BELT_RESERVED = 3;
  }
  // CoPilot_Seat_Belt_Status_312_S [] [0|3]
  optional CoPilotSeatBeltStatus312SType co_pilot_seat_belt_status_312_s = 1;
  // Rear_Left_Second_Row_Seat_Belt_Status_312_S [] [0|3]
  optional RearLeftSecondRowSeatBeltSType rear_left_second_row_seat_belt_s = 2;
  // Rear_Right_Second_Row_Seat_Belt_Status_312_S [] [0|3]
  optional RearRightSecondRowSeatBeltType rear_right_second_row_seat_belt_ = 3;
  // Middle_Rear_Second_Row_Seat_Belt_Status_312_S [] [0|3]
  optional MiddleRearSecondRowSeatBeltType middle_rear_second_row_seat_belt = 4;
}

message MEDIA_0X31C {
// Report Message
  enum FatigueYawnSType {
    FATIGUE_YAWN_S_INVALID = 0;
    FATIGUE_YAWN_S_NONYAWN = 1;
    FATIGUE_YAWN_S_YAWN = 2;
    FATIGUE_YAWN_S_SHUTDOWN = 3;
    FATIGUE_YAWN_S_UNKNOWN = 4;
    FATIGUE_YAWN_S_RESERVED_5 = 5;
    FATIGUE_YAWN_S_RESERVED_6 = 6;
    FATIGUE_YAWN_S_RESERVED_7 = 7;
  }
  enum ShortTermDistractionReminderSType {
    SHORTTERM_DISTRACTION_REMINDER_S_INVALID = 0;
    SHORTTERM_DISTRACTION_REMINDER_S_DISTRACTIONFREE = 1;
    SHORTTERM_DISTRACTION_REMINDER_S_MILDDISTRACTION = 2;
    SHORTTERM_DISTRACTION_REMINDER_S_MODERATEDISTRACTION = 3;
    SHORTTERM_DISTRACTION_REMINDER_S_SEVEREDISTRACTION = 4;
    SHORTTERM_DISTRACTION_REMINDER_S_SHUTDOWN = 5;
    SHORTTERM_DISTRACTION_REMINDER_S_UNKNOWN = 6;
    SHORTTERM_DISTRACTION_REMINDER_S_RESERVED_7 = 7;
    SHORTTERM_DISTRACTION_REMINDER_S_RESERVED_8 = 8;
    SHORTTERM_DISTRACTION_REMINDER_S_RESERVED_9 = 9;
    SHORTTERM_DISTRACTION_REMINDER_S_RESERVED_10 = 10;
    SHORTTERM_DISTRACTION_REMINDER_S_RESERVED_11 = 11;
    SHORTTERM_DISTRACTION_REMINDER_S_RESERVED_12 = 12;
    SHORTTERM_DISTRACTION_REMINDER_S_RESERVED_13 = 13;
    SHORTTERM_DISTRACTION_REMINDER_S_RESERVED_14 = 14;
    SHORTTERM_DISTRACTION_REMINDER_S_RESERVED_15 = 15;
  }
  enum DriverDetectionResultType {
    DRIVER_DETECTION_RESULT_INVALID = 0;
    DRIVER_DETECTION_RESULT_NOBODY = 1;
    DRIVER_DETECTION_RESULT_ADULTONLY = 2;
    DRIVER_DETECTION_RESULT_CHILDONLY = 3;
    DRIVER_DETECTION_RESULT_ADULTANDCHILD = 4;
    DRIVER_DETECTION_RESULT_RESERVED_5 = 5;
    DRIVER_DETECTION_RESULT_RESERVED_6 = 6;
    DRIVER_DETECTION_RESULT_RESERVED_7 = 7;
  }
  enum DriverSeatBeltDetectResultType {
    DRIVER_SEAT_BELT_DETECT_RESULT_INVALID = 0;
    DRIVER_SEAT_BELT_DETECT_RESULT_SEATBELTFASTERN = 1;
    DRIVER_SEAT_BELT_DETECT_RESULT_NOTWEARSEATBELT = 2;
    DRIVER_SEAT_BELT_DETECT_RESULT_RESERVED_3 = 3;
  }
  enum PassengerDetectionResultType {
    PASSENGER_DETECTION_RESULT_INVALID = 0;
    PASSENGER_DETECTION_RESULT_NOBODY = 1;
    PASSENGER_DETECTION_RESULT_ADULTONLY = 2;
    PASSENGER_DETECTION_RESULT_CHILDONLY = 3;
    PASSENGER_DETECTION_RESULT_ADULTANDCHILD = 4;
    PASSENGER_DETECTION_RESULT_RESERVED_5 = 5;
    PASSENGER_DETECTION_RESULT_RESERVED_6 = 6;
    PASSENGER_DETECTION_RESULT_RESERVED_7 = 7;
  }
  enum PassengerSeatBeltDetectRType {
    PASSENGER_SEAT_BELT_DETECT_R_INVALID = 0;
    PASSENGER_SEAT_BELT_DETECT_R_SEATBELTFASTERN = 1;
    PASSENGER_SEAT_BELT_DETECT_R_NOTWEARSEATBELT = 2;
    PASSENGER_SEAT_BELT_DETECT_R_RESERVED_3 = 3;
  }
  enum SecondRowLPDetectRType {
    SECOND_ROW_L_P_DETECT_R_INVALID = 0;
    SECOND_ROW_L_P_DETECT_R_NOBODY = 1;
    SECOND_ROW_L_P_DETECT_R_ADULTONLY = 2;
    SECOND_ROW_L_P_DETECT_R_CHILDONLY = 3;
    SECOND_ROW_L_P_DETECT_R_ADULTANDCHILD = 4;
    SECOND_ROW_L_P_DETECT_R_RESERVED_5 = 5;
    SECOND_ROW_L_P_DETECT_R_RESERVED_6 = 6;
    SECOND_ROW_L_P_DETECT_R_RESERVED_7 = 7;
  }
  enum SecondRowLeftPSBDRType {
    SECOND_ROW_LEFT_P_S_BD_R_INVALID = 0;
    SECOND_ROW_LEFT_P_S_BD_R_SEATBELTFASTERN = 1;
    SECOND_ROW_LEFT_P_S_BD_R_NOTWEARSEATBELT = 2;
    SECOND_ROW_LEFT_P_S_BD_R_RESERVED_3 = 3;
  }
  enum SecondRowMiddlePDetectionRType {
    SECOND_ROW_MIDDLE_P_DETECTION_R_INVALID = 0;
    SECOND_ROW_MIDDLE_P_DETECTION_R_NOBODY = 1;
    SECOND_ROW_MIDDLE_P_DETECTION_R_ADULTONLY = 2;
    SECOND_ROW_MIDDLE_P_DETECTION_R_CHILDONLY = 3;
    SECOND_ROW_MIDDLE_P_DETECTION_R_ADULTANDCHILD = 4;
    SECOND_ROW_MIDDLE_P_DETECTION_R_RESERVED_5 = 5;
    SECOND_ROW_MIDDLE_P_DETECTION_R_RESERVED_6 = 6;
    SECOND_ROW_MIDDLE_P_DETECTION_R_RESERVED_7 = 7;
  }
  enum SecondRowMiddlePSeatBDRType {
    SECOND_ROW_MIDDLE_P_SEAT_BD_R_INVALID = 0;
    SECOND_ROW_MIDDLE_P_SEAT_BD_R_SEATBELTFASTERN = 1;
    SECOND_ROW_MIDDLE_P_SEAT_BD_R_NOTWEARSEATBELT = 2;
    SECOND_ROW_MIDDLE_P_SEAT_BD_R_RESERVED_3 = 3;
  }
  enum SecondRowRightPDetectionRType {
    SECOND_ROW_RIGHT_P_DETECTION_R_INVALID = 0;
    SECOND_ROW_RIGHT_P_DETECTION_R_NOBODY = 1;
    SECOND_ROW_RIGHT_P_DETECTION_R_ADULTONLY = 2;
    SECOND_ROW_RIGHT_P_DETECTION_R_CHILDONLY = 3;
    SECOND_ROW_RIGHT_P_DETECTION_R_ADULTANDCHILD = 4;
    SECOND_ROW_RIGHT_P_DETECTION_R_RESERVED_5 = 5;
    SECOND_ROW_RIGHT_P_DETECTION_R_RESERVED_6 = 6;
    SECOND_ROW_RIGHT_P_DETECTION_R_RESERVED_7 = 7;
  }
  enum SecondRowRPSeatBDRType {
    SECOND_ROW_R_P_SEAT_BD_R_INVALID = 0;
    SECOND_ROW_R_P_SEAT_BD_R_SEATBELTFASTERN = 1;
    SECOND_ROW_R_P_SEAT_BD_R_NOTWEARSEATBELT = 2;
    SECOND_ROW_R_P_SEAT_BD_R_RESERVED_3 = 3;
  }
  enum ThirdRowLeftPDetectRType {
    THIRD_ROW_LEFT_P_DETECT_R_INVALID = 0;
    THIRD_ROW_LEFT_P_DETECT_R_NOBODY = 1;
    THIRD_ROW_LEFT_P_DETECT_R_ADULTONLY = 2;
    THIRD_ROW_LEFT_P_DETECT_R_CHILDONLY = 3;
    THIRD_ROW_LEFT_P_DETECT_R_ADULTANDCHILD = 4;
    THIRD_ROW_LEFT_P_DETECT_R_RESERVED_5 = 5;
    THIRD_ROW_LEFT_P_DETECT_R_RESERVED_6 = 6;
    THIRD_ROW_LEFT_P_DETECT_R_RESERVED_7 = 7;
  }
  enum ThirdRowLeftPSeatBDRType {
    THIRD_ROW_LEFT_P_SEAT_BD_R_INVALID = 0;
    THIRD_ROW_LEFT_P_SEAT_BD_R_SEATBELTFASTERN = 1;
    THIRD_ROW_LEFT_P_SEAT_BD_R_NOTWEARSEATBELT = 2;
    THIRD_ROW_LEFT_P_SEAT_BD_R_RESERVED_3 = 3;
  }
  enum ThirdRowMiddlePDetectRType {
    THIRD_ROW_MIDDLE_P_DETECT_R_INVALID = 0;
    THIRD_ROW_MIDDLE_P_DETECT_R_NOBODY = 1;
    THIRD_ROW_MIDDLE_P_DETECT_R_ADULTONLY = 2;
    THIRD_ROW_MIDDLE_P_DETECT_R_CHILDONLY = 3;
    THIRD_ROW_MIDDLE_P_DETECT_R_ADULTANDCHILD = 4;
    THIRD_ROW_MIDDLE_P_DETECT_R_RESERVED_5 = 5;
    THIRD_ROW_MIDDLE_P_DETECT_R_RESERVED_6 = 6;
    THIRD_ROW_MIDDLE_P_DETECT_R_RESERVED_7 = 7;
  }
  enum ThirdRowMiddlePSeatBDType {
    THIRD_ROW_MIDDLE_P_SEAT_BD_INVALID = 0;
    THIRD_ROW_MIDDLE_P_SEAT_BD_SEATBELTFASTERN = 1;
    THIRD_ROW_MIDDLE_P_SEAT_BD_NOTWEARSEATBELT = 2;
    THIRD_ROW_MIDDLE_P_SEAT_BD_RESERVED_3 = 3;
  }
  enum ThirdRowRightPDetectionRType {
    THIRD_ROW_RIGHT_P_DETECTION_R_INVALID = 0;
    THIRD_ROW_RIGHT_P_DETECTION_R_NOBODY = 1;
    THIRD_ROW_RIGHT_P_DETECTION_R_ADULTONLY = 2;
    THIRD_ROW_RIGHT_P_DETECTION_R_CHILDONLY = 3;
    THIRD_ROW_RIGHT_P_DETECTION_R_ADULTANDCHILD = 4;
    THIRD_ROW_RIGHT_P_DETECTION_R_RESERVED_5 = 5;
    THIRD_ROW_RIGHT_P_DETECTION_R_RESERVED_6 = 6;
    THIRD_ROW_RIGHT_P_DETECTION_R_RESERVED_7 = 7;
  }
  enum ThirdRowRightPSeatBDeRType {
    THIRD_ROW_RIGHT_P_SEAT_BDE_R_INVALID = 0;
    THIRD_ROW_RIGHT_P_SEAT_BDE_R_SEATBELTFASTERN = 1;
    THIRD_ROW_RIGHT_P_SEAT_BDE_R_NOTWEARSEATBELT = 2;
    THIRD_ROW_RIGHT_P_SEAT_BDE_R_RESERVED_3 = 3;
  }
  // Fatigue_Yawn_S [] [0|7]
  optional FatigueYawnSType fatigue_yawn_s = 1;
  // ShortTerm_Distraction_Reminder_S [] [0|15]
  optional ShortTermDistractionReminderSType short_term_distraction_reminder_s = 2;
  // Driver_Detection_Result [] [0|7]
  optional DriverDetectionResultType driver_detection_result = 3;
  // Driver_Seat_Belt_Detect_Result [] [0|3]
  optional DriverSeatBeltDetectResultType driver_seat_belt_detect_result = 4;
  // Passenger_Detection_Result [] [0|7]
  optional PassengerDetectionResultType passenger_detection_result = 5;
  // Passenger_Seat_Belt_Detect_R [] [0|3]
  optional PassengerSeatBeltDetectRType passenger_seat_belt_detect_r = 6;
  // Second_Row_L_P_Detect_R [] [0|7]
  optional SecondRowLPDetectRType second_row_l_p_detect_r = 7;
  // Second_Row_Left_P_S_BD_R [] [0|3]
  optional SecondRowLeftPSBDRType second_row_left_p_s_bd_r = 8;
  // Second_Row_Middle_P_Detection_R [] [0|7]
  optional SecondRowMiddlePDetectionRType second_row_middle_p_detection_r = 9;
  // Second_Row_Middle_P_Seat_BD_R [] [0|3]
  optional SecondRowMiddlePSeatBDRType second_row_middle_p_seat_bd_r = 10;
  // Second_Row_Right_P_Detection_R [] [0|7]
  optional SecondRowRightPDetectionRType second_row_right_p_detection_r = 11;
  // Second_Row_R_P_Seat_BD_R [] [0|3]
  optional SecondRowRPSeatBDRType second_row_r_p_seat_bd_r = 12;
  // Third_Row_Left_P_Detect_R [] [0|7]
  optional ThirdRowLeftPDetectRType third_row_left_p_detect_r = 13;
  // Third_Row_Left_P_Seat_BD_R [] [0|3]
  optional ThirdRowLeftPSeatBDRType third_row_left_p_seat_bd_r = 14;
  // Third_Row_Middle_P_Detect_R [] [0|7]
  optional ThirdRowMiddlePDetectRType third_row_middle_p_detect_r = 15;
  // Third_Row_Middle_P_Seat_BD [] [0|3]
  optional ThirdRowMiddlePSeatBDType third_row_middle_p_seat_bd = 16;
  // Third_Row_Right_P_Detection_R [] [0|7]
  optional ThirdRowRightPDetectionRType third_row_right_p_detection_r = 17;
  // Third_Row_Right_P_Seat_BDe_R [] [0|3]
  optional ThirdRowRightPSeatBDeRType third_row_right_p_seat_b_de_r = 18;
}

message LEFT_BCM_0X31E {
// Report Message
  enum CarWashModeType {
    CARWASHMODE_INVALID = 0;
    CARWASHMODE_CARWASHMACHINEMODE_CONVEYOR = 1;
    CARWASHMODE_CARWASH_NON_CONVEYOR = 2;
    CARWASHMODE_NONCANWASHMODE = 3;
    CARWASHMODE_REVERSED = 4;
    CARWASHMODE_RESERVED_5 = 5;
    CARWASHMODE_RESERVED_6 = 6;
    CARWASHMODE_RESERVED_7 = 7;
  }
  // CarWashMode [] [0|7]
  optional CarWashModeType car_wash_mode = 1;
}

message LEFT_BCM_0X323 {
// Report Message
  // INS_Show_Fault_323_S [] [0|1]
  optional bool ins_show_fault_323_s = 1;
  // Counter_323_S [] [0|15]
  optional int32 counter_323_s = 2;
  // CheckSum323_S [] [0|255]
  optional int32 check_sum323_s = 3;
}

message MEDIA_0X32B {
// Report Message
  enum LKCEnableSType {
    LKC_ENABLE_S_INVALID = 0;
    LKC_ENABLE_S_SWITCHOFF = 1;
    LKC_ENABLE_S_SWITCHON = 2;
    LKC_ENABLE_S_RESERVED_3 = 3;
  }
  enum ISLAoffsetpercentageSType {
    ISLA_OFFSET_PERCENTAGE_S_INVAILD = 0;
    ISLA_OFFSET_PERCENTAGE_S_VALUE0 = 1;
    ISLA_OFFSET_PERCENTAGE_S_VALUE_REDUCE_10 = 2;
    ISLA_OFFSET_PERCENTAGE_S_VALUE_REDUCE_5 = 3;
    ISLA_OFFSET_PERCENTAGE_S_VALUE_ADD_5 = 4;
    ISLA_OFFSET_PERCENTAGE_S_VALUE_ADD_10 = 5;
    ISLA_OFFSET_PERCENTAGE_S_RESERVED_6 = 6;
    ISLA_OFFSET_PERCENTAGE_S_RESERVED_7 = 7;
    ISLA_OFFSET_PERCENTAGE_S_RESERVED_8 = 8;
    ISLA_OFFSET_PERCENTAGE_S_RESERVED_9 = 9;
    ISLA_OFFSET_PERCENTAGE_S_RESERVED_10 = 10;
    ISLA_OFFSET_PERCENTAGE_S_RESERVED_11 = 11;
    ISLA_OFFSET_PERCENTAGE_S_RESERVED_12 = 12;
    ISLA_OFFSET_PERCENTAGE_S_RESERVED_13 = 13;
    ISLA_OFFSET_PERCENTAGE_S_RESERVED_14 = 14;
    ISLA_OFFSET_PERCENTAGE_S_RESERVED_15 = 15;
  }
  enum ISLAoffsetmodeEnableSType {
    ISLA_OFFSET_MODE_ENABLE_S_INVAILD = 0;
    ISLA_OFFSET_MODE_ENABLE_S_ABSOLUTE_VALUE = 1;
    ISLA_OFFSET_MODE_ENABLE_S_PERCENTAGE = 2;
    ISLA_OFFSET_MODE_ENABLE_S_RESERVED_3 = 3;
  }
  enum ISLAEnableNewSType {
    ISLA_ENABLE_NEW_S_INVAILD = 0;
    ISLA_ENABLE_NEW_S_AUTOMATICSPEEDCONTROL = 1;
    ISLA_ENABLE_NEW_S_MANUALCONFIRMATION = 2;
    ISLA_ENABLE_NEW_S_OFF = 3;
    ISLA_ENABLE_NEW_S_RESERVED_4 = 4;
    ISLA_ENABLE_NEW_S_RESERVED_5 = 5;
    ISLA_ENABLE_NEW_S_RESERVED_6 = 6;
    ISLA_ENABLE_NEW_S_RESERVED_7 = 7;
  }
  enum ILCAActivateModeSType {
    ILCA_ACTIVATE_MODE_S_INVALID = 0;
    ILCA_ACTIVATE_MODE_S_LONGLIFTMODEONLY = 1;
    ILCA_ACTIVATE_MODE_S_LONGANDSHORLIFTMODE = 2;
    ILCA_ACTIVATE_MODE_S_RESERVED_3 = 3;
  }
  enum CSWEnableSType {
    CSW_ENABLE_S_INVAILD = 0;
    CSW_ENABLE_S_SWITCH_ON = 1;
    CSW_ENABLE_S_SWITCH_OFF = 2;
    CSW_ENABLE_S_RESERVED_3 = 3;
  }
  enum LDWSoundModeStateSMType {
    LDW_SOUND_MODE_STATE_S_M_INVALID = 0;
    LDW_SOUND_MODE_STATE_S_M_SOUND_SWITCHON = 1;
    LDW_SOUND_MODE_STATE_S_M_SOUND_SWITCHOFF = 2;
    LDW_SOUND_MODE_STATE_S_M_RESERVED_3 = 3;
  }
  enum LDWVibrationModeStateSMType {
    LDW_VIBRATION_MODE_STATE_S_M_INVALID = 0;
    LDW_VIBRATION_MODE_STATE_S_M_VIBRATION_SWITCHON = 1;
    LDW_VIBRATION_MODE_STATE_S_M_VIBRATION_SWITCHOFF = 2;
    LDW_VIBRATION_MODE_STATE_S_M_RESERVED_3 = 3;
  }
  enum FCTAFCTBEnableSType {
    FCTA_FCTB_ENABLE_S_INVALID = 0;
    FCTA_FCTB_ENABLE_S_BOTH_SWITCHOFF = 1;
    FCTA_FCTB_ENABLE_S_ONLY_FCTA_SWITCH = 2;
    FCTA_FCTB_ENABLE_S_ONLY_FCTB_SWITCH = 3;
    FCTA_FCTB_ENABLE_S_BOTH_SWITCHON = 4;
  }
  enum RCTARCTBEnableSType {
    RCTA_RCTB_ENABLE_S_INVALID = 0;
    RCTA_RCTB_ENABLE_S_BOTH_SWITCHOFF = 1;
    RCTA_RCTB_ENABLE_S_ONLY_RCTA_SWITCH = 2;
    RCTA_RCTB_ENABLE_S_ONLY_RCTB_SWITCH = 3;
    RCTA_RCTB_ENABLE_S_BOTH_SWITCHON = 4;
  }
  enum BSDLCWAudioEnableSType {
    BSD_LCW_AUDIO_ENABLE_S_INVALID = 0;
    BSD_LCW_AUDIO_ENABLE_S_BSD_LCW__SWITCHOFF = 1;
    BSD_LCW_AUDIO_ENABLE_S_ONLY_VISUAL_SWITCHON = 2;
    BSD_LCW_AUDIO_ENABLE_S_VISUAL_AUDIO_SWITCHON = 3;
  }
  enum APAFRParkReqType {
    APA_FR_PARK_REQ_NO_REQUEST = 0;
    APA_FR_PARK_REQ_FRONT_PARKING = 1;
    APA_FR_PARK_REQ_REAR_PARKING = 2;
    APA_FR_PARK_REQ_RESERVED_3 = 3;
  }
  enum NOALCStyleSType {
    NOA_LCSTYLE_S_FASTLANECHANGE = 0;
    NOA_LCSTYLE_S_STANDARDLANECHANGE = 1;
    NOA_LCSTYLE_S_CONSERVATELANECHANGE = 2;
    NOA_LCSTYLE_S_REVERSED = 3;
  }
  enum MediaModeStsResponseSType {
    MEDIA_MODE_STS_RESPONSE_S_INVALID = 0;
    MEDIA_MODE_STS_RESPONSE_S_ACC_ON = 1;
    MEDIA_MODE_STS_RESPONSE_S_LCC_ON = 2;
    MEDIA_MODE_STS_RESPONSE_S_NOA_ON = 3;
  }
  enum BrakeNoExitAdsEnableType {
    BRAKENOEXITADS_ENABLE_INVALID = 0;
    BRAKENOEXITADS_ENABLE_SWITCHOFF = 1;
    BRAKENOEXITADS_ENABLE_SWITCHON = 2;
    BRAKENOEXITADS_ENABLE_RESERVED_3 = 3;
  }
  // Child_ID_32B_S [] [0E-008|255.00000000]
  optional int32 child_id_32_b_s = 1;
  // LKC_Enable_S [] [0E-008|3.00000000]
  optional LKCEnableSType lkc_enable_s = 2;
  // ISLA_offset_percentage_S [] [0E-008|15.00000000]
  optional ISLAoffsetpercentageSType isla_offset_percentage_s = 3;
  // ISLA_offset_mode_Enable_S [] [0E-008|3.00000000]
  optional ISLAoffsetmodeEnableSType isla_offset_mode_enable_s = 4;
  // ISLA_Enable_New_S [] [0E-008|7.00000000]
  optional ISLAEnableNewSType isla_enable_new_s = 5;
  // ILCA_Activate_Mode_S [] [0E-008|3.00000000]
  optional ILCAActivateModeSType ilca_activate_mode_s = 6;
  // CSW_Enable_S [] [0E-008|3.00000000]
  optional CSWEnableSType csw_enable_s = 7;
  // LDW_Sound_Mode_State_S_M [] [0E-008|3.00000000]
  optional LDWSoundModeStateSMType ldw_sound_mode_state_s_m = 8;
  // LDW_Vibration_Mode_State_S_M [] [0E-008|3.00000000]
  optional LDWVibrationModeStateSMType ldw_vibration_mode_state_s_m = 9;
  // FCTA_FCTB_Enable_S [] [0E-008|7.00000000]
  optional FCTAFCTBEnableSType fcta_fctb_enable_s = 10;
  // RCTA_RCTB_Enable_S [] [0E-008|7.00000000]
  optional RCTARCTBEnableSType rcta_rctb_enable_s = 11;
  // BSD_LCW_Audio_Enable_S [] [0E-008|7.00000000]
  optional BSDLCWAudioEnableSType bsd_lcw_audio_enable_s = 12;
  // APA_FR_Park_Req [] [0E-008|3.00000000]
  optional APAFRParkReqType apa_fr_park_req = 13;
  // NOA主动变道风格模式选择 [] [0E-008|3.00000000]
  optional NOALCStyleSType noa_lc_style_s = 14;
  // 辅助驾驶模式状态 [] [0E-008|7.00000000]
  optional MediaModeStsResponseSType media_mode_sts_response_s = 15;
  // AVM_Vide_Display_Stuas_S [] [0E-008|3.00000000]
  optional int32 avm_vide_display_stuas_s = 16;
  // BrakeNoExitAds_Enable [] [0E-008|3.00000000]
  optional BrakeNoExitAdsEnableType brake_no_exit_ads_enable = 17;
}

message ADS_0X32D {
// Control Message
  enum PCWLevelStateType {
    PCWLEVELSTATE_OFF = 0;
    PCWLEVELSTATE_LEVEL1LOW = 1;
    PCWLEVELSTATE_INLEVEL2SELEDBYDEFAULT = 2;
    PCWLEVELSTATE_LEVEL3HIGH = 3;
  }
  enum FrontradarFCTBWarningType {
    FRONT_RADAR_FCTB_WARNING_NOT_WARNING = 0;
    FRONT_RADAR_FCTB_WARNING_AEBWARNING = 1;
    FRONT_RADAR_FCTB_WARNING_FCTBWARNING_L = 2;
    FRONT_RADAR_FCTB_WARNING_FCTBWARNING_R = 3;
    FRONT_RADAR_FCTB_WARNING_FCTBWARNING_L_R = 4;
    FRONT_RADAR_FCTB_WARNING_RESERVED_5 = 5;
    FRONT_RADAR_FCTB_WARNING_RESERVED_6 = 6;
    FRONT_RADAR_FCTB_WARNING_RESERVED_7 = 7;
  }
  enum ACCModeDisplay1SType {
    ACC_MODE_DISPLAY1_S_OFFMODE = 0;
    ACC_MODE_DISPLAY1_S_PASSIVEMODE = 1;
    ACC_MODE_DISPLAY1_S_STANDBYMODE = 2;
    ACC_MODE_DISPLAY1_S_ACTCTRLMODE = 3;
    ACC_MODE_DISPLAY1_S_BRAKEONLYMODE = 4;
    ACC_MODE_DISPLAY1_S_OVERRIDE = 5;
    ACC_MODE_DISPLAY1_S_STANDSTILLACTMODE = 6;
    ACC_MODE_DISPLAY1_S_STANDSTILLWAITMODE = 7;
    ACC_MODE_DISPLAY1_S_FAILUREMODE = 8;
    ACC_MODE_DISPLAY1_S_PERMANENTFAILURE = 9;
    ACC_MODE_DISPLAY1_S_RESERVED_10 = 10;
    ACC_MODE_DISPLAY1_S_RESERVED_11 = 11;
    ACC_MODE_DISPLAY1_S_RESERVED_12 = 12;
    ACC_MODE_DISPLAY1_S_RESERVED_13 = 13;
    ACC_MODE_DISPLAY1_S_RESERVED_14 = 14;
    ACC_MODE_DISPLAY1_S_RESERVED_15 = 15;
  }
  enum MRRModulationStatusType {
    MRR_MODULATION_STATUS_NOFAILURE = 0;
    MRR_MODULATION_STATUS_TIMESYNCFAILURE_MODFAIL = 1;
    MRR_MODULATION_STATUS_TIMESYNCCORRECT_MODFAIL = 2;
    MRR_MODULATION_STATUS_RESERVED_3 = 3;
  }
  // PCW_Pre_Warning_S [] [0|1]
  optional bool pcw_pre_warning_s = 1;
  // PCW_Latent_Warning_S [] [0|1]
  optional bool pcw_latent_warning_s = 2;
  // PCW_State_S [] [0|1]
  optional bool pcw_state_s = 3;
  // CCR_AEB_Error_S [] [0|1]
  optional bool ccr_aeb_error_s = 4;
  // CCR_FCW_Error_S [] [0|1]
  optional bool ccr_fcw_error_s = 5;
  // Pedestrian_FCW_Brak_Error_S [] [0|1]
  optional bool pedestrian_fcw_brak_error_s = 6;
  // Acute_Warning_S [] [0|1]
  optional bool acute_warning_s = 7;
  // AEB_State_S [] [0|1]
  optional bool aeb_state_s = 8;
  // PCWLevelState [] [0|3]
  optional PCWLevelStateType pcw_level_state = 9;
  // Front_radar_FCTB_Warning [] [0|7]
  optional FrontradarFCTBWarningType front_radar_fctb_warning = 10;
  // ACC_Mode_Display1_S [] [0|15]
  optional ACCModeDisplay1SType acc_mode_display1_s = 11;
  // Counter_32D_S [] [0|15]
  optional int32 counter_32_d_s = 12;
  // ELK_Assemble_Status_S [] [0|1]
  optional bool elk_assemble_status_s = 13;
  // MRR_Modulation_Status [] [0|3]
  optional MRRModulationStatusType mrr_modulation_status = 14;
  // Checksum_32D_S [] [0|255]
  optional int32 checksum_32_d_s = 15;
}

message ADS_0X32E {
// Control Message
  enum ACCModeSType {
    ACC_MODE_S_OFF = 0;
    ACC_MODE_S_PASSIVEMODE = 1;
    ACC_MODE_S_STANDBYMODE = 2;
    ACC_MODE_S_ACTCTRLMODE = 3;
    ACC_MODE_S_BRAKEONLYMODE = 4;
    ACC_MODE_S_OVERRIDE = 5;
    ACC_MODE_S_STANDSTILL = 6;
    ACC_MODE_S_FAILUREMODE = 7;
  }
  enum ESPVLCShutDownRequestSType {
    ESP_VLC_SHUT_DOWN_REQUEST_S_SOFTOFF = 0;
    ESP_VLC_SHUT_DOWN_REQUEST_S_FASTOFF = 1;
    ESP_VLC_SHUT_DOWN_REQUEST_S_IMMEDIATEOFF = 2;
    ESP_VLC_SHUT_DOWN_REQUEST_S_INITIAL = 3;
  }
  enum LSMRequestStatusSType {
    LSM_REQUEST_STATUS_S_NONE = 0;
    LSM_REQUEST_STATUS_S_NRP = 1;
    LSM_REQUEST_STATUS_S_TBA = 2;
    LSM_REQUEST_STATUS_S_RESERVED_3 = 3;
    LSM_REQUEST_STATUS_S_RESERVED_4 = 4;
    LSM_REQUEST_STATUS_S_RESERVED_5 = 5;
    LSM_REQUEST_STATUS_S_RESERVED_6 = 6;
    LSM_REQUEST_STATUS_S_RESERVED_7 = 7;
  }
  // ACC_Axv_Cv_Aim_S [m/s2] [-5|7.75]
  optional double acc_axv_cv_aim_s = 1;
  // Axv_Cv_Coft_Band_Upper_Val_S [m/s2] [-5|7.75]
  optional double axv_cv_coft_band_upper_val_s = 2;
  // Axv_Cv_Coft_Band_Lower_Val_S [m/s2] [-5|7.75]
  optional double axv_cv_coft_band_lower_val_s = 3;
  // ADt_Upper_Limit_Axv_Cv_S [m/s3] [0|16]
  optional double a_dt_upper_limit_axv_cv_s = 4;
  // Adt_Lower_Limit_Axv_Cv_S [m/s3] [-16|0]
  optional double adt_lower_limit_axv_cv_s = 5;
  // ACC_Drive_Off_Req_S [] [0|1]
  optional bool acc_drive_off_req_s = 6;
  // ACC_DecTo_Stop_Req_S [] [0|1]
  optional bool acc_dec_to_stop_req_s = 7;
  // ACC_Minimum_Braking_S [] [0|1]
  optional bool acc_minimum_braking_s = 8;
  // Brake_Preferred_S [] [0|1]
  optional bool brake_preferred_s = 9;
  // ACC_Mode_S [] [0|7]
  optional ACCModeSType acc_mode_s = 10;
  // ESP_VLC_Shut_Down_Request_S [] [0|3]
  optional ESPVLCShutDownRequestSType esp_vlc_shut_down_request_s = 11;
  // Counter_32E_S [] [0|15]
  optional int32 counter_32_e_s = 12;
  // LSM_Request_Status_S [] [0|7]
  optional LSMRequestStatusSType lsm_request_status_s = 13;
  // Checksum_32E_S [] [0|255]
  optional int32 checksum_32_e_s = 14;
}

message ADS_0X32F {
// Control Message
  enum ABALevelSType {
    ABA_LEVEL_S_LEVEL0 = 0;
    ABA_LEVEL_S_LEVEL1 = 1;
    ABA_LEVEL_S_LEVEL2 = 2;
    ABA_LEVEL_S_LEVEL3 = 3;
  }
  enum AWBLevelSType {
    AWB_LEVEL_S_NOLEVEL = 0;
    AWB_LEVEL_S_LEVEL1 = 1;
    AWB_LEVEL_S_LEVEL2 = 2;
    AWB_LEVEL_S_LEVEL3 = 3;
    AWB_LEVEL_S_LEVEL4 = 4;
    AWB_LEVEL_S_RESERVED_5 = 5;
  }
  enum ELKstatusSType {
    ELK_STATUS_S_OFF = 0;
    ELK_STATUS_S_PASSIVE = 1;
    ELK_STATUS_S_ACT = 2;
    ELK_STATUS_S_FAILURE = 3;
  }
  enum SBControlRequestType {
    SBCONTROL_REQUEST_NOREQUEST = 0;
    SBCONTROL_REQUEST_REQUESTTOSHOCK = 1;
    SBCONTROL_REQUEST_REQUESTTOTENSION = 2;
    SBCONTROL_REQUEST_RESERVED_3 = 3;
  }
  enum MRRSOSRequestType {
    MRR_SOS_REQUEST_NOREQUEST = 0;
    MRR_SOS_REQUEST_REQUEST = 1;
    MRR_SOS_REQUEST_RESERVED_2 = 2;
  }
  enum MRRMRCRequestType {
    MRR_MRC_REQUEST_NOREQUEST = 0;
    MRR_MRC_REQUEST_REQUEST = 1;
    MRR_MRC_REQUEST_RESERVED_2 = 2;
  }
  enum SuspInhibitReq32FSType {
    SUSPINHIBITREQ32F_S_NOREQUEST = 0;
    SUSPINHIBITREQ32F_S_AEBREQUEST = 1;
    SUSPINHIBITREQ32F_S_ELKAREQUEST = 2;
    SUSPINHIBITREQ32F_S_FCTBREQUEST = 3;
    SUSPINHIBITREQ32F_S_RCTBREQUEST = 4;
    SUSPINHIBITREQ32F_S_ESAREQUEST = 5;
    SUSPINHIBITREQ32F_S_RESERVED_6 = 6;
    SUSPINHIBITREQ32F_S_RESERVED_7 = 7;
  }
  // AEB_Ax_Tar_S [m/s2] [-16|15.994187]
  optional double aeb_ax_tar_s = 1;
  // Req_EBA_Decel_Ctrl_S [] [0|1]
  optional bool req_eba_decel_ctrl_s = 2;
  // ESP_Prefill_Req_S [] [0|1]
  optional bool esp_prefill_req_s = 3;
  // AWB_Request_S [] [0|1]
  optional bool awb_request_s = 4;
  // ABA_A_S [] [0|1]
  optional bool aba_a_s = 5;
  // ABA_Level_S [] [0|3]
  optional ABALevelSType aba_level_s = 6;
  // AEB_DecCtrl_Request_S [] [0|1]
  optional bool aeb_dec_ctrl_request_s = 7;
  // MRR_DriveModeInhibtReq_S [] [0|1]
  optional bool mrr_drive_mode_inhibt_req_s = 8;
  // MRR_DriveModeInhibtReq_Valid_S [] [0|1]
  optional bool mrr_drive_mode_inhibt_req_valid_s = 9;
  // AWB_Level_S [] [0|15]
  optional AWBLevelSType awb_level_s = 10;
  // Req_ESC_Ctrl_Veh_S [] [0|1]
  optional bool req_esc_ctrl_veh_s = 11;
  // ELK_status_S [] [0|3]
  optional ELKstatusSType elk_status_s = 12;
  // SBControl_Request [] [0|3]
  optional SBControlRequestType sb_control_request = 13;
  // MRR_SOS_Request [] [0|3]
  optional MRRSOSRequestType mrr_sos_request = 14;
  // MRR_MRC_Request [] [0|3]
  optional MRRMRCRequestType mrr_mrc_request = 15;
  // Counter_32F_S [] [0|15]
  optional int32 counter_32_f_s = 16;
  // SuspInhibitReq32F_S [] [0|7]
  optional SuspInhibitReq32FSType susp_inhibit_req32_f_s = 17;
  // SuspInhibitReq32F_Valid_S [] [0|1]
  optional bool susp_inhibit_req32_f_valid_s = 18;
  // Checksum32F_S [] [0|255]
  optional int32 checksum32_f_s = 19;
}

message VCU_0X341 {
// Report Message
  enum DrvpwrlimlampstsType {
    DRV_PWR_LIM_LAMP_STS_RESERVED_0 = 0;
    DRV_PWR_LIM_LAMP_STS_DONOTDISPLAY = 1;
    DRV_PWR_LIM_LAMP_STS_DISPLAY = 2;
    DRV_PWR_LIM_LAMP_STS_RESERVED_3 = 3;
  }
  enum VCUREADYIndicatorLightSType {
    VCU_READY_INDICATOR_LIGHT_S_DONOTDISPLAY = 0;
    VCU_READY_INDICATOR_LIGHT_S_DISPLAY_EVOROK_DM = 1;
    VCU_READY_INDICATOR_LIGHT_S_RESERVED_EVORFAKEOK_DM = 2;
    VCU_READY_INDICATOR_LIGHT_S_RESERVED_3 = 3;
  }
  // Drv_pwr_lim_lamp_sts [] [0|3]
  optional DrvpwrlimlampstsType drv_pwr_lim_lamp_sts = 1;
  // VCU_READY_Indicator_Light_S [] [0|3]
  optional VCUREADYIndicatorLightSType vcu_ready_indicator_light_s = 2;
  // Checksum_341_S [] [0|255]
  optional int32 checksum_341_s = 3;
}

message VCU_0X342 {
// Report Message
  enum VCUVehicleRunModeSType {
    VCU_VEHICLE_RUN_MODE_S_RESERVED_0 = 0;
    VCU_VEHICLE_RUN_MODE_S_ECONOMICMODE = 1;
    VCU_VEHICLE_RUN_MODE_S_SPORTSMODE = 2;
    VCU_VEHICLE_RUN_MODE_S_SNOWMODE_EVORNORMALMODENORMAL_DM = 3;
  }
  enum VCUVehicleRunModeS2Type {
    VCU_VEHICLE_RUN_MODE_S2_RESERVED_EVORNOTSWITCHED_DM = 0;
    VCU_VEHICLE_RUN_MODE_S2_NORMAL_EVORSWITCHING_DM = 1;
    VCU_VEHICLE_RUN_MODE_S2_RESERVED_2 = 2;
    VCU_VEHICLE_RUN_MODE_S2_RESERVED_3 = 3;
  }
  enum VCUGoalGearSType {
    VCU_GOAL_GEAR_S_RESERVED_0 = 0;
    VCU_GOAL_GEAR_S_PGEAR = 1;
    VCU_GOAL_GEAR_S_RGEA = 2;
    VCU_GOAL_GEAR_S_NGEA = 3;
    VCU_GOAL_GEAR_S_DGEA = 4;
    VCU_GOAL_GEAR_S_RESERVED_5 = 5;
    VCU_GOAL_GEAR_S_RESERVED_6 = 6;
    VCU_GOAL_GEAR_S_RESERVED_7 = 7;
    VCU_GOAL_GEAR_S_RESERVED_8 = 8;
    VCU_GOAL_GEAR_S_RESERVED_9 = 9;
    VCU_GOAL_GEAR_S_RESERVED_10 = 10;
    VCU_GOAL_GEAR_S_RESERVED_11 = 11;
    VCU_GOAL_GEAR_S_RESERVED_12 = 12;
    VCU_GOAL_GEAR_S_RESERVED_13 = 13;
    VCU_GOAL_GEAR_S_RESERVED_14 = 14;
    VCU_GOAL_GEAR_S_RESERVED_15 = 15;
  }
  // VCU_Accelerograph_Depth_S [%] [0|100]
  optional int32 vcu_accelerograph_depth_s = 1;
  // VCU_Brake_Depth_S [%] [0|100]
  optional int32 vcu_brake_depth_s = 2;
  // VCU_Acelrogra_Dpth_Virtual_Val_S [] [0|1]
  optional bool vcu_acelrogra_dpth_virtual_val_s = 3;
  // VCU_Brake_Depth_Virtual_Value_S [] [0|1]
  optional bool vcu_brake_depth_virtual_value_s = 4;
  // VCU_Vehicle_Run_Mode_S [] [0|3]
  optional VCUVehicleRunModeSType vcu_vehicle_run_mode_s = 5;
  // VCU_Vehicle_Run_Mode_S2 [] [0|3]
  optional VCUVehicleRunModeS2Type vcu_vehicle_run_mode_s2 = 6;
  // VCU_Goal_Gear_S [] [0|15]
  optional VCUGoalGearSType vcu_goal_gear_s = 7;
  // Counter_342_S [] [0|15]
  optional int32 counter_342_s = 8;
  // Checksum_342_S [] [0|255]
  optional int32 checksum_342_s = 9;
}

message BMS_0X344 {
// Report Message
  enum BMCDischargMainRealyStatsSType {
    BMC_DISCHARG_MAIN_REALY_STATS_S_DISCONNECT = 0;
    BMC_DISCHARG_MAIN_REALY_STATS_S_PULLIN = 1;
    BMC_DISCHARG_MAIN_REALY_STATS_S_RESERVED_2 = 2;
    BMC_DISCHARG_MAIN_REALY_STATS_S_RESERVED_3 = 3;
  }
  enum BMCExtnChagEqupConecStatSType {
    BMC_EXTN_CHAG_EQUP_CONEC_STAT_S_READY = 0;
    BMC_EXTN_CHAG_EQUP_CONEC_STAT_S_CHARG = 1;
    BMC_EXTN_CHAG_EQUP_CONEC_STAT_S_CHARGEND = 2;
    BMC_EXTN_CHAG_EQUP_CONEC_STAT_S_GUNCONNECTIONNOTENTPROCESS = 3;
    BMC_EXTN_CHAG_EQUP_CONEC_STAT_S_CHARGTERMINATED = 4;
    BMC_EXTN_CHAG_EQUP_CONEC_STAT_S_C10CHARGCABINETFAILURE = 5;
    BMC_EXTN_CHAG_EQUP_CONEC_STAT_S_CHARGGUNCONFAILURESTAY = 6;
    BMC_EXTN_CHAG_EQUP_CONEC_STAT_S_ONBOARDEXTRDISCHARGEWAIT = 7;
    BMC_EXTN_CHAG_EQUP_CONEC_STAT_S_ACEXTRCHARGEQUIPFAILURE = 8;
    BMC_EXTN_CHAG_EQUP_CONEC_STAT_S_APPOINTMENTWAITEVRESERVED = 9;
    BMC_EXTN_CHAG_EQUP_CONEC_STAT_S_EXTRDISCHARGEREADY = 10;
    BMC_EXTN_CHAG_EQUP_CONEC_STAT_S_EXTRDISCHARGE = 11;
    BMC_EXTN_CHAG_EQUP_CONEC_STAT_S_EXTRDISCHARGEENDSNORMALLY = 12;
    BMC_EXTN_CHAG_EQUP_CONEC_STAT_S_CHARGPAUSE = 13;
    BMC_EXTN_CHAG_EQUP_CONEC_STAT_S_EXTRDISCHARGEENDSABNORMALLY = 14;
    BMC_EXTN_CHAG_EQUP_CONEC_STAT_S_DEFAULT = 15;
  }
  enum BMCChargeGunConnectStatusSType {
    BMC_CHARGE_GUN_CONNECT_STATUS_S_NOTCONNECTED = 0;
    BMC_CHARGE_GUN_CONNECT_STATUS_S_ACCHARGGUNCONNECTION = 1;
    BMC_CHARGE_GUN_CONNECT_STATUS_S_DCCHARGGUNCONNECTION = 2;
    BMC_CHARGE_GUN_CONNECT_STATUS_S_ACCHARGGUNANDDCCHARG = 3;
    BMC_CHARGE_GUN_CONNECT_STATUS_S_VTOLDISCHARGEGUNCONNECTION = 4;
    BMC_CHARGE_GUN_CONNECT_STATUS_S_OBCCCCONNECTION = 5;
    BMC_CHARGE_GUN_CONNECT_STATUS_S_RESERVED_6 = 6;
    BMC_CHARGE_GUN_CONNECT_STATUS_S_RESERVED_7 = 7;
  }
  // BMC_Discharg_Main_Realy_Stats_S [] [0|3]
  optional BMCDischargMainRealyStatsSType bmc_discharg_main_realy_stats_s = 1;
  // BMC_Extn_Chag_Equp_Conec_Stat_S [] [0|15]
  optional BMCExtnChagEqupConecStatSType bmc_extn_chag_equp_conec_stat_s = 2;
  // BMC_Charge_Gun_Connect_Status_S [] [0|7]
  optional BMCChargeGunConnectStatusSType bmc_charge_gun_connect_status_s = 3;
  // CheckSum344_S [] [0|255]
  optional int32 check_sum344_s = 4;
}

message BMS_0X345 {
// Report Message
  // EV_Endurance_Mileage345_S [Km] [0|1000]
  optional int32 ev_endurance_mileage345_s = 1;
  // CheckSum345_S [] [0|255]
  optional int32 check_sum345_s = 2;
}

message VCU_0X356 {
// Report Message
  enum HighVoltagedelayedpoweType {
    HIGH_VOLTAGE_DELAYED_POWE_FAILURE = 0;
    HIGH_VOLTAGE_DELAYED_POWE_ACT = 1;
    HIGH_VOLTAGE_DELAYED_POWE_RESERVED_2 = 2;
    HIGH_VOLTAGE_DELAYED_POWE_STANDBY = 3;
  }
  // High_Voltage_delayed_powe [] [0|3]
  optional HighVoltagedelayedpoweType high_voltage_delayed_powe = 1;
}

message SCU_0X35C {
// Report Message
  enum SCUFeedbackAPAStatusInfoSType {
    SCU_FEEDBACK_APA_STATUS_INFO_S_NOOPERATIONISNOTCTRLLED = 0;
    SCU_FEEDBACK_APA_STATUS_INFO_S_NORMALOPERATIONNORMALCTRL = 1;
    SCU_FEEDBACK_APA_STATUS_INFO_S_DRIVEGEARINTRFDRIVERINTRGEARCTRL = 2;
    SCU_FEEDBACK_APA_STATUS_INFO_S_RESERVED_3 = 3;
  }
  enum GearRecognizeStatusSType {
    GEAR_RECOGNIZE_STATUS_S_INITIALNOGEARSHIFTING = 0;
    GEAR_RECOGNIZE_STATUS_S_P = 1;
    GEAR_RECOGNIZE_STATUS_S_R = 2;
    GEAR_RECOGNIZE_STATUS_S_N = 3;
    GEAR_RECOGNIZE_STATUS_S_D = 4;
    GEAR_RECOGNIZE_STATUS_S_M = 5;
    GEAR_RECOGNIZE_STATUS_S_POSITIVE = 6;
    GEAR_RECOGNIZE_STATUS_S_NEGATIVE = 7;
  }
  // Gear_System_Status_S [] [0|1]
  optional bool gear_system_status_s = 1;
  // SCU_Feedback_APA_Status_Info_S [] [0|3]
  optional SCUFeedbackAPAStatusInfoSType scu_feedback_apa_status_info_s = 2;
  // Gear_Recognize_Status_S [] [0|7]
  optional GearRecognizeStatusSType gear_recognize_status_s = 3;
  // Counter35C_S [Nm] [0|15]
  optional int32 counter35_c_s = 4;
  // Checksum35C_S [度] [0|255]
  optional int32 checksum35_c_s = 5;
}

message VCU_0X364 {
// Report Message
  // WaterPump_Drive_Duty_Ratio_364_S [%] [0|100]
  optional int32 water_pump_drive_duty_ratio_364_s = 1;
  // CheckSum364_S [] [0|255]
  optional int32 check_sum364_s = 2;
}

message PAS_0X365 {
// Control Message
  // SDW_FSL_distance_S [cm] [0|255]
  optional int32 sdw_fsl_distance_s = 1;
  // SDW_FSR_distance_S [cm] [0|255]
  optional int32 sdw_fsr_distance_s = 2;
  // SDW_FSLM_distance_S [cm] [0|255]
  optional int32 sdw_fslm_distance_s = 3;
  // SDW_FSRM_distance_S [cm] [0|255]
  optional int32 sdw_fsrm_distance_s = 4;
  // SDW_RSLM_distance_S [cm] [0|255]
  optional int32 sdw_rslm_distance_s = 5;
  // SDW_RSRM_distance_S [cm] [0|255]
  optional int32 sdw_rsrm_distance_s = 6;
  // SDW_RSL_distance_S [cm] [0|255]
  optional int32 sdw_rsl_distance_s = 7;
  // SDW_RSR_distance_S [cm] [0|255]
  optional int32 sdw_rsr_distance_s = 8;
}

message DCDC_0X36D {
// Report Message
  enum DCDCDCDCWrkModeSType {
    DCDC_DCDC_WRK_MODE_S_OFFSTATE = 0;
    DCDC_DCDC_WRK_MODE_S_BOOSTSTATE = 1;
    DCDC_DCDC_WRK_MODE_S_BUCKSTATE = 2;
    DCDC_DCDC_WRK_MODE_S_RESERVED_3 = 3;
  }
  // DCDC_DCDC_Wrk_Mode_S [] [0|3]
  optional DCDCDCDCWrkModeSType dcdc_dcdc_wrk_mode_s = 1;
  // Checksum_36D_S [] [0|255]
  optional int32 checksum_36_d_s = 2;
}

message MSR_DRV_0X381 {
// Report Message
  enum FrontPsngrMotorSBStaSType {
    FRONT_PSNGR_MOTOR_S_B_STA_S_FUNCTIONNOTPERFORMED = 0;
    FRONT_PSNGR_MOTOR_S_B_STA_S_SEATBELTFATIGUEDRIVINGVIBRATION = 1;
    FRONT_PSNGR_MOTOR_S_B_STA_S_THESEATBELTISTIGHTENED = 2;
    FRONT_PSNGR_MOTOR_S_B_STA_S_AEBSEAEBELTBRAKESTIGHTENED = 3;
    FRONT_PSNGR_MOTOR_S_B_STA_S_HIGHSPEEDSEATBELTBRAKESTIGHTEN = 4;
    FRONT_PSNGR_MOTOR_S_B_STA_S_RESERVED_5 = 5;
    FRONT_PSNGR_MOTOR_S_B_STA_S_RESERVED_6 = 6;
    FRONT_PSNGR_MOTOR_S_B_STA_S_RESERVED_7 = 7;
    FRONT_PSNGR_MOTOR_S_B_STA_S_RESERVED_8 = 8;
    FRONT_PSNGR_MOTOR_S_B_STA_S_RESERVED_9 = 9;
    FRONT_PSNGR_MOTOR_S_B_STA_S_RESERVED_10 = 10;
    FRONT_PSNGR_MOTOR_S_B_STA_S_RESERVED_11 = 11;
    FRONT_PSNGR_MOTOR_S_B_STA_S_RESERVED_12 = 12;
    FRONT_PSNGR_MOTOR_S_B_STA_S_RESERVED_13 = 13;
    FRONT_PSNGR_MOTOR_S_B_STA_S_RESERVED_14 = 14;
    FRONT_PSNGR_MOTOR_S_B_STA_S_RESERVED_15 = 15;
  }
  // Front_Psngr_Motor_S_B_Sta_S [] [0|15]
  optional FrontPsngrMotorSBStaSType front_psngr_motor_s_b_sta_s = 1;
}

message MEDIA_0X385 {
// Report Message
  enum RCTAEnableSType {
    RCTA_ENABLE_S_INVALID = 0;
    RCTA_ENABLE_S_SWITCHOFF = 1;
    RCTA_ENABLE_S_SWITCHON = 2;
    RCTA_ENABLE_S_RESERVED_3 = 3;
  }
  enum RCWEnableSType {
    RCW_ENABLE_S_INVALID = 0;
    RCW_ENABLE_S_SWITCHOFF = 1;
    RCW_ENABLE_S_SWITCHON = 2;
    RCW_ENABLE_S_RESERVED_3 = 3;
  }
  enum DOWEnableSType {
    DOW_ENABLE_S_INVALID = 0;
    DOW_ENABLE_S_SWITCHOFF = 1;
    DOW_ENABLE_S_SWITCHON = 2;
    DOW_ENABLE_S_RESERVED_3 = 3;
  }
  enum TJAICAwitchSType {
    TJA_ICAWITCH_S_INVALID = 0;
    TJA_ICAWITCH_S_SWITCHOFF = 1;
    TJA_ICAWITCH_S_SWITCHON = 2;
    TJA_ICAWITCH_S_RESERVED_3 = 3;
  }
  enum RCTBEnableSType {
    RCTB_ENABLE_S_INVALID = 0;
    RCTB_ENABLE_S_SWITCHOFF = 1;
    RCTB_ENABLE_S_SWITCHON = 2;
    RCTB_ENABLE_S_RESERVED_3 = 3;
  }
  enum HMAfuntionSwitchSignalSType {
    HMA_FUNTION_SWITCH_SIGNAL_S_INVALID = 0;
    HMA_FUNTION_SWITCH_SIGNAL_S_HMANOTSELECTED = 1;
    HMA_FUNTION_SWITCH_SIGNAL_S_HMASELECTED = 2;
    HMA_FUNTION_SWITCH_SIGNAL_S_RESERVED_3 = 3;
  }
  enum TSRSwitchSType {
    TSR_SWITCH_S_INVALID = 0;
    TSR_SWITCH_S_SWITCHOFF = 1;
    TSR_SWITCH_S_SWITCHON = 2;
    TSR_SWITCH_S_RESERVED_3 = 3;
  }
  enum PCWEnableSType {
    PCW_ENABLE_S_INVALID = 0;
    PCW_ENABLE_S_SWITCHOFF = 1;
    PCW_ENABLE_S_SWITCHON = 2;
    PCW_ENABLE_S_RESERVED_3 = 3;
  }
  enum LKSEnableSType {
    LKS_ENABLE_S_INVALID = 0;
    LKS_ENABLE_S_TURNOFFD = 1;
    LKS_ENABLE_S_LANEDEPARTURE = 2;
    LKS_ENABLE_S_LANEKEEPING_RESERVED_3 = 3;
    LKS_ENABLE_S_FULLFUNCTION_RESERVED_4 = 4;
    LKS_ENABLE_S_LANEDEPARTUREPREVENTION = 5;
    LKS_ENABLE_S_RESERVED_6 = 6;
    LKS_ENABLE_S_RESERVED_7 = 7;
    LKS_ENABLE_S_RESERVED_8 = 8;
    LKS_ENABLE_S_RESERVED_9 = 9;
    LKS_ENABLE_S_RESERVED_10 = 10;
    LKS_ENABLE_S_RESERVED_11 = 11;
    LKS_ENABLE_S_RESERVED_12 = 12;
    LKS_ENABLE_S_RESERVED_13 = 13;
    LKS_ENABLE_S_RESERVED_14 = 14;
    LKS_ENABLE_S_RESERVED_15 = 15;
  }
  enum AEBEnableSType {
    AEB_ENABLE_S_INVALID = 0;
    AEB_ENABLE_S_SWITCHOFF = 1;
    AEB_ENABLE_S_SWITCHON = 2;
    AEB_ENABLE_S_RESERVED_3 = 3;
  }
  enum LDWWarningModeSType {
    LDW_WARNING_MODE_S_INVALID = 0;
    LDW_WARNING_MODE_S_VIBRATIONONLY = 1;
    LDW_WARNING_MODE_S_SOUNDONLY = 2;
    LDW_WARNING_MODE_S_VIBRATIONSOUND = 3;
  }
  enum BSDLCAEnableSType {
    BSD_LCA__ENABLE_S_INVALID = 0;
    BSD_LCA__ENABLE_S_SWITCHOFF = 1;
    BSD_LCA__ENABLE_S_SWITCHON = 2;
    BSD_LCA__ENABLE_S_RESERVED_3 = 3;
  }
  enum SDWReqSwitchStateSType {
    SDWREQ_SWITCH_STATE_S_INVALID = 0;
    SDWREQ_SWITCH_STATE_S_SWITCHOFF = 1;
    SDWREQ_SWITCH_STATE_S_SWITCHON = 2;
    SDWREQ_SWITCH_STATE_S_RESERVED_3 = 3;
  }
  enum PCWLevelReqType {
    PCWLEVELREQ_NOACTION = 0;
    PCWLEVELREQ_LEVEL1LOW = 1;
    PCWLEVELREQ_INLEVEL2SELECTEDBYDEFAULT = 2;
    PCWLEVELREQ_LEVEL3HIGH = 3;
  }
  enum LDWEnableSType {
    LDW_ENABLE_S_INVALID = 0;
    LDW_ENABLE_S_CLOSED = 1;
    LDW_ENABLE_S_LANEDEPARTURE = 2;
    LDW_ENABLE_S_RESERVED_3 = 3;
  }
  enum ISLISpdLimOffsSType {
    ISLI_SPDLIMOFFS_S_VALUE0 = 0;
    ISLI_SPDLIMOFFS_S_KPH_NEGATIVE_10 = 1;
    ISLI_SPDLIMOFFS_S_KPH_NEGATIVE_5 = 2;
    ISLI_SPDLIMOFFS_S_KPH_5 = 3;
    ISLI_SPDLIMOFFS_S_KPH_10 = 4;
    ISLI_SPDLIMOFFS_S_MPH_NEGATIVE_5 = 5;
    ISLI_SPDLIMOFFS_S_MPH_NEGATIVE_3 = 6;
    ISLI_SPDLIMOFFS_S_MPH_3 = 7;
    ISLI_SPDLIMOFFS_S_MPH_5 = 8;
    ISLI_SPDLIMOFFS_S_RESERVED_9 = 9;
    ISLI_SPDLIMOFFS_S_RESERVED_10 = 10;
    ISLI_SPDLIMOFFS_S_RESERVED_11 = 11;
    ISLI_SPDLIMOFFS_S_RESERVED_12 = 12;
    ISLI_SPDLIMOFFS_S_RESERVED_13 = 13;
    ISLI_SPDLIMOFFS_S_RESERVED_14 = 14;
    ISLI_SPDLIMOFFS_S_RESERVED_15 = 15;
  }
  enum ISLISwitchSType {
    ISLI_SWITCH_S_INVALID = 0;
    ISLI_SWITCH_S_OFF = 1;
    ISLI_SWITCH_S_ON = 2;
    ISLI_SWITCH_S_RESERVED_3 = 3;
  }
  enum ELKAEnableSType {
    ELKA_ENABLE_S_INVALID = 0;
    ELKA_ENABLE_S_SWITCHOFF = 1;
    ELKA_ENABLE_S_SWITCHON = 2;
    ELKA_ENABLE_S_RESERVED_3 = 3;
  }
  // RCTA_Enable_S [] [0|3]
  optional RCTAEnableSType rcta_enable_s = 1;
  // RCW_Enable_S [] [0|3]
  optional RCWEnableSType rcw_enable_s = 2;
  // DOW_Enable_S [] [0|3]
  optional DOWEnableSType dow_enable_s = 3;
  // TJA_ICAwitch_S [] [0|3]
  optional TJAICAwitchSType tja_ic_awitch_s = 4;
  // RCTB_Enable_S [] [0|3]
  optional RCTBEnableSType rctb_enable_s = 5;
  // HMA_funtion_Switch_Signal_S [] [0|3]
  optional HMAfuntionSwitchSignalSType hma_funtion_switch_signal_s = 6;
  // TSR_Switch_S [] [0|3]
  optional TSRSwitchSType tsr_switch_s = 7;
  // PCW_Enable_S [] [0|3]
  optional PCWEnableSType pcw_enable_s = 8;
  // LKS_Enable_S [] [0|15]
  optional LKSEnableSType lks_enable_s = 9;
  // AEB_Enable_S [] [0|3]
  optional AEBEnableSType aeb_enable_s = 10;
  // LDW_Warning_Mode_S [] [0|3]
  optional LDWWarningModeSType ldw_warning_mode_s = 11;
  // BSD_LCA__Enable_S [] [0|3]
  optional BSDLCAEnableSType bsd_lca__enable_s = 12;
  // SDWReq_Switch_State_S [] [0|3]
  optional SDWReqSwitchStateSType sdw_req_switch_state_s = 13;
  // PCWLevelReq [] [0|3]
  optional PCWLevelReqType pcw_level_req = 14;
  // LDW_Enable_S [] [0|3]
  optional LDWEnableSType ldw_enable_s = 15;
  // ISLI_SpdLimOffs_S [] [0|15]
  optional ISLISpdLimOffsSType isli_spd_lim_offs_s = 16;
  // ISLI_Switch_S [] [0|3]
  optional ISLISwitchSType isli_switch_s = 17;
  // ELKA_Enable_S [] [0|3]
  optional ELKAEnableSType elka_enable_s = 18;
}

message LEFT_BCM_0X388 {
// Report Message
  enum FLWindowClosingStatusType {
    FL_WINDOW_CLOSING_STATUS_INVALID = 0;
    FL_WINDOW_CLOSING_STATUS_LFRONTWINDOWISCLOSEDPROPERLY = 1;
    FL_WINDOW_CLOSING_STATUS_LFRONTWINDOWISNOTCLOSED = 2;
    FL_WINDOW_CLOSING_STATUS_RESERVED_3 = 3;
  }
  enum RLWindowClosingStatusType {
    RL_WINDOW_CLOSING_STATUS_INVALID = 0;
    RL_WINDOW_CLOSING_STATUS_LREARWINDOWISCLOSED = 1;
    RL_WINDOW_CLOSING_STATUS_LREARWINDOWISNOTCLOSED = 2;
    RL_WINDOW_CLOSING_STATUS_RESERVED_3 = 3;
  }
  enum LBCMFRWindowClosingStatusType {
    LBCM_FR_WINDOW_CLOSING_STATUS_INVALID = 0;
    LBCM_FR_WINDOW_CLOSING_STATUS_FRWINDOWISCLOSEDPROPERLY = 1;
    LBCM_FR_WINDOW_CLOSING_STATUS_FRWINDOWISNOTCLOSED = 2;
    LBCM_FR_WINDOW_CLOSING_STATUS_RESERVED_3 = 3;
  }
  enum LBCMRRWindowClosingStatusType {
    LBCM_RR_WINDOW_CLOSING_STATUS_INVALID = 0;
    LBCM_RR_WINDOW_CLOSING_STATUS_RRWINDOWISCLOSED = 1;
    LBCM_RR_WINDOW_CLOSING_STATUS_RRWINDOWISNOTCLOSED = 2;
    LBCM_RR_WINDOW_CLOSING_STATUS_RESERVED_3 = 3;
  }
  // LF_Win_Pos_Pct_S [%] [0|255]
  optional int32 lf_win_pos_pct_s = 1;
  // RL_Win_Pos_Pct_S [%] [0|255]
  optional int32 rl_win_pos_pct_s = 2;
  // RF_Win_Pos_Pct_388_S [%] [0|255]
  optional int32 rf_win_pos_pct_388_s = 3;
  // RR_Win_Pos_Pct_388_S [%] [0|255]
  optional int32 rr_win_pos_pct_388_s = 4;
  // FL_Window_Closing_Status [] [0|3]
  optional FLWindowClosingStatusType fl_window_closing_status = 5;
  // RL_Window_Closing_Status [] [0|3]
  optional RLWindowClosingStatusType rl_window_closing_status = 6;
  // LBCM_FR_Window_Closing_Status [] [0|3]
  optional LBCMFRWindowClosingStatusType lbcm_fr_window_closing_status = 7;
  // LBCM_RR_Window_Closing_Status [] [0|3]
  optional LBCMRRWindowClosingStatusType lbcm_rr_window_closing_status = 8;
}

message MEDIA_0X389 {
// Report Message
  enum MediaunixStsSType {
    MEDIA_UNIXSTS_S_INVALID = 0;
    MEDIA_UNIXSTS_S_RTC = 1;
    MEDIA_UNIXSTS_S_NTP = 2;
    MEDIA_UNIXSTS_S_4G_5G = 3;
    MEDIA_UNIXSTS_S_GPS = 4;
  }
  // Media_unixSts_S [] [0|7]
  optional MediaunixStsSType media_unix_sts_s = 1;
  optional int64 media_time_stamp_s = 2;
}

message LEFT_BCM_0X38A {
// Report Message
  enum SmallLights38ASType {
    SMALL_LIGHTS_38A_S_INVALID = 0;
    SMALL_LIGHTS_38A_S_TURNON = 1;
    SMALL_LIGHTS_38A_S_TURNOFF = 2;
    SMALL_LIGHTS_38A_S_RESERVED_3 = 3;
  }
  enum DippedHeadlight38ASType {
    DIPPED_HEADLIGHT_38A_S_INVALID = 0;
    DIPPED_HEADLIGHT_38A_S_TURNON = 1;
    DIPPED_HEADLIGHT_38A_S_TURNOFF = 2;
    DIPPED_HEADLIGHT_38A_S_RESERVED_3 = 3;
  }
  enum HighBeamLight38ASType {
    HIGH_BEAM_LIGHT_38A_S_INVALID = 0;
    HIGH_BEAM_LIGHT_38A_S_TURNON = 1;
    HIGH_BEAM_LIGHT_38A_S_TURNOFF = 2;
    HIGH_BEAM_LIGHT_38A_S_RESERVED_3 = 3;
  }
  enum BackFogLight38ASType {
    BACK_FOG_LIGHT_38A_S_INVALID = 0;
    BACK_FOG_LIGHT_38A_S_TURNON = 1;
    BACK_FOG_LIGHT_38A_S_TURNOFF = 2;
    BACK_FOG_LIGHT_38A_S_RESERVED_3 = 3;
  }
  enum BrakeLights38ASType {
    BRAKE_LIGHTS_38A_S_INVALID = 0;
    BRAKE_LIGHTS_38A_S_ALWAYSBRLIGHT = 1;
    BRAKE_LIGHTS_38A_S_FLASHINGON = 2;
    BRAKE_LIGHTS_38A_S_OFF = 3;
  }
  enum Backlight38ASType {
    BACKLIGHT_38A_S_INVALID = 0;
    BACKLIGHT_38A_S_LIT = 1;
    BACKLIGHT_38A_S_OFF = 2;
    BACKLIGHT_38A_S_RESERVED_3 = 3;
  }
  enum AllWearLights38ASType {
    ALL_WEAR_LIGHTS_38A_S_INVALID = 0;
    ALL_WEAR_LIGHTS_38A_S_LIT = 1;
    ALL_WEAR_LIGHTS_38A_S_OFF = 2;
    ALL_WEAR_LIGHTS_38A_S_RESERVED_3 = 3;
  }
  enum RearPositionLightStatusSType {
    REAR_POSITION_LIGHT_STATUS_S_INVALID = 0;
    REAR_POSITION_LIGHT_STATUS_S_LIT = 1;
    REAR_POSITION_LIGHT_STATUS_S_OFF = 2;
    REAR_POSITION_LIGHT_STATUS_S_RESERVED_3 = 3;
  }
  enum TurnSignalWorkCondition38ASType {
    TURN_SIGNAL_WORK_CONDITION_38A_S_INVALID = 0;
    TURN_SIGNAL_WORK_CONDITION_38A_S_NOTWORKING = 1;
    TURN_SIGNAL_WORK_CONDITION_38A_S_LTURNSIGNALLIGHTNORMALFLASHIN = 2;
    TURN_SIGNAL_WORK_CONDITION_38A_S_LTURNSIGNALLIGHTFLASHINGQUICK = 3;
    TURN_SIGNAL_WORK_CONDITION_38A_S_RTURNSIGNALLIGHTFLASHINGNOR = 4;
    TURN_SIGNAL_WORK_CONDITION_38A_S_RTUSIGLIGFAULFLASHFTWARNSIG = 5;
    TURN_SIGNAL_WORK_CONDITION_38A_S_DANGERWARNIGNAL = 6;
    TURN_SIGNAL_WORK_CONDITION_38A_S_EMERGENCYBRAKINGSIGNAL = 7;
    TURN_SIGNAL_WORK_CONDITION_38A_S_REARENDCOLLISIONWARNIGNAL = 8;
    TURN_SIGNAL_WORK_CONDITION_38A_S_NORMALFLASHING = 9;
    TURN_SIGNAL_WORK_CONDITION_38A_S_RESERVED_10 = 10;
    TURN_SIGNAL_WORK_CONDITION_38A_S_RESERVED_11 = 11;
    TURN_SIGNAL_WORK_CONDITION_38A_S_RESERVED_12 = 12;
    TURN_SIGNAL_WORK_CONDITION_38A_S_RESERVED_13 = 13;
    TURN_SIGNAL_WORK_CONDITION_38A_S_RESERVED_14 = 14;
    TURN_SIGNAL_WORK_CONDITION_38A_S_RESERVED_15 = 15;
  }
  enum MidTailLightPosiLightStsSType {
    MID_TAIL_LIGHT_POSI_LIGHT_STS_S_INVALID = 0;
    MID_TAIL_LIGHT_POSI_LIGHT_STS_S_LIT = 1;
    MID_TAIL_LIGHT_POSI_LIGHT_STS_S_OFF = 2;
    MID_TAIL_LIGHT_POSI_LIGHT_STS_S_RESERVED_3 = 3;
  }
  // Small_Lights_38A_S [] [0|3]
  optional SmallLights38ASType small_lights_38_a_s = 1;
  // Dipped_Headlight_38A_S [] [0|3]
  optional DippedHeadlight38ASType dipped_headlight_38_a_s = 2;
  // High_Beam_Light_38A_S [] [0|3]
  optional HighBeamLight38ASType high_beam_light_38_a_s = 3;
  // Back_Fog_Light_38A_S [] [0|3]
  optional BackFogLight38ASType back_fog_light_38_a_s = 4;
  // Brake_Lights_38A_S [] [0|3]
  optional BrakeLights38ASType brake_lights_38_a_s = 5;
  // Backlight_38A_S [] [0|3]
  optional Backlight38ASType backlight_38_a_s = 6;
  // All_Wear_Lights_38A_S [] [0|3]
  optional AllWearLights38ASType all_wear_lights_38_a_s = 7;
  // Rear_Position_Light_Status_S [] [0|3]
  optional RearPositionLightStatusSType rear_position_light_status_s = 8;
  // Turn_Signal_Work_Condition_38A_S [] [0|15]
  optional TurnSignalWorkCondition38ASType turn_signal_work_condition_38_a_s = 9;
  // Emergency_Alarm_Switch_S [] [0|1]
  optional bool emergency_alarm_switch_s = 10;
  // Mid_Tail_Light_Posi_Light_Sts_S [] [0|3]
  optional MidTailLightPosiLightStsSType mid_tail_light_posi_light_sts_s = 11;
  // Checksum_38A_S [] [0|255]
  optional int32 checksum_38_a_s = 12;
}

message PPS_0X3AB {
// Report Message
  enum ProCalibRequestSType {
    PRO_CALIB_REQUEST_S_INVALID = 0;
    PRO_CALIB_REQUEST_S_CALIBRATIONREQUESTSTATUS = 1;
    PRO_CALIB_REQUEST_S_NORMALSTATE = 2;
    PRO_CALIB_REQUEST_S_FAILEDSTATE = 3;
    PRO_CALIB_REQUEST_S_INTERRUPTSTATE = 4;
  }
  // Pro_Calib_Request_S [] [0|7]
  optional ProCalibRequestSType pro_calib_request_s = 1;
}

message FLL_0X3AC {
// Report Message
  enum LeftHighBeamStatusSType {
    LEFT_HIGH_BEAM_STATUS_S_INVALID = 0;
    LEFT_HIGH_BEAM_STATUS_S_LIT = 1;
    LEFT_HIGH_BEAM_STATUS_S_OFF = 2;
    LEFT_HIGH_BEAM_STATUS_S_RESERVED_3 = 3;
  }
  enum LeftLowBeamStatusSType {
    LEFT_LOW_BEAM_STATUS_S_INVALID = 0;
    LEFT_LOW_BEAM_STATUS_S_LIT = 1;
    LEFT_LOW_BEAM_STATUS_S_OFF = 2;
    LEFT_LOW_BEAM_STATUS_S_RESERVED_3 = 3;
  }
  // Left_High_Beam_Status_S [] [0|3]
  optional LeftHighBeamStatusSType left_high_beam_status_s = 1;
  // Left_Low_Beam_Status_S [] [0|3]
  optional LeftLowBeamStatusSType left_low_beam_status_s = 2;
}

message FLR_0X3AD {
// Report Message
  enum RightHighBeamStatusSType {
    RIGHT_HIGH_BEAM_STATUS_S_INVALID = 0;
    RIGHT_HIGH_BEAM_STATUS_S_LIT = 1;
    RIGHT_HIGH_BEAM_STATUS_S_OFF = 2;
    RIGHT_HIGH_BEAM_STATUS_S_RESERVED_3 = 3;
  }
  enum RightLowBeamStatusSType {
    RIGHT_LOW_BEAM_STATUS_S_INVALID = 0;
    RIGHT_LOW_BEAM_STATUS_S_LIT = 1;
    RIGHT_LOW_BEAM_STATUS_S_OFF = 2;
    RIGHT_LOW_BEAM_STATUS_S_RESERVED_3 = 3;
  }
  // Right_High_Beam_Status_S [] [0|3]
  optional RightHighBeamStatusSType right_high_beam_status_s = 1;
  // Right_Low_Beam_Status_S [] [0|3]
  optional RightLowBeamStatusSType right_low_beam_status_s = 2;
}

message SWS_0X3B0 {
// Report Message
  enum SWSSpeedSetSType {
    SWS_SPEED_SET_S_INITIALPOSITION = 0;
    SWS_SPEED_SET_S_DECELERATEFIRSTGEAR = 1;
    SWS_SPEED_SET_S_DECELERATESECONDGEAR = 2;
    SWS_SPEED_SET_S_ACCELERATEFIRSTGEAR = 3;
    SWS_SPEED_SET_S_ACCELERATESECONDGEAR = 4;
    SWS_SPEED_SET_S_RESERVED_5 = 5;
    SWS_SPEED_SET_S_RESERVED_6 = 6;
    SWS_SPEED_SET_S_RESERVED_7 = 7;
  }
  enum DipilotSwitchSignalSType {
    DIPILOT_SWITCH_SIGNAL_S_INVALID = 0;
    DIPILOT_SWITCH_SIGNAL_S_PRESSED = 1;
    DIPILOT_SWITCH_SIGNAL_S_RESERVED_2 = 2;
    DIPILOT_SWITCH_SIGNAL_S_RESERVED_3 = 3;
  }
  enum SWSCruisSwchFaultStatflgSType {
    SWS_CRUIS_SWCH_FAULT_STAT_FLG_S_INVALID = 0;
    SWS_CRUIS_SWCH_FAULT_STAT_FLG_S_NORMAL = 1;
    SWS_CRUIS_SWCH_FAULT_STAT_FLG_S_RESERVED_2 = 2;
    SWS_CRUIS_SWCH_FAULT_STAT_FLG_S_RESERVED_3 = 3;
  }
  enum LeftPaddleForAdvDriFuncSType {
    LEFT_PADDLE_FOR_ADV_DRI_FUNC_S_INVALID = 0;
    LEFT_PADDLE_FOR_ADV_DRI_FUNC_S_LPADDLEPRESSED = 1;
    LEFT_PADDLE_FOR_ADV_DRI_FUNC_S_LONGPRESSONLPADDLE = 2;
    LEFT_PADDLE_FOR_ADV_DRI_FUNC_S_RESERVED_3 = 3;
  }
  enum RightPaddleForAdvDriFunctSType {
    RIGHT_PADDLE_FOR_ADV_DRI_FUNCT_S_INVALID = 0;
    RIGHT_PADDLE_FOR_ADV_DRI_FUNCT_S_RPADDLEPRESSED = 1;
    RIGHT_PADDLE_FOR_ADV_DRI_FUNCT_S_LONGPRESSONRPADDLE = 2;
    RIGHT_PADDLE_FOR_ADV_DRI_FUNCT_S_RESERVED_3 = 3;
  }
  // SWS_Speed_Set_S [] [0E-008|7.00000000]
  optional SWSSpeedSetSType sws_speed_set_s = 1;
  // Dipilot_Switch_Signal_S [] [0E-008|3.00000000]
  optional DipilotSwitchSignalSType dipilot_switch_signal_s = 2;
  // SWS_Cruis_Swch_Fault_Stat_flg_S [] [0E-008|3.00000000]
  optional SWSCruisSwchFaultStatflgSType sws_cruis_swch_fault_stat_flg_s = 3;
  // SWS_Dist_Switch_Signal_Down_S [] [0E-008|1.00000000]
  optional bool sws_dist_switch_signal_down_s = 4;
  // SWS_Dist_Switch_Signal_Up_S [] [0E-008|1.00000000]
  optional bool sws_dist_switch_signal_up_s = 5;
  // ACC_Switch_Signal_S [] [0E-008|1.00000000]
  optional bool acc_switch_signal_s = 6;
  // Left_Paddle_For_Adv_Dri_Func_S [] [0E-008|3.00000000]
  optional LeftPaddleForAdvDriFuncSType left_paddle_for_adv_dri_func_s = 7;
  // Right_Paddle_For_Adv_Dri_Funct_S [] [0E-008|3.00000000]
  optional RightPaddleForAdvDriFunctSType right_paddle_for_adv_dri_funct_s = 8;
  // Counter_3B0_S [] [0E-008|15.00000000]
  optional int32 counter_3_b0_s = 9;
  // Checksum_3B0_S [] [0E-008|255.00000000]
  optional int32 checksum_3_b0_s = 10;
}

message LEFT_BCM_0X3B4 {
// Report Message
  // Left_Sunshine_Intensity_S [w/m2] [0|1275]
  optional double left_sunshine_intensity_s = 1;
  // Right_Sunshine_Intensity_S [w/m2] [0|1275]
  optional double right_sunshine_intensity_s = 2;
  // Rainfall_Values_S [] [0|15]
  optional int32 rainfall_values_s = 3;
  // Sun_Sensor_Hardware_Fault_S [] [0|1]
  optional bool sun_sensor_hardware_fault_s = 4;
  // Humidity_Sensor_Fault_Sign_S [] [0|1]
  optional bool humidity_sensor_fault_sign_s = 5;
}

message LEFT_BCM_0X3C5 {
// Report Message
  enum FrontFogLightStatusSType {
    FRONT_FOG_LIGHT_STATUS_S_INVALID = 0;
    FRONT_FOG_LIGHT_STATUS_S_OPEN = 1;
    FRONT_FOG_LIGHT_STATUS_S_OFF = 2;
    FRONT_FOG_LIGHT_STATUS_S_RESERVED_3 = 3;
  }
  // Front_Fog_Light_Status_S [] [0|3]
  optional FrontFogLightStatusSType front_fog_light_status_s = 1;
}

message ADS_0X3CB {
// Control Message
  enum ISAAWBLevelSType {
    ISA_AWB_LEVEL_S_NOLEVEL = 0;
    ISA_AWB_LEVEL_S_LEVEL1 = 1;
    ISA_AWB_LEVEL_S_LEVEL2 = 2;
    ISA_AWB_LEVEL_S_LEVEL3 = 3;
    ISA_AWB_LEVEL_S_LEVEL4 = 4;
    ISA_AWB_LEVEL_S_RESERVED_5 = 5;
    ISA_AWB_LEVEL_S_RESERVED_6 = 6;
    ISA_AWB_LEVEL_S_RESERVED_7 = 7;
    ISA_AWB_LEVEL_S_RESERVED_8 = 8;
    ISA_AWB_LEVEL_S_RESERVED_9 = 9;
    ISA_AWB_LEVEL_S_RESERVED_10 = 10;
    ISA_AWB_LEVEL_S_RESERVED_11 = 11;
    ISA_AWB_LEVEL_S_RESERVED_12 = 12;
    ISA_AWB_LEVEL_S_RESERVED_13 = 13;
    ISA_AWB_LEVEL_S_RESERVED_14 = 14;
    ISA_AWB_LEVEL_S_RESERVED_15 = 15;
  }
  enum MDCTempStatusType {
    MDC_TEMP_STATUS_NORMAL = 0;
    MDC_TEMP_STATUS_OVER_TEMPERATURE_FAILURE = 1;
    MDC_TEMP_STATUS_LOW_TEMPERATURE_FAILURE = 2;
    MDC_TEMP_STATUS_RESERVED_3 = 3;
  }
  enum ISAABALevelSType {
    ISA_ABA_LEVEL_S_LEVEL0 = 0;
    ISA_ABA_LEVEL_S_LEVEL1 = 1;
    ISA_ABA_LEVEL_S_LEVEL2 = 2;
    ISA_ABA_LEVEL_S_LEVEL3 = 3;
  }
  enum ISAPCWLevelStateType {
    ISA_PCWLEVELSTATE_OFF = 0;
    ISA_PCWLEVELSTATE_LEVEL1LOW = 1;
    ISA_PCWLEVELSTATE_INLEVEL2SELEDBYDEFAULT = 2;
    ISA_PCWLEVELSTATE_LEVEL3HIGH = 3;
  }
  // MDC_FlowReq [mL] [0|10000]
  optional double mdc_flow_req = 1;
  // DS_Flow_Duty_Cycle_Req [%] [0|200]
  optional double ds_flow_duty_cycle_req = 2;
  // MDC_ThmPostRun [] [0|1]
  optional bool mdc_thm_post_run = 3;
  // MDC_ThmPostRun1 [] [0|1]
  optional bool mdc_thm_post_run1 = 4;
  // ISA_BrkReq_S [] [0|1]
  optional bool isa_brk_req_s = 5;
  // ISA_AWB_Request_S [] [0|1]
  optional bool isa_awb_request_s = 6;
  // ISA_AWB_Level_S [] [0|15]
  optional ISAAWBLevelSType isa_awb_level_s = 7;
  // MDC_InnerTemp [] [-48|174]
  optional int32 mdc_inner_temp = 8;
  // MDC_Temp_Status [] [0|3]
  optional MDCTempStatusType mdc_temp_status = 9;
  // ISA_Req_EBA_Decel_Ctrl_S [] [0|1]
  optional bool isa_req_eba_decel_ctrl_s = 10;
  // ISA_Error_S [] [0|1]
  optional bool isa_error_s = 11;
  // ISA_ESP_Prefill_Req_S [] [0|1]
  optional bool isa_esp_prefill_req_s = 12;
  // ISA_ABA_Available_S [] [0|1]
  optional bool isa_aba_available_s = 13;
  // ISA_ABA_Level_S [] [0|1]
  optional ISAABALevelSType isa_aba_level_s = 14;
  // ISA_AEB_TargetDecel_S [] [0|2.74]
  optional double isa_aeb_target_decel_s = 15;
  // ISA_Req_ESC_Ctrl_Veh_S [] [0|1]
  optional bool isa_req_esc_ctrl_veh_s = 16;
  // ISA_PCWLevelState [] [0|3]
  optional ISAPCWLevelStateType isa_pcw_level_state = 17;
  // Counter_3CB_S [] [0|15]
  optional int32 counter_3_cb_s = 18;
  // CheckSum3CB_S [] [0|255]
  optional int32 check_sum3_cb_s = 19;
}

message LEFT_BCM_0X3CD {
// Report Message
  enum TyrePositionSType {
    TYRE_POSITION_S_LFRONTTIRE = 0;
    TYRE_POSITION_S_RFRONTTIRE = 1;
    TYRE_POSITION_S_LREARTIRE = 2;
    TYRE_POSITION_S_RREARTIRE = 3;
    TYRE_POSITION_S_RESERVED_4 = 4;
    TYRE_POSITION_S_RESERVED_5 = 5;
    TYRE_POSITION_S_RESERVED_6 = 6;
    TYRE_POSITION_S_RESERVED_7 = 7;
    TYRE_POSITION_S_RESERVED_8 = 8;
    TYRE_POSITION_S_RESERVED_9 = 9;
    TYRE_POSITION_S_RESERVED_10 = 10;
    TYRE_POSITION_S_RESERVED_11 = 11;
    TYRE_POSITION_S_RESERVED_12 = 12;
    TYRE_POSITION_S_RESERVED_13 = 13;
    TYRE_POSITION_S_RESERVED_14 = 14;
  }
  enum BSDSysStatSType {
    BSD_SYS_STAT_S_NORMAL = 0;
    BSD_SYS_STAT_S_SYSTEMSELFCHECK = 1;
    BSD_SYS_STAT_S_SYSTEMSIGNALABNORMAL = 2;
    BSD_SYS_STAT_S_SYSTEMFAILURE = 3;
    BSD_SYS_STAT_S_RESERVED_4 = 4;
    BSD_SYS_STAT_S_RESERVED_5 = 5;
    BSD_SYS_STAT_S_RESERVED_6 = 6;
    BSD_SYS_STAT_S_RESERVED_7 = 7;
  }
  enum SingleTirePressStatusSType {
    SINGLE_TIRE_PRESS_STATUS_S_NORMAL = 0;
    SINGLE_TIRE_PRESS_STATUS_S_OVERVOLTAGERESERVED = 1;
    SINGLE_TIRE_PRESS_STATUS_S_UNDERVOLTAGE = 2;
    SINGLE_TIRE_PRESS_STATUS_S_RESERVED_3 = 3;
  }
  enum HeatingStatus3CDSType {
    HEATING_STATUS_3CD_S_OFF = 0;
    HEATING_STATUS_3CD_S_ON = 1;
    HEATING_STATUS_3CD_S_RESERVED_2 = 2;
    HEATING_STATUS_3CD_S_INVALID = 3;
  }
  enum HeatingFailureStatusSType {
    HEATING_FAILURE_STATUS_S_NORMAL = 0;
    HEATING_FAILURE_STATUS_S_FAULT = 1;
    HEATING_FAILURE_STATUS_S_RESERVED_2 = 2;
    HEATING_FAILURE_STATUS_S_INVALID = 3;
  }
  // Tyre_Position_S [w/m2] [0|15]
  optional TyrePositionSType tyre_position_s = 1;
  // Single_Tire_Status_Signal_S [w/m2] [0|1]
  optional bool single_tire_status_signal_s = 2;
  // BSD_Sys_Stat_S [] [0|7]
  optional BSDSysStatSType bsd_sys_stat_s = 3;
  // Single_Tire_Press_Status_S [] [0|3]
  optional SingleTirePressStatusSType single_tire_press_status_s = 4;
  // Single_Tire_Press_Value_S [kpa] [0|4095]
  optional int32 single_tire_press_value_s = 5;
  // Single_Tire_Temperature_Value_S [℃] [-40|369.5]
  optional double single_tire_temperature_value_s = 6;
  // Heating_Status_3CD_S [] [0|3]
  optional HeatingStatus3CDSType heating_status_3_cd_s = 7;
  // Heating_Failure_Status_S [] [0|3]
  optional HeatingFailureStatusSType heating_failure_status_s = 8;
  // System_Underpressure_Status_S [] [0|1]
  optional bool system_underpressure_status_s = 9;
}

message LEFT_BCM_0X3D9 {
// Report Message
  // Child_ID_3D9_S [] [0|255]
  optional int32 child_id_3_d9_s = 1;
  // Total_Distance_3D9s5_S [km] [0|9999999.9]
  optional double total_distance_3_d9s5_s = 2;
}

message MEDIA_0X3E3 {
// Report Message
  enum MediaFactoryDefaultSType {
    MEDIA_FACTORY_DEFAULT_S_INVALID = 0;
    MEDIA_FACTORY_DEFAULT_S_CONFIRM = 1;
    MEDIA_FACTORY_DEFAULT_S_CANCEL = 2;
    MEDIA_FACTORY_DEFAULT_S_RESERVED_3 = 3;
  }
  // Media_Factory_Default_S [] [0|3]
  optional MediaFactoryDefaultSType media_factory_default_s = 1;
  // SfAsist_Restr_Dflt_Log_S [] [0|1]
  optional bool sf_asist_restr_dflt_log_s = 2;
  // Drv_Asis_St_RstrDflt_Flg_S [] [0|1]
  optional bool drv_asis_st_rstr_dflt_flg_s = 3;
  // Roa_Asis_St_RstrDflt_Flg_S [] [0|1]
  optional bool roa_asis_st_rstr_dflt_flg_s = 4;
}

message RIGHT_BCM_0X404 {
// Report Message
  // Temperature_Conversion_S [] [0|1]
  optional bool temperature_conversion_s = 1;
  // ACHMC_Outside_Temperature_S [℃] [-40|50]
  optional int32 achmc_outside_temperature_s = 2;
  // Counter_0x404_S [] [0|15]
  optional int32 counter_0x404_s = 3;
}

message LEFT_BCM_0X407 {
// Report Message
  enum FLDoorLockSttus407SType {
    FL_DOOR_LOCK_STTUS407_S_INVALID = 0;
    FL_DOOR_LOCK_STTUS407_S_UNLOCKEDSTATE = 1;
    FL_DOOR_LOCK_STTUS407_S_LOCKEDSTATE = 2;
    FL_DOOR_LOCK_STTUS407_S_RESERVED_3 = 3;
  }
  enum FRDoorLockStatus407SType {
    FR_DOOR_LOCK_STATUS_407_S_INVALID = 0;
    FR_DOOR_LOCK_STATUS_407_S_UNLOCKEDSTATE = 1;
    FR_DOOR_LOCK_STATUS_407_S_LOCKEDSTATE = 2;
    FR_DOOR_LOCK_STATUS_407_S_RESERVED_3 = 3;
  }
  enum RLDoorLockStatusSType {
    RL_DOOR_LOCK_STATUS_S_INVALID = 0;
    RL_DOOR_LOCK_STATUS_S_UNLOCKEDSTATE = 1;
    RL_DOOR_LOCK_STATUS_S_LOCKEDSTATE = 2;
    RL_DOOR_LOCK_STATUS_S_RESERVED_3 = 3;
  }
  enum RRDoorLockStatus407SType {
    RR_DOOR_LOCK_STATUS_407_S_INVALID = 0;
    RR_DOOR_LOCK_STATUS_407_S_UNLOCKEDSTATE = 1;
    RR_DOOR_LOCK_STATUS_407_S_LOCKEDSTATE = 2;
    RR_DOOR_LOCK_STATUS_407_S_RESERVED_3 = 3;
  }
  enum BackDoorLockStatus407SType {
    BACK_DOOR_LOCK_STATUS_407_S_INVALID = 0;
    BACK_DOOR_LOCK_STATUS_407_S_UNLOCKEDSTATE = 1;
    BACK_DOOR_LOCK_STATUS_407_S_LOCKEDSTATE = 2;
    BACK_DOOR_LOCK_STATUS_407_S_RESERVED_3 = 3;
  }
  enum FldigExtrrMrorsExpandSType {
    FLDIG_EXTRR_MRORS_EXPAND_S_NOACTION = 0;
    FLDIG_EXTRR_MRORS_EXPAND_S_FOLDED = 1;
    FLDIG_EXTRR_MRORS_EXPAND_S_EXPANDED = 2;
    FLDIG_EXTRR_MRORS_EXPAND_S_RESERVED_3 = 3;
  }
  // FL_Door_Lock_Sttus407_S [] [0|3]
  optional FLDoorLockSttus407SType fl_door_lock_sttus407_s = 1;
  // FR_Door_Lock_Status_407_S [] [0|3]
  optional FRDoorLockStatus407SType fr_door_lock_status_407_s = 2;
  // RL_Door_Lock_Status_S [] [0|3]
  optional RLDoorLockStatusSType rl_door_lock_status_s = 3;
  // RR_Door_Lock_Status_407_S [] [0|3]
  optional RRDoorLockStatus407SType rr_door_lock_status_407_s = 4;
  // Back_Door_Lock_Status_407_S [] [0|3]
  optional BackDoorLockStatus407SType back_door_lock_status_407_s = 5;
  // Fldig_Extrr_Mrors_Expand_S [] [0|3]
  optional FldigExtrrMrorsExpandSType fldig_extrr_mrors_expand_s = 6;
}

message MEDIA_0X409 {
// Report Message
  enum SentinelModeNeed409SType {
    SENTINEL_MODE_NEED_409_S_INVALID = 0;
    SENTINEL_MODE_NEED_409_S_ENTER = 1;
    SENTINEL_MODE_NEED_409_S_EXIT = 2;
    SENTINEL_MODE_NEED_409_S_RESERVED_3 = 3;
  }
  // Medium_0x409_ChilD_ID_S [] [0|255]
  optional int32 medium_0x409_chil_d_id_s = 1;
  // PAD_Sentry_Mode_Working_State_S [] [0|3]
  optional int32 pad_sentry_mode_working_state_s = 2;
  // Sentinel_Mode_Need_409_S [] [0|3]
  optional SentinelModeNeed409SType sentinel_mode_need_409_s = 3;
}

message VCU_0X410 {
// Report Message
  enum VCUAMAPActive410SType {
    VCU_AMAP_ACTIVE_410_S_NOACT = 0;
    VCU_AMAP_ACTIVE_410_S_CPLLY = 1;
    VCU_AMAP_ACTIVE_410_S_PARTIAL = 2;
    VCU_AMAP_ACTIVE_410_S_SUSPEND = 3;
  }
  // VCU_AMAP_Active_410_S [] [0|3]
  optional VCUAMAPActive410SType vcu_amap_active_410_s = 1;
  // VCU_AMAP_Available_410_S [] [0|1]
  optional bool vcu_amap_available_410_s = 2;
  // CheckSum_410_s [] [0|255]
  optional int32 check_sum_410_s = 3;
}

message ADS_0X418 {
// Control Message
  enum RCRRSysStatusSType {
    RCR_R_SYS_STATUS_S_OFF = 0;
    RCR_R_SYS_STATUS_S_ON = 1;
    RCR_R_SYS_STATUS_S_SDAERROR = 2;
    RCR_R_SYS_STATUS_S_SYSTEMERROR = 3;
  }
  enum RBSDWarningLeftSType {
    R_BSD_WARNING_LEFT_S_NOWARNING = 0;
    R_BSD_WARNING_LEFT_S_WARNINGLEVEL1 = 1;
    R_BSD_WARNING_LEFT_S_WARNINGLEVEL2 = 2;
    R_BSD_WARNING_LEFT_S_RESERVED_3 = 3;
  }
  enum RBSDWarningRightSType {
    R_BSD_WARNING_RIGHT_S_NOWARNING = 0;
    R_BSD_WARNING_RIGHT_S_WARNINGLEVEL1 = 1;
    R_BSD_WARNING_RIGHT_S_WARNINGLEVEL2 = 2;
    R_BSD_WARNING_RIGHT_S_RESERVED_3 = 3;
  }
  enum RBSDStatusSType {
    R_BSD_STATUS_S_OFF = 0;
    R_BSD_STATUS_S_PASSIVE = 1;
    R_BSD_STATUS_S_ACTIVE = 2;
    R_BSD_STATUS_S_FAULT = 3;
  }
  enum RightRadarRCTAStatusSType {
    RIGHT_RADAR_RCTA_STATUS_S_OFF = 0;
    RIGHT_RADAR_RCTA_STATUS_S_PASSIVE = 1;
    RIGHT_RADAR_RCTA_STATUS_S_ACTIVE = 2;
    RIGHT_RADAR_RCTA_STATUS_S_FAULT = 3;
  }
  enum RightRadarRCWStatusSType {
    RIGHT_RADAR_RCW_STATUS_S_OFF = 0;
    RIGHT_RADAR_RCW_STATUS_S_PASSIVE = 1;
    RIGHT_RADAR_RCW_STATUS_S_ACTIVE = 2;
    RIGHT_RADAR_RCW_STATUS_S_FAULT = 3;
  }
  enum RightRadarDOWStatusSType {
    RIGHT_RADAR_DOW_STATUS_S_OFF = 0;
    RIGHT_RADAR_DOW_STATUS_S_PASSIVE = 1;
    RIGHT_RADAR_DOW_STATUS_S_ACTIVE = 2;
    RIGHT_RADAR_DOW_STATUS_S_FAULT = 3;
  }
  enum RRadarDOWWarningLeftSType {
    RRADAR_DOW_WARNING_LEFT_S_NOWARNING = 0;
    RRADAR_DOW_WARNING_LEFT_S_WARNINGLEVEL1 = 1;
    RRADAR_DOW_WARNING_LEFT_S_WARNINGLEVEL2 = 2;
    RRADAR_DOW_WARNING_LEFT_S_RESERVED_3 = 3;
  }
  enum RRadarDOWWarningRightSType {
    RRADAR_DOW_WARNINGRIGHT_S_NOWARNING = 0;
    RRADAR_DOW_WARNINGRIGHT_S_WARNINGLEVEL1 = 1;
    RRADAR_DOW_WARNINGRIGHT_S_WARNINGLEVEL2 = 2;
    RRADAR_DOW_WARNINGRIGHT_S_RESERVED_3 = 3;
  }
  enum RightRadarRCTBStatusSType {
    RIGHT_RADAR_RCTB_STATUS_S_OFF = 0;
    RIGHT_RADAR_RCTB_STATUS_S_PASSIVE = 1;
    RIGHT_RADAR_RCTB_STATUS_S_ACTIVE = 2;
    RIGHT_RADAR_RCTB_STATUS_S_FAULT = 3;
  }
  enum RightRadarRCTBBrakingReqSType {
    RIGHT_RADAR_RCTB_BRAKING_REQ_S_INVALID = 0;
    RIGHT_RADAR_RCTB_BRAKING_REQ_S_NODEMAND = 1;
    RIGHT_RADAR_RCTB_BRAKING_REQ_S_DEMAND = 2;
    RIGHT_RADAR_RCTB_BRAKING_REQ_S_RESERVE = 3;
  }
  enum RearradarRCTBWaringType {
    REARRADAR_RCTB_WARING_WARINGOFF = 0;
    REARRADAR_RCTB_WARING_WARING_LEFTON = 1;
    REARRADAR_RCTB_WARING_WARING_RIGHTON = 2;
    REARRADAR_RCTB_WARING_WARING_LEFT_RIGHTON = 3;
  }
  // RCR_R_Sys_Status_S [] [0|3]
  optional RCRRSysStatusSType rcr_r_sys_status_s = 1;
  // ELKA_Warning_Left_S [] [0|1]
  optional bool elka_warning_left_s = 2;
  // ELKA_Warn_Right_S [] [0|1]
  optional bool elka_warn_right_s = 3;
  // R_BSD_Warning_Left_S [] [0|3]
  optional RBSDWarningLeftSType r_bsd_warning_left_s = 4;
  // R_BSD_Warning_Right_S [] [0|3]
  optional RBSDWarningRightSType r_bsd_warning_right_s = 5;
  // RRadar_RCTA_Warning_Left_S [] [0|1]
  optional bool r_radar_rcta_warning_left_s = 6;
  // Radar_RCTA_Warn_Right_S [] [0|1]
  optional bool radar_rcta_warn_right_s = 7;
  // RCW_Warning_S [] [0|1]
  optional bool rcw_warning_s = 8;
  // R_BSD_Status_S [] [0|3]
  optional RBSDStatusSType r_bsd_status_s = 9;
  // Right_Radar_RCTA_Status_S [] [0|3]
  optional RightRadarRCTAStatusSType right_radar_rcta_status_s = 10;
  // Right_Radar_RCW_Status_S [] [0|3]
  optional RightRadarRCWStatusSType right_radar_rcw_status_s = 11;
  // Right_Radar_DOW_Status_S [] [0|3]
  optional RightRadarDOWStatusSType right_radar_dow_status_s = 12;
  // RRadar_DOW_Warning_Left_S [] [0|3]
  optional RRadarDOWWarningLeftSType r_radar_dow_warning_left_s = 13;
  // RRadar_DOW_WarningRight_S [] [0|3]
  optional RRadarDOWWarningRightSType r_radar_dow_warning_right_s = 14;
  // Right_Radar_RCTB_Status_S [] [0|3]
  optional RightRadarRCTBStatusSType right_radar_rctb_status_s = 15;
  // Right_Radar_RCTB_Braking_Req_S [] [0|3]
  optional RightRadarRCTBBrakingReqSType right_radar_rctb_braking_req_s = 16;
  // RCTBTargetDecel_S [m/s??] [-10|2.74]
  optional double rctb_target_decel_s = 17;
  // Rearradar_RCTB_Waring [] [0|3]
  optional RearradarRCTBWaringType rearradar_rctb_waring = 18;
  // Counter_418_S [] [0|15]
  optional int32 counter_418_s = 19;
  // Checksum_418_S [] [0|255]
  optional int32 checksum_418_s = 20;
}

message RIGHT_BCM_0X41A {
// Report Message
  enum SkylightsUninitializedSType {
    SKYLIGHTS_UNINITIALIZED_S_INVALID = 0;
    SKYLIGHTS_UNINITIALIZED_S_INITIALIZED = 1;
    SKYLIGHTS_UNINITIALIZED_S_UNINITIALIZED = 2;
    SKYLIGHTS_UNINITIALIZED_S_RESERVED_3 = 3;
  }
  enum SunsdUninitializedSType {
    SUNSD_UNINITIALIZED_S_INVALID = 0;
    SUNSD_UNINITIALIZED_S_INITIALIZED = 1;
    SUNSD_UNINITIALIZED_S_UNINITIALIZED = 2;
    SUNSD_UNINITIALIZED_S_RESERVED_3 = 3;
  }
  enum SkylightsUnClsdSType {
    SKYLIGHTS_UNCLSD_S_INVALID = 0;
    SKYLIGHTS_UNCLSD_S_THESUNROOFISTURNOFFDP = 1;
    SKYLIGHTS_UNCLSD_S_THESUNROOFISNOTTURNOFFD = 2;
    SKYLIGHTS_UNCLSD_S_RESERVED_3 = 3;
  }
  enum SunshadeClosingStatusSType {
    SUNSHADE_CLOSING_STATUS_S_INVALID = 0;
    SUNSHADE_CLOSING_STATUS_S_THESUNSHADEISTURNOFFD = 1;
    SUNSHADE_CLOSING_STATUS_S_THESUNSHADEISNOTTURNOFFD = 2;
    SUNSHADE_CLOSING_STATUS_S_RESERVED_3 = 3;
  }
  enum SunrfCurrentActStatsSType {
    SUNRF_CURRENT_ACT_STATS_S_INVALID = 0;
    SUNRF_CURRENT_ACT_STATS_S_STOP = 1;
    SUNRF_CURRENT_ACT_STATS_S_SUNROOFUPWARDTILT = 2;
    SUNRF_CURRENT_ACT_STATS_S_SUNROOFTURNON = 3;
    SUNRF_CURRENT_ACT_STATS_S_SUNROOFTURNOFFD = 4;
    SUNRF_CURRENT_ACT_STATS_S_SUNROOFANTIPINCH = 5;
    SUNRF_CURRENT_ACT_STATS_S_RESERVED_6 = 6;
    SUNRF_CURRENT_ACT_STATS_S_RESERVED_7 = 7;
  }
  enum SunsdCurrentActStatsSType {
    SUNSD_CURRENT_ACT_STATS_S_INVALID = 0;
    SUNSD_CURRENT_ACT_STATS_S_STOP = 1;
    SUNSD_CURRENT_ACT_STATS_S_SUNSHADETURNON = 2;
    SUNSD_CURRENT_ACT_STATS_S_SUNSHADETURNOFFD = 3;
    SUNSD_CURRENT_ACT_STATS_S_SUNSHADEANTIPINCHREVERSE = 4;
    SUNSD_CURRENT_ACT_STATS_S_RESERVED_5 = 5;
    SUNSD_CURRENT_ACT_STATS_S_RESERVED_6 = 6;
    SUNSD_CURRENT_ACT_STATS_S_RESERVED_7 = 7;
  }
  enum SunrfRmtClsSType {
    SUNRF_RMT_CLS_S_INVALID = 0;
    SUNRF_RMT_CLS_S_CLOSINGTHEWINDOWFAILED = 1;
    SUNRF_RMT_CLS_S_CLOSINGTHEWINDOWSUCCESS = 2;
    SUNRF_RMT_CLS_S_RESERVED_3 = 3;
  }
  enum SunrfSunsdConfigSType {
    SUNRF_SUNSD_CONFIG_S_INVALID = 0;
    SUNRF_SUNSD_CONFIG_S_LIFTINGSUNROOFANDSWITHAP = 1;
    SUNRF_SUNSD_CONFIG_S_PANORAMICSUNBLINDWITHAP = 2;
    SUNRF_SUNSD_CONFIG_S_BUILTINSMALLSKYLIGHTWITHAP = 3;
    SUNRF_SUNSD_CONFIG_S_BUILTINSMALLSKYLIGHTNOAP = 4;
    SUNRF_SUNSD_CONFIG_S_NOSUNROOF = 5;
    SUNRF_SUNSD_CONFIG_S_LIFTINGSRSUNSHADEWITHAP = 6;
    SUNRF_SUNSD_CONFIG_S_LIFTINGSANDSRSWITHAP = 7;
  }
  // Sunrf_Position_Percent_41A_S [%] [0|255]
  optional int32 sunrf_position_percent_41_a_s = 1;
  // SunShade_Pos_Perc_41A_S [%] [0|255]
  optional int32 sun_shade_pos_perc_41_a_s = 2;
  // Skylights_Uninitialized_S [] [0|3]
  optional SkylightsUninitializedSType skylights_uninitialized_s = 3;
  // Sunsd_Uninitialized_S [] [0|3]
  optional SunsdUninitializedSType sunsd_uninitialized_s = 4;
  // Skylights_UnClsd_S [] [0|3]
  optional SkylightsUnClsdSType skylights_un_clsd_s = 5;
  // Sunshade_Closing_Status_S [] [0|3]
  optional SunshadeClosingStatusSType sunshade_closing_status_s = 6;
  // Sunrf_Current_Act_Stats_S [] [0|7]
  optional SunrfCurrentActStatsSType sunrf_current_act_stats_s = 7;
  // Sunsd_Current_Act_Stats_S [] [0|7]
  optional SunsdCurrentActStatsSType sunsd_current_act_stats_s = 8;
  // Sunrf_Rmt_Cls_S [] [0|3]
  optional SunrfRmtClsSType sunrf_rmt_cls_s = 9;
  // Sunrf_Sunsd_Config_S [] [0|7]
  optional SunrfSunsdConfigSType sunrf_sunsd_config_s = 10;
}

message MEDIA_0X43E {
// Report Message
  enum navigationstatusType {
    NAVIGATION_STATUS_NULL = 0;
    NAVIGATION_STATUS_NON_NAVIGATION = 1;
    NAVIGATION_STATUS_NAVIGATION = 2;
    NAVIGATION_STATUS_LODING = 3;
    NAVIGATION_STATUS_CLOSE = 4;
    NAVIGATION_STATUS_ANALOGNAVIGATION = 5;
    NAVIGATION_STATUS_RESERVED_6 = 6;
    NAVIGATION_STATUS_RESERVED_7 = 7;
  }
  // navigation_status [] [0|7]
  optional navigationstatusType navigation_status = 1;
}

message MEDIA_0X43F {
// Report Message
  enum AVMappstatusSType {
    AVM_APP_STATUS_S_UNOPENED = 0;
    AVM_APP_STATUS_S_RUNINTHEFOREGROUND = 1;
    AVM_APP_STATUS_S_RUNINTHEFOREGROUND_REPEAT = 2;
    AVM_APP_STATUS_S_RESERVED_3 = 3;
  }
  // Medium_0x43F_ChilD_ID_S [] [0|255]
  optional int32 medium_0x43_f_chil_d_id_s = 1;
  // Distance_ahead1 [] [0|16777215]
  optional int32 distance_ahead1 = 2;
  // Navigation_guide_informat1_new_ [] [0|16777215]
  optional int32 navigation_guide_informat1_new_ = 3;
  // Distance_ahead2 [m] [0|16777215]
  optional int32 distance_ahead2 = 4;
  // Navigation_guide_informat2_new_ [] [0|16777215]
  optional int32 navigation_guide_informat2_new_ = 5;
  // AVM_app_status_S [] [0|3]
  optional AVMappstatusSType avm_app_status_s = 6;
}

message BMS_0X444 {
// Report Message
  // BMC_SOC_S [%] [0|100]
  optional int32 bmc_soc_s = 1;
  // CheckSum444_S [] [0|255]
  optional int32 check_sum444_s = 2;
}

message BMS_0X445 {
// Report Message
  // EV_Endurance_Mileage445_S [Km] [0E-008|255.00000000]
  optional int32 ev_endurance_mileage445_s = 1;
  // CheckSum445_S [] [0E-008|255.00000000]
  optional int32 check_sum445_s = 2;
}

message ADS_0X453 {
// Control Message
  enum BSDLCWGrayStsType {
    BSD_LCW_GRAY_STS_INVALID = 0;
    BSD_LCW_GRAY_STS_GRAY = 1;
    BSD_LCW_GRAY_STS_RESERVED_2 = 2;
    BSD_LCW_GRAY_STS_RESERVED_3 = 3;
  }
  enum DOWGrayStsType {
    DOW_GRAY_STS_INVALID = 0;
    DOW_GRAY_STS_GRAY = 1;
    DOW_GRAY_STS_RESERVED_2 = 2;
    DOW_GRAY_STS_RESERVED_3 = 3;
  }
  enum RCTAGrayStsType {
    RCTA_GRAY_STS_INVALID = 0;
    RCTA_GRAY_STS_GRAY = 1;
    RCTA_GRAY_STS_RESERVED_2 = 2;
    RCTA_GRAY_STS_RESERVED_3 = 3;
  }
  enum RCTBGrayStsType {
    RCTB_GRAY_STS_INVALID = 0;
    RCTB_GRAY_STS_GRAY = 1;
    RCTB_GRAY_STS_RESERVED_2 = 2;
    RCTB_GRAY_STS_RESERVED_3 = 3;
  }
  enum RCWGrayStsType {
    RCW_GRAY_STS_INVALID = 0;
    RCW_GRAY_STS_GRAY = 1;
    RCW_GRAY_STS_RESERVED_2 = 2;
    RCW_GRAY_STS_RESERVED_3 = 3;
  }
  enum RCTARCTBStatusSType {
    RCTA_RCTB_STATUS_S_INVALID = 0;
    RCTA_RCTB_STATUS_S_RCTA_OFF_RCTB_OFF = 1;
    RCTA_RCTB_STATUS_S_RCTA_ON_RCTB_OFF = 2;
    RCTA_RCTB_STATUS_S_RCTA_OFF_RCTB_ON = 3;
    RCTA_RCTB_STATUS_S_RCTA_ON_RCTB_ON = 4;
    RCTA_RCTB_STATUS_S_FAULT = 5;
  }
  enum BSDLCWAudioStatusSType {
    BSD_LCW_AUDIO_STATUS_S_INVALID = 0;
    BSD_LCW_AUDIO_STATUS_S_BSD_LCW__OFF = 1;
    BSD_LCW_AUDIO_STATUS_S_ONLY_VISUAL = 2;
    BSD_LCW_AUDIO_STATUS_S_VISUAL_AUDIO = 3;
    BSD_LCW_AUDIO_STATUS_S_FUALT = 4;
  }
  // RCTA_Assemble_Status_S [] [0|1]
  optional bool rcta_assemble_status_s = 1;
  // RCTB_Assemble_Status_S [] [0|1]
  optional bool rctb_assemble_status_s = 2;
  // RCW_Assemble_Status_S [] [0|1]
  optional bool rcw_assemble_status_s = 3;
  // DOW_Assemble_Status_S [] [0|1]
  optional bool dow_assemble_status_s = 4;
  // BSD_Assemble_Status_S [] [0|1]
  optional bool bsd_assemble_status_s = 5;
  // BSD_LCW_Gray_Sts [] [0|3]
  optional BSDLCWGrayStsType bsd_lcw_gray_sts = 6;
  // DOW_Gray_Sts [] [0|3]
  optional DOWGrayStsType dow_gray_sts = 7;
  // RCTA_Gray_Sts [] [0|3]
  optional RCTAGrayStsType rcta_gray_sts = 8;
  // RCTB_Gray_Sts [] [0|3]
  optional RCTBGrayStsType rctb_gray_sts = 9;
  // RCW_Gray_Sts [] [0|3]
  optional RCWGrayStsType rcw_gray_sts = 10;
  // RCTA_RCTB_Status_S [] [0|7]
  optional RCTARCTBStatusSType rcta_rctb_status_s = 11;
  // BSD_LCW_Audio_Status_S [] [0|7]
  optional BSDLCWAudioStatusSType bsd_lcw_audio_status_s = 12;
}

message ADS_0X454 {
// Control Message
  enum ADSplatformType {
    ADS_PLATFORM_INVALID = 0;
    ADS_PLATFORM_MDC610 = 1;
    ADS_PLATFORM_BAIDUTDA4 = 2;
    ADS_PLATFORM_NEUSOFTJ5 = 3;
    ADS_PLATFORM_CONTINENTALJ5 = 4;
    ADS_PLATFORM_VEONEER = 5;
    ADS_PLATFORM_DJI = 6;
    ADS_PLATFORM_HOLO = 7;
    ADS_PLATFORM_IDC = 8;
    ADS_PLATFORM_FREETECH = 9;
    ADS_PLATFORM_APTIV = 10;
    ADS_PLATFORM_HIKVISION = 11;
    ADS_PLATFORM_WUBU = 12;
  }
  enum ADSSystemStatusSType {
    ADS_SYSTEM_STATUS_S_NORMAL = 0;
    ADS_SYSTEM_STATUS_S_FIVER1VPLATFORM = 1;
    ADS_SYSTEM_STATUS_S_FIVER13VPLATFORM = 2;
    ADS_SYSTEM_STATUS_S_FIVER10VPLATFORM = 3;
    ADS_SYSTEM_STATUS_S_THREER1VPLATFORM = 4;
    ADS_SYSTEM_STATUS_S_FIVER5V = 5;
    ADS_SYSTEM_STATUS_S_DIPILOT30 = 6;
    ADS_SYSTEM_STATUS_S_RESERVED_7 = 7;
    ADS_SYSTEM_STATUS_S_RESERVED_8 = 8;
    ADS_SYSTEM_STATUS_S_RESERVED_9 = 9;
    ADS_SYSTEM_STATUS_S_RESERVED_10 = 10;
    ADS_SYSTEM_STATUS_S_RESERVED_11 = 11;
    ADS_SYSTEM_STATUS_S_RESERVED_12 = 12;
    ADS_SYSTEM_STATUS_S_RESERVED_13 = 13;
    ADS_SYSTEM_STATUS_S_RESERVED_14 = 14;
    ADS_SYSTEM_STATUS_S_RESERVED_15 = 15;
  }
  enum TSRLitSpdChgSwitchStatusSType {
    TSR_LITSPDCHGSWITCH_STATUS_S__INVALID = 0;
    TSR_LITSPDCHGSWITCH_STATUS_S__NO = 1;
    TSR_LITSPDCHGSWITCH_STATUS_S__YES = 2;
    TSR_LITSPDCHGSWITCH_STATUS_S__RESERVED_3 = 3;
  }
  enum AVCresulutionType {
    AVC_RESULUTION_INVAILD = 0;
    AVC_RESULUTION_RESOLUTION_3840_MULTIPLY_1200 = 1;
    AVC_RESULUTION_RESOLUTION_3840_MULTIPLY_1300 = 2;
    AVC_RESULUTION_RESERVED_3 = 3;
    AVC_RESULUTION_RESERVED_4 = 4;
    AVC_RESULUTION_RESERVED_5 = 5;
    AVC_RESULUTION_RESERVED_6 = 6;
    AVC_RESULUTION_RESERVED_7 = 7;
  }
  enum DVCresulutionType {
    DVC_RESULUTION_INVAILD = 0;
    DVC_RESULUTION_RESOLUTION_2640_MULTIPLY_1488_4M = 1;
    DVC_RESULUTION_RESOLUTION_1920_MULTIPLY_1080_2M = 2;
    DVC_RESULUTION_RESOLUTION_2880_MULTIPLY_1620_5M = 3;
    DVC_RESULUTION_RESOLUTION_3840_MULTIPLY_2160_8M = 4;
    DVC_RESULUTION_RESERVED_5 = 5;
    DVC_RESULUTION_RESERVED_6 = 6;
    DVC_RESULUTION_RESERVED_7 = 7;
  }
  enum AVCdatatypeType {
    AVC_DATA_TYPE_INVAILD = 0;
    AVC_DATA_TYPE_YUV422 = 1;
    AVC_DATA_TYPE_RESERVED_2 = 2;
    AVC_DATA_TYPE_RESERVED_3 = 3;
  }
  enum AVMcamsensorType {
    AVM_CAM_SENSOR_INVAILD = 0;
    AVM_CAM_SENSOR_OV_X3D = 1;
    AVM_CAM_SENSOR_SONY_031 = 2;
    AVM_CAM_SENSOR_RESERVED_3 = 3;
  }
  enum AVCFPSType {
    AVC_FPS_INVAILD = 0;
    AVC_FPS_THIRTY = 1;
    AVC_FPS_RESERVED_2 = 2;
    AVC_FPS_RESERVED_3 = 3;
    AVC_FPS_RESERVED_4 = 4;
    AVC_FPS_RESERVED_5 = 5;
    AVC_FPS_RESERVED_6 = 6;
    AVC_FPS_RESERVED_7 = 7;
  }
  enum DVCFPSType {
    DVC_FPS_INVAILD = 0;
    DVC_FPS_THIRTY = 1;
    DVC_FPS_TWENTY_FIVE = 2;
    DVC_FPS_RESERVED_3 = 3;
    DVC_FPS_RESERVED_4 = 4;
    DVC_FPS_RESERVED_5 = 5;
    DVC_FPS_RESERVED_6 = 6;
    DVC_FPS_RESERVED_7 = 7;
  }
  enum ADSPlatformtypeType {
    ADS_PLATFORM_TYPE_INIT = 0;
    ADS_PLATFORM_TYPE_NON_DOMAINCTRLLERPLATFORM = 1;
    ADS_PLATFORM_TYPE_DOMAINCTRLLERPLATFORM = 2;
    ADS_PLATFORM_TYPE_RESERVED_3 = 3;
  }
  enum DVCdatatypeType {
    DVC_DATA_TYPE_INVALID = 0;
    DVC_DATA_TYPE_RGB888 = 1;
    DVC_DATA_TYPE_YUV422 = 2;
    DVC_DATA_TYPE_RAW8 = 3;
    DVC_DATA_TYPE_RAW10 = 4;
    DVC_DATA_TYPE_RAW12 = 5;
    DVC_DATA_TYPE_RESERVED_6 = 6;
    DVC_DATA_TYPE_RESERVED_7 = 7;
    DVC_DATA_TYPE_RESERVED_8 = 8;
    DVC_DATA_TYPE_RESERVED_9 = 9;
    DVC_DATA_TYPE_RESERVED_10 = 10;
    DVC_DATA_TYPE_RESERVED_11 = 11;
    DVC_DATA_TYPE_RESERVED_12 = 12;
    DVC_DATA_TYPE_RESERVED_13 = 13;
    DVC_DATA_TYPE_RESERVED_14 = 14;
    DVC_DATA_TYPE_RESERVED_15 = 15;
  }
  enum AMAPSupportedSType {
    AMAP_SUPPORTED_S_INVALID = 0;
    AMAP_SUPPORTED_S_NOTSUPPORT = 1;
    AMAP_SUPPORTED_S_SUPPORT = 2;
    AMAP_SUPPORTED_S_REVERSED = 3;
  }
  enum UNPValidPeriodSType {
    UNP_VALIDPERIOD_S_INVALID = 0;
    UNP_VALIDPERIOD_S_NO = 1;
    UNP_VALIDPERIOD_S_YES = 2;
    UNP_VALIDPERIOD_S_RESERVED_3 = 3;
  }
  enum E2EValidPeriodSType {
    E2E_VALIDPERIOD_S_INVALID = 0;
    E2E_VALIDPERIOD_S_NO = 1;
    E2E_VALIDPERIOD_S_YES = 2;
    E2E_VALIDPERIOD_S_RESERVED_3 = 3;
  }
  enum HNPValidPeriodSType {
    HNP_VALIDPERIOD_S_INVALID = 0;
    HNP_VALIDPERIOD_S_NO = 1;
    HNP_VALIDPERIOD_S_YES = 2;
    HNP_VALIDPERIOD_S_RESERVED_3 = 3;
  }
  enum AVP10ValidPeriodSType {
    AVP10_VALIDPERIOD_S_INVALID = 0;
    AVP10_VALIDPERIOD_S_NO = 1;
    AVP10_VALIDPERIOD_S_YES = 2;
    AVP10_VALIDPERIOD_S_RESERVED_3 = 3;
  }
  enum AVP20ValidPeriodSType {
    AVP20_VALIDPERIOD_S_INVALID = 0;
    AVP20_VALIDPERIOD_S_NO = 1;
    AVP20_VALIDPERIOD_S_YES = 2;
    AVP20_VALIDPERIOD_S_RESERVED_3 = 3;
  }
  enum ISAWarningAssembleStatusSType {
    ISA_WARNING_ASSEMBLE_STATUS_S_INVALID = 0;
    ISA_WARNING_ASSEMBLE_STATUS_S_NOTSUPPORT = 1;
    ISA_WARNING_ASSEMBLE_STATUS_S_SUPPORT = 2;
    ISA_WARNING_ASSEMBLE_STATUS_S_REVERSED = 3;
  }
  enum ISABrakeAssembleStatusSType {
    ISA_BRAKE_ASSEMBLE_STATUS_S_INVALID = 0;
    ISA_BRAKE_ASSEMBLE_STATUS_S_NOTSUPPORT = 1;
    ISA_BRAKE_ASSEMBLE_STATUS_S_SUPPORT = 2;
    ISA_BRAKE_ASSEMBLE_STATUS_S_REVERSED = 3;
  }
  enum ISLCconfirmAssembleStatusSType {
    ISLC_CONFIRM_ASSEMBLE_STATUS_S_INVALID = 0;
    ISLC_CONFIRM_ASSEMBLE_STATUS_S_NO = 1;
    ISLC_CONFIRM_ASSEMBLE_STATUS_S_YES = 2;
    ISLC_CONFIRM_ASSEMBLE_STATUS_S_REVERSED = 3;
  }
  enum NRPSupportedSType {
    NRP_SUPPORTED_S_INVALID = 0;
    NRP_SUPPORTED_S_NOTSUPPORTED = 1;
    NRP_SUPPORTED_S_SUPPORT = 2;
    NRP_SUPPORTED_S_REVERSE = 3;
  }
  enum ISAPADDisplayAssmStatusSType {
    ISA_PAD_DISPLAY_ASSM_STATUS_S_INVALID = 0;
    ISA_PAD_DISPLAY_ASSM_STATUS_S_NOTSUPPORTED = 1;
    ISA_PAD_DISPLAY_ASSM_STATUS_S_SUPPORT = 2;
    ISA_PAD_DISPLAY_ASSM_STATUS_S_REVERSE = 3;
  }
  enum TBASupportedSType {
    TBA_SUPPORTED_S_INVALID = 0;
    TBA_SUPPORTED_S_NOTSUPPORT = 1;
    TBA_SUPPORTED_S_SUPPORT = 2;
    TBA_SUPPORTED_S_RESERVED_3 = 3;
  }
  // ADS_platform [] [0|15]
  optional ADSplatformType ads_platform = 1;
  // ADS_System_Status_S [] [0|15]
  optional ADSSystemStatusSType ads_system_status_s = 2;
  // UNP_Assemble_Status_S [] [0|1]
  optional bool unp_assemble_status_s = 3;
  // CSW_Assemble_Status_S [] [0|1]
  optional bool csw_assemble_status_s = 4;
  // E2E_Assemble_Status_S [] [0|1]
  optional bool e2_e_assemble_status_s = 5;
  // Heat_Diss_Assemble_Status_S [] [0|1]
  optional bool heat_diss_assemble_status_s = 6;
  // DMS_Assemble_Status_S [] [0|1]
  optional bool dms_assemble_status_s = 7;
  // TSR_LitSpdChgSwitch_Status_S [] [0|3]
  optional TSRLitSpdChgSwitchStatusSType tsr_lit_spd_chg_switch_status_s_ = 8;
  // AVC_resulution [] [0|7]
  optional AVCresulutionType avc_resulution = 9;
  // DVC_resulution [] [0|7]
  optional DVCresulutionType dvc_resulution = 10;
  // AVC_data_type [] [0|3]
  optional AVCdatatypeType avc_data_type = 11;
  // AVM_cam_sensor [] [0|3]
  optional AVMcamsensorType avm_cam_sensor = 12;
  // AVC_FPS [] [0|7]
  optional AVCFPSType avc_fps = 13;
  // DVC_FPS [] [0|7]
  optional DVCFPSType dvc_fps = 14;
  // AVC_supported [] [0|1]
  optional bool avc_supported = 15;
  // DVC_supported [] [0|1]
  optional bool dvc_supported = 16;
  // ADS_Platform_type [] [0|3]
  optional ADSPlatformtypeType ads_platform_type = 17;
  // DVC_data_type [] [0|15]
  optional DVCdatatypeType dvc_data_type = 18;
  // AMAP_Supported_S [] [0|3]
  optional AMAPSupportedSType amap_supported_s = 19;
  // UNP_ValidPeriod_S [] [0|3]
  optional UNPValidPeriodSType unp_valid_period_s = 20;
  // E2E_ValidPeriod_S [] [0|3]
  optional E2EValidPeriodSType e2_e_valid_period_s = 21;
  // HNP_ValidPeriod_S [] [0|3]
  optional HNPValidPeriodSType hnp_valid_period_s = 22;
  // AVP10_ValidPeriod_S [] [0|3]
  optional AVP10ValidPeriodSType avp10_valid_period_s = 23;
  // AVP20_ValidPeriod_S [] [0|3]
  optional AVP20ValidPeriodSType avp20_valid_period_s = 24;
  // ISA_Warning_Assemble_Status_S [] [0|3]
  optional ISAWarningAssembleStatusSType isa_warning_assemble_status_s = 25;
  // ISA_Brake_Assemble_Status_S [] [0|3]
  optional ISABrakeAssembleStatusSType isa_brake_assemble_status_s = 26;
  // ISLC_confirm_Assemble_Status_S [] [0|3]
  optional ISLCconfirmAssembleStatusSType islc_confirm_assemble_status_s = 27;
  // NRP_Supported_S [] [0|3]
  optional NRPSupportedSType nrp_supported_s = 28;
  // ISA_PAD_Display_Assm_Status_S [] [0|3]
  optional ISAPADDisplayAssmStatusSType isa_pad_display_assm_status_s = 29;
  // TBA_Supported_S [] [0|3]
  optional TBASupportedSType tba_supported_s = 30;
}

message VCU_0X464 {
// Report Message
  // Child_ID_464_S1 [] [0|255]
  optional int32 child_id_464_s1 = 1;
  // Ecp_sts [] [0|1]
  optional bool ecp_sts = 2;
}

message LEFT_BCM_0X475 {
// Report Message
  enum WiperSpeedS1Type {
    WIPER_SPEED_S1_INVALID = 0;
    WIPER_SPEED_S1_STOP = 1;
    WIPER_SPEED_S1_SLOWSCRAPING = 2;
    WIPER_SPEED_S1_FASTSCRAPING = 3;
  }
  enum DragAndDropModeConfigSType {
    DRAG_AND_DROP_MODE_CONFIG_S_INVALID = 0;
    DRAG_AND_DROP_MODE_CONFIG_S_NO = 1;
    DRAG_AND_DROP_MODE_CONFIG_S_YES = 2;
    DRAG_AND_DROP_MODE_CONFIG_S_RESERVED_3 = 3;
  }
  // Wiper_Speed_S1 [] [0|3]
  optional WiperSpeedS1Type wiper_speed_s1 = 1;
  // Drag_And_Drop_Mode_Config_S [] [0|3]
  optional DragAndDropModeConfigSType drag_and_drop_mode_config_s = 2;
  // CheckSum475_S [] [0|255]
  optional int32 check_sum475_s = 3;
}

message REAR_BCM_0X479 {
// Report Message
  enum TheCurrentStateOfTheTailSType {
    THE_CURRENT_STATE_OF_THE_TAIL_S_INVALID = 0;
    THE_CURRENT_STATE_OF_THE_TAIL_S_STOP = 1;
    THE_CURRENT_STATE_OF_THE_TAIL_S_OPEN = 2;
    THE_CURRENT_STATE_OF_THE_TAIL_S_CLOSED = 3;
    THE_CURRENT_STATE_OF_THE_TAIL_S_ANTICLAMPREVERSAL = 4;
    THE_CURRENT_STATE_OF_THE_TAIL_S_RESERVED_5 = 5;
    THE_CURRENT_STATE_OF_THE_TAIL_S_RESERVED_6 = 6;
    THE_CURRENT_STATE_OF_THE_TAIL_S_RESERVED_7 = 7;
  }
  enum TailPositionFeedbackSType {
    TAIL_POSITION_FEEDBACK_S_INVALID = 0;
    TAIL_POSITION_FEEDBACK_S_FULLYOPEN = 1;
    TAIL_POSITION_FEEDBACK_S_FULLYCLOSED = 2;
    TAIL_POSITION_FEEDBACK_S_HALFOPEN = 3;
    TAIL_POSITION_FEEDBACK_S_RESERVED_4 = 4;
    TAIL_POSITION_FEEDBACK_S_RESERVED_5 = 5;
    TAIL_POSITION_FEEDBACK_S_RESERVED_6 = 6;
    TAIL_POSITION_FEEDBACK_S_RESERVED_7 = 7;
  }
  // The_Current_State_Of_The_Tail_S [] [0|7]
  optional TheCurrentStateOfTheTailSType the_current_state_of_the_tail_s = 1;
  // Tail_Motor_Thermal_Protect_S_S [] [0|1]
  optional bool tail_motor_thermal_protect_s_s = 2;
  // Tail_Position_Feedback_S [] [0|7]
  optional TailPositionFeedbackSType tail_position_feedback_s = 3;
}

message MSR_DRV_0X481 {
// Report Message
  enum DriverMotorSeatBeltStatusSType {
    DRIVER_MOTOR_SEAT_BELT_STATUS_S_FUNCTIONNOTPERFORMED = 0;
    DRIVER_MOTOR_SEAT_BELT_STATUS_S_SEATBELTFATIGUEDRIVINGVIBRATION = 1;
    DRIVER_MOTOR_SEAT_BELT_STATUS_S_THESEATBELTISTIGHTENED = 2;
    DRIVER_MOTOR_SEAT_BELT_STATUS_S_AEBSEAEBELTBRAKESTIGHTENED = 3;
    DRIVER_MOTOR_SEAT_BELT_STATUS_S_HIGHSPEEDSEATBELTBRAKESTIGHTEN = 4;
    DRIVER_MOTOR_SEAT_BELT_STATUS_S_RESERVED_5 = 5;
    DRIVER_MOTOR_SEAT_BELT_STATUS_S_RESERVED_6 = 6;
    DRIVER_MOTOR_SEAT_BELT_STATUS_S_RESERVED_7 = 7;
    DRIVER_MOTOR_SEAT_BELT_STATUS_S_RESERVED_8 = 8;
    DRIVER_MOTOR_SEAT_BELT_STATUS_S_RESERVED_9 = 9;
    DRIVER_MOTOR_SEAT_BELT_STATUS_S_RESERVED_10 = 10;
    DRIVER_MOTOR_SEAT_BELT_STATUS_S_RESERVED_11 = 11;
    DRIVER_MOTOR_SEAT_BELT_STATUS_S_RESERVED_12 = 12;
    DRIVER_MOTOR_SEAT_BELT_STATUS_S_RESERVED_13 = 13;
    DRIVER_MOTOR_SEAT_BELT_STATUS_S_RESERVED_14 = 14;
    DRIVER_MOTOR_SEAT_BELT_STATUS_S_RESERVED_15 = 15;
  }
  // Driver_Motor_Seat_Belt_Status_S [] [0|15]
  optional DriverMotorSeatBeltStatusSType driver_motor_seat_belt_status_s = 1;
}

message LEFT_BCM_0X48E {
// Report Message
  enum WinAntitrapFlagSType {
    WIN_ANTITRAP_FLAG_S_INVALID = 0;
    WIN_ANTITRAP_FLAG_S_NOWINDOWANTIPINCH = 1;
    WIN_ANTITRAP_FLAG_S_LFRONTWINDOWANTIPINCH = 2;
    WIN_ANTITRAP_FLAG_S_FRONTDOORWINDOWANTIPINCH = 3;
    WIN_ANTITRAP_FLAG_S_FOURDOORWINDOWANTIPINCH = 4;
    WIN_ANTITRAP_FLAG_S_RESERVED_5 = 5;
    WIN_ANTITRAP_FLAG_S_RESERVED_6 = 6;
    WIN_ANTITRAP_FLAG_S_RESERVED_7 = 7;
  }
  // Win_Antitrap_Flag_S [] [0|7]
  optional WinAntitrapFlagSType win_antitrap_flag_s = 1;
  // Checksum48E_S [] [0|255]
  optional int32 checksum48_e_s = 2;
}

message LEFT_BCM_0X490 {
// Report Message
  enum DragModeStateSType {
    DRAG_MODE_STATE_S_INVALID = 0;
    DRAG_MODE_STATE_S_ENTRY = 1;
    DRAG_MODE_STATE_S_QUIT = 2;
    DRAG_MODE_STATE_S_RESERVED_3 = 3;
  }
  // Drag_Mode_State_S [] [0|3]
  optional DragModeStateSType drag_mode_state_s = 1;
  // Counter490_S [] [0|15]
  optional int32 counter490_s = 2;
  // Checksum490_S [] [0|255]
  optional int32 checksum490_s = 3;
}

message LEFT_BCM_0X496 {
// Report Message
  enum DaytimeRunningLightsFuncSType {
    DAYTIME_RUNNING_LIGHTS_FUNC_S_INVALID = 0;
    DAYTIME_RUNNING_LIGHTS_FUNC_S_ENABLE = 1;
    DAYTIME_RUNNING_LIGHTS_FUNC_S_DISABLE = 2;
    DAYTIME_RUNNING_LIGHTS_FUNC_S_RESERVED_3 = 3;
  }
  // Child_ID_0x496_S [] [0|255]
  optional int32 child_id_0x496_s = 1;
  // Daytime_Running_Lights_Func_S [] [0|3]
  optional DaytimeRunningLightsFuncSType daytime_running_lights_func_s = 2;
}

message LTE4G_0X49A {
// Report Message
  enum OTAHighModuleProcctrlcmdSType {
    OTA_HIGH_MODULE_PROC_CTRL_CMD_S_HIGHVOLTAGEDISCHARGETRIGGER = 0;
    OTA_HIGH_MODULE_PROC_CTRL_CMD_S_HIGHVOLTAGEPOWERFAILURETRIGGER = 1;
    OTA_HIGH_MODULE_PROC_CTRL_CMD_S_HIGHVOLTAGEPOWERFAILUREMAINTENANCE = 2;
    OTA_HIGH_MODULE_PROC_CTRL_CMD_S_OTAEXITCOMMAND = 3;
    OTA_HIGH_MODULE_PROC_CTRL_CMD_S_HIGHVOLTAGEPROGRAMMINGPAUSE = 4;
    OTA_HIGH_MODULE_PROC_CTRL_CMD_S_HIGHVOLTAGESUSTAINDISCHARGE = 6;
    OTA_HIGH_MODULE_PROC_CTRL_CMD_S_RESERVED_7 = 7;
  }
  // Medium_Enter_OTA_Mode_Req_S [] [0|1]
  optional bool medium_enter_ota_mode_req_s = 1;
  // OTA_High_Module_Proc_ctrl_cmd_S [] [0|7]
  optional OTAHighModuleProcctrlcmdSType ota_high_module_proc_ctrl_cmd_s = 2;
  // Checksum_49A_S [] [0|255]
  optional int32 checksum_49_a_s = 3;
}

message LEFT_BCM_0X4A5 {
// Report Message
  enum MileageUnit4A5SType {
    MILEAGE_UNIT_4A5_S_INVALID = 0;
    MILEAGE_UNIT_4A5_S_KM = 1;
    MILEAGE_UNIT_4A5_S_MILE = 2;
    MILEAGE_UNIT_4A5_S_RESERVED_3 = 3;
  }
  // Child_ID_4A5_S [] [0|255]
  optional int32 child_id_4_a5_s = 1;
  // Total_Distance_4A5_S [km] [0|9999999.9]
  optional double total_distance_4_a5_s = 2;
  // Mileage_Unit_4A5_S [km] [0|3]
  optional MileageUnit4A5SType mileage_unit_4_a5_s = 3;
  // Limited_Drive_Distance_EV_4A5_S [] [0|999]
  optional int32 limited_drive_distance_ev_4_a5_s = 4;
  // Limited_Drive_Distance_Fue_4A5_S [] [31|2047]
  optional int32 limited_drive_distance_fue_4_a5_s = 5;
}

message SCPA_0X4A9 {
// Report Message
  // Back_Radar_Key_S [] [0|1]
  optional bool back_radar_key_s = 1;
}

message LEFT_BCM_0X4B3 {
// Report Message
  enum LowBeamFailureStatusSType {
    LOW_BEAM_FAILURE_STATUS_S_INVALID = 0;
    LOW_BEAM_FAILURE_STATUS_S_NORMAL = 1;
    LOW_BEAM_FAILURE_STATUS_S_FAILURE = 2;
    LOW_BEAM_FAILURE_STATUS_S_RESERVED_3 = 3;
  }
  enum HighBeamFailureStatusSType {
    HIGH_BEAM_FAILURE_STATUS_S_INVALID = 0;
    HIGH_BEAM_FAILURE_STATUS_S_NORMAL = 1;
    HIGH_BEAM_FAILURE_STATUS_S_FAILURE = 2;
    HIGH_BEAM_FAILURE_STATUS_S_RESERVED_3 = 3;
  }
  // Low_Beam_Failure_Status_S [] [0|3]
  optional LowBeamFailureStatusSType low_beam_failure_status_s = 1;
  // High_Beam_Failure_Status_S [] [0|3]
  optional HighBeamFailureStatusSType high_beam_failure_status_s = 2;
}

message MEDIA_0X4B4 {
// Report Message
  enum PADMAPAndParkSwtSType {
    PAD_MAP_AND_PARK_SWT_S_INVALID = 0;
    PAD_MAP_AND_PARK_SWT_S_MAPMODE = 1;
    PAD_MAP_AND_PARK_SWT_S_PARKMODE = 2;
    PAD_MAP_AND_PARK_SWT_S_RESERVED_3 = 3;
  }
  // PAD_MAP_And_Park_Swt_S [] [0|3]
  optional PADMAPAndParkSwtSType pad_map_and_park_swt_s = 1;
}

message VCU_0X4BE {
// Report Message
  enum TargetDrivingModeSType {
    TARGET_DRIVING_MODE_S_INVALID = 0;
    TARGET_DRIVING_MODE_S_COMFORTABLE = 1;
    TARGET_DRIVING_MODE_S_ECONOMY = 2;
    TARGET_DRIVING_MODE_S_MOVEMENT = 3;
    TARGET_DRIVING_MODE_S_SNOWICEGRASSGRAVEL = 4;
    TARGET_DRIVING_MODE_S_SAND = 5;
    TARGET_DRIVING_MODE_S_MUDRUTS = 6;
    TARGET_DRIVING_MODE_S_MOUNTAIN = 7;
    TARGET_DRIVING_MODE_S_ROCK = 8;
    TARGET_DRIVING_MODE_S_WADING = 9;
    TARGET_DRIVING_MODE_S_FLOATINGWATER = 10;
    TARGET_DRIVING_MODE_S_CREEPMODE = 11;
    TARGET_DRIVING_MODE_S_UTURNINPLACE = 12;
    TARGET_DRIVING_MODE_S_DRAGMODE = 13;
    TARGET_DRIVING_MODE_S_RESERVED_14 = 14;
    TARGET_DRIVING_MODE_S_OVERCLOCKINGFURIOUSMODE = 15;
    TARGET_DRIVING_MODE_S_SNOWCHAINMODE = 16;
    TARGET_DRIVING_MODE_S_DAKARMODEPULLMODE = 17;
    TARGET_DRIVING_MODE_S_LIMPMODE = 18;
    TARGET_DRIVING_MODE_S_CUSTOMMODE = 19;
    TARGET_DRIVING_MODE_S_SPORTADD = 20;
    TARGET_DRIVING_MODE_S_AUTOMATICMODE = 21;
  }
  // Target_Driving_Mode_S [] [0|255]
  optional TargetDrivingModeSType target_driving_mode_s = 1;
}

message MEDIA_0X4CA {
// Report Message
  enum TunneStatesSType {
    TUNNESTATES_S_INVALID = 0;
    TUNNESTATES_S_BEFOREENTERINGTHETUNNELTHEGROUNDICONSETSTHEDISTANCE = 1;
    TUNNESTATES_S_INTHETUNNEL = 2;
    TUNNESTATES_S_BEFOREEXITINGTHETUNNELTHEGROUNDICONSETSTHEDISTANCE = 3;
    TUNNESTATES_S_OUTSIDETHETUNNEL = 4;
    TUNNESTATES_S_WEBNAVIGATIONISABNORMAL = 5;
    TUNNESTATES_S_RESERVED_6 = 6;
    TUNNESTATES_S_RESERVED_7 = 7;
  }
  enum Lane1StatesSType {
    LANE_1_STATES_S_INVALID = 0;
    LANE_1_STATES_S_UTURN = 1;
    LANE_1_STATES_S_TURNLEFT = 2;
    LANE_1_STATES_S_TURNLEFTANDTURNAROUND = 3;
    LANE_1_STATES_S_TURNLEFTANDGOSTRAIGHT = 4;
    LANE_1_STATES_S_GOSTRAIGHT = 5;
    LANE_1_STATES_S_GOSTRAIGHT_TURNRIGHT = 6;
    LANE_1_STATES_S_TURNRIGHT = 7;
    LANE_1_STATES_S_TURNLEFT_TURNRIGHT = 8;
    LANE_1_STATES_S_NOREQUIREMENT = 9;
    LANE_1_STATES_S_RESERVED_15 = 15;
  }
  enum Lane2StatesSType {
    LANE_2_STATES_S_INVALID = 0;
    LANE_2_STATES_S_UTURN = 1;
    LANE_2_STATES_S_TURNLEFT = 2;
    LANE_2_STATES_S_TURNLEFTANDTURNAROUND = 3;
    LANE_2_STATES_S_TURNLEFTANDGOSTRAIGHT = 4;
    LANE_2_STATES_S_GOSTRAIGHT = 5;
    LANE_2_STATES_S_GOSTRAIGHT_TURNRIGHT = 6;
    LANE_2_STATES_S_TURNRIGHT = 7;
    LANE_2_STATES_S_TURNLEFT_TURNRIGHT = 8;
    LANE_2_STATES_S_NOREQUIREMENT = 9;
    LANE_2_STATES_S_RESERVED_15 = 15;
  }
  enum Lane3StatesSType {
    LANE_3_STATES_S_INVALID = 0;
    LANE_3_STATES_S_UTURN = 1;
    LANE_3_STATES_S_TURNLEFT = 2;
    LANE_3_STATES_S_TURNLEFTANDTURNAROUND = 3;
    LANE_3_STATES_S_TURNLEFTANDGOSTRAIGHT = 4;
    LANE_3_STATES_S_GOSTRAIGHT = 5;
    LANE_3_STATES_S_GOSTRAIGHT_TURNRIGHT = 6;
    LANE_3_STATES_S_TURNRIGHT = 7;
    LANE_3_STATES_S_TURNLEFT_TURNRIGHT = 8;
    LANE_3_STATES_S_NOREQUIREMENT = 9;
    LANE_3_STATES_S_RESERVED_15 = 15;
  }
  enum Lane4StatesSType {
    LANE_4_STATES_S_INVALID = 0;
    LANE_4_STATES_S_UTURN = 1;
    LANE_4_STATES_S_TURNLEFT = 2;
    LANE_4_STATES_S_TURNLEFTANDTURNAROUND = 3;
    LANE_4_STATES_S_TURNLEFTANDGOSTRAIGHT = 4;
    LANE_4_STATES_S_GOSTRAIGHT = 5;
    LANE_4_STATES_S_GOSTRAIGHT_TURNRIGHT = 6;
    LANE_4_STATES_S_TURNRIGHT = 7;
    LANE_4_STATES_S_TURNLEFT_TURNRIGHT = 8;
    LANE_4_STATES_S_NOREQUIREMENT = 9;
    LANE_4_STATES_S_RESERVED_15 = 15;
  }
  enum Lane5StatesSType {
    LANE_5_STATES_S_INVALID = 0;
    LANE_5_STATES_S_UTURN = 1;
    LANE_5_STATES_S_TURNLEFT = 2;
    LANE_5_STATES_S_TURNLEFTANDTURNAROUND = 3;
    LANE_5_STATES_S_TURNLEFTANDGOSTRAIGHT = 4;
    LANE_5_STATES_S_GOSTRAIGHT = 5;
    LANE_5_STATES_S_GOSTRAIGHT_TURNRIGHT = 6;
    LANE_5_STATES_S_TURNRIGHT = 7;
    LANE_5_STATES_S_TURNLEFT_TURNRIGHT = 8;
    LANE_5_STATES_S_NOREQUIREMENT = 9;
    LANE_5_STATES_S_RESERVED_15 = 15;
  }
  enum Lane6StatesSType {
    LANE_6_STATES_S_INVALID = 0;
    LANE_6_STATES_S_UTURN = 1;
    LANE_6_STATES_S_TURNLEFT = 2;
    LANE_6_STATES_S_TURNLEFTANDTURNAROUND = 3;
    LANE_6_STATES_S_TURNLEFTANDGOSTRAIGHT = 4;
    LANE_6_STATES_S_GOSTRAIGHT = 5;
    LANE_6_STATES_S_GOSTRAIGHT_TURNRIGHT = 6;
    LANE_6_STATES_S_TURNRIGHT = 7;
    LANE_6_STATES_S_TURNLEFT_TURNRIGHT = 8;
    LANE_6_STATES_S_NOREQUIREMENT = 9;
    LANE_6_STATES_S_RESERVED_15 = 15;
  }
  enum Lane7StatesSType {
    LANE_7_STATES_S_INVALID = 0;
    LANE_7_STATES_S_UTURN = 1;
    LANE_7_STATES_S_TURNLEFT = 2;
    LANE_7_STATES_S_TURNLEFTANDTURNAROUND = 3;
    LANE_7_STATES_S_TURNLEFTANDGOSTRAIGHT = 4;
    LANE_7_STATES_S_GOSTRAIGHT = 5;
    LANE_7_STATES_S_GOSTRAIGHT_TURNRIGHT = 6;
    LANE_7_STATES_S_TURNRIGHT = 7;
    LANE_7_STATES_S_TURNLEFT_TURNRIGHT = 8;
    LANE_7_STATES_S_NOREQUIREMENT = 9;
    LANE_7_STATES_S_RESERVED_15 = 15;
  }
  enum Lane8StatesSType {
    LANE_8_STATES_S_INVALID = 0;
    LANE_8_STATES_S_UTURN = 1;
    LANE_8_STATES_S_TURNLEFT = 2;
    LANE_8_STATES_S_TURNLEFTANDTURNAROUND = 3;
    LANE_8_STATES_S_TURNLEFTANDGOSTRAIGHT = 4;
    LANE_8_STATES_S_GOSTRAIGHT = 5;
    LANE_8_STATES_S_GOSTRAIGHT_TURNRIGHT = 6;
    LANE_8_STATES_S_TURNRIGHT = 7;
    LANE_8_STATES_S_TURNLEFT_TURNRIGHT = 8;
    LANE_8_STATES_S_NOREQUIREMENT = 9;
    LANE_8_STATES_S_RESERVED_15 = 15;
  }
  enum NaviCorpSType {
    NAVICORP_S_UNKNOWN = 0;
    NAVICORP_S_GAODEMAP = 1;
    NAVICORP_S_TESCENTMAP = 2;
    NAVICORP_S_BAIDUMAP = 3;
    NAVICORP_S_RUITUMAP = 4;
    NAVICORP_S_NOTUSED_1 = 5;
    NAVICORP_S_NOTUSED_2 = 6;
    NAVICORP_S_NOTUSED_3 = 7;
  }
  enum MPCIFCNaviStSType {
    MPC_IFC_NAVIST_S_UNKNOWN = 0;
    MPC_IFC_NAVIST_S_CRUISE = 1;
    MPC_IFC_NAVIST_S_NAVIGATE = 2;
    MPC_IFC_NAVIST_S_FAILURE = 3;
  }
  enum MPCZoneCodeSType {
    MPC_ZONECODE_S_NOTUSED = 0;
    MPC_ZONECODE_S_CHINA = 1;
    MPC_ZONECODE_S_NOTSUED_1 = 2;
    MPC_ZONECODE_S_NOTSUED_2 = 3;
    MPC_ZONECODE_S_NOTSUED_3 = 4;
    MPC_ZONECODE_S_NOTSUED_4 = 5;
    MPC_ZONECODE_S_NOTSUED_5 = 6;
    MPC_ZONECODE_S_NOTSUED_6 = 7;
  }
  enum RoadtypeSType {
    ROADTYPE_S_UNKNOWN = 0;
    ROADTYPE_S_HIGHWAY = 1;
    ROADTYPE_S_NATIONALROAD = 2;
    ROADTYPE_S_PROVINCIALROAD = 3;
    ROADTYPE_S_COUNTYROAD = 4;
    ROADTYPE_S_VILLAGEROAD = 5;
    ROADTYPE_S_CITYEXPRESSWAY = 6;
    ROADTYPE_S_MAJORURBANROAD = 7;
    ROADTYPE_S_SECONDARYURBANROAD = 8;
    ROADTYPE_S_NORMALURBANROAD = 9;
    ROADTYPE_S_NONNAVIGATIONROAD = 10;
    ROADTYPE_S_RAMP = 11;
    ROADTYPE_S_NOTUSED_1 = 12;
    ROADTYPE_S_NOTUSED_2 = 13;
    ROADTYPE_S_NOTUSED_3 = 14;
    ROADTYPE_S_NOTUSED_4 = 15;
  }
  enum Lane9StatesSType {
    LANE_9_STATES_S_INVALID = 0;
    LANE_9_STATES_S_UTURN = 1;
    LANE_9_STATES_S_TURNLEFT = 2;
    LANE_9_STATES_S_TURNLEFTANDTURNAROUND = 3;
    LANE_9_STATES_S_TURNLEFTANDGOSTRAIGHT = 4;
    LANE_9_STATES_S_GOSTRAIGHT = 5;
    LANE_9_STATES_S_GOSTRAIGHT_TURNRIGHT = 6;
    LANE_9_STATES_S_TURNRIGHT = 7;
    LANE_9_STATES_S_TURNLEFT_TURNRIGHT = 8;
    LANE_9_STATES_S_NOREQUIREMENT = 9;
    LANE_9_STATES_S_RESERVED_15 = 15;
  }
  enum Lane10StatesSType {
    LANE_10_STATES_S_INVALID = 0;
    LANE_10_STATES_S_UTURN = 1;
    LANE_10_STATES_S_TURNLEFT = 2;
    LANE_10_STATES_S_TURNLEFTANDTURNAROUND = 3;
    LANE_10_STATES_S_TURNLEFTANDGOSTRAIGHT = 4;
    LANE_10_STATES_S_GOSTRAIGHT = 5;
    LANE_10_STATES_S_GOSTRAIGHT_TURNRIGHT = 6;
    LANE_10_STATES_S_TURNRIGHT = 7;
    LANE_10_STATES_S_TURNLEFT_TURNRIGHT = 8;
    LANE_10_STATES_S_NOREQUIREMENT = 9;
    LANE_10_STATES_S_RESERVED_15 = 15;
  }
  enum Lane11StatesSType {
    LANE_11_STATES_S_INVALID = 0;
    LANE_11_STATES_S_UTURN = 1;
    LANE_11_STATES_S_TURNLEFT = 2;
    LANE_11_STATES_S_TURNLEFTANDTURNAROUND = 3;
    LANE_11_STATES_S_TURNLEFTANDGOSTRAIGHT = 4;
    LANE_11_STATES_S_GOSTRAIGHT = 5;
    LANE_11_STATES_S_GOSTRAIGHT_TURNRIGHT = 6;
    LANE_11_STATES_S_TURNRIGHT = 7;
    LANE_11_STATES_S_TURNLEFT_TURNRIGHT = 8;
    LANE_11_STATES_S_NOREQUIREMENT = 9;
    LANE_11_STATES_S_RESERVED_15 = 15;
  }
  enum Lane12StatesSType {
    LANE_12_STATES_S_INVALID = 0;
    LANE_12_STATES_S_UTURN = 1;
    LANE_12_STATES_S_TURNLEFT = 2;
    LANE_12_STATES_S_TURNLEFTANDTURNAROUND = 3;
    LANE_12_STATES_S_TURNLEFTANDGOSTRAIGHT = 4;
    LANE_12_STATES_S_GOSTRAIGHT = 5;
    LANE_12_STATES_S_GOSTRAIGHT_TURNRIGHT = 6;
    LANE_12_STATES_S_TURNRIGHT = 7;
    LANE_12_STATES_S_TURNLEFT_TURNRIGHT = 8;
    LANE_12_STATES_S_NOREQUIREMENT = 9;
    LANE_12_STATES_S_RESERVED_15 = 15;
  }
  enum LocationAuthorizationStatusSType {
    LOCATION_AUTHORIZATION_STATUS_S_NULL = 0;
    LOCATION_AUTHORIZATION_STATUS_S_AUTHORIZEDLOCATION = 1;
    LOCATION_AUTHORIZATION_STATUS_S_UNAUTHORIZEDLOCATION = 2;
    LOCATION_AUTHORIZATION_STATUS_S_RESERVED_3 = 3;
  }
  enum PAD2PKGVOTSwitchStateSType {
    PAD2PKGVOT_SWITCH_STATE_S_INVALID = 0;
    PAD2PKGVOT_SWITCH_STATE_S_SWITCHOFF = 1;
    PAD2PKGVOT_SWITCH_STATE_S_SWITCHON = 2;
    PAD2PKGVOT_SWITCH_STATE_S_RESERVED_3 = 3;
  }
  enum PAD2PkgSpdRankSwitchStateSType {
    PAD2PKG_SPDRANKSWITCH_STATE_S_INVALID = 0;
    PAD2PKG_SPDRANKSWITCH_STATE_S_COMFORT_MODE = 1;
    PAD2PKG_SPDRANKSWITCH_STATE_S_EXTREME_SPEED_MODE = 2;
    PAD2PKG_SPDRANKSWITCH_STATE_S_RESERVED_3 = 3;
  }
  enum PAD2PKGVOTReturnReqSType {
    PAD2PKGVOT_RETURNREQ_S_INVALID = 0;
    PAD2PKGVOT_RETURNREQ_S_NO_REQUEST = 1;
    PAD2PKGVOT_RETURNREQ_S_REQUEST = 2;
    PAD2PKGVOT_RETURNREQ_S_RESERVED_3 = 3;
  }
  enum PAD2PKGSpcTypeReqSType {
    PAD2PKGSPCTYPE_REQ_S_INVALID = 0;
    PAD2PKGSPCTYPE_REQ_S_SWITCH_TO_GENERAL_PARKING_SPACE = 1;
    PAD2PKGSPCTYPE_REQ_S_SWITCH_TO_E4_PARKING_SPACE = 2;
    PAD2PKGSPCTYPE_REQ_S_RESERVED_3 = 3;
  }
  // OffFrontCrossingDis_S [m] [0|255]
  optional int32 off_front_crossing_dis_s = 1;
  // OffFrontTunnelDis_S [m] [0|255]
  optional int32 off_front_tunnel_dis_s = 2;
  // FrontCrossingLaneNumber_S [] [0|15]
  optional int32 front_crossing_lane_number_s = 3;
  // CrossingLaneNumberValid_S [] [0|1]
  optional bool crossing_lane_number_valid_s = 4;
  // TunneStates_S [] [0|7]
  optional TunneStatesSType tunne_states_s = 5;
  // Lane_1_States_S [] [0|15]
  optional Lane1StatesSType lane_1_states_s = 6;
  // Lane_2_States_S [] [0|15]
  optional Lane2StatesSType lane_2_states_s = 7;
  // Lane_3_States_S [] [0|15]
  optional Lane3StatesSType lane_3_states_s = 8;
  // Lane_4_States_S [] [0|15]
  optional Lane4StatesSType lane_4_states_s = 9;
  // Lane_5_States_S [] [0|15]
  optional Lane5StatesSType lane_5_states_s = 10;
  // Lane_6_States_S [] [0|15]
  optional Lane6StatesSType lane_6_states_s = 11;
  // Lane_7_States_S [] [0|15]
  optional Lane7StatesSType lane_7_states_s = 12;
  // Lane_8_States_S [] [0|15]
  optional Lane8StatesSType lane_8_states_s = 13;
  // Speedlimit_S [km/h] [0|255]
  optional int32 speedlimit_s = 14;
  // NaviCorp_S [] [0|7]
  optional NaviCorpSType navi_corp_s = 15;
  // MPC_IFC_NaviSt_S [] [0|3]
  optional MPCIFCNaviStSType mpc_ifc_navi_st_s = 16;
  // MPC_ZoneCode_S [] [0|7]
  optional MPCZoneCodeSType mpc_zone_code_s = 17;
  // Roadtype_S [] [0|15]
  optional RoadtypeSType roadtype_s = 18;
  // Lane_9_States_S [] [0|15]
  optional Lane9StatesSType lane_9_states_s = 19;
  // Lane_10_States_S [] [0|15]
  optional Lane10StatesSType lane_10_states_s = 20;
  // Lane_11_States_S [] [0|15]
  optional Lane11StatesSType lane_11_states_s = 21;
  // Lane_12_States_S [] [0|15]
  optional Lane12StatesSType lane_12_states_s = 22;
  // Location_Authorization_Status_S [] [0|3]
  optional LocationAuthorizationStatusSType location_authorization_status_s = 23;
  // PAD2PKGVOT_Switch_State_S [] [0|3]
  optional PAD2PKGVOTSwitchStateSType pad2_pkgvot_switch_state_s = 24;
  // PAD2Pkg_SpdRankSwitch_State_S [] [0|3]
  optional PAD2PkgSpdRankSwitchStateSType pad2_pkg_spd_rank_switch_state_s = 25;
  // PAD2PKGVOT_ReturnReq_S [] [0|3]
  optional PAD2PKGVOTReturnReqSType pad2_pkgvot_return_req_s = 26;
  // PAD2PKGSpcType_Req_S [] [0|3]
  optional PAD2PKGSpcTypeReqSType pad2_pkg_spc_type_req_s = 27;
}

message VCU_0X4CF {
// Report Message
  // Child_ID_4CF_S1 [] [0|255]
  optional int32 child_id_4_cf_s1 = 1;
  // Ecp_ctrl_duty [%] [0|100]
  optional int32 ecp_ctrl_duty = 2;
}

message MEDIA_0X4EF {
// Report Message
  enum FCTAEnableSType {
    FCTA_ENABLE_S_INVALID = 0;
    FCTA_ENABLE_S_SWITCHOFF = 1;
    FCTA_ENABLE_S_SWITCHON = 2;
    FCTA_ENABLE_S_RESERVED_3 = 3;
  }
  enum FCTBEnableSType {
    FCTB_ENABLE_S_INVALID = 0;
    FCTB_ENABLE_S_SWITCHOFF = 1;
    FCTB_ENABLE_S_SWITCHON = 2;
    FCTB_ENABLE_S_RESERVED_3 = 3;
  }
  enum ILCAEnableSType {
    ILCA_ENABLE_S_INVALID = 0;
    ILCA_ENABLE_S_SWITCHOFF = 1;
    ILCA_ENABLE_S_SWITCHON = 2;
    ILCA_ENABLE_S_RESERVED_3 = 3;
  }
  enum HNPEnableSType {
    HNP_ENABLE_S_INVALID = 0;
    HNP_ENABLE_S_SWITCHOFF = 1;
    HNP_ENABLE_S_SWITCHON = 2;
    HNP_ENABLE_S_RESERVED_3 = 3;
  }
  enum ISLCEnableSType {
    ISLC_ENABLE_S_INVALID = 0;
    ISLC_ENABLE_S_SWITCHOFF = 1;
    ISLC_ENABLE_S_SWITCHON = 2;
    ISLC_ENABLE_S_RESERVED_3 = 3;
  }
  enum TLAEnableSType {
    TLA_ENABLE_S_INVALID = 0;
    TLA_ENABLE_S_SWITCHOFF = 1;
    TLA_ENABLE_S_SWITCHON = 2;
    TLA_ENABLE_S_RESERVED_3 = 3;
  }
  enum UNPEnableSType {
    UNP_ENABLE_S_INVALID = 0;
    UNP_ENABLE_S_SWITCHOFF = 1;
    UNP_ENABLE_S_SWITCHON = 2;
    UNP_ENABLE_S_RESERVED_3 = 3;
  }
  enum TrafficSignRecogSpeedCMSType {
    TRAFFIC_SIGN_RECOG_SPEED_C_M_S_INVALID = 0;
    TRAFFIC_SIGN_RECOG_SPEED_C_M_S_MANUALCONFIRMATION = 1;
    TRAFFIC_SIGN_RECOG_SPEED_C_M_S_AUTOMATICSPEEDCONTROL = 2;
    TRAFFIC_SIGN_RECOG_SPEED_C_M_S_RESERVED_3 = 3;
  }
  enum DVRVideoOperationSType {
    DVR_VIDEO_OPERATION_S_OUTPUTORIGINALIMAGE = 0;
    DVR_VIDEO_OPERATION_S_ROTATED180ORIGINALIMAGE = 1;
    DVR_VIDEO_OPERATION_S_ORIGINALIMAGEMIRRORING = 2;
    DVR_VIDEO_OPERATION_S_LEFTCOUNTERCLOCKWISE90 = 3;
    DVR_VIDEO_OPERATION_S_LEFTCOUNTERCLOCKWISE270 = 4;
    DVR_VIDEO_OPERATION_S_LEFTIMAGEISROTATED180 = 5;
    DVR_VIDEO_OPERATION_S_LEFTIMAGEISMIRROREDLEFTANDRIGHT = 6;
    DVR_VIDEO_OPERATION_S_RIGHTCOUNTERCLOCKWISE90 = 7;
    DVR_VIDEO_OPERATION_S_RIGHTCOUNTERCLOCKWISE270 = 8;
    DVR_VIDEO_OPERATION_S_RIGHTIMAGEISROTATED180 = 9;
    DVR_VIDEO_OPERATION_S_RIGHTIMAGEISMIRROREDLEFTANDRIGHT = 10;
    DVR_VIDEO_OPERATION_S_CENTERCOUNTERCLOCKWISE90 = 11;
    DVR_VIDEO_OPERATION_S_CENTERCOUNTERCLOCKWISE270 = 12;
    DVR_VIDEO_OPERATION_S_CENTERIMAGEISROTATED180 = 13;
    DVR_VIDEO_OPERATION_S_CENTERIMAGEISMIRROREDLEFTANDRIGHT = 14;
    DVR_VIDEO_OPERATION_S_RESERVED_15 = 15;
  }
  enum PCWLevelReqSType {
    PCW_LEVEL_REQ_S_INVALID = 0;
    PCW_LEVEL_REQ_S_OFF = 1;
    PCW_LEVEL_REQ_S_LEVEL1LOW = 2;
    PCW_LEVEL_REQ_S_INLEVEL2SELECTEDBYDEFAULT = 3;
    PCW_LEVEL_REQ_S_LEVEL3HIGH = 4;
    PCW_LEVEL_REQ_S_RESERVED_5 = 5;
    PCW_LEVEL_REQ_S_RESERVED_6 = 6;
    PCW_LEVEL_REQ_S_RESERVED_7 = 7;
  }
  enum PADLVPModeSType {
    PAD_LVP_MODE_S_INVALID = 0;
    PAD_LVP_MODE_S_ENTERAUTOMATICPARKINGMODE = 1;
    PAD_LVP_MODE_S_EXITAUTOMATICPARKINGMODE = 2;
    PAD_LVP_MODE_S_RESERVED_3 = 3;
  }
  enum SOfESAFunctSentByThePADSType {
    S_OF_ESA_FUNCT_SENT_BY_THE_PAD_S_INVALID = 0;
    S_OF_ESA_FUNCT_SENT_BY_THE_PAD_S_SWITCHOFF = 1;
    S_OF_ESA_FUNCT_SENT_BY_THE_PAD_S_SWITCHON = 2;
    S_OF_ESA_FUNCT_SENT_BY_THE_PAD_S_RESERVED_3 = 3;
  }
  enum PADLVPReqbyPADorAPPSType {
    PAD_LVPREQBYPADORAPP_S_NOREQUEST = 0;
    PAD_LVPREQBYPADORAPP_S_LVSPARKINGINBYPAD = 1;
    PAD_LVPREQBYPADORAPP_S_LVSPARKINGINBYAPP = 2;
    PAD_LVPREQBYPADORAPP_S_LVSPARKINGOUTBYPAD = 3;
    PAD_LVPREQBYPADORAPP_S_LVSPARKINGOUTBYAPP = 4;
    PAD_LVPREQBYPADORAPP_S_RESERVED_5 = 5;
    PAD_LVPREQBYPADORAPP_S_RESERVED_6 = 6;
    PAD_LVPREQBYPADORAPP_S_RESERVED_7 = 7;
  }
  enum NRPSwitchStatusSType {
    NRP_SWITCH_STATUS_S_INVALID = 0;
    NRP_SWITCH_STATUS_S_SWITCHON = 1;
    NRP_SWITCH_STATUS_S_SWITCHOFF = 2;
    NRP_SWITCH_STATUS_S_RESERVED_3 = 3;
  }
  enum PADParkingCtrlPADorAPPSType {
    PAD_PARKINGCTRLPADORAPP_S_NONE = 0;
    PAD_PARKINGCTRLPADORAPP_S_SVPPARKINGCTRLPARKINBYPAD = 1;
    PAD_PARKINGCTRLPADORAPP_S_SVPPARKINGCTRLPARKOUTBYPAD = 2;
    PAD_PARKINGCTRLPADORAPP_S_SVPPARKINGCTRLPARKINBYAPP = 3;
    PAD_PARKINGCTRLPADORAPP_S_SVPPARKINGCTRLPARKOUTBYAPP = 4;
    PAD_PARKINGCTRLPADORAPP_S_SVPPARKINGCTRLPARKOUTBYPAD_REPEAT = 5;
    PAD_PARKINGCTRLPADORAPP_S_RESERVED_6 = 6;
    PAD_PARKINGCTRLPADORAPP_S_RESERVED_7 = 7;
  }
  enum TBAEnableSType {
    TBA_ENABLE_S_INVALID = 0;
    TBA_ENABLE_S_SWITCHOFF = 1;
    TBA_ENABLE_S_SWITCHON = 2;
    TBA_ENABLE_S_RESERVED_3 = 3;
  }
  enum ISAPCWLevelReqSType {
    ISA_PCW_LEVEL_REQ_S_INVALID = 0;
    ISA_PCW_LEVEL_REQ_S_CLOSED = 1;
    ISA_PCW_LEVEL_REQ_S_LEVEL1 = 2;
    ISA_PCW_LEVEL_REQ_S_LEVEL2 = 3;
    ISA_PCW_LEVEL_REQ_S_LEVEL3 = 4;
    ISA_PCW_LEVEL_REQ_S_RESERVED_5 = 5;
    ISA_PCW_LEVEL_REQ_S_RESERVED_6 = 6;
    ISA_PCW_LEVEL_REQ_S_RESERVED_7 = 7;
  }
  enum PADSVPModeSType {
    PAD_SVP_MODE_S_INVALID = 0;
    PAD_SVP_MODE_S_ENTERAUTOMATICPARKINGMODE = 1;
    PAD_SVP_MODE_S_EXITAUTOMATICPARKINGMODE = 2;
    PAD_SVP_MODE_S_RESERVED_3 = 3;
  }
  enum ISAWarningEnableSType {
    ISA_WARNING_ENABLE_S_INVALID = 0;
    ISA_WARNING_ENABLE_S_SWITCHOFF = 1;
    ISA_WARNING_ENABLE_S_SWITCHON = 2;
    ISA_WARNING_ENABLE_S_RESERVED_3 = 3;
  }
  enum ISABrakeEnableSType {
    ISA_BRAKE_ENABLE_S_INVALID = 0;
    ISA_BRAKE_ENABLE_S_SWITCHOFF = 1;
    ISA_BRAKE_ENABLE_S_SWITCHON = 2;
    ISA_BRAKE_ENABLE_S_RESERVED_3 = 3;
  }
  enum PADADSAVPFunctionReqSType {
    PAD_ADS_AVPFUNCTIONREQ_S_NOREQUEST = 0;
    PAD_ADS_AVPFUNCTIONREQ_S_INDOORNAVIGATIONFUNCTIONACTIVE = 1;
    PAD_ADS_AVPFUNCTIONREQ_S_PARKINFUNCTIONACTIVE = 2;
    PAD_ADS_AVPFUNCTIONREQ_S_PNPFUNCTIONACTIVEPNP = 3;
    PAD_ADS_AVPFUNCTIONREQ_S_PARKOUTFUNCTIONACTIVE = 4;
    PAD_ADS_AVPFUNCTIONREQ_S_FUNCTIONPAUSEACTIVE = 5;
    PAD_ADS_AVPFUNCTIONREQ_S_FUNCTIONCONTINUE = 6;
    PAD_ADS_AVPFUNCTIONREQ_S_FUNCTIONEXIT = 7;
  }
  enum ISAPADDisplayEnableSType {
    ISA_PAD_DISPLAY_ENABLE_S_INVALID = 0;
    ISA_PAD_DISPLAY_ENABLE_S_SWITCHOFF = 1;
    ISA_PAD_DISPLAY_ENABLE_S_SWITCHON = 2;
    ISA_PAD_DISPLAY_ENABLE_S_RESERVED_3 = 3;
  }
  enum ISAAcousticWarningEnableSType {
    ISA_ACOUSTIC_WARNING_ENABLE_S_INVALID = 0;
    ISA_ACOUSTIC_WARNING_ENABLE_S_SWITCHOFF = 1;
    ISA_ACOUSTIC_WARNING_ENABLE_S_SWITCHON = 2;
    ISA_ACOUSTIC_WARNING_ENABLE_S_RESERVED_3 = 3;
  }
  enum TBOXPrkingSlotSetSType {
    TBOX_PRKINGSLOTSET_S_NOSET = 0;
    TBOX_PRKINGSLOTSET_S_SETPRKINGSLOT = 1;
    TBOX_PRKINGSLOTSET_S_SETPRKINGSLOTAREA = 2;
    TBOX_PRKINGSLOTSET_S_RESERVED_3 = 3;
  }
  enum TBOXReSearchingSType {
    TBOX_RESEARCHING_S_NONE = 0;
    TBOX_RESEARCHING_S_OFF = 1;
    TBOX_RESEARCHING_S_ON = 2;
    TBOX_RESEARCHING_S_RESERVED_3 = 3;
  }
  enum PADQuickEntryReqSwitchStateSType {
    PAD_QUICKENTRYREQ_SWITCH_STATE_S_INVALID = 0;
    PAD_QUICKENTRYREQ_SWITCH_STATE_S_SWITCHOFF = 1;
    PAD_QUICKENTRYREQ_SWITCH_STATE_S_SWITCHON = 2;
    PAD_QUICKENTRYREQ_SWITCH_STATE_S_RESERVED_3 = 3;
  }
  enum PADFrontPkgReqSwitchStateSType {
    PAD_FRONTPKGREQ_SWITCH_STATE_S_INVALID = 0;
    PAD_FRONTPKGREQ_SWITCH_STATE_S_SWITCHOFF = 1;
    PAD_FRONTPKGREQ_SWITCH_STATE_S_SWITCHON = 2;
    PAD_FRONTPKGREQ_SWITCH_STATE_S_RESERVED_3 = 3;
  }
  enum PADRPAReqSwitchStateSType {
    PAD_RPAREQ_SWITCH_STATE_S_INVALID = 0;
    PAD_RPAREQ_SWITCH_STATE_S_SWITCHOFF = 1;
    PAD_RPAREQ_SWITCH_STATE_S_SWITCHON = 2;
    PAD_RPAREQ_SWITCH_STATE_S_RESERVED_3 = 3;
  }
  enum MEBSwitchSType {
    MEB_SWITCH_S_INVALID = 0;
    MEB_SWITCH_S_SWITCHOFF = 1;
    MEB_SWITCH_S_SWITCHON = 2;
    MEB_SWITCH_S_RESERVED_3 = 3;
  }
  enum PADAPAParkModeSwitchStateSType {
    PAD_APA_PARK_MODE_SWITCH_STATE_S_IDLE = 0;
    PAD_APA_PARK_MODE_SWITCH_STATE_S_PARKIN = 1;
    PAD_APA_PARK_MODE_SWITCH_STATE_S_PARKOUT = 2;
    PAD_APA_PARK_MODE_SWITCH_STATE_S_SELECTED = 3;
  }
  enum PADRPAParkModeSwitchStateSType {
    PAD_RPA_PARK_MODE_SWITCH_STATE_S_IDLE = 0;
    PAD_RPA_PARK_MODE_SWITCH_STATE_S_PARKIN = 1;
    PAD_RPA_PARK_MODE_SWITCH_STATE_S_PARKOUT = 2;
    PAD_RPA_PARK_MODE_SWITCH_STATE_S_RESERVED_3 = 3;
  }
  enum PADAPAModeSType {
    PAD_APA_MODE_S_INVALID = 0;
    PAD_APA_MODE_S_ENTERAUTOMATICPARKINGMODE = 1;
    PAD_APA_MODE_S_EXITAUTOMATICPARKINGMODE = 2;
    PAD_APA_MODE_S_RESERVED_3 = 3;
  }
  enum E2EEnableSType {
    E2E_ENABLE_S_INVALID = 0;
    E2E_ENABLE_S_SWITCHOFF = 1;
    E2E_ENABLE_S_SWITCHON = 2;
    E2E_ENABLE_S_RESERVED_3 = 3;
  }
  enum PADPSLSelectedSType {
    PAD_PSLSELECTED_S_NONE = 0;
    PAD_PSLSELECTED_S_NUMBER1 = 1;
    PAD_PSLSELECTED_S_NUMBER2 = 2;
    PAD_PSLSELECTED_S_NUMBER3 = 3;
    PAD_PSLSELECTED_S_NUMBER4 = 4;
    PAD_PSLSELECTED_S_NUMBER5 = 5;
    PAD_PSLSELECTED_S_NUMBER6 = 6;
    PAD_PSLSELECTED_S_RESERVED_7 = 7;
  }
  enum DiEyeSwitchStateSType {
    DIEYE_SWITCH_STATE_S_INVALID = 0;
    DIEYE_SWITCH_STATE_S_SWITCHOFF = 1;
    DIEYE_SWITCH_STATE_S_SWITCHON = 2;
    DIEYE_SWITCH_STATE_S_RESEVED = 3;
  }
  enum IOAFunctionSwitchSType {
    IOA_FUNCTION_SWITCH_S_INVAILD = 0;
    IOA_FUNCTION_SWITCH_S_SWITCHOFF = 1;
    IOA_FUNCTION_SWITCH_S_SWITCHON = 2;
    IOA_FUNCTION_SWITCH_S_RESERVED_3 = 3;
  }
  enum PADParkOutDirectionSelectSType {
    PAD_PARK_OUT_DIRECTION_SELECT_S_NONE = 0;
    PAD_PARK_OUT_DIRECTION_SELECT_S_FRONTLEFTCROSS = 1;
    PAD_PARK_OUT_DIRECTION_SELECT_S_FRONTLEFTPARALLEL = 2;
    PAD_PARK_OUT_DIRECTION_SELECT_S_FRONTOUT = 3;
    PAD_PARK_OUT_DIRECTION_SELECT_S_FRONTRIGHTCROSS = 4;
    PAD_PARK_OUT_DIRECTION_SELECT_S_FRONTRIGHTPARALLEL = 5;
    PAD_PARK_OUT_DIRECTION_SELECT_S_BACKOUT = 6;
    PAD_PARK_OUT_DIRECTION_SELECT_S_BACKLEFTCROSS = 7;
    PAD_PARK_OUT_DIRECTION_SELECT_S_BACKRIGHTCROSS = 8;
  }
  enum PADAVMStsSType {
    PAD_AVMSTS_S_NORMAL = 0;
    PAD_AVMSTS_S_CALIBRATIONFAIL = 1;
    PAD_AVMSTS_S_NOIMAGEOUTPUT = 2;
    PAD_AVMSTS_S_RESERVED_3 = 3;
  }
  enum PADHPAParkReqByPADSType {
    PAD_HPAPARKREQBYPAD_S_INVALID = 0;
    PAD_HPAPARKREQBYPAD_S_NOREQUEST = 1;
    PAD_HPAPARKREQBYPAD_S_HPAPARKINGREQUESTBYPAD = 2;
    PAD_HPAPARKREQBYPAD_S_RESERVED_3 = 3;
  }
  enum PADSVPHDMAPstsSType {
    PAD_SVP_HDMAPSTS_S_NONE = 0;
    PAD_SVP_HDMAPSTS_S_MAPUPDATING = 1;
    PAD_SVP_HDMAPSTS_S_MAPREADY = 2;
    PAD_SVP_HDMAPSTS_S_MAPUPDATEFAILED = 3;
  }
  enum PADSVPReSearchingSType {
    PAD_SVP_RESEARCHING_S_NONE = 0;
    PAD_SVP_RESEARCHING_S_OFF = 1;
    PAD_SVP_RESEARCHING_S_ON = 2;
    PAD_SVP_RESEARCHING_S_RESERVED_3 = 3;
  }
  enum TBOXMAPupdateStsSType {
    TBOX_MAPUPDATESTS_S_NONE = 0;
    TBOX_MAPUPDATESTS_S_UNSUCCESS = 1;
    TBOX_MAPUPDATESTS_S_SUCCESS = 2;
    TBOX_MAPUPDATESTS_S_RESERVED_3 = 3;
  }
  enum PADLVPPrkinSlotModSType {
    PAD_LVPPRKINSLOTMOD_S_NONE = 0;
    PAD_LVPPRKINSLOTMOD_S_REQUESTRESERVEDSLOTMODE = 1;
    PAD_LVPPRKINSLOTMOD_S_REQUESTRANDOMSLOTMODE = 2;
    PAD_LVPPRKINSLOTMOD_S_RESERVED_3 = 3;
  }
  enum TBOXLVPPrkinSlotModSType {
    TBOX_LVPPRKINSLOTMOD_S_NONE = 0;
    TBOX_LVPPRKINSLOTMOD_S_REQUESTRESERVEDSLOTMODE = 1;
    TBOX_LVPPRKINSLOTMOD_S_REQUESTRANDOMSLOTMODE = 2;
    TBOX_LVPPRKINSLOTMOD_S_RESERVED_3 = 3;
  }
  enum TBOXRemDeviceStsSType {
    TBOX_REMDEVICESTS_S_UNKNOW = 0;
    TBOX_REMDEVICESTS_S_NORMAL = 1;
    TBOX_REMDEVICESTS_S_ERROR = 2;
    TBOX_REMDEVICESTS_S_RESERVED_3 = 3;
  }
  enum RebuildDiagramRequestSType {
    REBUILD_DIAGRAM_REQUEST_S_NOREQUEST = 0;
    REBUILD_DIAGRAM_REQUEST_S_REQUESTRESETPRKINMAP = 1;
    REBUILD_DIAGRAM_REQUEST_S_REQUESTRESETPRKOUTMAP = 2;
    REBUILD_DIAGRAM_REQUEST_S_RESERVED_3 = 3;
  }
  enum PADLVPPrkinReqByPADSType {
    PAD_LVPPRKINREQBYPAD_S_NOREQUEST = 0;
    PAD_LVPPRKINREQBYPAD_S_LVPPARKINGINREQUESTBYPAD = 1;
    PAD_LVPPRKINREQBYPAD_S_RESERVED_2 = 2;
    PAD_LVPPRKINREQBYPAD_S_RESERVED_3 = 3;
  }
  enum PADLVPPrkinReqByMobileSType {
    PAD_LVPPRKINREQBYMOBILE_S_NOREQUEST = 0;
    PAD_LVPPRKINREQBYMOBILE_S_LVPPARKINGINREQUESTBYMOBILE = 1;
    PAD_LVPPRKINREQBYMOBILE_S_RESERVED_2 = 2;
    PAD_LVPPRKINREQBYMOBILE_S_RESERVED_3 = 3;
  }
  enum PADHPAPushingFuncSwitchStateSType {
    PAD_HPAPUSHINGFUNCSWITCH_STATE_S_INVALID = 0;
    PAD_HPAPUSHINGFUNCSWITCH_STATE_S_SWITCHOFF = 1;
    PAD_HPAPUSHINGFUNCSWITCH_STATE_S_SWITCHON = 2;
    PAD_HPAPUSHINGFUNCSWITCH_STATE_S_RESERVED_3 = 3;
  }
  enum PADMAPandParkSwtSType {
    PAD_MAPANDPARKSWT_S_NOSHOW = 0;
    PAD_MAPANDPARKSWT_S_MAPMODE = 1;
    PAD_MAPANDPARKSWT_S_HPAPARKMODE = 2;
    PAD_MAPANDPARKSWT_S_RESERVED_3 = 3;
  }
  enum PADLVPPrkoutReqByPADSType {
    PAD_LVPPRKOUTREQBYPAD_S_NOREQUEST = 0;
    PAD_LVPPRKOUTREQBYPAD_S_HPAPARKINGOUTREQUESTBYPAD = 1;
    PAD_LVPPRKOUTREQBYPAD_S_RESERVED_2 = 2;
    PAD_LVPPRKOUTREQBYPAD_S_RESERVED_3 = 3;
  }
  enum PADHPAPushMapCardStsSType {
    PAD_HPAPUSHMAPCARDSTS_S_NONE = 0;
    PAD_HPAPUSHMAPCARDSTS_S_NOREQUEST = 1;
    PAD_HPAPUSHMAPCARDSTS_S_REQUEST = 2;
    PAD_HPAPUSHMAPCARDSTS_S_RESERVED_3 = 3;
  }
  enum PADHPAPushParkCardStsSType {
    PAD_HPAPUSHPARKCARDSTS_S_NONE = 0;
    PAD_HPAPUSHPARKCARDSTS_S_NOREQUEST = 1;
    PAD_HPAPUSHPARKCARDSTS_S_REQUEST = 2;
    PAD_HPAPUSHPARKCARDSTS_S_RESERVED_3 = 3;
  }
  // Medium_0x4EF_ChilD_ID_S [] [0|255]
  optional int32 medium_0x4_ef_chil_d_id_s = 1;
  // FCTA_Enable_S [] [0|3]
  optional FCTAEnableSType fcta_enable_s = 2;
  // FCTB_Enable_S [] [0|3]
  optional FCTBEnableSType fctb_enable_s = 3;
  // ILCA_Enable_S [] [0|3]
  optional ILCAEnableSType ilca_enable_s = 4;
  // HNP_Enable_S [] [0|3]
  optional HNPEnableSType hnp_enable_s = 5;
  // ISLC_Enable_S [] [0|3]
  optional ISLCEnableSType islc_enable_s = 6;
  // TLA_Enable_S [] [0|3]
  optional TLAEnableSType tla_enable_s = 7;
  // UNP_Enable_S [] [0|3]
  optional UNPEnableSType unp_enable_s = 8;
  // Traffic_Sign_Recog_Speed_C_M_S [] [0|3]
  optional TrafficSignRecogSpeedCMSType traffic_sign_recog_speed_c_m_s = 9;
  // DVR_Video_Operation_S [] [0|15]
  optional DVRVideoOperationSType dvr_video_operation_s = 10;
  // PCW_Level_Req_S [] [0|7]
  optional PCWLevelReqSType pcw_level_req_s = 11;
  // PAD_LVP_Req_S [] [0|1]
  optional bool pad_lvp_req_s = 12;
  // PAD_LVP_Mode_S [] [0|3]
  optional PADLVPModeSType pad_lvp_mode_s = 13;
  // S_Of_ESA_Funct_Sent_By_The_PAD_S [] [0|3]
  optional SOfESAFunctSentByThePADSType s_of_esa_funct_sent_by_the_pad_s = 14;
  // PAD_LVPReqbyPADorAPP_S [] [0|7]
  optional PADLVPReqbyPADorAPPSType pad_lvp_reqby_pa_dor_app_s = 15;
  // PAD_LVPCloseSetReq_S [] [0|1]
  optional bool pad_lvp_close_set_req_s = 16;
  // PAD_LVPParkinStartSetReq_S [] [0|1]
  optional bool pad_lvp_parkin_start_set_req_s = 17;
  // PAD_LVPParkoutStartSetReq_S [] [0|1]
  optional bool pad_lvp_parkout_start_set_req_s = 18;
  // PAD_LVPSlotSetReq_S [] [0|1]
  optional bool pad_lvp_slot_set_req_s = 19;
  // PAD_LVPEndSetReq_S [] [0|1]
  optional bool pad_lvp_end_set_req_s = 20;
  // PAD_LVPResetMap_S [] [0|1]
  optional bool pad_lvp_reset_map_s = 21;
  // TBOX_LVPSwtReq_S [] [0|1]
  optional bool tbox_lvp_swt_req_s = 22;
  // TBOX_LVPParkInReqSwt_S [] [0|1]
  optional bool tbox_lvp_park_in_req_swt_s = 23;
  // TBOX_LVPParkOutReqSwt_S [] [0|1]
  optional bool tbox_lvp_park_out_req_swt_s = 24;
  // NRP_Switch_Status_S [] [0|3]
  optional NRPSwitchStatusSType nrp_switch_status_s = 25;
  // PAD_ParkingCtrlPADorAPP_S [] [0|7]
  optional PADParkingCtrlPADorAPPSType pad_parking_ctrl_pa_dor_app_s = 26;
  // Front_Parking_Button_s [] [0|1]
  optional bool front_parking_button_s = 27;
  // Rear_Parking_Button_s [] [0|1]
  optional bool rear_parking_button_s = 28;
  // NRP_Autopass_Exit_Button_S [] [0|1]
  optional bool nrp_autopass_exit_button_s = 29;
  // TBA_Activate_Button_S [] [0|1]
  optional bool tba_activate_button_s = 30;
  // TBA_Resume_Button_S [] [0|1]
  optional bool tba_resume_button_s = 31;
  // TBA_Exit_Button_S [] [0|1]
  optional bool tba_exit_button_s = 32;
  // TBA_Enable_S [] [0|3]
  optional TBAEnableSType tba_enable_s = 33;
  // ISA_PCW_Level_Req_S [] [0|7]
  optional ISAPCWLevelReqSType isa_pcw_level_req_s = 34;
  // PAD_SVP_Mode_S [] [0|3]
  optional PADSVPModeSType pad_svp_mode_s = 35;
  // ISA_Warning_Enable_S [] [0|3]
  optional ISAWarningEnableSType isa_warning_enable_s = 36;
  // ISA_Brake_Enable_S [] [0|3]
  optional ISABrakeEnableSType isa_brake_enable_s = 37;
  // PAD_SVPCloseSetReq_S [] [0|1]
  optional bool pad_svp_close_set_req_s = 38;
  // PAD_PrkingSlotIDSet_S [] [0|65535]
  optional int32 pad_prking_slot_id_set_s = 39;
  // PAD_PrkingSlotAreaSet_S [] [0|255]
  optional int32 pad_prking_slot_area_set_s = 40;
  // PAD_ADS_AVPFunctionReq_S [] [0|7]
  optional PADADSAVPFunctionReqSType pad_ads_avp_function_req_s = 41;
  // ISA_PAD_Display_Enable_S [] [0|3]
  optional ISAPADDisplayEnableSType isa_pad_display_enable_s = 42;
  // ISA_Acoustic_Warning_Enable_S [] [0|3]
  optional ISAAcousticWarningEnableSType isa_acoustic_warning_enable_s = 43;
  // TBOX_SVPSwtReq_S [] [0|1]
  optional bool tbox_svp_swt_req_s = 44;
  // TBOX_ParkInReqSwt_S [] [0|1]
  optional bool tbox_park_in_req_swt_s = 45;
  // TBOX_ParkOutReqSwt_S [] [0|1]
  optional bool tbox_park_out_req_swt_s = 46;
  // TBOX_ParkOutReqSwtRC_S [] [0|1]
  optional bool tbox_park_out_req_swt_rc_s = 47;
  // TBOX_ParkInReqSwtRC_S [] [0|15]
  optional int32 tbox_park_in_req_swt_rc_s = 48;
  // TBOX_PickupDropoffPOISelected_S [] [0|255]
  optional int32 tbox_pickup_dropoff_poi_selected_s = 49;
  // TBOX_PrkingSlotIDSet_S [] [0|65535]
  optional int32 tbox_prking_slot_id_set_s = 50;
  // TBOX_PrkingSlotAreaSet_S [] [0|255]
  optional int32 tbox_prking_slot_area_set_s = 51;
  // TBOX_PrkingSlotSet_S [] [0|3]
  optional TBOXPrkingSlotSetSType tbox_prking_slot_set_s = 52;
  // NRP_Autopass_Activate_Button_S [] [0|1]
  optional bool nrp_autopass_activate_button_s = 53;
  // NRP_Autopass_Resume_Button_S [] [0|1]
  optional bool nrp_autopass_resume_button_s = 54;
  // TBOX_ReSearching_S [] [0|3]
  optional TBOXReSearchingSType tbox_re_searching_s = 55;
  // PAD_PickupDropoffPOISelected_S [] [0|255]
  optional int32 pad_pickup_dropoff_poi_selected_s = 56;
  // PAD_QuickEntryReq_Switch_State_S [] [0|3]
  optional PADQuickEntryReqSwitchStateSType pad_quick_entry_req_switch_state_s = 57;
  // PAD_FrontPkgReq_Switch_State_S [] [0|3]
  optional PADFrontPkgReqSwitchStateSType pad_front_pkg_req_switch_state_s = 58;
  // PAD_RPAReq_Switch_State_S [] [0|3]
  optional PADRPAReqSwitchStateSType pad_rpa_req_switch_state_s = 59;
  // MEB_Switch_S [] [0|3]
  optional MEBSwitchSType meb_switch_s = 60;
  // PAD_APA_Park_Mode_Switch_State_S [] [0|3]
  optional PADAPAParkModeSwitchStateSType pad_apa_park_mode_switch_state_s = 61;
  // PAD_RPA_Park_Mode_Switch_State_S [] [0|3]
  optional PADRPAParkModeSwitchStateSType pad_rpa_park_mode_switch_state_s = 62;
  // PAD_APA_Mode_S [] [0|3]
  optional PADAPAModeSType pad_apa_mode_s = 63;
  // E2E_Enable_S [] [0|3]
  optional E2EEnableSType e2_e_enable_s = 64;
  // PAD_PSLSelected_S [] [0|7]
  optional PADPSLSelectedSType pad_psl_selected_s = 65;
  // DiEye_Switch_State_S [] [0|3]
  optional DiEyeSwitchStateSType di_eye_switch_state_s = 66;
  // IOA_Function_Switch_S [] [0|3]
  optional IOAFunctionSwitchSType ioa_function_switch_s = 67;
  // PAD_Park_Out_Direction_Select_S [] [0|15]
  optional PADParkOutDirectionSelectSType pad_park_out_direction_select_s = 68;
  // PAD_AVMSts_S [] [0|3]
  optional PADAVMStsSType pad_avm_sts_s = 69;
  // PAD_HPAParkReqByPAD_S [] [0|3]
  optional PADHPAParkReqByPADSType pad_hpa_park_req_by_pad_s = 70;
  // TBOX_LVPVideoStream_Req_S [] [0|1]
  optional bool tbox_lvp_video_stream_req_s = 71;
  // TBOX_EmergencyBrakeReqFromAPP_S [] [0|1]
  optional bool tbox_emergency_brake_req_from_app_s = 72;
  // PAD_LVPClosePushingFunc_S [] [0|1]
  optional bool pad_lvp_close_pushing_func_s = 73;
  // PAD_HPAResetParkinMAP_Req_S [] [0|1]
  optional bool pad_hpa_reset_parkin_map_req_s = 74;
  // PAD_HPAResetParkOutMAP_Req_S [] [0|1]
  optional bool pad_hpa_reset_park_out_map_req_s = 75;
  // PAD_SVP_HDMAPsts_S [] [0|3]
  optional PADSVPHDMAPstsSType pad_svp_hdma_psts_s = 76;
  // PAD_SVP_MAPAutodownload_S [] [0|1]
  optional bool pad_svp_map_autodownload_s = 77;
  // PAD_SVP_ReSearching_S [] [0|3]
  optional PADSVPReSearchingSType pad_svp_re_searching_s = 78;
  // PAD_SVP_ClosePushingFunc_S [] [0|1]
  optional bool pad_svp_close_pushing_func_s = 79;
  // TBOX_MAPupdateSts_S [] [0|3]
  optional TBOXMAPupdateStsSType tbox_ma_pupdate_sts_s = 80;
  // PAD_LVPPrkinSlotMod_S [] [0|3]
  optional PADLVPPrkinSlotModSType pad_lvp_prkin_slot_mod_s = 81;
  // TBOX_LVPPrkinSlotMod_S [] [0|3]
  optional TBOXLVPPrkinSlotModSType tbox_lvp_prkin_slot_mod_s = 82;
  // PAD_LVPPrkinRadomSlotSwt_S [] [0|1]
  optional bool pad_lvp_prkin_radom_slot_swt_s = 83;
  // TBOX_RemDeviceSts_S [] [0|3]
  optional TBOXRemDeviceStsSType tbox_rem_device_sts_s = 84;
  // Rebuild_Diagram_Request_S [] [0|3]
  optional RebuildDiagramRequestSType rebuild_diagram_request_s = 85;
  // PAD_LVPPrkinReqByPAD_S [] [0|3]
  optional PADLVPPrkinReqByPADSType pad_lvp_prkin_req_by_pad_s = 86;
  // PAD_LVPPrkinReqByMobile_S [] [0|3]
  optional PADLVPPrkinReqByMobileSType pad_lvp_prkin_req_by_mobile_s = 87;
  // PAD_HPAPushingFuncSwitch_State_S [] [0|3]
  optional PADHPAPushingFuncSwitchStateSType pad_hpa_pushing_func_switch_state_s = 88;
  // PAD_MAPandParkSwt_S [] [0|3]
  optional PADMAPandParkSwtSType pad_ma_pand_park_swt_s = 89;
  // PAD_LVPPrkoutReqByPAD_S [] [0|3]
  optional PADLVPPrkoutReqByPADSType pad_lvp_prkout_req_by_pad_s = 90;
  // PAD_HPAPushMapCardSts_S [] [0|3]
  optional PADHPAPushMapCardStsSType pad_hpa_push_map_card_sts_s = 91;
  // PAD_HPAPushParkCardSts_S [] [0|3]
  optional PADHPAPushParkCardStsSType pad_hpa_push_park_card_sts_s = 92;
}

message RIGHT_BCM_0X511 {
// Report Message
  // Source_Node_ID_511_S [] [0|255]
  optional int32 source_node_id_511_s = 1;
  // Repeat_Message_Request_511_S [] [0|1]
  optional bool repeat_message_request_511_s = 2;
  // Active_WakeupFlag_511_S [] [0|1]
  optional bool active_wakeup_flag_511_s = 3;
  // Partial_Network_inforFlag_511_S [] [0|1]
  optional bool partial_network_infor_flag_511_s = 4;
  // Wakeup_Reason_511_S [] [0|255]
  optional int32 wakeup_reason_511_s = 5;
  // CheckSum_511_S [] [0|255]
  optional int32 check_sum_511_s = 6;
}

message ADS_0X554 {
// Control Message
  // Source_Node_ID [] [0|255]
  optional int32 source_node_id = 1;
  // Repeat_Message_Request_554_S [] [0|1]
  optional bool repeat_message_request_554_s = 2;
  // Active_WakeupFlag_554_S [] [0|1]
  optional bool active_wakeup_flag_554_s = 3;
  // Partial_Network_inforFlag_554_S [] [0|1]
  optional bool partial_network_infor_flag_554_s = 4;
  // Wakeup_Reason_554_S [] [0|255]
  optional int32 wakeup_reason_554_s = 5;
  // CheckSum_554_S [] [0|255]
  optional int32 check_sum_554_s = 6;
}

message ADS_0X05F {
// Control Message
  enum MESSAGETYPEID05FSType {
    MESSAGE_TYPE_ID_05F_S_RESERVED_0 = 0;
    MESSAGE_TYPE_ID_05F_S_FRESHNESSVALUESYNCHRONIZATIONMESSAGE = 1;
    MESSAGE_TYPE_ID_05F_S_FRESHNESSVALUESYNCHRONIZATIONREQUESTMESSAGE = 2;
    MESSAGE_TYPE_ID_05F_S_RESERVED_3 = 3;
  }
  // MESSAGE_TYPE_ID_05F_S [] [0|255]
  optional MESSAGETYPEID05FSType message_type_id_05_f_s = 1;
  // PDU_CANID_05F_S [] [0|65525]
  optional int32 pdu_canid_05_f_s = 2;
  // TripCnt_05F_S [] [0|16777215]
  optional int32 trip_cnt_05_f_s = 3;
  // ResetCnt_05F_S [] [0|65525]
  optional int32 reset_cnt_05_f_s = 4;
  optional int64 authentication_information_05_f_s = 5;
}

message PAS_0X701 {
// Report Message
  // PAS_Diag_701_S [] [0|255]
  optional int32 pas_diag_701_s = 1;
}

message PAS_0X709 {
// Control Message
  // PAS_Diag_709_S [] [0|255]
  optional int32 pas_diag_709_s = 1;
}

message ADS_0X712 {
// Report Message
  // ADS_Diag_712_S [] [0|255]
  optional int32 ads_diag_712_s = 1;
}

message ADS_0X71A {
// Control Message
  // ADS_Diag_71A_S [] [0|255]
  optional int32 ads_diag_71_a_s = 1;
}

message LIDAR_0X757 {
// Report Message
  // Lidar_Diag_757_S [] [0|255]
  optional int32 lidar_diag_757_s = 1;
}

message LIDAR_0X75F {
// Control Message
  // Lidar_Diag_75F_S [] [0|255]
  optional int32 lidar_diag_75_f_s = 1;
}

message ADS_0X7DF {
// Report Message
  // ADS_Diag_7DF_S [] [0|255]
  optional int32 ads_diag_7_df_s = 1;
}

message LEFT_BCM_0X095 {
// Report Message
  enum AVPReqEchoSType {
    AVPREQECHO_S_INVALIDSTATE = 0;
    AVPREQECHO_S_NOTALLOWED = 1;
    AVPREQECHO_S_ALLOW = 2;
    AVPREQECHO_S_RESERVED_3 = 3;
  }
  // AVPReqEcho_S [] [0|3]
  optional AVPReqEchoSType avp_req_echo_s = 1;
}

message ADS_0X0AE {
// Control Message
  enum ADSAMAPWarnSType {
    ADS_AMAP_WARN_S_DEFAULT = 0;
    ADS_AMAP_WARN_S_FAULT = 1;
    ADS_AMAP_WARN_S_ACTIVATE = 2;
    ADS_AMAP_WARN_S_OFF = 3;
  }
  enum ADSAMAPWarnDispSType {
    ADS_AMAP_WARN_DISP_S_OFF = 0;
    ADS_AMAP_WARN_DISP_S_FAULT = 1;
    ADS_AMAP_WARN_DISP_S_AMAP_ACTIVATE = 2;
    ADS_AMAP_WARN_DISP_S_AMAP_EXIT = 3;
    ADS_AMAP_WARN_DISP_S_DRIVINGMODEWARNING = 4;
    ADS_AMAP_WARN_DISP_S_LARGERAINWARNING = 5;
    ADS_AMAP_WARN_DISP_S_RESERVED_6 = 6;
    ADS_AMAP_WARN_DISP_S_RESERVED_7 = 7;
  }
  enum ADSAMAPSettingStatusSType {
    ADS_AMAP_SETTINGSTATUS_S_INVALID = 0;
    ADS_AMAP_SETTINGSTATUS_S_ON = 1;
    ADS_AMAP_SETTINGSTATUS_S_OFF = 2;
    ADS_AMAP_SETTINGSTATUS_S_RESERVED_3 = 3;
  }
  enum ISAWarningDriectionSType {
    ISA_WARNING_DRIECTION_S_INVALID = 0;
    ISA_WARNING_DRIECTION_S_FRONTSIDE = 1;
    ISA_WARNING_DRIECTION_S_REARSIDE = 2;
    ISA_WARNING_DRIECTION_S_LSIDE = 3;
    ISA_WARNING_DRIECTION_S_RSIDE = 4;
    ISA_WARNING_DRIECTION_S_LSIDEADDFRONTSIDE = 5;
    ISA_WARNING_DRIECTION_S_RSIDEADDFRONTSIDE = 6;
    ISA_WARNING_DRIECTION_S_LSIDEADDREARSIDE = 7;
    ISA_WARNING_DRIECTION_S_RSIDEADDREARSIDE = 8;
    ISA_WARNING_DRIECTION_S_LSIDEADDRSIDEADDFRONTSIDE = 9;
    ISA_WARNING_DRIECTION_S_RESERVED_10 = 10;
    ISA_WARNING_DRIECTION_S_RESERVED_11 = 11;
    ISA_WARNING_DRIECTION_S_RESERVED_12 = 12;
    ISA_WARNING_DRIECTION_S_RESERVED_13 = 13;
    ISA_WARNING_DRIECTION_S_RESERVED_14 = 14;
    ISA_WARNING_DRIECTION_S_RESERVED_15 = 15;
  }
  enum ISAstatusSType {
    ISA_STATUS_S_OFF = 0;
    ISA_STATUS_S_PASSIVE = 1;
    ISA_STATUS_S_MAINONSTANDBYORACT = 2;
    ISA_STATUS_S_RESERVE_3 = 3;
    ISA_STATUS_S_RESERVE_4 = 4;
    ISA_STATUS_S_RESERVED_5 = 5;
    ISA_STATUS_S_RESERVED_6 = 6;
    ISA_STATUS_S_RESERVED_7 = 7;
  }
  enum ISAIntersectionStatusType {
    ISA_INTERSECTION_STATUS_UNKNOWN = 0;
    ISA_INTERSECTION_STATUS_ABOUTTOENTERINTERSECTION = 1;
    ISA_INTERSECTION_STATUS_ATINTERSECTION = 2;
    ISA_INTERSECTION_STATUS_EXIT = 3;
  }
  // ADS_AMAP_Warn_S [] [0|3]
  optional ADSAMAPWarnSType ads_amap_warn_s = 1;
  // ADS_AMAP_Warn_Disp_S [] [0|7]
  optional ADSAMAPWarnDispSType ads_amap_warn_disp_s = 2;
  // ADS_AMAP_SettingStatus_S [] [0|3]
  optional ADSAMAPSettingStatusSType ads_amap_setting_status_s = 3;
  // ISA_Warning_State_S [] [0|1]
  optional bool isa_warning_state_s = 4;
  // ISA_Brake_State_S [] [0|1]
  optional bool isa_brake_state_s = 5;
  // ISA_PAD_Display_State_S [] [0|1]
  optional bool isa_pad_display_state_s = 6;
  // ISA_Acoustic_Warning_State_S [] [0|1]
  optional bool isa_acoustic_warning_state_s = 7;
  // ISA_Warning_S [] [0|1]
  optional bool isa_warning_s = 8;
  // ISA_Warning_Driection_S [] [0|15]
  optional ISAWarningDriectionSType isa_warning_driection_s = 9;
  // ISA_Acoustic_Warning_S [] [0|1]
  optional bool isa_acoustic_warning_s = 10;
  // TBA_Track_Length_S [m] [0|50]
  optional double tba_track_length_s = 11;
  // RSI_Height_Limit_Sign_S [m] [0|25.4]
  optional double rsi_height_limit_sign_s = 12;
  // ISA_status_S [] [0|7]
  optional ISAstatusSType isa_status_s = 13;
  // ISA_Intersection_Status [] [0|3]
  optional ISAIntersectionStatusType isa_intersection_status = 14;
  // AMAP_stateDHL_CycNum_S [] [0|63]
  optional int32 amap_state_dhl_cyc_num_s = 15;
  // Counter_0AE_S [] [0|15]
  optional int32 counter_0_ae_s = 16;
  // CheckSum_0AE_S [] [0|255]
  optional int32 check_sum_0_ae_s = 17;
}

message VCU_0X0F4 {
// Control Message
  enum RnkSType {
    RNK_S_RESERVED_0 = 0;
    RNK_S_P = 1;
    RNK_S_R = 2;
    RNK_S_N = 3;
    RNK_S_D = 4;
    RNK_S_RESERVED_5 = 5;
  }
  enum OklampSType {
    OK_LAMP_S_DONOTDISPLAY = 0;
    OK_LAMP_S_OK = 1;
    OK_LAMP_S_PSEUDOOK = 2;
    OK_LAMP_S_RESERVED_3 = 3;
  }
  enum VCUPkgFuncEchoSType {
    VCU_PKG_FUNCECHO_S_NONE = 0;
    VCU_PKG_FUNCECHO_S_APA = 1;
    VCU_PKG_FUNCECHO_S_RPA = 2;
    VCU_PKG_FUNCECHO_S_AVP = 3;
  }
  enum VehdrvmodSType {
    VEH_DRV_MOD_S_INVALID = 0;
    VEH_DRV_MOD_S_NORMAL = 1;
    VEH_DRV_MOD_S_ECO = 2;
    VEH_DRV_MOD_S_SPORT = 3;
    VEH_DRV_MOD_S_SNOWORICEORGRASSORGRIT = 4;
    VEH_DRV_MOD_S_SAND = 5;
    VEH_DRV_MOD_S_MUDRUTS = 6;
    VEH_DRV_MOD_S_MOUNTAIN = 7;
    VEH_DRV_MOD_S_ROCK = 8;
    VEH_DRV_MOD_S_WADING = 9;
    VEH_DRV_MOD_S_SUPER_WADING = 10;
    VEH_DRV_MOD_S_ADAPTIVE_FEEDBACK_SYSTEM = 11;
    VEH_DRV_MOD_S_UTURNINPLACE = 12;
    VEH_DRV_MOD_S_RESERVED_13 = 13;
    VEH_DRV_MOD_S_RESERVED_14 = 14;
    VEH_DRV_MOD_S_RESERVED_15 = 15;
    VEH_DRV_MOD_S_RESERVED_16 = 16;
    VEH_DRV_MOD_S_RALLY = 17;
    VEH_DRV_MOD_S_LIMP_MODE_RESERVED_18 = 18;
    VEH_DRV_MOD_S_CUSTOM_MODE_RESERVED_19 = 19;
    VEH_DRV_MOD_S_SPORT_PLUS = 20;
    VEH_DRV_MOD_S_AUTOMATICMODE_RESERVED_21 = 21;
    VEH_DRV_MOD_S_TRACKMODE = 22;
  }
  enum VCUVehicleStandstillSType {
    VCU_VEHICLE_STANDSTILL_S_NOTSTANDSTILL = 0;
    VCU_VEHICLE_STANDSTILL_S_STANDSTILL = 1;
    VCU_VEHICLE_STANDSTILL_S_INVALID = 2;
    VCU_VEHICLE_STANDSTILL_S_RESERVED_3 = 3;
  }
  enum VCUSteeringAngleCtrlStRddcyType {
    VCU_STEERING_ANGLECTRLST_RDDCY_NOTREADY = 0;
    VCU_STEERING_ANGLECTRLST_RDDCY_READY = 1;
    VCU_STEERING_ANGLECTRLST_RDDCY_ACTIVE = 2;
    VCU_STEERING_ANGLECTRLST_RDDCY_FAILED = 3;
  }
  enum VCUSteeringAngleCtrlStMRRType {
    VCU_STEERING_ANGLECTRLST_MRR_NOTREADY = 0;
    VCU_STEERING_ANGLECTRLST_MRR_READY = 1;
    VCU_STEERING_ANGLECTRLST_MRR_ACTIVE = 2;
    VCU_STEERING_ANGLECTRLST_MRR_FAILED = 3;
  }
  enum VCUSAngleCtrlAbortFType {
    VCU_SANGLECTRLABORTF_DRIVEROVERRIDE = 0;
    VCU_SANGLECTRLABORTF_VEHSPDINVALID = 1;
    VCU_SANGLECTRLABORTF_ADASECUSIGNALERR = 2;
    VCU_SANGLECTRLABORTF_ADASECUACTIREQERROR = 3;
    VCU_SANGLECTRLABORTF_REQAGLSLOPEOVERRANGE = 4;
    VCU_SANGLECTRLABORTF_REQAGLEVALUEOVERRANGE = 5;
    VCU_SANGLECTRLABORTF_ONEMCUFAILURE = 6;
    VCU_SANGLECTRLABORTF_TWOMCUFAILURE = 7;
    VCU_SANGLECTRLABORTF_THREEMCUFAILURE = 8;
    VCU_SANGLECTRLABORTF_FOURMCUFAILURE = 9;
    VCU_SANGLECTRLABORTF_RESERVED_10 = 10;
  }
  enum VCUSystemStatusSType {
    VCU_SYSTEM_STATUS_S_FULLSYS = 0;
    VCU_SYSTEM_STATUS_S_DEGRADE = 1;
    VCU_SYSTEM_STATUS_S_RESERVED_2 = 2;
    VCU_SYSTEM_STATUS_S_RESERVED_3 = 3;
    VCU_SYSTEM_STATUS_S_RESERVED_4 = 4;
    VCU_SYSTEM_STATUS_S_RESERVED_5 = 5;
    VCU_SYSTEM_STATUS_S_RESERVED_6 = 6;
    VCU_SYSTEM_STATUS_S_RESERVED_7 = 7;
    VCU_SYSTEM_STATUS_S_RESERVED_8 = 8;
    VCU_SYSTEM_STATUS_S_RESERVED_9 = 9;
    VCU_SYSTEM_STATUS_S_RESERVED_10 = 10;
    VCU_SYSTEM_STATUS_S_RESERVED_11 = 11;
    VCU_SYSTEM_STATUS_S_RESERVED_12 = 12;
    VCU_SYSTEM_STATUS_S_RESERVED_13 = 13;
    VCU_SYSTEM_STATUS_S_RESERVED_14 = 14;
    VCU_SYSTEM_STATUS_S_RESERVED_15 = 15;
  }
  enum VCUcreepstatusType {
    VCU_CREEP_STATUS_INHIBITED = 0;
    VCU_CREEP_STATUS_OFF = 1;
    VCU_CREEP_STATUS_STAND_BY = 2;
    VCU_CREEP_STATUS_ACTIVE = 3;
  }
  enum ASACtrlStsType {
    ASA_CTRL_STS_ACTIVE_TURNLEFT = 0;
    ASA_CTRL_STS_ACTIVE_TURNRIGHT = 1;
    ASA_CTRL_STS_STANDY_BY = 2;
    ASA_CTRL_STS_CLOSE = 3;
  }
  enum VCUAMAPActiveSType {
    VCU_AMAP_ACTIVE_S_UNRESPONSIVE = 0;
    VCU_AMAP_ACTIVE_S_COMPLETERESPONSE = 1;
    VCU_AMAP_ACTIVE_S_PARTIALRESPONSE = 2;
    VCU_AMAP_ACTIVE_S_RESPONSEINTERRUPT = 3;
  }
  enum VOT2PkgconditionType {
    VOT2PKG_CONDITION_STANDBY = 0;
    VOT2PKG_CONDITION_ACTIVE = 1;
    VOT2PKG_CONDITION_EXIT_NORMAL = 2;
    VOT2PKG_CONDITION_EXIT_ABNORMAL = 3;
  }
  enum VOT2PkgabortreasonType {
    VOT2PKG_ABORT_REASON_INVALD = 0;
    VOT2PKG_ABORT_REASON_EXCESSIVE_SLOPE = 1;
    VOT2PKG_ABORT_REASON_DOORS_OPEN = 2;
    VOT2PKG_ABORT_REASON_SAFE_BELT = 3;
  }
  // Checksum_0F4_S [] [0E-008|65535.00000000]
  optional int32 checksum_0_f4_s = 1;
  // Counter_0F4_S [] [0E-008|65535.00000000]
  optional int32 counter_0_f4_s = 2;
  // Rnk_S [] [0E-008|15.00000000]
  optional RnkSType rnk_s = 3;
  // Ok_lamp_S [] [0E-008|3.00000000]
  optional OklampSType ok_lamp_s = 4;
  // Rnk_efc_flg_S [] [0E-008|1.00000000]
  optional bool rnk_efc_flg_s = 5;
  // Ovrd_flg_S [] [0E-008|1.00000000]
  optional bool ovrd_flg_s = 6;
  // VCU_MEB_Active_S [] [0E-008|1.00000000]
  optional bool vcu_meb_active_s = 7;
  // VCU_RCTB_Available_S [] [0E-008|1.00000000]
  optional bool vcu_rctb_available_s = 8;
  // VCU_RCTB_Active_S [] [0E-008|1.00000000]
  optional bool vcu_rctb_active_s = 9;
  // VCU_AEB_Available_S [] [0E-008|1.00000000]
  optional bool vcu_aeb_available_s = 10;
  // VCU_AEB_Dec_Active_S [] [0E-008|1.00000000]
  optional bool vcu_aeb_dec_active_s = 11;
  // VCU_AWB_Available_S [] [0E-008|1.00000000]
  optional bool vcu_awb_available_s = 12;
  // VCU_AWB_Active_S [] [0E-008|1.00000000]
  optional bool vcu_awb_active_s = 13;
  // VCU_dTCSActive_S [] [0E-008|1.00000000]
  optional bool vcu_d_tcs_active_s = 14;
  // VCU_dTCSFault_S [] [0E-008|1.00000000]
  optional bool vcu_d_tcs_fault_s = 15;
  // VCU_VLC_Available_S [] [0E-008|1.00000000]
  optional bool vcu_vlc_available_s = 16;
  // VCU_VLC_Active_S [] [0E-008|1.00000000]
  optional bool vcu_vlc_active_s = 17;
  // VCU_VLC_Fail_S [] [0E-008|1.00000000]
  optional bool vcu_vlc_fail_s = 18;
  // VCU_CDD_Available_S [] [0E-008|1.00000000]
  optional bool vcu_cdd_available_s = 19;
  // VCU_CDD_Active_S [] [0E-008|1.00000000]
  optional bool vcu_cdd_active_s = 20;
  // VCU_CDD_Fail_S [] [0E-008|1.00000000]
  optional bool vcu_cdd_fail_s = 21;
  // VCU_Pkg_FuncEcho_S [] [0E-008|3.00000000]
  optional VCUPkgFuncEchoSType vcu_pkg_func_echo_s = 22;
  // VCU_Pkg_Available_S [] [0E-008|1.00000000]
  optional bool vcu_pkg_available_s = 23;
  // Veh_drv_mod_S [] [0E-008|255.00000000]
  optional VehdrvmodSType veh_drv_mod_s = 24;
  // VCU_Vehicle_DrivingMode_Valid_S [] [0E-008|1.00000000]
  optional bool vcu_vehicle_driving_mode_valid_s = 25;
  // TBS_detn_flg [] [0E-008|1.00000000]
  optional bool tbs_detn_flg = 26;
  // VCU_RedunCapacitySts_S [] [0E-008|1.00000000]
  optional bool vcu_redun_capacity_sts_s = 27;
  // VCU_RddtBrakeActive_S [] [0E-008|1.00000000]
  optional bool vcu_rddt_brake_active_s = 28;
  // VCU_Vehicle_Standstill_S [] [0E-008|3.00000000]
  optional VCUVehicleStandstillSType vcu_vehicle_standstill_s = 29;
  // VCU_Steering_AngleCtrlSt_Rddcy [] [0E-008|3.00000000]
  optional VCUSteeringAngleCtrlStRddcyType vcu_steering_angle_ctrl_st_rddcy = 30;
  // VCU_Steering_AngleCtrlSt_MRR [] [0E-008|3.00000000]
  optional VCUSteeringAngleCtrlStMRRType vcu_steering_angle_ctrl_st_mrr = 31;
  // VCU_Request_Angle_OR_Rddcy [] [0E-008|1.00000000]
  optional bool vcu_request_angle_or_rddcy = 32;
  // VCU_Req_Anglepeed_OR_Rddcy [] [0E-008|1.00000000]
  optional bool vcu_req_anglepeed_or_rddcy = 33;
  // VCU_SAngleCtrlAbortF [] [0E-008|15.00000000]
  optional VCUSAngleCtrlAbortFType vcu_s_angle_ctrl_abort_f = 34;
  // VCU_System_Status_S [] [0E-008|15.00000000]
  optional VCUSystemStatusSType vcu_system_status_s = 35;
  // tv4_actv_flg [] [0E-008|1.00000000]
  optional bool tv4_actv_flg = 36;
  // VCU_Vehicle_Hold_Active [] [0E-008|1.00000000]
  optional bool vcu_vehicle_hold_active = 37;
  // VCU_MEB_Available_S [] [0E-008|1.00000000]
  optional bool vcu_meb_available_s = 38;
  // VCU_creep_status [] [0E-008|3.00000000]
  optional VCUcreepstatusType vcu_creep_status = 39;
  // ASA_Fault [] [0E-008|1.00000000]
  optional bool asa_fault = 40;
  // ASA_Ctrl_Sts [] [0E-008|3.00000000]
  optional ASACtrlStsType asa_ctrl_sts = 41;
  // VCU_AMAP_Active_S [] [0E-008|3.00000000]
  optional VCUAMAPActiveSType vcu_amap_active_s = 42;
  // VCU_AMAP_Available_S [] [0E-008|1.00000000]
  optional bool vcu_amap_available_s = 43;
  // VOT2Pkg_available [] [0E-008|1.00000000]
  optional bool vot2_pkg_available = 44;
  // VOT2Pkg_condition [] [0E-008|7.00000000]
  optional VOT2PkgconditionType vot2_pkg_condition = 45;
  // VOT2Pkg_abort_reason [] [0E-008|31.00000000]
  optional VOT2PkgabortreasonType vot2_pkg_abort_reason = 46;
  // VCU2Pkg_DRfastswich_enable [] [0E-008|1.00000000]
  optional bool vcu2_pkg_d_rfastswich_enable = 47;
}

message ADAS_0X2E7 {
// Control Message
  enum SMNetworkStateType {
    SM_NETWORKSTATE_NM_SLEEP = 0;
    SM_NETWORKSTATE_NM_WAKEUP = 1;
    SM_NETWORKSTATE_APP_WAKEUP = 2;
    SM_NETWORKSTATE_RESERVED_3 = 3;
  }
  enum SMRegisterStateType {
    SM_REGISTERSTATE_REGISTER_SUCCESSED = 0;
    SM_REGISTERSTATE_REGISTER_FAILED = 1;
    SM_REGISTERSTATE_REGISTER_FAILED_REPEAT = 2;
    SM_REGISTERSTATE_RESERVED_3 = 3;
  }
  enum SMStateRunningFlagType {
    SM_STATERUNNING_FLAG_REGISTER_SUCCESSED = 0;
    SM_STATERUNNING_FLAG_REGISTER_FAILED = 1;
    SM_STATERUNNING_FLAG_REGISTER_FAILED_REPEAT = 2;
    SM_STATERUNNING_FLAG_RESERVED_3 = 3;
  }
  enum SoC1ShutdownStateType {
    SOC1_SHUTDOWN_STATE_SOC1_SAFE_SHUTDOWN = 0;
    SOC1_SHUTDOWN_STATE_SOC1_UNSAFE_SHUTDOWN = 1;
    SOC1_SHUTDOWN_STATE_SOC1_UNSAFE_SHUTDOWN_REPEAT = 2;
    SOC1_SHUTDOWN_STATE_INVALID = 3;
  }
  enum SMVehicleIndexType {
    SM_VEHICLE_INDEX_INDEX_VEHICLE_HT_SZ = 0;
    SM_VEHICLE_INDEX_INDEX_VEHICLE_UXE24 = 1;
    SM_VEHICLE_INDEX_INDEX_VEHICLE_SGHU = 2;
    SM_VEHICLE_INDEX_INDEX_VEHICLE_SF_SQ_UKE_HC = 3;
    SM_VEHICLE_INDEX_INVALID = 255;
  }
  enum HeaterRequestType {
    HEATER_REQUEST_SHUTDOWN = 0;
    HEATER_REQUEST_FIRST_TIME_HEATING = 1;
    HEATER_REQUEST_HEATING = 2;
    HEATER_REQUEST_HEATING_TEST = 3;
  }
  enum HeaterStateType {
    HEATER_STATE_SHUTDOWN = 0;
    HEATER_STATE_WORKING = 1;
    HEATER_STATE_RESERVED_2 = 2;
    HEATER_STATE_RESERVED_3 = 3;
  }
  enum HeaterfaultStateType {
    HEATER_FAULT_STATE_NORMAL = 0;
    HEATER_FAULT_STATE_FAULT = 1;
    HEATER_FAULT_STATE_RESERVED_2 = 2;
    HEATER_FAULT_STATE_RESERVED_3 = 3;
  }
  enum SwlStateType {
    SWL_STATE_UPGRADE_SUCCESS = 0;
    SWL_STATE_UPGRADE_SERVICE_UNAVAILABLE = 1;
    SWL_STATE_UNZIP_SIGN_PACKAGE_FAIL = 2;
    SWL_STATE_DECRYPT_CIPHERTEXT_PACKAGE_FAIL = 3;
    SWL_STATE_VERIFY_PLAINTEXT_PACKAGE_FAIL = 4;
  }
  enum MachineStateType {
    MACHINESTATE_RESERVE = 0;
    MACHINESTATE_SHUTDOWN_SLEEP_N1 = 1;
    MACHINESTATE_STANDBY = 2;
    MACHINESTATE_STANDALONE = 3;
    MACHINESTATE_STANDBY_PLUS = 4;
    MACHINESTATE_WORKING = 5;
    MACHINESTATE_UPGRADE_R1_X1_OTA_N1 = 6;
    MACHINESTATE_RESET_R1_X1 = 7;
  }
  enum MainStateType {
    MAINSTATE_SM_MAINSTATE_IDLE = 0;
    MAINSTATE_SM_MAINSTATE_STARTUP = 1;
    MAINSTATE_SM_MAINSTATE_RUNNING = 2;
    MAINSTATE_SM_MAINSTATE_EXIT = 3;
    MAINSTATE_SM_MAINSTATE_RESTART = 4;
    MAINSTATE_SM_MAINSTATE_FAULT = 5;
    MAINSTATE_SM_MAINSTATE_MAX = 6;
  }
  enum SubStateType {
    SUBSTATE_RESERVED_0 = 0;
    SUBSTATE_SM_SUB_IDLE = 1;
    SUBSTATE_SM_SUB_OTA = 2;
    SUBSTATE_SM_SUB_DCM_TRANS = 3;
    SUBSTATE_SM_SUB_SENTINEL_SENTINEL = 4;
    SUBSTATE_SM_SUB_LONGBAT_LONG_RANGE = 5;
    SUBSTATE_SM_SUB_SHUTDOWN = 6;
    SUBSTATE_SM_SUB_NORMAL = 7;
    SUBSTATE_SM_SUB_REMOTE = 8;
    SUBSTATE_SM_SUB_TRANS = 9;
    SUBSTATE_SM_SUB_FGINIT = 16;
    SUBSTATE_SM_SUB_UPLOAD = 17;
    SUBSTATE_SM_SUB_AD = 18;
    SUBSTATE_SM_SUB_CALIB_PLAC_CAM = 19;
    SUBSTATE_SM_SUB_CALIB_ACE_CAM = 20;
    SUBSTATE_SM_SUB_CALIB_PLAC_LID = 21;
    SUBSTATE_SM_SUB_CALIB_ACE_LID = 22;
    SUBSTATE_SM_SUB_MAX = 23;
  }
  enum WdgStateFlagType {
    WDGSTATE_FLAG_WDGM_GLOBAL_STATUS_OK = 0;
    WDGSTATE_FLAG_WDGM_GLOBAL_STATUS_FAILED = 1;
    WDGSTATE_FLAG_WDGM_GLOBAL_STATUS_EXPIRED = 2;
    WDGSTATE_FLAG_WDGM_GLOBAL_STATUS_STOPPED = 3;
    WDGSTATE_FLAG_WDGM_GLOBAL_STATUS_DEACTIVATED = 4;
  }
  enum SoCPowerStateType {
    SOC_POWERSTATE_SOC_INIT = 0;
    SOC_POWERSTATE_SOC_POWERUP_START = 1;
    SOC_POWERSTATE_SOC_POWERUP_FINISH = 2;
    SOC_POWERSTATE_SOC_POWERUP_ERROR = 3;
    SOC_POWERSTATE_SOC_POWERDOWN_START = 4;
    SOC_POWERSTATE_SOC_POWERDOWN_FINISH = 5;
    SOC_POWERSTATE_SOC_POWERDOWN_ERROR = 6;
  }
  enum CANPowerStateType {
    CAN_POWERSTATE_CAN_INIT = 0;
    CAN_POWERSTATE_CAN_POWERUP_START = 1;
    CAN_POWERSTATE_CAN_POWERUP_FINISH = 2;
    CAN_POWERSTATE_CAN_POWERUP_ERROR = 3;
    CAN_POWERSTATE_CAN_POWERDOWN_START = 4;
    CAN_POWERSTATE_CAN_POWERDOWN_FINISH = 5;
    CAN_POWERSTATE_CAN_POWERDOWN_ERROR = 6;
  }
  enum MediaPowerStateType {
    MEDIA_POWERSTATE_MEDIA_INIT = 0;
    MEDIA_POWERSTATE_MEDIA_POWERUP_START = 1;
    MEDIA_POWERSTATE_MEDIA_POWERUP_FINISH = 2;
    MEDIA_POWERSTATE_MEDIA_POWERUP_ERROR = 3;
    MEDIA_POWERSTATE_MEDIA_POWERDOWN_START = 4;
    MEDIA_POWERSTATE_MEDIA_POWERDOWN_FINISH = 5;
    MEDIA_POWERSTATE_MEDIA_POWERDOWN_ERROR = 6;
  }
  enum ETHPowerStateType {
    ETH_POWERSTATE_ETH_INIT = 0;
    ETH_POWERSTATE_ETH_POWERUP_START = 1;
    ETH_POWERSTATE_ETH_POWERUP_FINISH = 2;
    ETH_POWERSTATE_ETH_POWERUP_ERROR = 3;
    ETH_POWERSTATE_ETH_POWERDOWN_START = 4;
    ETH_POWERSTATE_ETH_POWERDOWN_FINISH = 5;
    ETH_POWERSTATE_ETH_POWERDOWN_ERROR = 6;
  }
  enum LidarPowerStateType {
    LIDAR_POWERSTATE_LIDAR_INIT = 0;
    LIDAR_POWERSTATE_LIDAR_POWERUP_START = 1;
    LIDAR_POWERSTATE_LIDAR_POWERUP_FINISH = 2;
    LIDAR_POWERSTATE_LIDAR_POWERUP_ERROR = 3;
    LIDAR_POWERSTATE_LIDAR_POWERDOWN_START = 4;
    LIDAR_POWERSTATE_LIDAR_POWERDOWN_FINISH = 5;
    LIDAR_POWERSTATE_LIDAR_POWERDOWN_ERROR = 6;
  }
  enum SrcSubStateType {
    SRCSUB_STATE_RESERVED_0 = 0;
    SRCSUB_STATE_SM_SUB_IDLE = 1;
    SRCSUB_STATE_SM_SUB_OTA = 2;
    SRCSUB_STATE_SM_SUB_DCM_TRANS = 3;
    SRCSUB_STATE_SM_SUB_SENTINEL = 4;
    SRCSUB_STATE_SM_SUB_LONGBAT = 5;
    SRCSUB_STATE_SM_SUB_SHUTDOWN = 6;
    SRCSUB_STATE_SM_SUB_NORMAL = 7;
    SRCSUB_STATE_SM_SUB_REMOTE = 8;
    SRCSUB_STATE_SM_SUB_TRANS = 9;
    SRCSUB_STATE_SM_SUB_FGINIT = 16;
    SRCSUB_STATE_SM_SUB_UPLOAD = 17;
    SRCSUB_STATE_SM_SUB_AD = 18;
    SRCSUB_STATE_SM_SUB_CALIB_PLAC_CAM = 19;
    SRCSUB_STATE_SM_SUB_CALIB_ACE_CAM = 20;
    SRCSUB_STATE_SM_SUB_CALIB_PLAC_LID = 21;
    SRCSUB_STATE_SM_SUB_CALIB_ACE_LID = 22;
    SRCSUB_STATE_SM_SUB_MAX = 23;
  }
  enum TargetSubStateType {
    TARGETSUB_STATE_RESERVED_0 = 0;
    TARGETSUB_STATE_SM_SUB_IDLE = 1;
    TARGETSUB_STATE_SM_SUB_OTA = 2;
    TARGETSUB_STATE_SM_SUB_DCM_TRANS = 3;
    TARGETSUB_STATE_SM_SUB_SENTINEL = 4;
    TARGETSUB_STATE_SM_SUB_LONGBAT = 5;
    TARGETSUB_STATE_SM_SUB_SHUTDOWN = 6;
    TARGETSUB_STATE_SM_SUB_NORMAL = 7;
    TARGETSUB_STATE_SM_SUB_REMOTE = 8;
    TARGETSUB_STATE_SM_SUB_TRANS = 9;
    TARGETSUB_STATE_SM_SUB_FGINIT = 16;
    TARGETSUB_STATE_SM_SUB_UPLOAD = 17;
    TARGETSUB_STATE_SM_SUB_AD = 18;
    TARGETSUB_STATE_SM_SUB_CALIB_PLAC_CAM = 19;
    TARGETSUB_STATE_SM_SUB_CALIB_ACE_CAM = 20;
    TARGETSUB_STATE_SM_SUB_CALIB_PLAC_LID = 21;
    TARGETSUB_STATE_SM_SUB_CALIB_ACE_LID = 22;
    TARGETSUB_STATE_SM_SUB_MAX = 23;
  }
  enum PASSYSStateType {
    PAS_SYS_STATE_OFF = 0;
    PAS_SYS_STATE_STANDBY = 1;
    PAS_SYS_STATE_FRONTREARACTIVE = 2;
    PAS_SYS_STATE_FRONTACTIVEANDREARFAILURE = 3;
    PAS_SYS_STATE_REARACTIVEANDFRONTFAILURE = 4;
    PAS_SYS_STATE_SYSTEMFAILURE = 5;
    PAS_SYS_STATE_FRONTACTIVEREAROFF = 6;
    PAS_SYS_STATE_FRONTFAILUREREAROFF = 7;
  }
  enum MRRStateType {
    MRR_STATE_NORMAL = 0;
    MRR_STATE_RESERVED_1 = 1;
    MRR_STATE_FAULT = 2;
    MRR_STATE_DYNAMIC_CALIBRATION = 3;
  }
  enum LFCRStateType {
    LF_CR_STATE_NORMAL = 0;
    LF_CR_STATE_RESERVED_1 = 1;
    LF_CR_STATE_FAULT = 2;
    LF_CR_STATE_DYNAMIC_CALIBRATION = 3;
  }
  enum RFCRStateType {
    RF_CR_STATE_NORMAL = 0;
    RF_CR_STATE_RESERVED_1 = 1;
    RF_CR_STATE_FAULT = 2;
    RF_CR_STATE_DYNAMIC_CALIBRATION = 3;
  }
  enum LRCRStateType {
    LR_CR_STATE_NORMAL = 0;
    LR_CR_STATE_RESERVED_1 = 1;
    LR_CR_STATE_FAULT = 2;
    LR_CR_STATE_DYNAMIC_CALIBRATION = 3;
  }
  enum RRCRStateType {
    RR_CR_STATE_NORMAL = 0;
    RR_CR_STATE_RESERVED_1 = 1;
    RR_CR_STATE_FAULT = 2;
    RR_CR_STATE_DYNAMIC_CALIBRATION = 3;
  }
  // Child_ID_2E7_S [] [0E-008|255.00000000]
  optional int32 child_id_2_e7_s = 1;
  // SoC_SYS_CPU_Usg [] [0E-008|255.00000000]
  optional int32 so_c_sys_cpu_usg = 2;
  // SoC_SYS_RAM_Usg [] [0E-008|255.00000000]
  optional int32 so_c_sys_ram_usg = 3;
  // ProcessID_Highest_CPU [] [0E-008|65535.00000000]
  optional int32 process_id_highest_cpu = 4;
  // ProcessCMD_Highest_CPU [] [0E-008|4294967295.00000000]
  optional int32 process_cmd_highest_cpu = 5;
  // Rate_Highest_CPU [] [0E-008|255.00000000]
  optional int32 rate_highest_cpu = 6;
  // ProcessID_Highest_RAM [] [0E-008|65535.00000000]
  optional int32 process_id_highest_ram = 7;
  // ProcessCMD_Highest_RAM [] [0E-008|4294967295.00000000]
  optional int32 process_cmd_highest_ram = 8;
  // Rate_Highest_RAM [] [0E-008|255.00000000]
  optional int32 rate_highest_ram = 9;
  // SoC_SYS_CPU_Usg_alarm [] [0E-008|1.00000000]
  optional bool so_c_sys_cpu_usg_alarm = 10;
  // SoC_SYS_RAM_Usg_alarm [] [0E-008|1.00000000]
  optional bool so_c_sys_ram_usg_alarm = 11;
  // SoC_Network_Overload [] [0E-008|1.00000000]
  optional bool so_c_network_overload = 12;
  // reserved_48 [] [0E-008|1.00000000]
  optional bool reserved_0 = 13;
  // reserved_49 [] [0E-008|1.00000000]
  optional bool reserved_1 = 14;
  // reserved_50 [] [0E-008|1.00000000]
  optional bool reserved_2 = 15;
  // reserved_51 [] [0E-008|1.00000000]
  optional bool reserved_3 = 16;
  // reserved_4 [] [0E-008|1.00000000]
  optional bool reserved_4 = 17;
  // Disk_Usg_rate_alarm0 [] [0E-008|1.00000000]
  optional bool disk_usg_rate_alarm0 = 18;
  // Disk_Usg_rate_alarm1 [] [0E-008|1.00000000]
  optional bool disk_usg_rate_alarm1 = 19;
  // Disk_Usg_rate_alarm2 [] [0E-008|1.00000000]
  optional bool disk_usg_rate_alarm2 = 20;
  // Disk_Usg_rate_alarm3 [] [0E-008|1.00000000]
  optional bool disk_usg_rate_alarm3 = 21;
  // Disk_Usg_rate_alarm4 [] [0E-008|1.00000000]
  optional bool disk_usg_rate_alarm4 = 22;
  // Disk_Usg_rate_alarm5 [] [0E-008|1.00000000]
  optional bool disk_usg_rate_alarm5 = 23;
  // Disk_Usg_rate_alarm6 [] [0E-008|1.00000000]
  optional bool disk_usg_rate_alarm6 = 24;
  // Disk_Usg_rate_alarm7 [] [0E-008|1.00000000]
  optional bool disk_usg_rate_alarm7 = 25;
  // Disk_Usg_rate_alarm8 [] [0E-008|1.00000000]
  optional bool disk_usg_rate_alarm8 = 26;
  // Disk_Usg_rate_alarm9 [] [0E-008|1.00000000]
  optional bool disk_usg_rate_alarm9 = 27;
  // Disk_Usg_rate_alarm10 [] [0E-008|1.00000000]
  optional bool disk_usg_rate_alarm10 = 28;
  // Disk_Usg_rate_alarm11 [] [0E-008|1.00000000]
  optional bool disk_usg_rate_alarm11 = 29;
  // Disk_Usg_rate_alarm12 [] [0E-008|1.00000000]
  optional bool disk_usg_rate_alarm12 = 30;
  // Disk_Usg_rate_alarm13 [] [0E-008|1.00000000]
  optional bool disk_usg_rate_alarm13 = 31;
  // Disk_Usg_rate_alarm14 [] [0E-008|1.00000000]
  optional bool disk_usg_rate_alarm14 = 32;
  // Disk_Usg_rate_alarm15 [] [0E-008|1.00000000]
  optional bool disk_usg_rate_alarm15 = 33;
  // Disk_error_block_alarm0 [] [0E-008|1.00000000]
  optional bool disk_error_block_alarm0 = 34;
  // Disk_error_block_alarm1 [] [0E-008|1.00000000]
  optional bool disk_error_block_alarm1 = 35;
  // Disk_error_block_alarm2 [] [0E-008|1.00000000]
  optional bool disk_error_block_alarm2 = 36;
  // Disk_error_block_alarm3 [] [0E-008|1.00000000]
  optional bool disk_error_block_alarm3 = 37;
  // Disk_error_block_alarm4 [] [0E-008|1.00000000]
  optional bool disk_error_block_alarm4 = 38;
  // Disk_error_block_alarm5 [] [0E-008|1.00000000]
  optional bool disk_error_block_alarm5 = 39;
  // Disk_error_block_alarm6 [] [0E-008|1.00000000]
  optional bool disk_error_block_alarm6 = 40;
  // Disk_error_block_alarm7 [] [0E-008|1.00000000]
  optional bool disk_error_block_alarm7 = 41;
  // Disk_error_block_alarm8 [] [0E-008|1.00000000]
  optional bool disk_error_block_alarm8 = 42;
  // Disk_error_block_alarm9 [] [0E-008|1.00000000]
  optional bool disk_error_block_alarm9 = 43;
  // Disk_error_block_alarm10 [] [0E-008|1.00000000]
  optional bool disk_error_block_alarm10 = 44;
  // Disk_error_block_alarm11 [] [0E-008|1.00000000]
  optional bool disk_error_block_alarm11 = 45;
  // Disk_error_block_alarm12 [] [0E-008|1.00000000]
  optional bool disk_error_block_alarm12 = 46;
  // Disk_error_block_alarm13 [] [0E-008|1.00000000]
  optional bool disk_error_block_alarm13 = 47;
  // Disk_error_block_alarm14 [] [0E-008|1.00000000]
  optional bool disk_error_block_alarm14 = 48;
  // Disk_error_block_alarm15 [] [0E-008|1.00000000]
  optional bool disk_error_block_alarm15 = 49;
  // Process1_Status_S [] [0E-008|1.00000000]
  optional bool process1_status_s = 50;
  // Process2_Status_S [] [0E-008|1.00000000]
  optional bool process2_status_s = 51;
  // Process3_Status_S [] [0E-008|1.00000000]
  optional bool process3_status_s = 52;
  // Process4_Status_S [] [0E-008|1.00000000]
  optional bool process4_status_s = 53;
  // Process5_Status_S [] [0E-008|1.00000000]
  optional bool process5_status_s = 54;
  // Process6_Status_S [] [0E-008|1.00000000]
  optional bool process6_status_s = 55;
  // Process7_Status_S [] [0E-008|1.00000000]
  optional bool process7_status_s = 56;
  // Process8_Status_S [] [0E-008|1.00000000]
  optional bool process8_status_s = 57;
  // Process9_Status_S [] [0E-008|1.00000000]
  optional bool process9_status_s = 58;
  // Process10_Status_S [] [0E-008|1.00000000]
  optional bool process10_status_s = 59;
  // Process11_Status_S [] [0E-008|1.00000000]
  optional bool process11_status_s = 60;
  // Process12_Status_S [] [0E-008|1.00000000]
  optional bool process12_status_s = 61;
  // Process13_Status_S [] [0E-008|1.00000000]
  optional bool process13_status_s = 62;
  // Process14_Status_S [] [0E-008|1.00000000]
  optional bool process14_status_s = 63;
  // Process15_Status_S [] [0E-008|1.00000000]
  optional bool process15_status_s = 64;
  // Process16_Status_S [] [0E-008|1.00000000]
  optional bool process16_status_s = 65;
  // Process17_Status_S [] [0E-008|1.00000000]
  optional bool process17_status_s = 66;
  // Process18_Status_S [] [0E-008|1.00000000]
  optional bool process18_status_s = 67;
  // Process19_Status_S [] [0E-008|1.00000000]
  optional bool process19_status_s = 68;
  // Process20_Status_S [] [0E-008|1.00000000]
  optional bool process20_status_s = 69;
  // Process21_Status_S [] [0E-008|1.00000000]
  optional bool process21_status_s = 70;
  // Process22_Status_S [] [0E-008|1.00000000]
  optional bool process22_status_s = 71;
  // Process23_Status_S [] [0E-008|1.00000000]
  optional bool process23_status_s = 72;
  // Process24_Status_S [] [0E-008|1.00000000]
  optional bool process24_status_s = 73;
  // Process25_Status_S [] [0E-008|1.00000000]
  optional bool process25_status_s = 74;
  // Process26_Status_S [] [0E-008|1.00000000]
  optional bool process26_status_s = 75;
  // Process27_Status_S [] [0E-008|1.00000000]
  optional bool process27_status_s = 76;
  // Process28_Status_S [] [0E-008|1.00000000]
  optional bool process28_status_s = 77;
  // Process29_Status_S [] [0E-008|1.00000000]
  optional bool process29_status_s = 78;
  // Process30_Status_S [] [0E-008|1.00000000]
  optional bool process30_status_s = 79;
  // Process31_Status_S [] [0E-008|1.00000000]
  optional bool process31_status_s = 80;
  // Process32_Status_S [] [0E-008|1.00000000]
  optional bool process32_status_s = 81;
  // Process33_Status_S [] [0E-008|1.00000000]
  optional bool process33_status_s = 82;
  // Process34_Status_S [] [0E-008|1.00000000]
  optional bool process34_status_s = 83;
  // Process35_Status_S [] [0E-008|1.00000000]
  optional bool process35_status_s = 84;
  // Process36_Status_S [] [0E-008|1.00000000]
  optional bool process36_status_s = 85;
  // Process37_Status_S [] [0E-008|1.00000000]
  optional bool process37_status_s = 86;
  // Process38_Status_S [] [0E-008|1.00000000]
  optional bool process38_status_s = 87;
  // Process39_Status_S [] [0E-008|1.00000000]
  optional bool process39_status_s = 88;
  // Process40_Status_S [] [0E-008|1.00000000]
  optional bool process40_status_s = 89;
  // Process41_Status_S [] [0E-008|1.00000000]
  optional bool process41_status_s = 90;
  // Process42_Status_S [] [0E-008|1.00000000]
  optional bool process42_status_s = 91;
  // Process43_Status_S [] [0E-008|1.00000000]
  optional bool process43_status_s = 92;
  // Process44_Status_S [] [0E-008|1.00000000]
  optional bool process44_status_s = 93;
  // Process45_Status_S [] [0E-008|1.00000000]
  optional bool process45_status_s = 94;
  // Process46_Status_S [] [0E-008|1.00000000]
  optional bool process46_status_s = 95;
  // Process47_Status_S [] [0E-008|1.00000000]
  optional bool process47_status_s = 96;
  // Process48_Status_S [] [0E-008|1.00000000]
  optional bool process48_status_s = 97;
  // Process49_Status_S [] [0E-008|1.00000000]
  optional bool process49_status_s = 98;
  // Process50_Status_S [] [0E-008|1.00000000]
  optional bool process50_status_s = 99;
  // Process51_Status_S [] [0E-008|1.00000000]
  optional bool process51_status_s = 100;
  // Process52_Status_S [] [0E-008|1.00000000]
  optional bool process52_status_s = 101;
  // Process53_Status_S [] [0E-008|1.00000000]
  optional bool process53_status_s = 102;
  // Process54_Status_S [] [0E-008|1.00000000]
  optional bool process54_status_s = 103;
  // Process55_Status_S [] [0E-008|1.00000000]
  optional bool process55_status_s = 104;
  // Process56_Status_S [] [0E-008|1.00000000]
  optional bool process56_status_s = 105;
  // Process57_Status_S [] [0E-008|1.00000000]
  optional bool process57_status_s = 106;
  // Process58_Status_S [] [0E-008|1.00000000]
  optional bool process58_status_s = 107;
  // Process59_Status_S [] [0E-008|1.00000000]
  optional bool process59_status_s = 108;
  // Process60_Status_S [] [0E-008|1.00000000]
  optional bool process60_status_s = 109;
  // Process61_Status_S [] [0E-008|1.00000000]
  optional bool process61_status_s = 110;
  // Process62_Status_S [] [0E-008|1.00000000]
  optional bool process62_status_s = 111;
  // Process63_Status_S [] [0E-008|1.00000000]
  optional bool process63_status_s = 112;
  // Process64_Status_S [] [0E-008|1.00000000]
  optional bool process64_status_s = 113;
  // OTA_Flag [] [0E-008|3.00000000]
  optional int32 ota_flag = 114;
  // SM_NetworkState [] [0E-008|3.00000000]
  optional SMNetworkStateType sm_network_state = 115;
  // SM_RegisterState [] [0E-008|3.00000000]
  optional SMRegisterStateType sm_register_state = 116;
  // SM_StateRunning_Flag [] [0E-008|3.00000000]
  optional SMStateRunningFlagType sm_state_running_flag = 117;
  // SoC1_Shutdown_State [] [0E-008|3.00000000]
  optional SoC1ShutdownStateType so_c1_shutdown_state = 118;
  // reserved_5 [] [0E-008|1.00000000]
  optional bool reserved_5 = 119;
  // reserved_6 [] [0E-008|1.00000000]
  optional bool reserved_6 = 120;
  // reserved_7 [] [0E-008|1.00000000]
  optional bool reserved_7 = 121;
  // reserved_8 [] [0E-008|1.00000000]
  optional bool reserved_8 = 122;
  // reserved_9 [] [0E-008|1.00000000]
  optional bool reserved_9 = 123;
  // reserved_10 [] [0E-008|1.00000000]
  optional bool reserved_10 = 124;
  // SoCShutdown_Timestamp [] [0E-008|4294967295.00000000]
  optional int32 so_c_shutdown_timestamp = 125;
  // Standby_Timeout [] [0E-008|65535.00000000]
  optional int32 standby_timeout = 126;
  // SoCRegister_Timestamp [] [0E-008|4294967295.00000000]
  optional int32 so_c_register_timestamp = 127;
  // SM_Vehicle_Index [] [0E-008|255.00000000]
  optional SMVehicleIndexType sm_vehicle_index = 128;
  // P4_13_PG_SOC1_MCU1_VRS11 [] [0E-008|1.00000000]
  optional bool p4_13_pg_soc1_mcu1_vrs11 = 129;
  // P3_0_PG_SOC1_MCU1_LCVR [] [0E-008|1.00000000]
  optional bool p3_0_pg_soc1_mcu1_lcvr = 130;
  // P20_14_PG_SOC1_MCU1_LCVR_AO [] [0E-008|1.00000000]
  optional bool p20_14_pg_soc1_mcu1_lcvr_ao = 131;
  // SOC1_HVBUCK_MCU1 [] [0E-008|1.00000000]
  optional bool soc1_hvbuck_mcu1 = 132;
  // P21_4_PG_SOC1_MCU1_LCVR_FSI [] [0E-008|1.00000000]
  optional bool p21_4_pg_soc1_mcu1_lcvr_fsi = 133;
  // P20_8_PG_SOC1_MCU1_SAFE_LDO [] [0E-008|1.00000000]
  optional bool p20_8_pg_soc1_mcu1_safe_ldo = 134;
  // PG_SDS_HVBUCK_MCU1 [] [0E-008|1.00000000]
  optional bool pg_sds_hvbuck_mcu1 = 135;
  // PG_CAN_PWR_MCU1 [] [0E-008|1.00000000]
  optional bool pg_can_pwr_mcu1 = 136;
  // P22_3_PG_MCU1_ETH_PWR [] [0E-008|1.00000000]
  optional bool p22_3_pg_mcu1_eth_pwr = 137;
  // PG_MCU1_SDS_PWR [] [0E-008|1.00000000]
  optional bool pg_mcu1_sds_pwr = 138;
  // P6_4_PG_EXT_3V3 [] [0E-008|1.00000000]
  optional bool p6_4_pg_ext_3_v3 = 139;
  // PG_MCU1_GNSS_PWR [] [0E-008|1.00000000]
  optional bool pg_mcu1_gnss_pwr = 140;
  // P2_10_INT_SOC1_MCU1_SAFETY_L [] [0E-008|1.00000000]
  optional bool p2_10_int_soc1_mcu1_safety_l = 141;
  // USS_BUKBST_MCU1_L [] [0E-008|1.00000000]
  optional bool uss_bukbst_mcu1_l = 142;
  // P6_15_PG_SOC1_DRMOS_MCU1 [] [0E-008|1.00000000]
  optional bool p6_15_pg_soc1_drmos_mcu1 = 143;
  // FAULTn_SW1_MCU1 [] [0E-008|1.00000000]
  optional bool faul_tn_sw1_mcu1 = 144;
  // P2_13_INT_SOC1_MCU1_FUNC_L [] [0E-008|1.00000000]
  optional bool p2_13_int_soc1_mcu1_func_l = 145;
  // P4_15_PG_SOC1_HVBUCK_MCU1 [] [0E-008|1.00000000]
  optional bool p4_15_pg_soc1_hvbuck_mcu1 = 146;
  // P8_4_PG_SOC1_MCU1_UFS_VCC [] [0E-008|1.00000000]
  optional bool p8_4_pg_soc1_mcu1_ufs_vcc = 147;
  // reserved_11 [] [0E-008|1.00000000]
  optional bool reserved_11 = 148;
  // reserved_12 [] [0E-008|1.00000000]
  optional bool reserved_12 = 149;
  // reserved_13 [] [0E-008|1.00000000]
  optional bool reserved_13 = 150;
  // reserved_14 [] [0E-008|1.00000000]
  optional bool reserved_14 = 151;
  // reserved_15 [] [0E-008|1.00000000]
  optional bool reserved_15 = 152;
  // PWR_Fail_0 [] [0E-008|1.00000000]
  optional bool pwr_fail_0 = 153;
  // PWR_Fail_1 [] [0E-008|1.00000000]
  optional bool pwr_fail_1 = 154;
  // PWR_Fail_2 [] [0E-008|1.00000000]
  optional bool pwr_fail_2 = 155;
  // PWR_Fail_3 [] [0E-008|1.00000000]
  optional bool pwr_fail_3 = 156;
  // PWR_Fail_4 [] [0E-008|1.00000000]
  optional bool pwr_fail_4 = 157;
  // PWR_Fail_5 [] [0E-008|1.00000000]
  optional bool pwr_fail_5 = 158;
  // PWR_Fail_6 [] [0E-008|1.00000000]
  optional bool pwr_fail_6 = 159;
  // PWR_Fail_7 [] [0E-008|1.00000000]
  optional bool pwr_fail_7 = 160;
  // PWR_Fail_8 [] [0E-008|1.00000000]
  optional bool pwr_fail_8 = 161;
  // PWR_Fail_9 [] [0E-008|1.00000000]
  optional bool pwr_fail_9 = 162;
  // PWR_Fail_10 [] [0E-008|1.00000000]
  optional bool pwr_fail_10 = 163;
  // PWR_Fail_11 [] [0E-008|1.00000000]
  optional bool pwr_fail_11 = 164;
  // PWR_Fail_12 [] [0E-008|1.00000000]
  optional bool pwr_fail_12 = 165;
  // PWR_Fail_13 [] [0E-008|1.00000000]
  optional bool pwr_fail_13 = 166;
  // PWR_Fail_14 [] [0E-008|1.00000000]
  optional bool pwr_fail_14 = 167;
  // reserved_16 [] [0E-008|1.00000000]
  optional bool reserved_16 = 168;
  // NVMCU_ORINPWRCTRL_E_I2C_WRITE_FAILURE [] [0E-008|1.00000000]
  optional bool nvmcu_orinpwrctrl_e_i2_c_write_failure = 169;
  // NVMCU_ORINPWRCTRL_E_I2C_READ_FAILURE [] [0E-008|1.00000000]
  optional bool nvmcu_orinpwrctrl_e_i2_c_read_failure = 170;
  // NVMCU_ORINPWRCTRL_E_VAL_MISMATCH [] [0E-008|1.00000000]
  optional bool nvmcu_orinpwrctrl_e_val_mismatch = 171;
  // NVMCU_ORINPWRCTRL_E_I2C_READ_CRC_FAILURE [] [0E-008|1.00000000]
  optional bool nvmcu_orinpwrctrl_e_i2_c_read_crc_failure = 172;
  // VRS10_Init_NVMCU_ORINPWRCTRL_E_INVALID_CONFIG [] [0E-008|1.00000000]
  optional bool vrs10_init_nvmcu_orinpwrctrl_e_invalid_config = 173;
  // CheckConfigParam_NVMCU_ORINPWRCTRL_E_INVALID_CONFIG [] [0E-008|1.00000000]
  optional bool check_config_param_nvmcu_orinpwrctrl_e_invalid_config = 174;
  // VRS11_Init_NVMCU_ORINPWRCTRL_E_INVALID_CONFIG [] [0E-008|1.00000000]
  optional bool vrs11_init_nvmcu_orinpwrctrl_e_invalid_config = 175;
  // setIfxPinLow_NVMCU_ORINPWRCTRL_E_DIO_FAILURE [] [0E-008|1.00000000]
  optional bool set_ifx_pin_low_nvmcu_orinpwrctrl_e_dio_failure = 176;
  // setIfxPinHigh_NVMCU_ORINPWRCTRL_E_DIO_FAILURE [] [0E-008|1.00000000]
  optional bool set_ifx_pin_high_nvmcu_orinpwrctrl_e_dio_failure = 177;
  // REG_SRC1_NVMCU_ORINPWRCTRL_E_INT_SRC_VRS10 [] [0E-008|1.00000000]
  optional bool reg_src1_nvmcu_orinpwrctrl_e_int_src_vrs10 = 178;
  // REG_SRC2_NVMCU_ORINPWRCTRL_E_INT_SRC_VRS10 [] [0E-008|1.00000000]
  optional bool reg_src2_nvmcu_orinpwrctrl_e_int_src_vrs10 = 179;
  // NVMCU_ORINPWRCTRL_E_INT_SRC_VRS11 [] [0E-008|1.00000000]
  optional bool nvmcu_orinpwrctrl_e_int_src_vrs11 = 180;
  // NVMCU_ORINPWRCTRL_E_NIRQ_LOW [] [0E-008|1.00000000]
  optional bool nvmcu_orinpwrctrl_e_nirq_low = 181;
  // NVMCU_ORINPWRCTRL_E_ACTSHDN_STUCK_HIGH [] [0E-008|1.00000000]
  optional bool nvmcu_orinpwrctrl_e_actshdn_stuck_high = 182;
  // NVMCU_ORINPWRCTRL_E_ACTSLP_STUCK_LOW [] [0E-008|1.00000000]
  optional bool nvmcu_orinpwrctrl_e_actslp_stuck_low = 183;
  // NVMCU_ORINPWRCTRL_E_ACTSLP_STUCK_HIGH [] [0E-008|1.00000000]
  optional bool nvmcu_orinpwrctrl_e_actslp_stuck_high = 184;
  // VRS10_VerifyINTPinLvl_NVMCU_ORINPWRCTRL_E_VRS10_NIRQ_TEST [] [0E-008|1.00000000]
  optional bool vrs10_verify_int_pin_lvl_nvmcu_orinpwrctrl_e_vrs10_nirq_test = 185;
  // VRS10_NIRQTest_NVMCU_ORINPWRCTRL_E_VRS10_NIRQ_TEST [] [0E-008|1.00000000]
  optional bool vrs10_nirq_test_nvmcu_orinpwrctrl_e_vrs10_nirq_test = 186;
  // VRS11_VerifyINTPinLvl_NVMCU_ORINPWRCTRL_E_VRS11_NIRQ_TEST [] [0E-008|1.00000000]
  optional bool vrs11_verify_int_pin_lvl_nvmcu_orinpwrctrl_e_vrs11_nirq_test = 187;
  // VRS11_NIRQTest_NVMCU_ORINPWRCTRL_E_VRS11_NIRQ_TEST [] [0E-008|1.00000000]
  optional bool vrs11_nirq_test_nvmcu_orinpwrctrl_e_vrs11_nirq_test = 188;
  // SafeShdn_NVMCU_ORINPWRCTRL_E_SAFE_SHUTDOWN_TIMEOUT [] [0E-008|1.00000000]
  optional bool safe_shdn_nvmcu_orinpwrctrl_e_safe_shutdown_timeout = 189;
  // PwrOff_NVMCU_ORINPWRCTRL_E_SAFE_SHUTDOWN_TIMEOUT [] [0E-008|1.00000000]
  optional bool pwr_off_nvmcu_orinpwrctrl_e_safe_shutdown_timeout = 190;
  // NVMCU_ORINPWRCTRL_E_VMON_NIRQ [] [0E-008|1.00000000]
  optional bool nvmcu_orinpwrctrl_e_vmon_nirq = 191;
  // REG_SRC1_NVMCU_ORINPWRCTRL_E_VRS10_FAILSAFEMODE [] [0E-008|1.00000000]
  optional bool reg_src1_nvmcu_orinpwrctrl_e_vrs10_failsafemode = 192;
  // REG_SRC2_NVMCU_ORINPWRCTRL_E_VRS10_FAILSAFEMODE [] [0E-008|1.00000000]
  optional bool reg_src2_nvmcu_orinpwrctrl_e_vrs10_failsafemode = 193;
  // reserved_17 [] [0E-008|1.00000000]
  optional bool reserved_17 = 194;
  // reserved_18 [] [0E-008|1.00000000]
  optional bool reserved_18 = 195;
  // reserved_19 [] [0E-008|1.00000000]
  optional bool reserved_19 = 196;
  // reserved_20 [] [0E-008|1.00000000]
  optional bool reserved_20 = 197;
  // reserved_21 [] [0E-008|1.00000000]
  optional bool reserved_21 = 198;
  // reserved_22 [] [0E-008|1.00000000]
  optional bool reserved_22 = 199;
  // reserved_23 [] [0E-008|1.00000000]
  optional bool reserved_23 = 200;
  // UVPHigAlarmParmState [] [0E-008|1.00000000]
  optional bool uvp_hig_alarm_parm_state = 201;
  // UVPMidAlarmParmState [] [0E-008|1.00000000]
  optional bool uvp_mid_alarm_parm_state = 202;
  // UVPLowAlarmParmState [] [0E-008|1.00000000]
  optional bool uvp_low_alarm_parm_state = 203;
  // OVPHigAlarmParmStat [] [0E-008|1.00000000]
  optional bool ovp_hig_alarm_parm_stat = 204;
  // reserved_24 [] [0E-008|1.00000000]
  optional bool reserved_24 = 205;
  // reserved_25 [] [0E-008|1.00000000]
  optional bool reserved_25 = 206;
  // reserved_26 [] [0E-008|1.00000000]
  optional bool reserved_26 = 207;
  // reserved_27 [] [0E-008|1.00000000]
  optional bool reserved_27 = 208;
  // Voltage_Allow [] [0E-008|1.00000000]
  optional bool voltage_allow = 209;
  // HeatMgr_Allow [] [0E-008|1.00000000]
  optional bool heat_mgr_allow = 210;
  // StateMgr_Allow [] [0E-008|1.00000000]
  optional bool state_mgr_allow = 211;
  // HeartBear_Allow [] [0E-008|1.00000000]
  optional bool heart_bear_allow = 212;
  // OTA_Allow [] [0E-008|1.00000000]
  optional bool ota_allow = 213;
  // FaultHandle_Allow [] [0E-008|1.00000000]
  optional bool fault_handle_allow = 214;
  // Preserved_0 [] [0E-008|1.00000000]
  optional bool reserved_28 = 215;
  // Preserved_1 [] [0E-008|1.00000000]
  optional bool reserved_29 = 216;
  // Heater_Request [] [0E-008|3.00000000]
  optional HeaterRequestType heater_request = 217;
  // Heater_State [] [0E-008|3.00000000]
  optional HeaterStateType heater_state = 218;
  // Heater_fault_State [] [0E-008|3.00000000]
  optional HeaterfaultStateType heater_fault_state = 219;
  // reserved_30 [] [0E-008|1.00000000]
  optional bool reserved_30 = 220;
  // reserved_31 [] [0E-008|1.00000000]
  optional bool reserved_31 = 221;
  // Heater_Config [] [0E-008|1.00000000]
  optional bool heater_config = 222;
  // Heater_Config_State [] [0E-008|1.00000000]
  optional bool heater_config_state = 223;
  // Heater_Learning_Times [] [0E-008|15.00000000]
  optional int32 heater_learning_times = 224;
  // Preserved_0 [] [0E-008|1.00000000]
  optional bool reserved_32 = 225;
  // Preserved_1 [] [0E-008|1.00000000]
  optional bool reserved_33 = 226;
  // MCU_Sync_State [] [0E-008|1.00000000]
  optional bool mcu_sync_state = 227;
  // SYS_crash_Alarm [] [0E-008|1.00000000]
  optional bool sys_crash_alarm = 228;
  // SYS_Overload_Alarm [] [0E-008|1.00000000]
  optional bool sys_overload_alarm = 229;
  // MCU_CPU_Overload [] [0E-008|1.00000000]
  optional bool mcu_cpu_overload = 230;
  // MCU_DMA_Overload [] [0E-008|1.00000000]
  optional bool mcu_dma_overload = 231;
  // reserved_34 [] [0E-008|1.00000000]
  optional bool reserved_34 = 232;
  // reserved_35 [] [0E-008|1.00000000]
  optional bool reserved_35 = 233;
  // reserved_36 [] [0E-008|1.00000000]
  optional bool reserved_36 = 234;
  // Dcm_State [] [0E-008|255.00000000]
  optional int32 dcm_state = 235;
  // Swl_State [] [0E-008|255.00000000]
  optional SwlStateType swl_state = 236;
  // CAM_LOCK_AV_SOC1_L [] [0E-008|1.00000000]
  optional bool cam_lock_av_soc1_l = 237;
  // CAM_LOCK_SV_SOC1_L [] [0E-008|1.00000000]
  optional bool cam_lock_sv_soc1_l = 238;
  // CAM_LOCK_FV_SOC1_L [] [0E-008|1.00000000]
  optional bool cam_lock_fv_soc1_l = 239;
  // reserved_37 [] [0E-008|1.00000000]
  optional bool reserved_37 = 240;
  // reserved_38 [] [0E-008|1.00000000]
  optional bool reserved_38 = 241;
  // reserved_39 [] [0E-008|1.00000000]
  optional bool reserved_39 = 242;
  // reserved_40 [] [0E-008|1.00000000]
  optional bool reserved_40 = 243;
  // reserved_41 [] [0E-008|1.00000000]
  optional bool reserved_41 = 244;
  // FAULTn_SW1_MCU2 [] [0E-008|1.00000000]
  optional bool faul_tn_sw1_mcu2 = 245;
  // FAULTn_SW2_MCU1 [] [0E-008|1.00000000]
  optional bool faul_tn_sw2_mcu1 = 246;
  // ALT_MCU1_SDS_PWR [] [0E-008|1.00000000]
  optional bool alt_mcu1_sds_pwr = 247;
  // PG_MCU1_SDS_PWR_OUT [] [0E-008|1.00000000]
  optional bool pg_mcu1_sds_pwr_out = 248;
  // PG_SERDES_BUCK1_MCU1 [] [0E-008|1.00000000]
  optional bool pg_serdes_buck1_mcu1 = 249;
  // PG_SERDES_BUCK2_MCU1 [] [0E-008|1.00000000]
  optional bool pg_serdes_buck2_mcu1 = 250;
  // PG_ETH_HVBUCK_MCU1 [] [0E-008|1.00000000]
  optional bool pg_eth_hvbuck_mcu1 = 251;
  // INT_ETH_PMIC1_MCU1_L [] [0E-008|1.00000000]
  optional bool int_eth_pmic1_mcu1_l = 252;
  // PG_ETH_PMIC1_MCU1 [] [0E-008|1.00000000]
  optional bool pg_eth_pmic1_mcu1 = 253;
  // INT_ETH_PMIC2_MCU1_L [] [0E-008|1.00000000]
  optional bool int_eth_pmic2_mcu1_l = 254;
  // PG_ETH_PMIC2_MCU1 [] [0E-008|1.00000000]
  optional bool pg_eth_pmic2_mcu1 = 255;
  // INT_SOC1_BCKBST_MCU1_L [] [0E-008|1.00000000]
  optional bool int_soc1_bckbst_mcu1_l = 256;
  // FLAG_5V0_SOC1_VCC_DRMOS_L [] [0E-008|1.00000000]
  optional bool flag_5_v0_soc1_vcc_drmos_l = 257;
  // ALT_MCU1_ETH_PWR [] [0E-008|1.00000000]
  optional bool alt_mcu1_eth_pwr = 258;
  // reserved_42 [] [0E-008|1.00000000]
  optional bool reserved_42 = 259;
  // reserved_43 [] [0E-008|1.00000000]
  optional bool reserved_43 = 260;
  // CAM_ERR_FV_SOC1 [] [0E-008|1.00000000]
  optional bool cam_err_fv_soc1 = 261;
  // CAM_ERR_AV [] [0E-008|1.00000000]
  optional bool cam_err_av = 262;
  // CAM_ERR_SV_SOC1 [] [0E-008|1.00000000]
  optional bool cam_err_sv_soc1 = 263;
  // CAM_ERR_DMS [] [0E-008|1.00000000]
  optional bool cam_err_dms = 264;
  // reserved_44 [] [0E-008|1.00000000]
  optional bool reserved_44 = 265;
  // reserved_45 [] [0E-008|1.00000000]
  optional bool reserved_45 = 266;
  // reserved_46 [] [0E-008|1.00000000]
  optional bool reserved_46 = 267;
  // reserved_47 [] [0E-008|1.00000000]
  optional bool reserved_47 = 268;
  // DiPilot_Function1 [] [0E-008|1.00000000]
  optional bool di_pilot_function1 = 269;
  // DiPilot_Function2 [] [0E-008|1.00000000]
  optional bool di_pilot_function2 = 270;
  // DiPilot_Function3 [] [0E-008|1.00000000]
  optional bool di_pilot_function3 = 271;
  // DiPilot_Function4 [] [0E-008|1.00000000]
  optional bool di_pilot_function4 = 272;
  // DiPilot_Function5 [] [0E-008|1.00000000]
  optional bool di_pilot_function5 = 273;
  // DiPilot_Function6 [] [0E-008|1.00000000]
  optional bool di_pilot_function6 = 274;
  // DiPilot_Function7 [] [0E-008|1.00000000]
  optional bool di_pilot_function7 = 275;
  // DiPilot_Function8 [] [0E-008|1.00000000]
  optional bool di_pilot_function8 = 276;
  // MachineState [] [0E-008|15.00000000]
  optional MachineStateType machine_state = 277;
  // MainState [] [0E-008|15.00000000]
  optional MainStateType main_state = 278;
  // SubState [] [0E-008|255.00000000]
  optional SubStateType sub_state = 279;
  // V_C_Com_Loss_Camera_0 [] [0E-008|1.00000000]
  optional bool v_c_com_loss_camera_0 = 280;
  // V_C_Com_Chk_E_Camera_0 [] [0E-008|1.00000000]
  optional bool v_c_com_chk_e_camera_0 = 281;
  // V_C_PWR_Fail_Camera_0 [] [0E-008|1.00000000]
  optional bool v_c_pwr_fail_camera_0 = 282;
  // V_C_Tem_Fail_L1_Camera_0 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l1_camera_0 = 283;
  // V_C_Tem_Fail_L2_Camera_0 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l2_camera_0 = 284;
  // V_C_HW_Error_Camera_0 [] [0E-008|1.00000000]
  optional bool v_c_hw_error_camera_0 = 285;
  // V_C_Con_Error_Camera_0 [] [0E-008|1.00000000]
  optional bool v_c_con_error_camera_0 = 286;
  // V_C_Frame_Error_Camera_0 [] [0E-008|1.00000000]
  optional bool v_c_frame_error_camera_0 = 287;
  // V_C_F_D_Error_Camera_0 [] [0E-008|1.00000000]
  optional bool v_c_f_d_error_camera_0 = 288;
  // V_C_SW_Error_Camera_0 [] [0E-008|1.00000000]
  optional bool v_c_sw_error_camera_0 = 289;
  // V_C_Image_Quality_Camera_0 [] [0E-008|1.00000000]
  optional bool v_c_image_quality_camera_0 = 290;
  // V_C_Inner_Param_Camera_0 [] [0E-008|1.00000000]
  optional bool v_c_inner_param_camera_0 = 291;
  // V_C_ISP_Error_Camera_0 [] [0E-008|1.00000000]
  optional bool v_c_isp_error_camera_0 = 292;
  // V_C_ISP_Loss_Camera_0 [] [0E-008|1.00000000]
  optional bool v_c_isp_loss_camera_0 = 293;
  // V_C_Volt_Fail_Camera_0 [] [0E-008|1.00000000]
  optional bool v_c_volt_fail_camera_0 = 294;
  // V_C_init_Fail_Camera_0 [] [0E-008|1.00000000]
  optional bool v_c_init_fail_camera_0 = 295;
  // V_C_Com_Loss_Camera_1 [] [0E-008|1.00000000]
  optional bool v_c_com_loss_camera_1 = 296;
  // V_C_Com_Chk_E_Camera_1 [] [0E-008|1.00000000]
  optional bool v_c_com_chk_e_camera_1 = 297;
  // V_C_PWR_Fail_Camera_1 [] [0E-008|1.00000000]
  optional bool v_c_pwr_fail_camera_1 = 298;
  // V_C_Tem_Fail_L1_Camera_1 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l1_camera_1 = 299;
  // V_C_Tem_Fail_L2_Camera_1 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l2_camera_1 = 300;
  // V_C_HW_Error_Camera_1 [] [0E-008|1.00000000]
  optional bool v_c_hw_error_camera_1 = 301;
  // V_C_Con_Error_Camera_1 [] [0E-008|1.00000000]
  optional bool v_c_con_error_camera_1 = 302;
  // V_C_Frame_Error_Camera_1 [] [0E-008|1.00000000]
  optional bool v_c_frame_error_camera_1 = 303;
  // V_C_F_D_Error_Camera_1 [] [0E-008|1.00000000]
  optional bool v_c_f_d_error_camera_1 = 304;
  // V_C_SW_Error_Camera_1 [] [0E-008|1.00000000]
  optional bool v_c_sw_error_camera_1 = 305;
  // V_C_Image_Quality_Camera_1 [] [0E-008|1.00000000]
  optional bool v_c_image_quality_camera_1 = 306;
  // V_C_Inner_Param_Camera_1 [] [0E-008|1.00000000]
  optional bool v_c_inner_param_camera_1 = 307;
  // V_C_ISP_Error_Camera_1 [] [0E-008|1.00000000]
  optional bool v_c_isp_error_camera_1 = 308;
  // V_C_ISP_Loss_Camera_1 [] [0E-008|1.00000000]
  optional bool v_c_isp_loss_camera_1 = 309;
  // V_C_Volt_Fail_Camera_1 [] [0E-008|1.00000000]
  optional bool v_c_volt_fail_camera_1 = 310;
  // V_C_init_Fail_Camera_1 [] [0E-008|1.00000000]
  optional bool v_c_init_fail_camera_1 = 311;
  // V_C_Com_Loss_Camera_2 [] [0E-008|1.00000000]
  optional bool v_c_com_loss_camera_2 = 312;
  // V_C_Com_Chk_E_Camera_2 [] [0E-008|1.00000000]
  optional bool v_c_com_chk_e_camera_2 = 313;
  // V_C_PWR_Fail_Camera_2 [] [0E-008|1.00000000]
  optional bool v_c_pwr_fail_camera_2 = 314;
  // V_C_Tem_Fail_L1_Camera_2 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l1_camera_2 = 315;
  // V_C_Tem_Fail_L2_Camera_2 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l2_camera_2 = 316;
  // V_C_HW_Error_Camera_2 [] [0E-008|1.00000000]
  optional bool v_c_hw_error_camera_2 = 317;
  // V_C_Con_Error_Camera_2 [] [0E-008|1.00000000]
  optional bool v_c_con_error_camera_2 = 318;
  // V_C_Frame_Error_Camera_2 [] [0E-008|1.00000000]
  optional bool v_c_frame_error_camera_2 = 319;
  // V_C_F_D_Error_Camera_2 [] [0E-008|1.00000000]
  optional bool v_c_f_d_error_camera_2 = 320;
  // V_C_SW_Error_Camera_2 [] [0E-008|1.00000000]
  optional bool v_c_sw_error_camera_2 = 321;
  // V_C_Image_Quality_Camera_2 [] [0E-008|1.00000000]
  optional bool v_c_image_quality_camera_2 = 322;
  // V_C_Inner_Param_Camera_2 [] [0E-008|1.00000000]
  optional bool v_c_inner_param_camera_2 = 323;
  // V_C_ISP_Error_Camera_2 [] [0E-008|1.00000000]
  optional bool v_c_isp_error_camera_2 = 324;
  // V_C_ISP_Loss_Camera_2 [] [0E-008|1.00000000]
  optional bool v_c_isp_loss_camera_2 = 325;
  // V_C_Volt_Fail_Camera_2 [] [0E-008|1.00000000]
  optional bool v_c_volt_fail_camera_2 = 326;
  // V_C_init_Fail_Camera_2 [] [0E-008|1.00000000]
  optional bool v_c_init_fail_camera_2 = 327;
  // V_C_Com_Loss_Camera_3 [] [0E-008|1.00000000]
  optional bool v_c_com_loss_camera_3 = 328;
  // V_C_Com_Chk_E_Camera_3 [] [0E-008|1.00000000]
  optional bool v_c_com_chk_e_camera_3 = 329;
  // V_C_PWR_Fail_Camera_3 [] [0E-008|1.00000000]
  optional bool v_c_pwr_fail_camera_3 = 330;
  // V_C_Tem_Fail_L1_Camera_3 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l1_camera_3 = 331;
  // V_C_Tem_Fail_L2_Camera_3 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l2_camera_3 = 332;
  // V_C_HW_Error_Camera_3 [] [0E-008|1.00000000]
  optional bool v_c_hw_error_camera_3 = 333;
  // V_C_Con_Error_Camera_3 [] [0E-008|1.00000000]
  optional bool v_c_con_error_camera_3 = 334;
  // V_C_Frame_Error_Camera_3 [] [0E-008|1.00000000]
  optional bool v_c_frame_error_camera_3 = 335;
  // V_C_F_D_Error_Camera_3 [] [0E-008|1.00000000]
  optional bool v_c_f_d_error_camera_3 = 336;
  // V_C_SW_Error_Camera_3 [] [0E-008|1.00000000]
  optional bool v_c_sw_error_camera_3 = 337;
  // V_C_Image_Quality_Camera_3 [] [0E-008|1.00000000]
  optional bool v_c_image_quality_camera_3 = 338;
  // V_C_Inner_Param_Camera_3 [] [0E-008|1.00000000]
  optional bool v_c_inner_param_camera_3 = 339;
  // V_C_ISP_Error_Camera_3 [] [0E-008|1.00000000]
  optional bool v_c_isp_error_camera_3 = 340;
  // V_C_ISP_Loss_Camera_3 [] [0E-008|1.00000000]
  optional bool v_c_isp_loss_camera_3 = 341;
  // V_C_Volt_Fail_Camera_3 [] [0E-008|1.00000000]
  optional bool v_c_volt_fail_camera_3 = 342;
  // V_C_init_Fail_Camera_3 [] [0E-008|1.00000000]
  optional bool v_c_init_fail_camera_3 = 343;
  // V_C_Com_Loss_Camera_4 [] [0E-008|1.00000000]
  optional bool v_c_com_loss_camera_4 = 344;
  // V_C_Com_Chk_E_Camera_4 [] [0E-008|1.00000000]
  optional bool v_c_com_chk_e_camera_4 = 345;
  // V_C_PWR_Fail_Camera_4 [] [0E-008|1.00000000]
  optional bool v_c_pwr_fail_camera_4 = 346;
  // V_C_Tem_Fail_L1_Camera_4 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l1_camera_4 = 347;
  // V_C_Tem_Fail_L2_Camera_4 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l2_camera_4 = 348;
  // V_C_HW_Error_Camera_4 [] [0E-008|1.00000000]
  optional bool v_c_hw_error_camera_4 = 349;
  // V_C_Con_Error_Camera_4 [] [0E-008|1.00000000]
  optional bool v_c_con_error_camera_4 = 350;
  // V_C_Frame_Error_Camera_4 [] [0E-008|1.00000000]
  optional bool v_c_frame_error_camera_4 = 351;
  // V_C_F_D_Error_Camera_4 [] [0E-008|1.00000000]
  optional bool v_c_f_d_error_camera_4 = 352;
  // V_C_SW_Error_Camera_4 [] [0E-008|1.00000000]
  optional bool v_c_sw_error_camera_4 = 353;
  // V_C_Image_Quality_Camera_4 [] [0E-008|1.00000000]
  optional bool v_c_image_quality_camera_4 = 354;
  // V_C_Inner_Param_Camera_4 [] [0E-008|1.00000000]
  optional bool v_c_inner_param_camera_4 = 355;
  // V_C_ISP_Error_Camera_4 [] [0E-008|1.00000000]
  optional bool v_c_isp_error_camera_4 = 356;
  // V_C_ISP_Loss_Camera_4 [] [0E-008|1.00000000]
  optional bool v_c_isp_loss_camera_4 = 357;
  // V_C_Volt_Fail_Camera_4 [] [0E-008|1.00000000]
  optional bool v_c_volt_fail_camera_4 = 358;
  // V_C_init_Fail_Camera_4 [] [0E-008|1.00000000]
  optional bool v_c_init_fail_camera_4 = 359;
  // V_C_Com_Loss_Camera_5 [] [0E-008|1.00000000]
  optional bool v_c_com_loss_camera_5 = 360;
  // V_C_Com_Chk_E_Camera_5 [] [0E-008|1.00000000]
  optional bool v_c_com_chk_e_camera_5 = 361;
  // V_C_PWR_Fail_Camera_5 [] [0E-008|1.00000000]
  optional bool v_c_pwr_fail_camera_5 = 362;
  // V_C_Tem_Fail_L1_Camera_5 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l1_camera_5 = 363;
  // V_C_Tem_Fail_L2_Camera_5 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l2_camera_5 = 364;
  // V_C_HW_Error_Camera_5 [] [0E-008|1.00000000]
  optional bool v_c_hw_error_camera_5 = 365;
  // V_C_Con_Error_Camera_5 [] [0E-008|1.00000000]
  optional bool v_c_con_error_camera_5 = 366;
  // V_C_Frame_Error_Camera_5 [] [0E-008|1.00000000]
  optional bool v_c_frame_error_camera_5 = 367;
  // V_C_F_D_Error_Camera_5 [] [0E-008|1.00000000]
  optional bool v_c_f_d_error_camera_5 = 368;
  // V_C_SW_Error_Camera_5 [] [0E-008|1.00000000]
  optional bool v_c_sw_error_camera_5 = 369;
  // V_C_Image_Quality_Camera_5 [] [0E-008|1.00000000]
  optional bool v_c_image_quality_camera_5 = 370;
  // V_C_Inner_Param_Camera_5 [] [0E-008|1.00000000]
  optional bool v_c_inner_param_camera_5 = 371;
  // V_C_ISP_Error_Camera_5 [] [0E-008|1.00000000]
  optional bool v_c_isp_error_camera_5 = 372;
  // V_C_ISP_Loss_Camera_5 [] [0E-008|1.00000000]
  optional bool v_c_isp_loss_camera_5 = 373;
  // V_C_Volt_Fail_Camera_5 [] [0E-008|1.00000000]
  optional bool v_c_volt_fail_camera_5 = 374;
  // V_C_init_Fail_Camera_5 [] [0E-008|1.00000000]
  optional bool v_c_init_fail_camera_5 = 375;
  // V_C_Com_Loss_Camera_6 [] [0E-008|1.00000000]
  optional bool v_c_com_loss_camera_6 = 376;
  // V_C_Com_Chk_E_Camera_6 [] [0E-008|1.00000000]
  optional bool v_c_com_chk_e_camera_6 = 377;
  // V_C_PWR_Fail_Camera_6 [] [0E-008|1.00000000]
  optional bool v_c_pwr_fail_camera_6 = 378;
  // V_C_Tem_Fail_L1_Camera_6 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l1_camera_6 = 379;
  // V_C_Tem_Fail_L2_Camera_6 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l2_camera_6 = 380;
  // V_C_HW_Error_Camera_6 [] [0E-008|1.00000000]
  optional bool v_c_hw_error_camera_6 = 381;
  // V_C_Con_Error_Camera_6 [] [0E-008|1.00000000]
  optional bool v_c_con_error_camera_6 = 382;
  // V_C_Frame_Error_Camera_6 [] [0E-008|1.00000000]
  optional bool v_c_frame_error_camera_6 = 383;
  // V_C_F_D_Error_Camera_6 [] [0E-008|1.00000000]
  optional bool v_c_f_d_error_camera_6 = 384;
  // V_C_SW_Error_Camera_6 [] [0E-008|1.00000000]
  optional bool v_c_sw_error_camera_6 = 385;
  // V_C_Image_Quality_Camera_6 [] [0E-008|1.00000000]
  optional bool v_c_image_quality_camera_6 = 386;
  // V_C_Inner_Param_Camera_6 [] [0E-008|1.00000000]
  optional bool v_c_inner_param_camera_6 = 387;
  // V_C_ISP_Error_Camera_6 [] [0E-008|1.00000000]
  optional bool v_c_isp_error_camera_6 = 388;
  // V_C_ISP_Loss_Camera_6 [] [0E-008|1.00000000]
  optional bool v_c_isp_loss_camera_6 = 389;
  // V_C_Volt_Fail_Camera_6 [] [0E-008|1.00000000]
  optional bool v_c_volt_fail_camera_6 = 390;
  // V_C_init_Fail_Camera_6 [] [0E-008|1.00000000]
  optional bool v_c_init_fail_camera_6 = 391;
  // V_C_Com_Loss_Camera_7 [] [0E-008|1.00000000]
  optional bool v_c_com_loss_camera_7 = 392;
  // V_C_Com_Chk_E_Camera_7 [] [0E-008|1.00000000]
  optional bool v_c_com_chk_e_camera_7 = 393;
  // V_C_PWR_Fail_Camera_7 [] [0E-008|1.00000000]
  optional bool v_c_pwr_fail_camera_7 = 394;
  // V_C_Tem_Fail_L1_Camera_7 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l1_camera_7 = 395;
  // V_C_Tem_Fail_L2_Camera_7 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l2_camera_7 = 396;
  // V_C_HW_Error_Camera_7 [] [0E-008|1.00000000]
  optional bool v_c_hw_error_camera_7 = 397;
  // V_C_Con_Error_Camera_7 [] [0E-008|1.00000000]
  optional bool v_c_con_error_camera_7 = 398;
  // V_C_Frame_Error_Camera_7 [] [0E-008|1.00000000]
  optional bool v_c_frame_error_camera_7 = 399;
  // V_C_F_D_Error_Camera_7 [] [0E-008|1.00000000]
  optional bool v_c_f_d_error_camera_7 = 400;
  // V_C_SW_Error_Camera_7 [] [0E-008|1.00000000]
  optional bool v_c_sw_error_camera_7 = 401;
  // V_C_Image_Quality_Camera_7 [] [0E-008|1.00000000]
  optional bool v_c_image_quality_camera_7 = 402;
  // V_C_Inner_Param_Camera_7 [] [0E-008|1.00000000]
  optional bool v_c_inner_param_camera_7 = 403;
  // V_C_ISP_Error_Camera_7 [] [0E-008|1.00000000]
  optional bool v_c_isp_error_camera_7 = 404;
  // V_C_ISP_Loss_Camera_7 [] [0E-008|1.00000000]
  optional bool v_c_isp_loss_camera_7 = 405;
  // V_C_Volt_Fail_Camera_7 [] [0E-008|1.00000000]
  optional bool v_c_volt_fail_camera_7 = 406;
  // V_C_init_Fail_Camera_7 [] [0E-008|1.00000000]
  optional bool v_c_init_fail_camera_7 = 407;
  // V_C_Com_Loss_Camera_8 [] [0E-008|1.00000000]
  optional bool v_c_com_loss_camera_8 = 408;
  // V_C_Com_Chk_E_Camera_8 [] [0E-008|1.00000000]
  optional bool v_c_com_chk_e_camera_8 = 409;
  // V_C_PWR_Fail_Camera_8 [] [0E-008|1.00000000]
  optional bool v_c_pwr_fail_camera_8 = 410;
  // V_C_Tem_Fail_L1_Camera_8 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l1_camera_8 = 411;
  // V_C_Tem_Fail_L2_Camera_8 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l2_camera_8 = 412;
  // V_C_HW_Error_Camera_8 [] [0E-008|1.00000000]
  optional bool v_c_hw_error_camera_8 = 413;
  // V_C_Con_Error_Camera_8 [] [0E-008|1.00000000]
  optional bool v_c_con_error_camera_8 = 414;
  // V_C_Frame_Error_Camera_8 [] [0E-008|1.00000000]
  optional bool v_c_frame_error_camera_8 = 415;
  // V_C_F_D_Error_Camera_8 [] [0E-008|1.00000000]
  optional bool v_c_f_d_error_camera_8 = 416;
  // V_C_SW_Error_Camera_8 [] [0E-008|1.00000000]
  optional bool v_c_sw_error_camera_8 = 417;
  // V_C_Image_Quality_Camera_8 [] [0E-008|1.00000000]
  optional bool v_c_image_quality_camera_8 = 418;
  // V_C_Inner_Param_Camera_8 [] [0E-008|1.00000000]
  optional bool v_c_inner_param_camera_8 = 419;
  // V_C_ISP_Error_Camera_8 [] [0E-008|1.00000000]
  optional bool v_c_isp_error_camera_8 = 420;
  // V_C_ISP_Loss_Camera_8 [] [0E-008|1.00000000]
  optional bool v_c_isp_loss_camera_8 = 421;
  // V_C_Volt_Fail_Camera_8 [] [0E-008|1.00000000]
  optional bool v_c_volt_fail_camera_8 = 422;
  // V_C_init_Fail_Camera_8 [] [0E-008|1.00000000]
  optional bool v_c_init_fail_camera_8 = 423;
  // V_C_Com_Loss_Camera_9 [] [0E-008|1.00000000]
  optional bool v_c_com_loss_camera_9 = 424;
  // V_C_Com_Chk_E_Camera_9 [] [0E-008|1.00000000]
  optional bool v_c_com_chk_e_camera_9 = 425;
  // V_C_PWR_Fail_Camera_9 [] [0E-008|1.00000000]
  optional bool v_c_pwr_fail_camera_9 = 426;
  // V_C_Tem_Fail_L1_Camera_9 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l1_camera_9 = 427;
  // V_C_Tem_Fail_L2_Camera_9 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l2_camera_9 = 428;
  // V_C_HW_Error_Camera_9 [] [0E-008|1.00000000]
  optional bool v_c_hw_error_camera_9 = 429;
  // V_C_Con_Error_Camera_9 [] [0E-008|1.00000000]
  optional bool v_c_con_error_camera_9 = 430;
  // V_C_Frame_Error_Camera_9 [] [0E-008|1.00000000]
  optional bool v_c_frame_error_camera_9 = 431;
  // V_C_F_D_Error_Camera_9 [] [0E-008|1.00000000]
  optional bool v_c_f_d_error_camera_9 = 432;
  // V_C_SW_Error_Camera_9 [] [0E-008|1.00000000]
  optional bool v_c_sw_error_camera_9 = 433;
  // V_C_Image_Quality_Camera_9 [] [0E-008|1.00000000]
  optional bool v_c_image_quality_camera_9 = 434;
  // V_C_Inner_Param_Camera_9 [] [0E-008|1.00000000]
  optional bool v_c_inner_param_camera_9 = 435;
  // V_C_ISP_Error_Camera_9 [] [0E-008|1.00000000]
  optional bool v_c_isp_error_camera_9 = 436;
  // V_C_ISP_Loss_Camera_9 [] [0E-008|1.00000000]
  optional bool v_c_isp_loss_camera_9 = 437;
  // V_C_Volt_Fail_Camera_9 [] [0E-008|1.00000000]
  optional bool v_c_volt_fail_camera_9 = 438;
  // V_C_init_Fail_Camera_9 [] [0E-008|1.00000000]
  optional bool v_c_init_fail_camera_9 = 439;
  // V_C_Com_Loss_Camera_10 [] [0E-008|1.00000000]
  optional bool v_c_com_loss_camera_10 = 440;
  // V_C_Com_Chk_E_Camera_10 [] [0E-008|1.00000000]
  optional bool v_c_com_chk_e_camera_10 = 441;
  // V_C_PWR_Fail_Camera_10 [] [0E-008|1.00000000]
  optional bool v_c_pwr_fail_camera_10 = 442;
  // V_C_Tem_Fail_L1_Camera_10 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l1_camera_10 = 443;
  // V_C_Tem_Fail_L2_Camera_10 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l2_camera_10 = 444;
  // V_C_HW_Error_Camera_10 [] [0E-008|1.00000000]
  optional bool v_c_hw_error_camera_10 = 445;
  // V_C_Con_Error_Camera_10 [] [0E-008|1.00000000]
  optional bool v_c_con_error_camera_10 = 446;
  // V_C_Frame_Error_Camera_10 [] [0E-008|1.00000000]
  optional bool v_c_frame_error_camera_10 = 447;
  // V_C_F_D_Error_Camera_10 [] [0E-008|1.00000000]
  optional bool v_c_f_d_error_camera_10 = 448;
  // V_C_SW_Error_Camera_10 [] [0E-008|1.00000000]
  optional bool v_c_sw_error_camera_10 = 449;
  // V_C_Image_Quality_Camera_10 [] [0E-008|1.00000000]
  optional bool v_c_image_quality_camera_10 = 450;
  // V_C_Inner_Param_Camera_10 [] [0E-008|1.00000000]
  optional bool v_c_inner_param_camera_10 = 451;
  // V_C_ISP_Error_Camera_10 [] [0E-008|1.00000000]
  optional bool v_c_isp_error_camera_10 = 452;
  // V_C_ISP_Loss_Camera_10 [] [0E-008|1.00000000]
  optional bool v_c_isp_loss_camera_10 = 453;
  // V_C_Volt_Fail_Camera_10 [] [0E-008|1.00000000]
  optional bool v_c_volt_fail_camera_10 = 454;
  // V_C_init_Fail_Camera_10 [] [0E-008|1.00000000]
  optional bool v_c_init_fail_camera_10 = 455;
  // V_C_Com_Loss_Camera_11 [] [0E-008|1.00000000]
  optional bool v_c_com_loss_camera_11 = 456;
  // V_C_Com_Chk_E_Camera_11 [] [0E-008|1.00000000]
  optional bool v_c_com_chk_e_camera_11 = 457;
  // V_C_PWR_Fail_Camera_11 [] [0E-008|1.00000000]
  optional bool v_c_pwr_fail_camera_11 = 458;
  // V_C_Tem_Fail_L1_Camera_11 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l1_camera_11 = 459;
  // V_C_Tem_Fail_L2_Camera_11 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l2_camera_11 = 460;
  // V_C_HW_Error_Camera_11 [] [0E-008|1.00000000]
  optional bool v_c_hw_error_camera_11 = 461;
  // V_C_Con_Error_Camera_11 [] [0E-008|1.00000000]
  optional bool v_c_con_error_camera_11 = 462;
  // V_C_Frame_Error_Camera_11 [] [0E-008|1.00000000]
  optional bool v_c_frame_error_camera_11 = 463;
  // V_C_F_D_Error_Camera_11 [] [0E-008|1.00000000]
  optional bool v_c_f_d_error_camera_11 = 464;
  // V_C_SW_Error_Camera_11 [] [0E-008|1.00000000]
  optional bool v_c_sw_error_camera_11 = 465;
  // V_C_Image_Quality_Camera_11 [] [0E-008|1.00000000]
  optional bool v_c_image_quality_camera_11 = 466;
  // V_C_Inner_Param_Camera_11 [] [0E-008|1.00000000]
  optional bool v_c_inner_param_camera_11 = 467;
  // V_C_ISP_Error_Camera_11 [] [0E-008|1.00000000]
  optional bool v_c_isp_error_camera_11 = 468;
  // V_C_ISP_Loss_Camera_11 [] [0E-008|1.00000000]
  optional bool v_c_isp_loss_camera_11 = 469;
  // V_C_Volt_Fail_Camera_11 [] [0E-008|1.00000000]
  optional bool v_c_volt_fail_camera_11 = 470;
  // V_C_init_Fail_Camera_11 [] [0E-008|1.00000000]
  optional bool v_c_init_fail_camera_11 = 471;
  // V_C_Com_Loss_Camera_12 [] [0E-008|1.00000000]
  optional bool v_c_com_loss_camera_12 = 472;
  // V_C_Com_Chk_E_Camera_12 [] [0E-008|1.00000000]
  optional bool v_c_com_chk_e_camera_12 = 473;
  // V_C_PWR_Fail_Camera_12 [] [0E-008|1.00000000]
  optional bool v_c_pwr_fail_camera_12 = 474;
  // V_C_Tem_Fail_L1_Camera_12 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l1_camera_12 = 475;
  // V_C_Tem_Fail_L2_Camera_12 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l2_camera_12 = 476;
  // V_C_HW_Error_Camera_12 [] [0E-008|1.00000000]
  optional bool v_c_hw_error_camera_12 = 477;
  // V_C_Con_Error_Camera_12 [] [0E-008|1.00000000]
  optional bool v_c_con_error_camera_12 = 478;
  // V_C_Frame_Error_Camera_12 [] [0E-008|1.00000000]
  optional bool v_c_frame_error_camera_12 = 479;
  // V_C_F_D_Error_Camera_12 [] [0E-008|1.00000000]
  optional bool v_c_f_d_error_camera_12 = 480;
  // V_C_SW_Error_Camera_12 [] [0E-008|1.00000000]
  optional bool v_c_sw_error_camera_12 = 481;
  // V_C_Image_Quality_Camera_12 [] [0E-008|1.00000000]
  optional bool v_c_image_quality_camera_12 = 482;
  // V_C_Inner_Param_Camera_12 [] [0E-008|1.00000000]
  optional bool v_c_inner_param_camera_12 = 483;
  // V_C_ISP_Error_Camera_12 [] [0E-008|1.00000000]
  optional bool v_c_isp_error_camera_12 = 484;
  // V_C_ISP_Loss_Camera_12 [] [0E-008|1.00000000]
  optional bool v_c_isp_loss_camera_12 = 485;
  // V_C_Volt_Fail_Camera_12 [] [0E-008|1.00000000]
  optional bool v_c_volt_fail_camera_12 = 486;
  // V_C_init_Fail_Camera_12 [] [0E-008|1.00000000]
  optional bool v_c_init_fail_camera_12 = 487;
  // V_C_Com_Loss_Camera_13 [] [0E-008|1.00000000]
  optional bool v_c_com_loss_camera_13 = 488;
  // V_C_Com_Chk_E_Camera_13 [] [0E-008|1.00000000]
  optional bool v_c_com_chk_e_camera_13 = 489;
  // V_C_PWR_Fail_Camera_13 [] [0E-008|1.00000000]
  optional bool v_c_pwr_fail_camera_13 = 490;
  // V_C_Tem_Fail_L1_Camera_13 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l1_camera_13 = 491;
  // V_C_Tem_Fail_L2_Camera_13 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l2_camera_13 = 492;
  // V_C_HW_Error_Camera_13 [] [0E-008|1.00000000]
  optional bool v_c_hw_error_camera_13 = 493;
  // V_C_Con_Error_Camera_13 [] [0E-008|1.00000000]
  optional bool v_c_con_error_camera_13 = 494;
  // V_C_Frame_Error_Camera_13 [] [0E-008|1.00000000]
  optional bool v_c_frame_error_camera_13 = 495;
  // V_C_F_D_Error_Camera_13 [] [0E-008|1.00000000]
  optional bool v_c_f_d_error_camera_13 = 496;
  // V_C_SW_Error_Camera_13 [] [0E-008|1.00000000]
  optional bool v_c_sw_error_camera_13 = 497;
  // V_C_Image_Quality_Camera_13 [] [0E-008|1.00000000]
  optional bool v_c_image_quality_camera_13 = 498;
  // V_C_Inner_Param_Camera_13 [] [0E-008|1.00000000]
  optional bool v_c_inner_param_camera_13 = 499;
  // V_C_ISP_Error_Camera_13 [] [0E-008|1.00000000]
  optional bool v_c_isp_error_camera_13 = 500;
  // V_C_ISP_Loss_Camera_13 [] [0E-008|1.00000000]
  optional bool v_c_isp_loss_camera_13 = 501;
  // V_C_Volt_Fail_Camera_13 [] [0E-008|1.00000000]
  optional bool v_c_volt_fail_camera_13 = 502;
  // V_C_init_Fail_Camera_13 [] [0E-008|1.00000000]
  optional bool v_c_init_fail_camera_13 = 503;
  // V_C_Com_Loss_Camera_14 [] [0E-008|1.00000000]
  optional bool v_c_com_loss_camera_14 = 504;
  // V_C_Com_Chk_E_Camera_14 [] [0E-008|1.00000000]
  optional bool v_c_com_chk_e_camera_14 = 505;
  // V_C_PWR_Fail_Camera_14 [] [0E-008|1.00000000]
  optional bool v_c_pwr_fail_camera_14 = 506;
  // V_C_Tem_Fail_L1_Camera_14 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l1_camera_14 = 507;
  // V_C_Tem_Fail_L2_Camera_14 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l2_camera_14 = 508;
  // V_C_HW_Error_Camera_14 [] [0E-008|1.00000000]
  optional bool v_c_hw_error_camera_14 = 509;
  // V_C_Con_Error_Camera_14 [] [0E-008|1.00000000]
  optional bool v_c_con_error_camera_14 = 510;
  // V_C_Frame_Error_Camera_14 [] [0E-008|1.00000000]
  optional bool v_c_frame_error_camera_14 = 511;
  // V_C_F_D_Error_Camera_14 [] [0E-008|1.00000000]
  optional bool v_c_f_d_error_camera_14 = 512;
  // V_C_SW_Error_Camera_14 [] [0E-008|1.00000000]
  optional bool v_c_sw_error_camera_14 = 513;
  // V_C_Image_Quality_Camera_14 [] [0E-008|1.00000000]
  optional bool v_c_image_quality_camera_14 = 514;
  // V_C_Inner_Param_Camera_14 [] [0E-008|1.00000000]
  optional bool v_c_inner_param_camera_14 = 515;
  // V_C_ISP_Error_Camera_14 [] [0E-008|1.00000000]
  optional bool v_c_isp_error_camera_14 = 516;
  // V_C_ISP_Loss_Camera_14 [] [0E-008|1.00000000]
  optional bool v_c_isp_loss_camera_14 = 517;
  // V_C_Volt_Fail_Camera_14 [] [0E-008|1.00000000]
  optional bool v_c_volt_fail_camera_14 = 518;
  // V_C_init_Fail_Camera_14 [] [0E-008|1.00000000]
  optional bool v_c_init_fail_camera_14 = 519;
  // V_C_Com_Loss_Camera_15 [] [0E-008|1.00000000]
  optional bool v_c_com_loss_camera_15 = 520;
  // V_C_Com_Chk_E_Camera_15 [] [0E-008|1.00000000]
  optional bool v_c_com_chk_e_camera_15 = 521;
  // V_C_PWR_Fail_Camera_15 [] [0E-008|1.00000000]
  optional bool v_c_pwr_fail_camera_15 = 522;
  // V_C_Tem_Fail_L1_Camera_15 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l1_camera_15 = 523;
  // V_C_Tem_Fail_L2_Camera_15 [] [0E-008|1.00000000]
  optional bool v_c_tem_fail_l2_camera_15 = 524;
  // V_C_HW_Error_Camera_15 [] [0E-008|1.00000000]
  optional bool v_c_hw_error_camera_15 = 525;
  // V_C_Con_Error_Camera_15 [] [0E-008|1.00000000]
  optional bool v_c_con_error_camera_15 = 526;
  // V_C_Frame_Error_Camera_15 [] [0E-008|1.00000000]
  optional bool v_c_frame_error_camera_15 = 527;
  // V_C_F_D_Error_Camera_15 [] [0E-008|1.00000000]
  optional bool v_c_f_d_error_camera_15 = 528;
  // V_C_SW_Error_Camera_15 [] [0E-008|1.00000000]
  optional bool v_c_sw_error_camera_15 = 529;
  // V_C_Image_Quality_Camera_15 [] [0E-008|1.00000000]
  optional bool v_c_image_quality_camera_15 = 530;
  // V_C_Inner_Param_Camera_15 [] [0E-008|1.00000000]
  optional bool v_c_inner_param_camera_15 = 531;
  // V_C_ISP_Error_Camera_15 [] [0E-008|1.00000000]
  optional bool v_c_isp_error_camera_15 = 532;
  // V_C_ISP_Loss_Camera_15 [] [0E-008|1.00000000]
  optional bool v_c_isp_loss_camera_15 = 533;
  // V_C_Volt_Fail_Camera_15 [] [0E-008|1.00000000]
  optional bool v_c_volt_fail_camera_15 = 534;
  // V_C_init_Fail_Camera_15 [] [0E-008|1.00000000]
  optional bool v_c_init_fail_camera_15 = 535;
  // COM_Fail_CAN_0 [] [0E-008|1.00000000]
  optional bool com_fail_can_0 = 536;
  // COM_Fail_CAN_1 [] [0E-008|1.00000000]
  optional bool com_fail_can_1 = 537;
  // COM_Fail_CAN_2 [] [0E-008|1.00000000]
  optional bool com_fail_can_2 = 538;
  // COM_Fail_CAN_3 [] [0E-008|1.00000000]
  optional bool com_fail_can_3 = 539;
  // COM_Fail_CAN_4 [] [0E-008|1.00000000]
  optional bool com_fail_can_4 = 540;
  // COM_Fail_CAN_5 [] [0E-008|1.00000000]
  optional bool com_fail_can_5 = 541;
  // COM_Fail_CAN_6 [] [0E-008|1.00000000]
  optional bool com_fail_can_6 = 542;
  // COM_Fail_CAN_7 [] [0E-008|1.00000000]
  optional bool com_fail_can_7 = 543;
  // COM_Fail_CAN_8 [] [0E-008|1.00000000]
  optional bool com_fail_can_8 = 544;
  // COM_Fail_CAN_9 [] [0E-008|1.00000000]
  optional bool com_fail_can_9 = 545;
  // COM_Fail_CAN_10 [] [0E-008|1.00000000]
  optional bool com_fail_can_10 = 546;
  // COM_Fail_CAN_11 [] [0E-008|1.00000000]
  optional bool com_fail_can_11 = 547;
  // [] [0E-008|1.00000000]
  optional bool reserved_0_child_id_2 = 548;
  // [] [0E-008|1.00000000]
  optional bool reserved_1_child_id_2 = 549;
  // [] [0E-008|1.00000000]
  optional bool reserved_2_child_id_2 = 550;
  // [] [0E-008|1.00000000]
  optional bool reserved_3_child_id_2 = 551;
  // COM_Fail_CAN_16 [] [0E-008|1.00000000]
  optional bool com_fail_can_16 = 552;
  // COM_Fail_CAN_17 [] [0E-008|1.00000000]
  optional bool com_fail_can_17 = 553;
  // COM_Fail_CAN_18 [] [0E-008|1.00000000]
  optional bool com_fail_can_18 = 554;
  // COM_Fail_CAN_19 [] [0E-008|1.00000000]
  optional bool com_fail_can_19 = 555;
  // COM_Fail_CAN_20 [] [0E-008|1.00000000]
  optional bool com_fail_can_20 = 556;
  // COM_Fail_CAN_21 [] [0E-008|1.00000000]
  optional bool com_fail_can_21 = 557;
  // COM_Fail_CAN_22 [] [0E-008|1.00000000]
  optional bool com_fail_can_22 = 558;
  // COM_Fail_CAN_23 [] [0E-008|1.00000000]
  optional bool com_fail_can_23 = 559;
  // COM_Fail_CAN_24 [] [0E-008|1.00000000]
  optional bool com_fail_can_24 = 560;
  // COM_Fail_CAN_25 [] [0E-008|1.00000000]
  optional bool com_fail_can_25 = 561;
  // COM_Fail_CAN_26 [] [0E-008|1.00000000]
  optional bool com_fail_can_26 = 562;
  // COM_Fail_CAN_27 [] [0E-008|1.00000000]
  optional bool com_fail_can_27 = 563;
  // COM_Fail_CAN_28 [] [0E-008|1.00000000]
  optional bool com_fail_can_28 = 564;
  // COM_Fail_CAN_29 [] [0E-008|1.00000000]
  optional bool com_fail_can_29 = 565;
  // COM_Fail_CAN_30 [] [0E-008|1.00000000]
  optional bool com_fail_can_30 = 566;
  // COM_Fail_CAN_31 [] [0E-008|1.00000000]
  optional bool com_fail_can_31 = 567;
  // COM_Fail_CAN_32 [] [0E-008|1.00000000]
  optional bool com_fail_can_32 = 568;
  // COM_Fail_CAN_33 [] [0E-008|1.00000000]
  optional bool com_fail_can_33 = 569;
  // COM_Fail_CAN_34 [] [0E-008|1.00000000]
  optional bool com_fail_can_34 = 570;
  // reserved_52 [] [0E-008|1.00000000]
  optional bool reserved_52 = 571;
  // reserved_53 [] [0E-008|1.00000000]
  optional bool reserved_53 = 572;
  // reserved_54 [] [0E-008|1.00000000]
  optional bool reserved_54 = 573;
  // reserved_55 [] [0E-008|1.00000000]
  optional bool reserved_55 = 574;
  // reserved_56 [] [0E-008|1.00000000]
  optional bool reserved_56 = 575;
  // reserved_57 [] [0E-008|1.00000000]
  optional bool reserved_57 = 576;
  // reserved_58 [] [0E-008|1.00000000]
  optional bool reserved_58 = 577;
  // reserved_59 [] [0E-008|1.00000000]
  optional bool reserved_59 = 578;
  // reserved_60 [] [0E-008|1.00000000]
  optional bool reserved_60 = 579;
  // reserved_61 [] [0E-008|1.00000000]
  optional bool reserved_61 = 580;
  // reserved_62 [] [0E-008|1.00000000]
  optional bool reserved_62 = 581;
  // reserved_63 [] [0E-008|1.00000000]
  optional bool reserved_63 = 582;
  // reserved_64 [] [0E-008|1.00000000]
  optional bool reserved_64 = 583;
  // COM_Fail_CAN_35 [] [0E-008|1.00000000]
  optional bool com_fail_can_35 = 584;
  // COM_Fail_CAN_36 [] [0E-008|1.00000000]
  optional bool com_fail_can_36 = 585;
  // COM_Fail_CAN_37 [] [0E-008|1.00000000]
  optional bool com_fail_can_37 = 586;
  // COM_Fail_CAN_38 [] [0E-008|1.00000000]
  optional bool com_fail_can_38 = 587;
  // COM_Fail_CAN_39 [] [0E-008|1.00000000]
  optional bool com_fail_can_39 = 588;
  // COM_Fail_CAN_40 [] [0E-008|1.00000000]
  optional bool com_fail_can_40 = 589;
  // COM_Fail_CAN_41 [] [0E-008|1.00000000]
  optional bool com_fail_can_41 = 590;
  // COM_Fail_CAN_42 [] [0E-008|1.00000000]
  optional bool com_fail_can_42 = 591;
  // COM_Fail_CAN_43 [] [0E-008|1.00000000]
  optional bool com_fail_can_43 = 592;
  // COM_Fail_CAN_44 [] [0E-008|1.00000000]
  optional bool com_fail_can_44 = 593;
  // COM_Fail_CAN_45 [] [0E-008|1.00000000]
  optional bool com_fail_can_45 = 594;
  // COM_Fail_CAN_46 [] [0E-008|1.00000000]
  optional bool com_fail_can_46 = 595;
  // COM_Fail_CAN_47 [] [0E-008|1.00000000]
  optional bool com_fail_can_47 = 596;
  // COM_Fail_CAN_48 [] [0E-008|1.00000000]
  optional bool com_fail_can_48 = 597;
  // COM_Fail_CAN_49 [] [0E-008|1.00000000]
  optional bool com_fail_can_49 = 598;
  // COM_Fail_CAN_50 [] [0E-008|1.00000000]
  optional bool com_fail_can_50 = 599;
  // COM_Fail_CAN_51 [] [0E-008|1.00000000]
  optional bool com_fail_can_51 = 600;
  // reserved_65 [] [0E-008|1.00000000]
  optional bool reserved_65 = 601;
  // reserved_66 [] [0E-008|1.00000000]
  optional bool reserved_66 = 602;
  // reserved_67 [] [0E-008|1.00000000]
  optional bool reserved_67 = 603;
  // reserved_68 [] [0E-008|1.00000000]
  optional bool reserved_68 = 604;
  // reserved_69 [] [0E-008|1.00000000]
  optional bool reserved_69 = 605;
  // reserved_70 [] [0E-008|1.00000000]
  optional bool reserved_70 = 606;
  // reserved_71 [] [0E-008|1.00000000]
  optional bool reserved_71 = 607;
  // COM_busoff_CAN_0 [] [0E-008|1.00000000]
  optional bool com_busoff_can_0 = 608;
  // COM_busoff_CAN_1 [] [0E-008|1.00000000]
  optional bool com_busoff_can_1 = 609;
  // COM_busoff_CAN_2 [] [0E-008|1.00000000]
  optional bool com_busoff_can_2 = 610;
  // COM_busoff_CAN_3 [] [0E-008|1.00000000]
  optional bool com_busoff_can_3 = 611;
  // COM_busoff_CAN_4 [] [0E-008|1.00000000]
  optional bool com_busoff_can_4 = 612;
  // COM_busoff_CAN_5 [] [0E-008|1.00000000]
  optional bool com_busoff_can_5 = 613;
  // COM_busoff_CAN_6 [] [0E-008|1.00000000]
  optional bool com_busoff_can_6 = 614;
  // COM_busoff_CAN_7 [] [0E-008|1.00000000]
  optional bool com_busoff_can_7 = 615;
  // COM_busoff_CAN_8 [] [0E-008|1.00000000]
  optional bool com_busoff_can_8 = 616;
  // COM_busoff_CAN_9 [] [0E-008|1.00000000]
  optional bool com_busoff_can_9 = 617;
  // COM_busoff_CAN_10 [] [0E-008|1.00000000]
  optional bool com_busoff_can_10 = 618;
  // COM_busoff_CAN_11 [] [0E-008|1.00000000]
  optional bool com_busoff_can_11 = 619;
  // reserved_72 [] [0E-008|1.00000000]
  optional bool reserved_72 = 620;
  // reserved_73 [] [0E-008|1.00000000]
  optional bool reserved_73 = 621;
  // reserved_74 [] [0E-008|1.00000000]
  optional bool reserved_74 = 622;
  // reserved_75 [] [0E-008|1.00000000]
  optional bool reserved_75 = 623;
  // COM_PHY_ETH_0 [] [0E-008|1.00000000]
  optional bool com_phy_eth_0 = 624;
  // COM_PHY_ETH_1 [] [0E-008|1.00000000]
  optional bool com_phy_eth_1 = 625;
  // COM_PHY_ETH_2 [] [0E-008|1.00000000]
  optional bool com_phy_eth_2 = 626;
  // COM_PHY_ETH_3 [] [0E-008|1.00000000]
  optional bool com_phy_eth_3 = 627;
  // COM_PHY_ETH_4 [] [0E-008|1.00000000]
  optional bool com_phy_eth_4 = 628;
  // COM_PHY_ETH_5 [] [0E-008|1.00000000]
  optional bool com_phy_eth_5 = 629;
  // reserved_76 [] [0E-008|1.00000000]
  optional bool reserved_76 = 630;
  // reserved_77 [] [0E-008|1.00000000]
  optional bool reserved_77 = 631;
  // COM_PHY_ETH_8 [] [0E-008|1.00000000]
  optional bool com_phy_eth_8 = 632;
  // COM_PHY_ETH_9 [] [0E-008|1.00000000]
  optional bool com_phy_eth_9 = 633;
  // COM_PHY_ETH_10 [] [0E-008|1.00000000]
  optional bool com_phy_eth_10 = 634;
  // COM_PHY_ETH_11 [] [0E-008|1.00000000]
  optional bool com_phy_eth_11 = 635;
  // COM_PHY_ETH_12 [] [0E-008|1.00000000]
  optional bool com_phy_eth_12 = 636;
  // COM_PHY_ETH_13 [] [0E-008|1.00000000]
  optional bool com_phy_eth_13 = 637;
  // reserved_78 [] [0E-008|1.00000000]
  optional bool reserved_78 = 638;
  // reserved_79 [] [0E-008|1.00000000]
  optional bool reserved_79 = 639;
  // COM_PHY_ETH_14 [] [0E-008|1.00000000]
  optional bool com_phy_eth_14 = 640;
  // COM_PHY_ETH_15 [] [0E-008|1.00000000]
  optional bool com_phy_eth_15 = 641;
  // COM_PHY_ETH_16 [] [0E-008|1.00000000]
  optional bool com_phy_eth_16 = 642;
  // COM_PHY_ETH_17 [] [0E-008|1.00000000]
  optional bool com_phy_eth_17 = 643;
  // COM_PHY_ETH_18 [] [0E-008|1.00000000]
  optional bool com_phy_eth_18 = 644;
  // COM_PHY_ETH_19 [] [0E-008|1.00000000]
  optional bool com_phy_eth_19 = 645;
  // Preserved_1 [] [0E-008|1.00000000]
  optional bool reserved_80 = 646;
  // Preserved_2 [] [0E-008|1.00000000]
  optional bool reserved_81 = 647;
  // COM_PHY_ETH_20 [] [0E-008|1.00000000]
  optional bool com_phy_eth_20 = 648;
  // COM_PHY_ETH_21 [] [0E-008|1.00000000]
  optional bool com_phy_eth_21 = 649;
  // reserved_82 [] [0E-008|1.00000000]
  optional bool reserved_82 = 650;
  // reserved_83 [] [0E-008|1.00000000]
  optional bool reserved_83 = 651;
  // reserved_84 [] [0E-008|1.00000000]
  optional bool reserved_84 = 652;
  // reserved_85 [] [0E-008|1.00000000]
  optional bool reserved_85 = 653;
  // reserved_86 [] [0E-008|1.00000000]
  optional bool reserved_86 = 654;
  // reserved_87 [] [0E-008|1.00000000]
  optional bool reserved_87 = 655;
  // COM_Sync_Fail_0 [] [0E-008|1.00000000]
  optional bool com_sync_fail_0 = 656;
  // COM_Sync_Fail_1 [] [0E-008|1.00000000]
  optional bool com_sync_fail_1 = 657;
  // COM_Sync_Fail_2 [] [0E-008|1.00000000]
  optional bool com_sync_fail_2 = 658;
  // COM_Sync_Fail_3 [] [0E-008|1.00000000]
  optional bool com_sync_fail_3 = 659;
  // COM_Sync_Fail_4 [] [0E-008|1.00000000]
  optional bool com_sync_fail_4 = 660;
  // COM_Sync_Fail_5 [] [0E-008|1.00000000]
  optional bool com_sync_fail_5 = 661;
  // reserved_88 [] [0E-008|1.00000000]
  optional bool reserved_88 = 662;
  // reserved_89 [] [0E-008|1.00000000]
  optional bool reserved_89 = 663;
  // COM_Someip_E2E_0 [] [0E-008|1.00000000]
  optional bool com_someip_e2_e_0 = 664;
  // COM_Someip_E2E_1 [] [0E-008|1.00000000]
  optional bool com_someip_e2_e_1 = 665;
  // COM_Someip_E2E_2 [] [0E-008|1.00000000]
  optional bool com_someip_e2_e_2 = 666;
  // COM_Someip_E2E_3 [] [0E-008|1.00000000]
  optional bool com_someip_e2_e_3 = 667;
  // reserved_90 [] [0E-008|1.00000000]
  optional bool reserved_90 = 668;
  // reserved_91 [] [0E-008|1.00000000]
  optional bool reserved_91 = 669;
  // reserved_92 [] [0E-008|1.00000000]
  optional bool reserved_92 = 670;
  // reserved_93 [] [0E-008|1.00000000]
  optional bool reserved_93 = 671;
  // COM_ETH_Loss_0 [] [0E-008|1.00000000]
  optional bool com_eth_loss_0 = 672;
  // COM_ETH_Loss_1 [] [0E-008|1.00000000]
  optional bool com_eth_loss_1 = 673;
  // COM_ETH_Loss_2 [] [0E-008|1.00000000]
  optional bool com_eth_loss_2 = 674;
  // COM_ETH_Loss_3 [] [0E-008|1.00000000]
  optional bool com_eth_loss_3 = 675;
  // reserved_94 [] [0E-008|1.00000000]
  optional bool reserved_94 = 676;
  // reserved_95 [] [0E-008|1.00000000]
  optional bool reserved_95 = 677;
  // reserved_96 [] [0E-008|1.00000000]
  optional bool reserved_96 = 678;
  // reserved_97 [] [0E-008|1.00000000]
  optional bool reserved_97 = 679;
  // PHM_Fail_4 [] [0E-008|1.00000000]
  optional bool phm_fail_4 = 680;
  // PHM_Fail_5 [] [0E-008|1.00000000]
  optional bool phm_fail_5 = 681;
  // PHM_Fail_6 [] [0E-008|1.00000000]
  optional bool phm_fail_6 = 682;
  // PHM_Fail_7 [] [0E-008|1.00000000]
  optional bool phm_fail_7 = 683;
  // PHM_Fail_8 [] [0E-008|1.00000000]
  optional bool phm_fail_8 = 684;
  // reserved_98 [] [0E-008|1.00000000]
  optional bool reserved_98 = 685;
  // reserved_99 [] [0E-008|1.00000000]
  optional bool reserved_99 = 686;
  // reserved_100 [] [0E-008|1.00000000]
  optional bool reserved_100 = 687;
  // SHW_Fail_0 [] [0E-008|1.00000000]
  optional bool shw_fail_0 = 688;
  // SHW_Fail_1 [] [0E-008|1.00000000]
  optional bool shw_fail_1 = 689;
  // SHW_Fail_2 [] [0E-008|1.00000000]
  optional bool shw_fail_2 = 690;
  // SHW_Fail_5 [] [0E-008|1.00000000]
  optional bool shw_fail_5 = 691;
  // SHW_Fail_6 [] [0E-008|1.00000000]
  optional bool shw_fail_6 = 692;
  // SHW_Fail_7 [] [0E-008|1.00000000]
  optional bool shw_fail_7 = 693;
  // SHW_Fail_8 [] [0E-008|1.00000000]
  optional bool shw_fail_8 = 694;
  // SHW_Fail_9 [] [0E-008|1.00000000]
  optional bool shw_fail_9 = 695;
  // reserved_101 [] [0E-008|1.00000000]
  optional bool reserved_101 = 696;
  // reserved_102 [] [0E-008|1.00000000]
  optional bool reserved_102 = 697;
  // reserved_103 [] [0E-008|1.00000000]
  optional bool reserved_103 = 698;
  // reserved_104 [] [0E-008|1.00000000]
  optional bool reserved_104 = 699;
  // reserved_105 [] [0E-008|1.00000000]
  optional bool reserved_105 = 700;
  // reserved_106 [] [0E-008|1.00000000]
  optional bool reserved_106 = 701;
  // reserved_107 [] [0E-008|1.00000000]
  optional bool reserved_107 = 702;
  // reserved_108 [] [0E-008|1.00000000]
  optional bool reserved_108 = 703;
  // Ota_0 [] [0E-008|1.00000000]
  optional bool ota_0 = 704;
  // Ota_1 [] [0E-008|1.00000000]
  optional bool ota_1 = 705;
  // reserved_109 [] [0E-008|1.00000000]
  optional bool reserved_109 = 706;
  // reserved_110 [] [0E-008|1.00000000]
  optional bool reserved_110 = 707;
  // reserved_111 [] [0E-008|1.00000000]
  optional bool reserved_111 = 708;
  // reserved_112 [] [0E-008|1.00000000]
  optional bool reserved_112 = 709;
  // reserved_113 [] [0E-008|1.00000000]
  optional bool reserved_113 = 710;
  // reserved_114 [] [0E-008|1.00000000]
  optional bool reserved_114 = 711;
  // Dcm_SID [] [0E-008|1.00000000]
  optional double dcm_sid = 712;
  // Dcm_SubID [] [0E-008|1.00000000]
  optional double dcm_sub_id = 713;
  // Dcm_DID_RID [] [0E-008|65535.00000000]
  optional int32 dcm_did_rid = 714;
  // Dcm_ErrorCode [] [0E-008|255.00000000]
  optional int32 dcm_error_code = 715;
  // reserved_115 [] [0E-008|1.00000000]
  optional bool reserved_115 = 716;
  // DiPilot_Function9 [] [0E-008|1.00000000]
  optional bool di_pilot_function9 = 717;
  // DiPilot_Function10 [] [0E-008|1.00000000]
  optional bool di_pilot_function10 = 718;
  // DiPilot_Function11 [] [0E-008|1.00000000]
  optional bool di_pilot_function11 = 719;
  // DiPilot_Function12 [] [0E-008|1.00000000]
  optional bool di_pilot_function12 = 720;
  // DiPilot_Function13 [] [0E-008|1.00000000]
  optional bool di_pilot_function13 = 721;
  // DiPilot_Function14 [] [0E-008|1.00000000]
  optional bool di_pilot_function14 = 722;
  // DiPilot_Function15 [] [0E-008|1.00000000]
  optional bool di_pilot_function15 = 723;
  // DiPilot_Function16 [] [0E-008|1.00000000]
  optional bool di_pilot_function16 = 724;
  // DiPilot_Function17 [] [0E-008|1.00000000]
  optional bool di_pilot_function17 = 725;
  // DiPilot_Function18 [] [0E-008|1.00000000]
  optional bool di_pilot_function18 = 726;
  // DiPilot_Function19 [] [0E-008|1.00000000]
  optional bool di_pilot_function19 = 727;
  // DiPilot_Function20 [] [0E-008|1.00000000]
  optional bool di_pilot_function20 = 728;
  // DiPilot_Function21 [] [0E-008|1.00000000]
  optional bool di_pilot_function21 = 729;
  // DiPilot_Function22 [] [0E-008|1.00000000]
  optional bool di_pilot_function22 = 730;
  // DiPilot_Function23 [] [0E-008|1.00000000]
  optional bool di_pilot_function23 = 731;
  // AMUX_PMIC1_MCU1 [] [0E-008|655.35000000]
  optional double amux_pmic1_mcu1 = 732;
  // ANT_DET_GNSS_MCU [] [0E-008|655.35000000]
  optional double ant_det_gnss_mcu = 733;
  // VMON_5V_SOC1 [] [0E-008|655.35000000]
  optional double vmon_5_v_soc1 = 734;
  // VMON_CAN_5V0 [] [0E-008|655.35000000]
  optional double vmon_can_5_v0 = 735;
  // VMON_CAN_INH_MCU1 [] [0E-008|655.35000000]
  optional double vmon_can_inh_mcu1 = 736;
  // VMON_KL15_EXT [] [0E-008|655.35000000]
  optional double vmon_kl15_ext = 737;
  // VMON_P0V8_SWITCH [] [0E-008|655.35000000]
  optional double vmon_p0_v8_switch = 738;
  // VMON_P0V9_1GPHY [] [0E-008|655.35000000]
  optional double vmon_p0_v9_1_gphy = 739;
  // VMON_P11V_DMS_LEDOUT [] [0E-008|655.35000000]
  optional double vmon_p11_v_dms_ledout = 740;
  // VMON_P11V_POC_AV_Front [] [0E-008|655.35000000]
  optional double vmon_p11_v_poc_av_front = 741;
  // VMON_P11V_POC_AV_Left [] [0E-008|655.35000000]
  optional double vmon_p11_v_poc_av_left = 742;
  // VMON_P11V_POC_AV_Rear [] [0E-008|655.35000000]
  optional double vmon_p11_v_poc_av_rear = 743;
  // VMON_P11V_POC_AV_Right [] [0E-008|655.35000000]
  optional double vmon_p11_v_poc_av_right = 744;
  // VMON_P11V_POC_DMS [] [0E-008|655.35000000]
  optional double vmon_p11_v_poc_dms = 745;
  // VMON_P11V_POC_FV1 [] [0E-008|655.35000000]
  optional double vmon_p11_v_poc_fv1 = 746;
  // VMON_P11V_POC_FV2 [] [0E-008|655.35000000]
  optional double vmon_p11_v_poc_fv2 = 747;
  // VMON_P11V_POC_FV3 [] [0E-008|655.35000000]
  optional double vmon_p11_v_poc_fv3 = 748;
  // VMON_P11V_POC_RV [] [0E-008|655.35000000]
  optional double vmon_p11_v_poc_rv = 749;
  // VMON_P11V_POC_SV_Left_Front [] [0E-008|655.35000000]
  optional double vmon_p11_v_poc_sv_left_front = 750;
  // VMON_P11V_POC_SV_Left_Rear [] [0E-008|655.35000000]
  optional double vmon_p11_v_poc_sv_left_rear = 751;
  // VMON_P11V_POC_SV_Right_Front [] [0E-008|655.35000000]
  optional double vmon_p11_v_poc_sv_right_front = 752;
  // VMON_P11V_POC_SV_Right_Rear [] [0E-008|655.35000000]
  optional double vmon_p11_v_poc_sv_right_rear = 753;
  // VMON_P11V0_CAMUSS [] [0E-008|655.35000000]
  optional double vmon_p11_v0_camuss = 754;
  // VMON_P11V0_USS [] [0E-008|655.35000000]
  optional double vmon_p11_v0_uss = 755;
  // VMON_P12V0_KL30_BAT1 [] [0E-008|655.35000000]
  optional double vmon_p12_v0_kl30_bat1 = 756;
  // VMON_P12V0_MAIN [] [0E-008|655.35000000]
  optional double vmon_p12_v0_main = 757;
  // VMON_P12V0_SOC1 [] [0E-008|655.35000000]
  optional double vmon_p12_v0_soc1 = 758;
  // VMON_P5V0_ETH [] [0E-008|655.35000000]
  optional double vmon_p5_v0_eth = 759;
  // VMON_P5V0_SOC1_VCC_DRMOS [] [0E-008|655.35000000]
  optional double vmon_p5_v0_soc1_vcc_drmos = 760;
  // VMON_P0V75_SOC1_VDD_RTC [] [0E-008|655.35000000]
  optional double vmon_p0_v75_soc1_vdd_rtc = 761;
  // VMON_P1V8_SOC1_VDD_LS [] [0E-008|655.35000000]
  optional double vmon_p1_v8_soc1_vdd_ls = 762;
  // DiPilot_Function24 [] [0E-008|1.00000000]
  optional bool di_pilot_function24 = 763;
  // DiPilot_Function25 [] [0E-008|1.00000000]
  optional bool di_pilot_function25 = 764;
  // DiPilot_Function26 [] [0E-008|1.00000000]
  optional bool di_pilot_function26 = 765;
  // DiPilot_Function27 [] [0E-008|1.00000000]
  optional bool di_pilot_function27 = 766;
  // DiPilot_Function28 [] [0E-008|1.00000000]
  optional bool di_pilot_function28 = 767;
  // DiPilot_Function29 [] [0E-008|1.00000000]
  optional bool di_pilot_function29 = 768;
  // DiPilot_Function30 [] [0E-008|1.00000000]
  optional bool di_pilot_function30 = 769;
  // DiPilot_Function31 [] [0E-008|1.00000000]
  optional bool di_pilot_function31 = 770;
  // VMON_P1V0_SD_AV [] [0E-008|655.35000000]
  optional double vmon_p1_v0_sd_av = 771;
  // VMON_P1V0_SD_SVFVRVD [] [0E-008|655.35000000]
  optional double vmon_p1_v0_sd_svfvrvd = 772;
  // VMON_P1V2_SD_AV [] [0E-008|655.35000000]
  optional double vmon_p1_v2_sd_av = 773;
  // VMON_P1V2_SD_SVFVRVD [] [0E-008|655.35000000]
  optional double vmon_p1_v2_sd_svfvrvd = 774;
  // VMON_P1V2_SOC1_VCCQ_UFS [] [0E-008|655.35000000]
  optional double vmon_p1_v2_soc1_vccq_ufs = 775;
  // VMON_P1V2_SWITCH [] [0E-008|655.35000000]
  optional double vmon_p1_v2_switch = 776;
  // VMON_P1V8_1GPHY [] [0E-008|655.35000000]
  optional double vmon_p1_v8_1_gphy = 777;
  // VMON_P1V8_SD_AV [] [0E-008|655.35000000]
  optional double vmon_p1_v8_sd_av = 778;
  // VMON_P1V8_SD_SVFVRVD [] [0E-008|655.35000000]
  optional double vmon_p1_v8_sd_svfvrvd = 779;
  // VMON_P2V5_SOC1_VCC_UFS [] [0E-008|655.35000000]
  optional double vmon_p2_v5_soc1_vcc_ufs = 780;
  // VMON_P3V3_1GPHY [] [0E-008|655.35000000]
  optional double vmon_p3_v3_1_gphy = 781;
  // VMON_P3V3_EXT [] [0E-008|655.35000000]
  optional double vmon_p3_v3_ext = 782;
  // VMON_P3V3_SOC1_SAFE [] [0E-008|655.35000000]
  optional double vmon_p3_v3_soc1_safe = 783;
  // VMON_P3V3_STBY1 [] [0E-008|655.35000000]
  optional double vmon_p3_v3_stby1 = 784;
  // VMON_P3V3_SWITCH [] [0E-008|655.35000000]
  optional double vmon_p3_v3_switch = 785;
  // VMON_P3V3_VDD_GNSS [] [0E-008|655.35000000]
  optional double vmon_p3_v3_vdd_gnss = 786;
  // VMON_P3V9_GNSS_ANT [] [0E-008|655.35000000]
  optional double vmon_p3_v9_gnss_ant = 787;
  // VMON_P5V0_MAIN [] [0E-008|655.35000000]
  optional double vmon_p5_v0_main = 788;
  // VMON_P5V0_SDS [] [0E-008|655.35000000]
  optional double vmon_p5_v0_sds = 789;
  // VMON_VCC_USS_FRONT [] [0E-008|655.35000000]
  optional double vmon_vcc_uss_front = 790;
  // VMON_VCC_USS_REAR [] [0E-008|655.35000000]
  optional double vmon_vcc_uss_rear = 791;
  // VMON_VCC_USS_SIDE [] [0E-008|655.35000000]
  optional double vmon_vcc_uss_side = 792;
  // InnerWdg_Timeout [] [0E-008|1.00000000]
  optional bool inner_wdg_timeout = 793;
  // OuterWdg_Timeout [] [0E-008|1.00000000]
  optional bool outer_wdg_timeout = 794;
  // OuterWdg_ContinuousError [] [0E-008|1.00000000]
  optional bool outer_wdg_continuous_error = 795;
  // CORE0_ASW_20_Timeout [] [0E-008|1.00000000]
  optional bool core0_asw_20_timeout = 796;
  // CORE1_BSW_10_Timeout [] [0E-008|1.00000000]
  optional bool core1_bsw_10_timeout = 797;
  // CORE2_ASW_10_Timeout [] [0E-008|1.00000000]
  optional bool core2_asw_10_timeout = 798;
  // CORE0_ASW_10_Timeout [] [0E-008|1.00000000]
  optional bool core0_asw_10_timeout = 799;
  // reserved_116 [] [0E-008|1.00000000]
  optional bool reserved_116 = 800;
  // Condition_T5 [] [0E-008|1.00000000]
  optional bool condition_t5 = 801;
  // Condition_T6 [] [0E-008|1.00000000]
  optional bool condition_t6 = 802;
  // Condition_T7 [] [0E-008|1.00000000]
  optional bool condition_t7 = 803;
  // Condition_T8 [] [0E-008|1.00000000]
  optional bool condition_t8 = 804;
  // Signal_12D [] [0E-008|1.00000000]
  optional bool signal_12_d = 805;
  // Signal_49A [] [0E-008|1.00000000]
  optional bool signal_49_a = 806;
  // Signal_3B7 [] [0E-008|1.00000000]
  optional bool signal_3_b7 = 807;
  // Signal_4BE [] [0E-008|1.00000000]
  optional bool signal_4_be = 808;
  // Signal_08C [] [0E-008|1.00000000]
  optional bool signal_08_c = 809;
  // Signal_409 [] [0E-008|1.00000000]
  optional bool signal_409 = 810;
  // Signal_0F4 [] [0E-008|1.00000000]
  optional bool signal_0_f4 = 811;
  // Signal_343 [] [0E-008|1.00000000]
  optional bool signal_343 = 812;
  // Signal_48B [] [0E-008|1.00000000]
  optional bool signal_48_b = 813;
  // Signal_49AH [] [0E-008|1.00000000]
  optional bool signal_49_ah = 814;
  // reserved_117 [] [0E-008|1.00000000]
  optional bool reserved_117 = 815;
  // reserved_118 [] [0E-008|1.00000000]
  optional bool reserved_118 = 816;
  // reserved_119 [] [0E-008|1.00000000]
  optional bool reserved_119 = 817;
  // reserved_120 [] [0E-008|1.00000000]
  optional bool reserved_120 = 818;
  // reserved_121 [] [0E-008|1.00000000]
  optional bool reserved_121 = 819;
  // reserved_122 [] [0E-008|1.00000000]
  optional bool reserved_122 = 820;
  // reserved_123 [] [0E-008|1.00000000]
  optional bool reserved_123 = 821;
  // reserved_124 [] [0E-008|1.00000000]
  optional bool reserved_124 = 822;
  // reserved_125 [] [0E-008|1.00000000]
  optional bool reserved_125 = 823;
  // reserved_126 [] [0E-008|1.00000000]
  optional bool reserved_126 = 824;
  // WdgState_Flag [] [0E-008|7.00000000]
  optional WdgStateFlagType wdg_state_flag = 825;
  // reserved_127 [] [0E-008|1.00000000]
  optional bool reserved_127 = 826;
  // reserved_128 [] [0E-008|1.00000000]
  optional bool reserved_128 = 827;
  // reserved_129 [] [0E-008|1.00000000]
  optional bool reserved_129 = 828;
  // reserved_130 [] [0E-008|1.00000000]
  optional bool reserved_130 = 829;
  // reserved_131 [] [0E-008|1.00000000]
  optional bool reserved_131 = 830;
  // SoC_PowerState [] [0E-008|7.00000000]
  optional SoCPowerStateType so_c_power_state = 831;
  // CAN_PowerState [] [0E-008|7.00000000]
  optional CANPowerStateType can_power_state = 832;
  // Media_PowerState [] [0E-008|7.00000000]
  optional MediaPowerStateType media_power_state = 833;
  // ETH_PowerState [] [0E-008|7.00000000]
  optional ETHPowerStateType eth_power_state = 834;
  // Lidar_PowerState [] [0E-008|7.00000000]
  optional LidarPowerStateType lidar_power_state = 835;
  // reserved_132 [] [0E-008|1.00000000]
  optional bool reserved_132 = 836;
  // SrcSub_State [] [0E-008|255.00000000]
  optional SrcSubStateType src_sub_state = 837;
  // TargetSub_State [] [0E-008|255.00000000]
  optional TargetSubStateType target_sub_state = 838;
  // Transition_ErrorCode [] [0E-008|15.00000000]
  optional int32 transition_error_code = 839;
  // reserved_133 [] [0E-008|1.00000000]
  optional bool reserved_133 = 840;
  // reserved_134 [] [0E-008|1.00000000]
  optional bool reserved_134 = 841;
  // reserved_135 [] [0E-008|1.00000000]
  optional bool reserved_135 = 842;
  // reserved_136 [] [0E-008|1.00000000]
  optional bool reserved_136 = 843;
  // Transition_Timestamp [] [0E-008|4294967295.00000000]
  optional int32 transition_timestamp = 844;
  // VMON_P1V8_SOC1_VDD_FSI [] [0E-008|65535.00000000]
  optional int32 vmon_p1_v8_soc1_vdd_fsi = 845;
  // VMON_P0V9_SOC1_VDD_FSI_CORE [] [0E-008|65535.00000000]
  optional int32 vmon_p0_v9_soc1_vdd_fsi_core = 846;
  // DiPilot_Function32 [] [0E-008|1.00000000]
  optional bool di_pilot_function32 = 847;
  // DiPilot_Function33 [] [0E-008|1.00000000]
  optional bool di_pilot_function33 = 848;
  // DiPilot_Function34 [] [0E-008|1.00000000]
  optional bool di_pilot_function34 = 849;
  // DiPilot_Function35 [] [0E-008|1.00000000]
  optional bool di_pilot_function35 = 850;
  // DiPilot_Function36 [] [0E-008|1.00000000]
  optional bool di_pilot_function36 = 851;
  // DiPilot_Function37 [] [0E-008|1.00000000]
  optional bool di_pilot_function37 = 852;
  // DiPilot_Function38 [] [0E-008|1.00000000]
  optional bool di_pilot_function38 = 853;
  // DiPilot_Function39 [] [0E-008|1.00000000]
  optional bool di_pilot_function39 = 854;
  // Temp_Cam_FV_Narrow [] [-60.00000000|195.00000000]
  optional double temp_cam_fv_narrow = 855;
  // Temp_Cam_FV_LW [] [-60.00000000|195.00000000]
  optional double temp_cam_fv_lw = 856;
  // Temp_Cam_FV_RW [] [-60.00000000|195.00000000]
  optional double temp_cam_fv_rw = 857;
  // Temp_Cam_RV [] [-60.00000000|195.00000000]
  optional double temp_cam_rv = 858;
  // Temp_Cam_SV_LF [] [-60.00000000|195.00000000]
  optional double temp_cam_sv_lf = 859;
  // Temp_Cam_SV_LR [] [-60.00000000|195.00000000]
  optional double temp_cam_sv_lr = 860;
  // Temp_Cam_SV_RF [] [-60.00000000|195.00000000]
  optional double temp_cam_sv_rf = 861;
  // Temp_Cam_SV_RR [] [-60.00000000|195.00000000]
  optional double temp_cam_sv_rr = 862;
  // reserved_137 [] [-60.00000000|195.00000000]
  optional double reserved_137 = 863;
  // reserved_138 [] [-60.00000000|195.00000000]
  optional double reserved_138 = 864;
  // reserved_139 [] [-60.00000000|195.00000000]
  optional double reserved_139 = 865;
  // reserved_140 [] [-60.00000000|195.00000000]
  optional double reserved_140 = 866;
  // reserved_141 [] [-60.00000000|195.00000000]
  optional double reserved_141 = 867;
  // Temp_MCU1_CORE1 [] [-80.00000000|175.00000000]
  optional double temp_mcu1_core1 = 868;
  // Temp_SOC1_CPU [] [-60.00000000|195.00000000]
  optional double temp_soc1_cpu = 869;
  // Temp_SOC1_GPU [] [-60.00000000|195.00000000]
  optional double temp_soc1_gpu = 870;
  // Temp_SOC1_CORE1 [] [-60.00000000|195.00000000]
  optional double temp_soc1_core1 = 871;
  // Temp_SOC1_CORE2 [] [-60.00000000|195.00000000]
  optional double temp_soc1_core2 = 872;
  // Temp_SOC1_CORE3 [] [-60.00000000|195.00000000]
  optional double temp_soc1_core3 = 873;
  // Temp_SOC1_TJ [] [-60.00000000|195.00000000]
  optional double temp_soc1_tj = 874;
  // Temp_MCU1_Remot [] [-80.00000000|175.00000000]
  optional double temp_mcu1_remot = 875;
  // Temp_MCU1_Local [] [-80.00000000|175.00000000]
  optional double temp_mcu1_local = 876;
  // Temp_SOC1_Remot [] [-80.00000000|175.00000000]
  optional double temp_soc1_remot = 877;
  // Temp_SOC1_Local [] [-80.00000000|175.00000000]
  optional double temp_soc1_local = 878;
  // ETH_SQI_Port1 [] [0E-008|255.00000000]
  optional int32 eth_sqi_port1 = 879;
  // ETH_SQI_Port2 [] [0E-008|255.00000000]
  optional int32 eth_sqi_port2 = 880;
  // ETH_SQI_Port3 [] [0E-008|255.00000000]
  optional int32 eth_sqi_port3 = 881;
  // ETH_SQI_Port4 [] [0E-008|255.00000000]
  optional int32 eth_sqi_port4 = 882;
  // ETH_SQI_Port5 [] [0E-008|255.00000000]
  optional int32 eth_sqi_port5 = 883;
  // ETH_SQI_Port6 [] [0E-008|255.00000000]
  optional int32 eth_sqi_port6 = 884;
  // ETH_SQI_Port7 [] [0E-008|255.00000000]
  optional int32 eth_sqi_port7 = 885;
  // ETH_Link_Port1 [] [0E-008|255.00000000]
  optional int32 eth_link_port1 = 886;
  // ETH_Link_Port2 [] [0E-008|255.00000000]
  optional int32 eth_link_port2 = 887;
  // ETH_Link_Port3 [] [0E-008|255.00000000]
  optional int32 eth_link_port3 = 888;
  // ETH_Link_Port4 [] [0E-008|255.00000000]
  optional int32 eth_link_port4 = 889;
  // reserved_142 [] [0E-008|255.00000000]
  optional int32 reserved_142 = 890;
  // reserved_143 [] [0E-008|255.00000000]
  optional int32 reserved_143 = 891;
  // reserved_144 [] [0E-008|255.00000000]
  optional int32 reserved_144 = 892;
  // reserved_145 [] [0E-008|255.00000000]
  optional int32 reserved_145 = 893;
  // PAS_SYS_State [] [0E-008|15.00000000]
  optional PASSYSStateType pas_sys_state = 894;
  // reserved_146 [] [0E-008|1.00000000]
  optional bool reserved_146 = 895;
  // reserved_147 [] [0E-008|1.00000000]
  optional bool reserved_147 = 896;
  // reserved_148 [] [0E-008|1.00000000]
  optional bool reserved_148 = 897;
  // reserved_149 [] [0E-008|1.00000000]
  optional bool reserved_149 = 898;
  // MRR_State [] [0E-008|3.00000000]
  optional MRRStateType mrr_state = 899;
  // reserved_150 [] [0E-008|1.00000000]
  optional bool reserved_150 = 900;
  // reserved_151 [] [0E-008|1.00000000]
  optional bool reserved_151 = 901;
  // reserved_152 [] [0E-008|1.00000000]
  optional bool reserved_152 = 902;
  // reserved_153 [] [0E-008|1.00000000]
  optional bool reserved_153 = 903;
  // reserved_154 [] [0E-008|1.00000000]
  optional bool reserved_154 = 904;
  // reserved_155 [] [0E-008|1.00000000]
  optional bool reserved_155 = 905;
  // LF_CR_State [] [0E-008|3.00000000]
  optional LFCRStateType lf_cr_state = 906;
  // reserved_156 [] [0E-008|1.00000000]
  optional bool reserved_156 = 907;
  // reserved_157 [] [0E-008|1.00000000]
  optional bool reserved_157 = 908;
  // reserved_158 [] [0E-008|1.00000000]
  optional bool reserved_158 = 909;
  // reserved_159 [] [0E-008|1.00000000]
  optional bool reserved_159 = 910;
  // reserved_160 [] [0E-008|1.00000000]
  optional bool reserved_160 = 911;
  // reserved_161 [] [0E-008|1.00000000]
  optional bool reserved_161 = 912;
  // RF_CR_State [] [0E-008|3.00000000]
  optional RFCRStateType rf_cr_state = 913;
  // reserved_162 [] [0E-008|1.00000000]
  optional bool reserved_162 = 914;
  // reserved_163 [] [0E-008|1.00000000]
  optional bool reserved_163 = 915;
  // reserved_164 [] [0E-008|1.00000000]
  optional bool reserved_164 = 916;
  // reserved_165 [] [0E-008|1.00000000]
  optional bool reserved_165 = 917;
  // reserved_166 [] [0E-008|1.00000000]
  optional bool reserved_166 = 918;
  // reserved_167 [] [0E-008|1.00000000]
  optional bool reserved_167 = 919;
  // LR_CR_State [] [0E-008|3.00000000]
  optional LRCRStateType lr_cr_state = 920;
  // reserved_168 [] [0E-008|1.00000000]
  optional bool reserved_168 = 921;
  // reserved_169 [] [0E-008|1.00000000]
  optional bool reserved_169 = 922;
  // reserved_170 [] [0E-008|1.00000000]
  optional bool reserved_170 = 923;
  // reserved_171 [] [0E-008|1.00000000]
  optional bool reserved_171 = 924;
  // reserved_172 [] [0E-008|1.00000000]
  optional bool reserved_172 = 925;
  // reserved_173 [] [0E-008|1.00000000]
  optional bool reserved_173 = 926;
  // RR_CR_State [] [0E-008|3.00000000]
  optional RRCRStateType rr_cr_state = 927;
  // reserved_174 [] [0E-008|1.00000000]
  optional bool reserved_174 = 928;
  // reserved_175 [] [0E-008|1.00000000]
  optional bool reserved_175 = 929;
  // reserved_176 [] [0E-008|1.00000000]
  optional bool reserved_176 = 930;
  // reserved_177 [] [0E-008|1.00000000]
  optional bool reserved_177 = 931;
  // reserved_178 [] [0E-008|1.00000000]
  optional bool reserved_178 = 932;
  // reserved_179 [] [0E-008|1.00000000]
  optional bool reserved_179 = 933;
  // SOC1_DDR_VDDQ_SEPA [] [0E-008|65535.00000000]
  optional int32 soc1_ddr_vddq_sepa = 934;
  // VMON_P1V05_SOC1_DDR_VDD_AP [] [0E-008|65535.00000000]
  optional int32 vmon_p1_v05_soc1_ddr_vdd_ap = 935;
  // SOC1_DDR_VDD2_SEPA [] [0E-008|65535.00000000]
  optional int32 soc1_ddr_vdd2_sepa = 936;
  // VMON_P1V2_SOC1_VDD_AO [] [0E-008|65535.00000000]
  optional int32 vmon_p1_v2_soc1_vdd_ao = 937;
  // VMON_P3V3_SOC1_VDD_AO [] [0E-008|65535.00000000]
  optional int32 vmon_p3_v3_soc1_vdd_ao = 938;
  // VMON_P0V95_SOC1_VDD [] [0E-008|65535.00000000]
  optional int32 vmon_p0_v95_soc1_vdd = 939;
  // VMON_P3V3_SOC1_VDD_FSI [] [0E-008|65535.00000000]
  optional int32 vmon_p3_v3_soc1_vdd_fsi = 940;
  // VMON_P1V8_SOC1_VDD_AO [] [0E-008|65535.00000000]
  optional int32 vmon_p1_v8_soc1_vdd_ao = 941;
  // DiPilot_Function40 [] [0E-008|1.00000000]
  optional bool di_pilot_function40 = 942;
  // DiPilot_Function41 [] [0E-008|1.00000000]
  optional bool di_pilot_function41 = 943;
  // DiPilot_Function42 [] [0E-008|1.00000000]
  optional bool di_pilot_function42 = 944;
  // DiPilot_Function43 [] [0E-008|1.00000000]
  optional bool di_pilot_function43 = 945;
  // DiPilot_Function44 [] [0E-008|1.00000000]
  optional bool di_pilot_function44 = 946;
  // DiPilot_Function45 [] [0E-008|1.00000000]
  optional bool di_pilot_function45 = 947;
  // DiPilot_Function46 [] [0E-008|1.00000000]
  optional bool di_pilot_function46 = 948;
  // DiPilot_Function47 [] [0E-008|1.00000000]
  optional bool di_pilot_function47 = 949;
  // DiPilot_Function48 [] [0E-008|1.00000000]
  optional bool di_pilot_function48 = 950;
  // DiPilot_Function49 [] [0E-008|1.00000000]
  optional bool di_pilot_function49 = 951;
  // DiPilot_Function50 [] [0E-008|1.00000000]
  optional bool di_pilot_function50 = 952;
  // DiPilot_Function51 [] [0E-008|1.00000000]
  optional bool di_pilot_function51 = 953;
  // DiPilot_Function52 [] [0E-008|1.00000000]
  optional bool di_pilot_function52 = 954;
  // DiPilot_Function53 [] [0E-008|1.00000000]
  optional bool di_pilot_function53 = 955;
  // DiPilot_Function54 [] [0E-008|1.00000000]
  optional bool di_pilot_function54 = 956;
  // DiPilot_Function55 [] [0E-008|1.00000000]
  optional bool di_pilot_function55 = 957;
}

message RIGHT_BCM_0X3B5 {
// Report Message
  // 加热丝加热状态 [] [0E-008|3.00000000]
  optional int32 heating_status_3_b5_s = 1;
  // 加热丝故障状态 [] [0E-008|3.00000000]
  optional int32 heating_failure_status_s = 2;
}

message BydTangAdasDetail {
  optional ECM_0X10D ecm_0x10d = 1; // report message
  optional VCU_0X128 vcu_0x128 = 2; // report message
  optional LEFT_BCM_0X12D left_bcm_0x12d = 3; // report message
  optional CS_0X133 cs_0x133 = 4; // report message
  optional ADS_0X134 ads_0x134 = 5; // control message
  optional ADS_0X138 ads_0x138 = 6; // control message
  optional CS_0X142 cs_0x142 = 7; // report message
  optional LEFT_BCM_0X144 left_bcm_0x144 = 8; // report message
  optional ADS_0X14B ads_0x14b = 9; // control message
  optional MEDIA_0X14C media_0x14c = 10; // report message
  optional LEFT_BCM_0X151 left_bcm_0x151 = 11; // report message
  optional ADS_0X15A ads_0x15a = 12; // control message
  optional ADAS_0X175 adas_0x175 = 13; // control message
  optional HOD_0X17F hod_0x17f = 14; // report message
  optional PAS_0X1A1 pas_0x1a1 = 15; // control message
  optional MEDIA_0X1BC media_0x1bc = 16; // report message
  optional ADS_0X1CB ads_0x1cb = 17; // control message
  optional ADS_0X1FF ads_0x1ff = 18; // control message
  optional MEDIA_0X201 media_0x201 = 19; // report message
  optional TCU_0X212 tcu_0x212 = 20; // report message
  optional ADS_0X213 ads_0x213 = 21; // control message
  optional REAR_BCM_0X219 rear_bcm_0x219 = 22; // report message
  optional ADS_0X237 ads_0x237 = 23; // control message
  optional MEDIA_0X23D media_0x23d = 24; // report message
  optional SEC_0X23F sec_0x23f = 25; // report message
  optional VCU_0X240 vcu_0x240 = 26; // report message
  optional VCU_0X242 vcu_0x242 = 27; // report message
  optional BMS_0X244 bms_0x244 = 28; // report message
  optional VCU_0X251 vcu_0x251 = 29; // report message
  optional MEDIA_0X25C media_0x25c = 30; // report message
  optional VCU_0X264 vcu_0x264 = 31; // report message
  optional ADS_0X266 ads_0x266 = 32; // control message
  optional PAS_0X267 pas_0x267 = 33; // control message
  optional VCU_0X272 vcu_0x272 = 34; // report message
  optional ADS_0X291 ads_0x291 = 35; // control message
  optional LEFT_BCM_0X294 left_bcm_0x294 = 36; // report message
  optional ADS_0X295 ads_0x295 = 37; // control message
  optional ADS_0X297 ads_0x297 = 38; // control message
  optional ADS_0X29C ads_0x29c = 39; // control message
  optional ADS_0X2AC ads_0x2ac = 40; // control message
  optional ADS_0X2B4 ads_0x2b4 = 41; // control message
  optional MEDIA_0X2B6 media_0x2b6 = 42; // report message
  optional MEDIA_0X2BC media_0x2bc = 43; // report message
  optional ADS_0X2CA ads_0x2ca = 44; // control message
  optional ADS_0X2CB ads_0x2cb = 45; // control message
  optional ADS_0X2CE ads_0x2ce = 46; // control message
  optional MEDIA_0X2D4 media_0x2d4 = 47; // report message
  optional ADS_0X2D5 ads_0x2d5 = 48; // control message
  optional ADAS_0X2E7 adas_0x2e7 = 49; // control message
  optional MEDIA_0X2EA media_0x2ea = 50; // report message
  optional MEDIA_0X2EC media_0x2ec = 51; // report message
  optional ADS_0X2F0 ads_0x2f0 = 52; // control message
  optional ADS_0X2F2 ads_0x2f2 = 53; // control message
  optional ADS_0X2F6 ads_0x2f6 = 54; // control message
  optional LEFT_BCM_0X312 left_bcm_0x312 = 55; // report message
  optional MEDIA_0X31C media_0x31c = 56; // report message
  optional LEFT_BCM_0X31E left_bcm_0x31e = 57; // report message
  optional LEFT_BCM_0X323 left_bcm_0x323 = 58; // report message
  optional MEDIA_0X32B media_0x32b = 59; // report message
  optional ADS_0X32D ads_0x32d = 60; // control message
  optional ADS_0X32E ads_0x32e = 61; // control message
  optional ADS_0X32F ads_0x32f = 62; // control message
  optional VCU_0X341 vcu_0x341 = 63; // report message
  optional VCU_0X342 vcu_0x342 = 64; // report message
  optional BMS_0X344 bms_0x344 = 65; // report message
  optional BMS_0X345 bms_0x345 = 66; // report message
  optional VCU_0X356 vcu_0x356 = 67; // report message
  optional SCU_0X35C scu_0x35c = 68; // report message
  optional VCU_0X364 vcu_0x364 = 69; // report message
  optional PAS_0X365 pas_0x365 = 70; // control message
  optional DCDC_0X36D dcdc_0x36d = 71; // report message
  optional MSR_DRV_0X381 msr_drv_0x381 = 72; // report message
  optional MEDIA_0X385 media_0x385 = 73; // report message
  optional LEFT_BCM_0X388 left_bcm_0x388 = 74; // report message
  optional MEDIA_0X389 media_0x389 = 75; // report message
  optional LEFT_BCM_0X38A left_bcm_0x38a = 76; // report message
  optional PPS_0X3AB pps_0x3ab = 77; // report message
  optional FLL_0X3AC fll_0x3ac = 78; // report message
  optional FLR_0X3AD flr_0x3ad = 79; // report message
  optional SWS_0X3B0 sws_0x3b0 = 80; // report message
  optional LEFT_BCM_0X3B4 left_bcm_0x3b4 = 81; // report message
  optional RIGHT_BCM_0X3B5 right_bcm_0x3b5 = 82; // report message
  optional LEFT_BCM_0X3C5 left_bcm_0x3c5 = 83; // report message
  optional ADS_0X3CB ads_0x3cb = 84; // control message
  optional LEFT_BCM_0X3CD left_bcm_0x3cd = 85; // report message
  optional LEFT_BCM_0X3D9 left_bcm_0x3d9 = 86; // report message
  optional MEDIA_0X3E3 media_0x3e3 = 87; // report message
  optional RIGHT_BCM_0X404 right_bcm_0x404 = 88; // report message
  optional LEFT_BCM_0X407 left_bcm_0x407 = 89; // report message
  optional MEDIA_0X409 media_0x409 = 90; // report message
  optional VCU_0X410 vcu_0x410 = 91; // report message
  optional ADS_0X418 ads_0x418 = 92; // control message
  optional RIGHT_BCM_0X41A right_bcm_0x41a = 93; // report message
  optional MEDIA_0X43E media_0x43e = 94; // report message
  optional MEDIA_0X43F media_0x43f = 95; // report message
  optional BMS_0X444 bms_0x444 = 96; // report message
  optional BMS_0X445 bms_0x445 = 97; // report message
  optional ADS_0X453 ads_0x453 = 98; // control message
  optional ADS_0X454 ads_0x454 = 99; // control message
  optional VCU_0X464 vcu_0x464 = 100; // report message
  optional LEFT_BCM_0X475 left_bcm_0x475 = 101; // report message
  optional REAR_BCM_0X479 rear_bcm_0x479 = 102; // report message
  optional MSR_DRV_0X481 msr_drv_0x481 = 103; // report message
  optional LEFT_BCM_0X48E left_bcm_0x48e = 104; // report message
  optional LEFT_BCM_0X490 left_bcm_0x490 = 105; // report message
  optional LEFT_BCM_0X496 left_bcm_0x496 = 106; // report message
  optional LTE4G_0X49A lte4g_0x49a = 107; // report message
  optional LEFT_BCM_0X4A5 left_bcm_0x4a5 = 108; // report message
  optional SCPA_0X4A9 scpa_0x4a9 = 109; // report message
  optional LEFT_BCM_0X4B3 left_bcm_0x4b3 = 110; // report message
  optional MEDIA_0X4B4 media_0x4b4 = 111; // report message
  optional VCU_0X4BE vcu_0x4be = 112; // report message
  optional MEDIA_0X4CA media_0x4ca = 113; // report message
  optional VCU_0X4CF vcu_0x4cf = 114; // report message
  optional MEDIA_0X4EF media_0x4ef = 115; // report message
  optional RIGHT_BCM_0X511 right_bcm_0x511 = 116; // report message
  optional ADS_0X554 ads_0x554 = 117; // control message
  optional ADS_0X05F ads_0x05f = 118; // control message
  optional PAS_0X701 pas_0x701 = 119; // report message
  optional PAS_0X709 pas_0x709 = 120; // control message
  optional ADS_0X712 ads_0x712 = 121; // report message
  optional ADS_0X71A ads_0x71a = 122; // control message
  optional LIDAR_0X757 lidar_0x757 = 123; // report message
  optional LIDAR_0X75F lidar_0x75f = 124; // control message
  optional ADS_0X7DF ads_0x7df = 125; // report message
  optional LEFT_BCM_0X095 left_bcm_0x095 = 126; // report message
  optional ADS_0X0AE ads_0x0ae = 127; // control message
  optional VCU_0X0F4 vcu_0x0f4 = 128; // control message
}
