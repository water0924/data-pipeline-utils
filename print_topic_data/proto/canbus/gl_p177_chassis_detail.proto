syntax = "proto2";

package deeproute.canbus.gl.p177;

message ADPU_AD_REDUNDANCY_CAN_FR09_101 {
// Control Message
  enum AD4IMUStatIMUStatType {
    AD4IMUSTATIMUSTAT_IMUSTAT_NORMAL = 0;
    AD4IMUSTATIMUSTAT_IMUSTAT_SENSORERROR = 1;
    AD4IMUSTATIMUSTAT_IMUSTAT_RESERVED1 = 2;
    AD4IMUSTATIMUSTAT_IMUSTAT_RESERVED2 = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool ad4_imu_stat_ub = 1;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_imu_stat_chks = 2;
  // description count [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_stat_cntr = 3;
  // description Simultaneous number identification  [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_stat_head = 4;
  // description IMU(vehicle)  status [] [0|3] [initial_value:0]
  optional AD4IMUStatIMUStatType ad4_imu_stat_imu_stat = 5;
  // description IMU temperature [degC] [-50.0|150.0] [initial_value:0]
  optional double ad4_imu_stat_imu_temp = 6;
}

message ADPU_AD_REDUNDANCY_CAN_FR08_102 {
// Control Message
  // [] [0|1] [initial_value:None]
  optional bool ad4_imu_gyro_z_ub = 1;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_imu_gyro_z_chks = 2;
  // description count [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_gyro_z_cntr = 3;
  // description IMU(vehicle) gyroscope of Z [DegPerSec] [-500.0|500.0] [initial_value:0]
  optional double ad4_imu_gyro_z_gyro = 4;
  // description Simultaneous number identification  [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_gyro_z_head = 5;
}

message ADPU_AD_REDUNDANCY_CAN_FR07_103 {
// Control Message
  // [] [0|1] [initial_value:None]
  optional bool ad4_imu_gyro_y_ub = 1;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_imu_gyro_y_chks = 2;
  // description count [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_gyro_y_cntr = 3;
  // description IMU(vehicle) gyroscope of Y [DegPerSec] [-500.0|500.0] [initial_value:0]
  optional double ad4_imu_gyro_y_gyro = 4;
  // description Simultaneous number identification  [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_gyro_y_head = 5;
}

message ADPU_AD_REDUNDANCY_CAN_FR06_105 {
// Control Message
  // [] [0|1] [initial_value:None]
  optional bool ad4_imu_gyro_x_ub = 1;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_imu_gyro_x_chks = 2;
  // description count [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_gyro_x_cntr = 3;
  // description IMU(vehicle) gyroscope of X [DegPerSec] [-500.0|500.0] [initial_value:0]
  optional double ad4_imu_gyro_x_gyro = 4;
  // description Simultaneous number identification  [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_gyro_x_head = 5;
}

message ADPU_AD_REDUNDANCY_CAN_FR03_108 {
// Control Message
  // [] [0|1] [initial_value:None]
  optional bool ad4_imu_acce_z_ub = 1;
  // description IMU(vehicle) acceleration of Z [g] [-10.0|10.0] [initial_value:0]
  optional double ad4_imu_acce_z_acce = 2;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_imu_acce_z_chks = 3;
  // description count [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_acce_z_cntr = 4;
  // description Simultaneous number identification  [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_acce_z_head = 5;
}

message ADPU_AD_REDUNDANCY_CAN_FR02_109 {
// Control Message
  // [] [0|1] [initial_value:None]
  optional bool ad4_imu_acce_y_ub = 1;
  // description IMU(vehicle) acceleration of Y [g] [-10.0|10.0] [initial_value:0]
  optional double ad4_imu_acce_y_acce = 2;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_imu_acce_y_chks = 3;
  // description count [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_acce_y_cntr = 4;
  // description Simultaneous number identification  [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_acce_y_head = 5;
}

message ADPU_AD_REDUNDANCY_CAN_FR01_110 {
// Control Message
  // [] [0|1] [initial_value:None]
  optional bool ad4_imu_acce_x_ub = 1;
  // description IMU(vehicle) acceleration of X [g] [-10.0|10.0] [initial_value:0]
  optional double ad4_imu_acce_x_acce = 2;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_imu_acce_x_chks = 3;
  // description count [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_acce_x_cntr = 4;
  // description Simultaneous number identification  [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_acce_x_head = 5;
}

message ADSC_AD_REDUNDANCY_FR05_115 {
// Control Message
  // [] [0|1] [initial_value:None]
  optional bool ti_and_date_indcn_ub = 1;
  // description Current time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Signal qualifier, No means values should be ignored. [] [0|1] [initial_value:0]
  optional bool ti_and_date_indcn_data_valid = 2;
  // description Current time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Day [Days] [1.0|31.0] [initial_value:1]
  optional uint32 ti_and_date_indcn_day = 3;
  // description Current time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Hour [hours] [0.0|23.0] [initial_value:0]
  optional double ti_and_date_indcn_hr1 = 4;
  // description Current time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Minutes [Mins] [0.0|59.0] [initial_value:0]
  optional double ti_and_date_indcn_mins1 = 5;
  // description Current time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Month, 1-12 [Month] [1.0|12.0] [initial_value:1]
  optional double ti_and_date_indcn_mth1 = 6;
  // description Current time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Seconds [s] [0.0|59.0] [initial_value:0]
  optional double ti_and_date_indcn_sec1 = 7;
  // description Current time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Year, 0-99 [Year] [0.0|99.0] [initial_value:0]
  optional double ti_and_date_indcn_yr1 = 8;
}

message ADSC_AD_REDUNDANCY_FR04_126 {
// Control Message
  enum EpbsoftswtCtrlst1Type {
    EPBSOFTSWTCTRLST1_EPBSOFTSWTCTRLST_NOREQUEST = 0;
    EPBSOFTSWTCTRLST1_EPBSOFTSWTCTRLST_APPLYREQUEST = 1;
    EPBSOFTSWTCTRLST1_EPBSOFTSWTCTRLST_RELEASEREQUEST = 2;
    EPBSOFTSWTCTRLST1_EPBSOFTSWTCTRLST_FORBIDDEN = 3;
    EPBSOFTSWTCTRLST1_EPBSOFTSWTCTRLST_UNKNOWN = 4;
  }
  // [] [0|1] [initial_value:None]
  optional bool ad4_asy_pinion_ag_req_for_bkp_ub = 1;
  // description Steering request signal from Secondary AD controller with function safety. [rad] [-14.5|17.4990234375] [initial_value:14848]
  optional double ad4_asy_pinion_ag_req_for_bkp_asy_pinion_ag_req = 2;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_asy_pinion_ag_req_for_bkp_asy_pinion_ag_req_chks = 3;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_asy_pinion_ag_req_for_bkp_asy_pinion_ag_req_cntr = 4;
  // description Ignition relay status [] [0|1] [initial_value:0]
  optional bool rly_pwr_distbn_cmd1_wd_ign_rly_cmd = 5;
  // [] [0|1] [initial_value:None]
  optional bool rly_pwr_distbn_cmd1_wd_ign_rly_cmd_ub = 6;
  // description Epb Soft Switch Control Standby signal [] [0|7] [initial_value:0]
  optional EpbsoftswtCtrlst1Type epbsoftswt_ctrlst1 = 7;
  // [] [0|1] [initial_value:None]
  optional bool epbsoftswt_ctrlst1_ub = 8;
}

message RBCM_AD_REDUNDANCY_FR09_158 {
// Control Message
  enum StandStillMgrStsForHldBkpStandStillMgrStsForHld1Type {
    STANDSTILLMGRSTSFORHLDBKPSTANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLDVAL0 = 0;
    STANDSTILLMGRSTSFORHLDBKPSTANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLDVAL1 = 1;
    STANDSTILLMGRSTSFORHLDBKPSTANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLDVAL2 = 2;
    STANDSTILLMGRSTSFORHLDBKPSTANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLDVAL3 = 3;
    STANDSTILLMGRSTSFORHLDBKPSTANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLDVAL4 = 4;
    STANDSTILLMGRSTSFORHLDBKPSTANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLDVAL5 = 5;
    STANDSTILLMGRSTSFORHLDBKPSTANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLDVAL6 = 6;
    STANDSTILLMGRSTSFORHLDBKPSTANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLDVAL7 = 7;
  }
  // [] [0|1] [initial_value:None]
  optional bool drv_brk_req_dmat_safe_ub = 1;
  // description Chks [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 drv_brk_req_dmat_safe_chks = 2;
  // description Cntr [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 drv_brk_req_dmat_safe_cntr = 3;
  // description Driver brake dominant [] [0|1] [initial_value:0]
  optional bool drv_brk_req_dmat_safe_drv_brk_req = 4;
  // [] [0|1] [initial_value:None]
  optional bool stand_still_mgr_sts_for_hld_bkp_ub = 5;
  // description Chks [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 stand_still_mgr_sts_for_hld_bkp_chks = 6;
  // description Cntr [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 stand_still_mgr_sts_for_hld_bkp_cntr = 7;
  // description Brake systen hold status [] [0|7] [initial_value:0]
  optional StandStillMgrStsForHldBkpStandStillMgrStsForHld1Type stand_still_mgr_sts_for_hld_bkp_stand_still_mgr_sts_for_hld1 = 8;
}

message ADCU_AD_REDUNDANCY_FR02_160 {
// Control Message
  enum AD4AsyADL3LgtFuncCtrlStsForBkpADModType {
    AD4ASYADL3LGTFUNCCTRLSTSFORBKPADMOD_ADMOD_NAD_MOD = 0;
    AD4ASYADL3LGTFUNCCTRLSTSFORBKPADMOD_ADMOD_TJP_HWC = 1;
    AD4ASYADL3LGTFUNCCTRLSTSFORBKPADMOD_ADMOD_NOP = 2;
    AD4ASYADL3LGTFUNCCTRLSTSFORBKPADMOD_ADMOD_E2E = 3;
  }
  enum AD4AsyADL3LgtFuncCtrlStsForBkpQfType {
    AD4ASYADL3LGTFUNCCTRLSTSFORBKPQF_GENQF1_UNDEFINDDATAACCUR = 0;
    AD4ASYADL3LGTFUNCCTRLSTSFORBKPQF_GENQF1_TMPUNDEFDDATA = 1;
    AD4ASYADL3LGTFUNCCTRLSTSFORBKPQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    AD4ASYADL3LGTFUNCCTRLSTSFORBKPQF_GENQF1_ACCURDATA = 3;
  }
  enum AD4AsyADL3LgtFuncCtrlStsForBkpStsType {
    AD4ASYADL3LGTFUNCCTRLSTSFORBKPSTS_COLORSTS_RED = 0;
    AD4ASYADL3LGTFUNCCTRLSTSFORBKPSTS_COLORSTS_YELLOW = 1;
    AD4ASYADL3LGTFUNCCTRLSTSFORBKPSTS_COLORSTS_GREEN = 2;
    AD4ASYADL3LGTFUNCCTRLSTSFORBKPSTS_COLORSTS_RESERVED = 3;
  }
  enum AD4AsyLgtADModeReqForBkpADActiveReqType {
    AD4ASYLGTADMODEREQFORBKPADACTIVEREQ_ADMOD_NAD_MOD = 0;
    AD4ASYLGTADMODEREQFORBKPADACTIVEREQ_ADMOD_TJP_HWC = 1;
    AD4ASYLGTADMODEREQFORBKPADACTIVEREQ_ADMOD_NOP = 2;
    AD4ASYLGTADMODEREQFORBKPADACTIVEREQ_ADMOD_E2E = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool ad4_asy_adl3_lgt_func_ctrl_sts_for_bkp_ub = 1;
  // description ADMod [] [0|3] [initial_value:0]
  optional AD4AsyADL3LgtFuncCtrlStsForBkpADModType ad4_asy_adl3_lgt_func_ctrl_sts_for_bkp_ad_mod = 2;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_asy_adl3_lgt_func_ctrl_sts_for_bkp_chks = 3;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_asy_adl3_lgt_func_ctrl_sts_for_bkp_cntr = 4;
  // description CtrlSts [] [0|1] [initial_value:0]
  optional bool ad4_asy_adl3_lgt_func_ctrl_sts_for_bkp_ctrl_sts = 5;
  // description Degraded [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_asy_adl3_lgt_func_ctrl_sts_for_bkp_degraded = 6;
  // description Qf [] [0|3] [initial_value:0]
  optional AD4AsyADL3LgtFuncCtrlStsForBkpQfType ad4_asy_adl3_lgt_func_ctrl_sts_for_bkp_qf = 7;
  // description Status [] [0|3] [initial_value:0]
  optional AD4AsyADL3LgtFuncCtrlStsForBkpStsType ad4_asy_adl3_lgt_func_ctrl_sts_for_bkp_sts = 8;
  // [] [0|1] [initial_value:None]
  optional bool ad4_asy_lgt_ad_mode_req_for_bkp_ub = 9;
  // description ADActiveRequest [] [0|3] [initial_value:0]
  optional AD4AsyLgtADModeReqForBkpADActiveReqType ad4_asy_lgt_ad_mode_req_for_bkp_ad_active_req = 10;
  // description AD Deactive Request [] [0|1] [initial_value:0]
  optional bool ad4_asy_lgt_ad_mode_req_for_bkp_ad_deactive_req = 11;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_asy_lgt_ad_mode_req_for_bkp_chks = 12;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_asy_lgt_ad_mode_req_for_bkp_cntr = 13;
}

message ADSC_AD_REDUNDANCY_FR01_177 {
// Control Message
  enum AD4WhlLockReqForBkpWhlLockReqType {
    AD4WHLLOCKREQFORBKPWHLLOCKREQ_WHLLOCKREQ_NOREQUEST = 0;
    AD4WHLLOCKREQFORBKPWHLLOCKREQ_WHLLOCKREQ_APPLY = 1;
    AD4WHLLOCKREQFORBKPWHLLOCKREQ_WHLLOCKREQ_RELEASE = 2;
    AD4WHLLOCKREQFORBKPWHLLOCKREQ_WHLLOCKREQ_RESERVED = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool ad4_whl_lock_req_for_bkp_ub = 1;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_whl_lock_req_for_bkp_chks = 2;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_whl_lock_req_for_bkp_cntr = 3;
  // description Wheel lock request [] [0|3] [initial_value:0]
  optional AD4WhlLockReqForBkpWhlLockReqType ad4_whl_lock_req_for_bkp_whl_lock_req = 4;
}

message ADSC_AD_REDUNDANCY_FR02_178 {
// Control Message
  enum AD4AsyADModeReqForBkpADActiveReqType {
    AD4ASYADMODEREQFORBKPADACTIVEREQ_ADMOD_NAD_MOD = 0;
    AD4ASYADMODEREQFORBKPADACTIVEREQ_ADMOD_TJP_HWC = 1;
    AD4ASYADMODEREQFORBKPADACTIVEREQ_ADMOD_NOP = 2;
    AD4ASYADMODEREQFORBKPADACTIVEREQ_ADMOD_E2E = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool ad4_asy_ad_mode_req_for_bkp_ub = 1;
  // description ADActiveRequest [] [0|3] [initial_value:0]
  optional AD4AsyADModeReqForBkpADActiveReqType ad4_asy_ad_mode_req_for_bkp_ad_active_req = 2;
  // description AD Deactive Request [] [0|1] [initial_value:0]
  optional bool ad4_asy_ad_mode_req_for_bkp_ad_deactive_req = 3;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_asy_ad_mode_req_for_bkp_chks = 4;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_asy_ad_mode_req_for_bkp_cntr = 5;
  // [] [0|1] [initial_value:None]
  optional bool ad4_asy_stand_still_req_for_bkp_ub = 6;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_asy_stand_still_req_for_bkp_chks = 7;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_asy_stand_still_req_for_bkp_cntr = 8;
  // description Requests automatic Soft Stop and Hold from Secondary AD controller with function safety. [] [0|1] [initial_value:0]
  optional bool ad4_asy_stand_still_req_for_bkp_stand_still_req = 9;
  // [] [0|1] [initial_value:None]
  optional bool ad4_drv_off_req_for_lgt_ctrl_for_bkp_ub = 10;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_drv_off_req_for_lgt_ctrl_for_bkp_chks = 11;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_drv_off_req_for_lgt_ctrl_for_bkp_cntr = 12;
  // description The driving-off requirement of longitudinal control from Secondary AD controller with function safety. [] [0|1] [initial_value:0]
  optional bool ad4_drv_off_req_for_lgt_ctrl_for_bkp_drv_off_req = 13;
}

message ADSC_AD_REDUNDANCY_FR03_179 {
// Control Message
  enum AD4AsyADL3FuncCtrlStsForBkpADModType {
    AD4ASYADL3FUNCCTRLSTSFORBKPADMOD_ADMOD_NAD_MOD = 0;
    AD4ASYADL3FUNCCTRLSTSFORBKPADMOD_ADMOD_TJP_HWC = 1;
    AD4ASYADL3FUNCCTRLSTSFORBKPADMOD_ADMOD_NOP = 2;
    AD4ASYADL3FUNCCTRLSTSFORBKPADMOD_ADMOD_E2E = 3;
  }
  enum AD4AsyADL3FuncCtrlStsForBkpQfType {
    AD4ASYADL3FUNCCTRLSTSFORBKPQF_GENQF1_UNDEFINDDATAACCUR = 0;
    AD4ASYADL3FUNCCTRLSTSFORBKPQF_GENQF1_TMPUNDEFDDATA = 1;
    AD4ASYADL3FUNCCTRLSTSFORBKPQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    AD4ASYADL3FUNCCTRLSTSFORBKPQF_GENQF1_ACCURDATA = 3;
  }
  enum AD4AsyADL3FuncCtrlStsForBkpStsType {
    AD4ASYADL3FUNCCTRLSTSFORBKPSTS_COLORSTS_RED = 0;
    AD4ASYADL3FUNCCTRLSTSFORBKPSTS_COLORSTS_YELLOW = 1;
    AD4ASYADL3FUNCCTRLSTSFORBKPSTS_COLORSTS_GREEN = 2;
    AD4ASYADL3FUNCCTRLSTSFORBKPSTS_COLORSTS_RESERVED = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool ad4_asy_adl3_func_ctrl_sts_for_bkp_ub = 1;
  // description ADMod [] [0|3] [initial_value:0]
  optional AD4AsyADL3FuncCtrlStsForBkpADModType ad4_asy_adl3_func_ctrl_sts_for_bkp_ad_mod = 2;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_asy_adl3_func_ctrl_sts_for_bkp_chks = 3;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_asy_adl3_func_ctrl_sts_for_bkp_cntr = 4;
  // description CtrlSts [] [0|1] [initial_value:0]
  optional bool ad4_asy_adl3_func_ctrl_sts_for_bkp_ctrl_sts = 5;
  // description Degraded [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_asy_adl3_func_ctrl_sts_for_bkp_degraded = 6;
  // description Qf [] [0|3] [initial_value:0]
  optional AD4AsyADL3FuncCtrlStsForBkpQfType ad4_asy_adl3_func_ctrl_sts_for_bkp_qf = 7;
  // description Status [] [0|3] [initial_value:0]
  optional AD4AsyADL3FuncCtrlStsForBkpStsType ad4_asy_adl3_func_ctrl_sts_for_bkp_sts = 8;
  // [] [0|1] [initial_value:None]
  optional bool ad4_asy_a_lgt_req_rng_for_safe_for_bkp_ub = 9;
  // description Check sum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_asy_a_lgt_req_rng_for_safe_for_bkp_chks = 10;
  // description Couter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_asy_a_lgt_req_rng_for_safe_for_bkp_cntr = 11;
  // description Lgt cmd for safe Max [m/s^2] [-15.0|15.0] [initial_value:1500]
  optional double ad4_asy_a_lgt_req_rng_for_safe_for_bkp_max = 12;
  // [m/s^2] [-15.0|15.0] [initial_value:1500]
  optional double ad4_asy_a_lgt_req_rng_for_safe_for_bkp_min = 13;
}

message RBCM_AD_REDUNDANCY_FR10_219 {
// Control Message
  // description signal block counter. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_blk_id_byte_posn1 = 1;
  // description  (BlockID-1)*7 + 1.  [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ccp_byte_posn2 = 2;
  // description  (BlockID-1)*7 + 2.  [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ccp_byte_posn3 = 3;
  // description  (BlockID-1)*7 + 3.  [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ccp_byte_posn4 = 4;
  // description  (BlockID-1)*7 + 4.  [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ccp_byte_posn5 = 5;
  // description  (BlockID-1)*7 + 5.  [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ccp_byte_posn6 = 6;
  // description  (BlockID-1)*7 + 6.  [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ccp_byte_posn7 = 7;
  // description  (BlockID-1)*7 + 7.  [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ccp_byte_posn8 = 8;
}

message RBCM_AD_REDUNDANCY_FR11_220 {
// Control Message
  // description CarConfigExtended BlockID [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext_blk_id_byte_posn1 = 1;
  // description CarConfigExtended BytePos2 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext_ccp_byte_posn2 = 2;
  // description CarConfigExtended BytePos3 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext_ccp_byte_posn3 = 3;
  // description CarConfigExtended BytePos4 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext_ccp_byte_posn4 = 4;
  // description CarConfigExtended BytePos5 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext_ccp_byte_posn5 = 5;
  // description CarConfigExtended BytePos6 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext_ccp_byte_posn6 = 6;
  // description CarConfigExtended BytePos7 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext_ccp_byte_posn7 = 7;
  // description CarConfigExtended BytePos8 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext_ccp_byte_posn8 = 8;
}

message RBCM_AD_REDUNDANCY_FR07_23A {
// Control Message
  enum VehBattUSysUQfType {
    VEHBATTUSYSUQF_GENQF1_UNDEFINDDATAACCUR = 0;
    VEHBATTUSYSUQF_GENQF1_TMPUNDEFDDATA = 1;
    VEHBATTUSYSUQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    VEHBATTUSYSUQF_GENQF1_ACCURDATA = 3;
  }
  enum VehSpdLgtQfType {
    VEHSPDLGTQF_GENQF1_UNDEFINDDATAACCUR = 0;
    VEHSPDLGTQF_GENQF1_TMPUNDEFDDATA = 1;
    VEHSPDLGTQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    VEHSPDLGTQF_GENQF1_ACCURDATA = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool veh_batt_u_ub = 1;
  // description Vehicle System Voltage At 12V side [Volt] [0.0|25.0] [initial_value:0]
  optional double veh_batt_u_sys_u = 2;
  // description Present vehicle voltage measured by CEM with QF [] [0|3] [initial_value:1]
  optional VehBattUSysUQfType veh_batt_u_sys_u_qf = 3;
  // [] [0|1] [initial_value:None]
  optional bool veh_spd_lgt_ub = 4;
  // description Vehicle speed longitudinal based on wheel speed sensors and longitudinal acceleration. [m/s] [0.0|125.0027] [initial_value:0]
  optional double veh_spd_lgt_a = 5;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_spd_lgt_chks = 6;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 veh_spd_lgt_cntr = 7;
  // description Quality factor for vehicle speed as measured by wheel speed sensors and longitudinal acceleration. [] [0|3] [initial_value:1]
  optional VehSpdLgtQfType veh_spd_lgt_qf = 8;
}

message ADCU_AD_REDUNDANCY_FR03_23B {
// Control Message
  // description CarConfigExtended2 BlockID [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext2_blk_id_byte_posn1 = 1;
  // description CarConfigExtended2 BytePos2 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext2_ccp_byte_posn2 = 2;
  // description CarConfigExtended2 BytePos3 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext2_ccp_byte_posn3 = 3;
  // description CarConfigExtended2 BytePos4 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext2_ccp_byte_posn4 = 4;
  // description CarConfigExtended2 BytePos5 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext2_ccp_byte_posn5 = 5;
  // description CarConfigExtended2 BytePos6 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext2_ccp_byte_posn6 = 6;
  // description CarConfigExtended2 BytePos7 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext2_ccp_byte_posn7 = 7;
  // description CarConfigExtended2 BytePos8 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext2_ccp_byte_posn8 = 8;
}

message RBCM_AD_REDUNDANCY_FR06_241 {
// Control Message
  // description total traveled distance. [km] [0.0|2000000.0] [initial_value:0]
  optional double bkp_of_dst_trvld = 1;
  // [] [0|1] [initial_value:None]
  optional bool bkp_of_dst_trvld_ub = 2;
  // description Presents a tiime value that shall be used by all ECUs to time-stamp diagnsotic trouble codes (DTC) according to the requirements for Global DTC snapshot data. [s] [0.0|429496729.5] [initial_value:0]
  optional double car_ti_glb = 3;
  // [] [0|1] [initial_value:None]
  optional bool car_ti_glb_ub = 4;
}

message PSCM_AD_REDUNDANCY_FR02_30 {
// Report Message
  enum ADL3LatCtrlStsForBkpADModType {
    ADL3LATCTRLSTSFORBKPADMOD_ADMOD_NAD_MOD = 0;
    ADL3LATCTRLSTSFORBKPADMOD_ADMOD_TJP_HWC = 1;
    ADL3LATCTRLSTSFORBKPADMOD_ADMOD_NOP = 2;
    ADL3LATCTRLSTSFORBKPADMOD_ADMOD_E2E = 3;
  }
  enum ADL3LatCtrlStsForBkpDegradedType {
    ADL3LATCTRLSTSFORBKPDEGRADED_LATDEGRAD_NODEGRADATION_GREEN = 0;
    ADL3LATCTRLSTSFORBKPDEGRADED_LATDEGRAD_RED_FAULT1 = 1;
    ADL3LATCTRLSTSFORBKPDEGRADED_LATDEGRAD_YELLOW_FAULT2 = 2;
    ADL3LATCTRLSTSFORBKPDEGRADED_LATDEGRAD_YELLOW_FAULT3 = 3;
    ADL3LATCTRLSTSFORBKPDEGRADED_LATDEGRAD_YELLOW_FAULT4 = 4;
    ADL3LATCTRLSTSFORBKPDEGRADED_LATDEGRAD_YELLOW_FAULT5 = 5;
    ADL3LATCTRLSTSFORBKPDEGRADED_LATDEGRAD_YELLOW_FAULT6 = 6;
    ADL3LATCTRLSTSFORBKPDEGRADED_LATDEGRAD_YELLOW_FAULT7 = 7;
    ADL3LATCTRLSTSFORBKPDEGRADED_LATDEGRAD_YELLOW_FAULT8 = 8;
    ADL3LATCTRLSTSFORBKPDEGRADED_LATDEGRAD_YELLOW_FAULT9 = 9;
    ADL3LATCTRLSTSFORBKPDEGRADED_LATDEGRAD_YELLOW_FAULT10 = 10;
    ADL3LATCTRLSTSFORBKPDEGRADED_LATDEGRAD_RESERVED1 = 11;
  }
  enum ADL3LatCtrlStsForBkpQfType {
    ADL3LATCTRLSTSFORBKPQF_GENQF1_UNDEFINDDATAACCUR = 0;
    ADL3LATCTRLSTSFORBKPQF_GENQF1_TMPUNDEFDDATA = 1;
    ADL3LATCTRLSTSFORBKPQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    ADL3LATCTRLSTSFORBKPQF_GENQF1_ACCURDATA = 3;
  }
  enum ADL3LatCtrlStsForBkpStsType {
    ADL3LATCTRLSTSFORBKPSTS_COLORSTS_RED = 0;
    ADL3LATCTRLSTSFORBKPSTS_COLORSTS_YELLOW = 1;
    ADL3LATCTRLSTSFORBKPSTS_COLORSTS_GREEN = 2;
    ADL3LATCTRLSTSFORBKPSTS_COLORSTS_RESERVED = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool adl3_lat_ctrl_sts_for_bkp_ub = 1;
  // description Steering system AD mode status [] [0|3] [initial_value:0]
  optional ADL3LatCtrlStsForBkpADModType adl3_lat_ctrl_sts_for_bkp_ad_mod = 2;
  // description checksum of the signal group [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 adl3_lat_ctrl_sts_for_bkp_chks = 3;
  // description Counter of the signal group [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 adl3_lat_ctrl_sts_for_bkp_cntr = 4;
  // description Inform to AD systems which Channel (Primary/Secondary) signals is being used [] [0|1] [initial_value:0]
  optional bool adl3_lat_ctrl_sts_for_bkp_ctrl_sts = 5;
  // description degraded signal [] [0|15] [initial_value:0]
  optional ADL3LatCtrlStsForBkpDegradedType adl3_lat_ctrl_sts_for_bkp_degraded = 6;
  // description quality factor [] [0|3] [initial_value:0]
  optional ADL3LatCtrlStsForBkpQfType adl3_lat_ctrl_sts_for_bkp_qf = 7;
  // description - Green (2)- Full TJP function, neither input signal nor ECU internal error - Yellow (1)- TJP function but with minor error-  Red (0) - One or more Channel (Primary /Secondary) cant implement TJP for internal ECU or input signal error [] [0|3] [initial_value:0]
  optional ADL3LatCtrlStsForBkpStsType adl3_lat_ctrl_sts_for_bkp_sts = 8;
}

message BBM_AD_REDUNDANCY_FR02_40 {
// Report Message
  enum SecBrkSysSt2BrkSysStType {
    SECBRKSYSST2BRKSYSST_NOTAVAILABLE_TEMPORARY = 0;
    SECBRKSYSST2BRKSYSST_NOTAVAILABLE_NOTRELEASED = 1;
    SECBRKSYSST2BRKSYSST_NOTAVAILABLE_PERMANENT = 2;
    SECBRKSYSST2BRKSYSST_NOTACTIVATED_FULLAVAILABLE = 3;
    SECBRKSYSST2BRKSYSST_ACTIVATION_PREPARATION = 4;
    SECBRKSYSST2BRKSYSST_ACTIVATION_PENDING = 5;
    SECBRKSYSST2BRKSYSST_ACTIVATION_PENDINGREDUNDANCYLOST = 6;
    SECBRKSYSST2BRKSYSST_ACTIVATION_PENDINGFAILOPERATION = 7;
    SECBRKSYSST2BRKSYSST_ACTIVATED_FULLAVAILABLE = 8;
    SECBRKSYSST2BRKSYSST_ACTIVATED_FAILOPERATION = 9;
    SECBRKSYSST2BRKSYSST_ACTIVATED_REDUNDANCYLOST = 10;
    SECBRKSYSST2BRKSYSST_DEACTIVATION_PENDING = 11;
  }
  enum VehSpdLgtForBkpVehSpdLgtQfType {
    VEHSPDLGTFORBKPVEHSPDLGTQF_GENQF1_UNDEFINDDATAACCUR = 0;
    VEHSPDLGTFORBKPVEHSPDLGTQF_GENQF1_TMPUNDEFDDATA = 1;
    VEHSPDLGTFORBKPVEHSPDLGTQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    VEHSPDLGTFORBKPVEHSPDLGTQF_GENQF1_ACCURDATA = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool sec_brk_sys_st2_ub = 1;
  // description brake system status [] [0|15] [initial_value:0]
  optional SecBrkSysSt2BrkSysStType sec_brk_sys_st2_brk_sys_st = 2;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 sec_brk_sys_st2_chks = 3;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 sec_brk_sys_st2_cntr = 4;
  // [] [0|1] [initial_value:None]
  optional bool veh_spd_lgt_for_bkp_ub = 5;
  // description vehicle speed for backup [m/s] [0.0|125.0027] [initial_value:0]
  optional double veh_spd_lgt_for_bkp_veh_spd_lgt_a = 6;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_spd_lgt_for_bkp_veh_spd_lgt_chks = 7;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 veh_spd_lgt_for_bkp_veh_spd_lgt_cntr = 8;
  // description vehicle speed quality factor for backup [] [0|3] [initial_value:0]
  optional VehSpdLgtForBkpVehSpdLgtQfType veh_spd_lgt_for_bkp_veh_spd_lgt_qf = 9;
}

message BBM_AD_REDUNDANCY_FR01_45 {
// Report Message
  enum ADL3LgtCtrlStsForBkpADModeType {
    ADL3LGTCTRLSTSFORBKPADMODE_ADMOD_NAD_MOD = 0;
    ADL3LGTCTRLSTSFORBKPADMODE_ADMOD_TJP_HWC = 1;
    ADL3LGTCTRLSTSFORBKPADMODE_ADMOD_NOP = 2;
    ADL3LGTCTRLSTSFORBKPADMODE_ADMOD_E2E = 3;
  }
  enum ADL3LgtCtrlStsForBkpDegradedType {
    ADL3LGTCTRLSTSFORBKPDEGRADED_LGTDEGRAD1_NODEGRADATION_GREEN = 0;
    ADL3LGTCTRLSTSFORBKPDEGRADED_LGTDEGRAD1_LGTFAILR_RED = 1;
    ADL3LGTCTRLSTSFORBKPDEGRADED_LGTDEGRAD1_ABSESCTEMPORARILYOFF_YELLOW = 2;
    ADL3LGTCTRLSTSFORBKPDEGRADED_LGTDEGRAD1_ESCSERVICEREQUIRED_YELLOW = 3;
    ADL3LGTCTRLSTSFORBKPDEGRADED_LGTDEGRAD1_ESCTEMPORARILYOFF_YELLOW = 4;
    ADL3LGTCTRLSTSFORBKPDEGRADED_LGTDEGRAD1_STCTEMPORARILYOFF_YELLOW = 5;
    ADL3LGTCTRLSTSFORBKPDEGRADED_LGTDEGRAD1_EPBFAILR_YELLOW = 6;
    ADL3LGTCTRLSTSFORBKPDEGRADED_LGTDEGRAD1_VDSWNOK_YELLOW = 7;
    ADL3LGTCTRLSTSFORBKPDEGRADED_LGTDEGRAD1_PROPADMODCTRLINHBN_YELLOW = 8;
    ADL3LGTCTRLSTSFORBKPDEGRADED_LGTDEGRAD1_PROPTRQLIMITATION_YELLOW = 9;
    ADL3LGTCTRLSTSFORBKPDEGRADED_LGTDEGRAD1_PROPTOTALLYFAULT_YELLOW = 10;
    ADL3LGTCTRLSTSFORBKPDEGRADED_LGTDEGRAD1_GENERALBRAKEFAILURE_YELLOW = 11;
    ADL3LGTCTRLSTSFORBKPDEGRADED_LGTDEGRAD1_RESERVED4 = 12;
    ADL3LGTCTRLSTSFORBKPDEGRADED_LGTDEGRAD1_RESERVED5 = 13;
    ADL3LGTCTRLSTSFORBKPDEGRADED_LGTDEGRAD1_RESERVED6 = 14;
    ADL3LGTCTRLSTSFORBKPDEGRADED_LGTDEGRAD1_RESERVED7 = 15;
  }
  enum ADL3LgtCtrlStsForBkpQfType {
    ADL3LGTCTRLSTSFORBKPQF_GENQF1_UNDEFINDDATAACCUR = 0;
    ADL3LGTCTRLSTSFORBKPQF_GENQF1_TMPUNDEFDDATA = 1;
    ADL3LGTCTRLSTSFORBKPQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    ADL3LGTCTRLSTSFORBKPQF_GENQF1_ACCURDATA = 3;
  }
  enum ADL3LgtCtrlStsForBkpStsType {
    ADL3LGTCTRLSTSFORBKPSTS_COLORSTS_RED = 0;
    ADL3LGTCTRLSTSFORBKPSTS_COLORSTS_YELLOW = 1;
    ADL3LGTCTRLSTSFORBKPSTS_COLORSTS_GREEN = 2;
    ADL3LGTCTRLSTSFORBKPSTS_COLORSTS_RESERVED = 3;
  }
  enum WhlDirRotlFrntForBkpLeType {
    WHLDIRROTLFRNTFORBKPLE_WHLROTLDIRSTD1_UNDEFD = 0;
    WHLDIRROTLFRNTFORBKPLE_WHLROTLDIRSTD1_STANDSTILL = 1;
    WHLDIRROTLFRNTFORBKPLE_WHLROTLDIRSTD1_FWD = 2;
    WHLDIRROTLFRNTFORBKPLE_WHLROTLDIRSTD1_BACKW = 3;
  }
  enum WhlDirRotlFrntForBkpRiType {
    WHLDIRROTLFRNTFORBKPRI_WHLROTLDIRSTD1_UNDEFD = 0;
    WHLDIRROTLFRNTFORBKPRI_WHLROTLDIRSTD1_STANDSTILL = 1;
    WHLDIRROTLFRNTFORBKPRI_WHLROTLDIRSTD1_FWD = 2;
    WHLDIRROTLFRNTFORBKPRI_WHLROTLDIRSTD1_BACKW = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool adl3_lgt_ctrl_sts_for_bkp_ub = 1;
  // description AD Mode [] [0|3] [initial_value:0]
  optional ADL3LgtCtrlStsForBkpADModeType adl3_lgt_ctrl_sts_for_bkp_ad_mode = 2;
  // description Active Controller [] [0|1] [initial_value:0]
  optional bool adl3_lgt_ctrl_sts_for_bkp_ctrl_status = 3;
  // description Degradation [] [0|15] [initial_value:0]
  optional ADL3LgtCtrlStsForBkpDegradedType adl3_lgt_ctrl_sts_for_bkp_degraded = 4;
  // description Quality Factor [] [0|3] [initial_value:0]
  optional ADL3LgtCtrlStsForBkpQfType adl3_lgt_ctrl_sts_for_bkp_qf = 5;
  // description Status [] [0|3] [initial_value:0]
  optional ADL3LgtCtrlStsForBkpStsType adl3_lgt_ctrl_sts_for_bkp_sts = 6;
  // [] [0|1] [initial_value:None]
  optional bool whl_dir_rotl_frnt_for_bkp_ub = 7;
  // description check sum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 whl_dir_rotl_frnt_for_bkp_chks = 8;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 whl_dir_rotl_frnt_for_bkp_cntr = 9;
  // description Rotational direction for the front individual wheels. Wheel rotation direction of front left wheel. [] [0|3] [initial_value:0]
  optional WhlDirRotlFrntForBkpLeType whl_dir_rotl_frnt_for_bkp_le = 10;
  // description Rotational direction for the front individual wheels. Wheel rotation direction of front right wheel. [] [0|3] [initial_value:0]
  optional WhlDirRotlFrntForBkpRiType whl_dir_rotl_frnt_for_bkp_ri = 11;
}

message BBM_AD_REDUNDANCY_FR03_48 {
// Report Message
  enum WhlSpdCircumlReForBkpWhlSpdCircumlReLeQfType {
    WHLSPDCIRCUMLREFORBKPWHLSPDCIRCUMLRELEQF_GENQF1_UNDEFINDDATAACCUR = 0;
    WHLSPDCIRCUMLREFORBKPWHLSPDCIRCUMLRELEQF_GENQF1_TMPUNDEFDDATA = 1;
    WHLSPDCIRCUMLREFORBKPWHLSPDCIRCUMLRELEQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    WHLSPDCIRCUMLREFORBKPWHLSPDCIRCUMLRELEQF_GENQF1_ACCURDATA = 3;
  }
  enum WhlSpdCircumlReForBkpWhlSpdCircumlReRiQfType {
    WHLSPDCIRCUMLREFORBKPWHLSPDCIRCUMLRERIQF_GENQF1_UNDEFINDDATAACCUR = 0;
    WHLSPDCIRCUMLREFORBKPWHLSPDCIRCUMLRERIQF_GENQF1_TMPUNDEFDDATA = 1;
    WHLSPDCIRCUMLREFORBKPWHLSPDCIRCUMLRERIQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    WHLSPDCIRCUMLREFORBKPWHLSPDCIRCUMLRERIQF_GENQF1_ACCURDATA = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool whl_spd_circuml_re_for_bkp_ub = 1;
  // description Individual wheel speed from rear wheel speed sensors. Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 whl_spd_circuml_re_for_bkp_whl_spd_circuml_re_chks = 2;
  // description Individual wheel speed from rear wheel speed sensors. Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 whl_spd_circuml_re_for_bkp_whl_spd_circuml_re_cntr = 3;
  // description Individual wheel speed from rear wheel speed sensors. Wheel speed from rear left wheel speed sensor using nominal value of wheel radius. [m/s] [0.0|125.0027] [initial_value:0]
  optional double whl_spd_circuml_re_for_bkp_whl_spd_circuml_re_le = 4;
  // description Individual wheel speed from rear wheel speed sensors. Qf for wheel speed sensor [] [0|3] [initial_value:0]
  optional WhlSpdCircumlReForBkpWhlSpdCircumlReLeQfType whl_spd_circuml_re_for_bkp_whl_spd_circuml_re_le_qf = 5;
  // description Individual wheel speed from rear wheel speed sensors. Wheel speed from rear right wheel speed sensor using nominal value of wheel radius. [m/s] [0.0|125.0027] [initial_value:0]
  optional double whl_spd_circuml_re_for_bkp_whl_spd_circuml_re_ri = 6;
  // description Individual wheel speed from rear wheel speed sensors. Qf for wheel speed sensor [] [0|3] [initial_value:0]
  optional WhlSpdCircumlReForBkpWhlSpdCircumlReRiQfType whl_spd_circuml_re_for_bkp_whl_spd_circuml_re_ri_qf = 7;
}

message ADCU_AD_REDUNDANCY_CAN_NM_FR01_506 {
// Control Message
  // [] [0|0] [initial_value:None]
  optional bool pnc23_asdm = 1;
  // [] [0|0] [initial_value:None]
  optional bool pnc25_asdm = 2;
  // [] [0|0] [initial_value:None]
  optional bool pnc29_asdm = 3;
  // [] [0|0] [initial_value:None]
  optional bool pnc36_asdm = 4;
  // [] [0|0] [initial_value:None]
  optional bool pnc38_asdm = 5;
  // [] [0|0] [initial_value:None]
  optional bool nm_pni_asdm = 6;
  // [] [0|0] [initial_value:None]
  optional bool nm_aw_asdm = 7;
  // [] [0|0] [initial_value:None]
  optional bool nm_cs_asdm = 8;
  // [] [0|0] [initial_value:None]
  optional bool nm_rmr_asdm = 9;
  // [] [0|0] [initial_value:None]
  optional uint32 nm_node_id_asdm = 10;
}

message BBM_AD_REDUNDANCY_FR04_52 {
// Report Message
  enum WhlSpdCircumlFrntForBkpWhlSpdCircumlFrntLeQfType {
    WHLSPDCIRCUMLFRNTFORBKPWHLSPDCIRCUMLFRNTLEQF_GENQF1_UNDEFINDDATAACCUR = 0;
    WHLSPDCIRCUMLFRNTFORBKPWHLSPDCIRCUMLFRNTLEQF_GENQF1_TMPUNDEFDDATA = 1;
    WHLSPDCIRCUMLFRNTFORBKPWHLSPDCIRCUMLFRNTLEQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    WHLSPDCIRCUMLFRNTFORBKPWHLSPDCIRCUMLFRNTLEQF_GENQF1_ACCURDATA = 3;
  }
  enum WhlSpdCircumlFrntForBkpWhlSpdCircumlFrntRiQfType {
    WHLSPDCIRCUMLFRNTFORBKPWHLSPDCIRCUMLFRNTRIQF_GENQF1_UNDEFINDDATAACCUR = 0;
    WHLSPDCIRCUMLFRNTFORBKPWHLSPDCIRCUMLFRNTRIQF_GENQF1_TMPUNDEFDDATA = 1;
    WHLSPDCIRCUMLFRNTFORBKPWHLSPDCIRCUMLFRNTRIQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    WHLSPDCIRCUMLFRNTFORBKPWHLSPDCIRCUMLFRNTRIQF_GENQF1_ACCURDATA = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool whl_spd_circuml_frnt_for_bkp_ub = 1;
  // description Individual wheel speed from front wheel speed sensors. Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 whl_spd_circuml_frnt_for_bkp_whl_spd_circuml_frnt_chks = 2;
  // description Individual wheel speed from front wheel speed sensors. Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 whl_spd_circuml_frnt_for_bkp_whl_spd_circuml_frnt_cntr = 3;
  // description Individual wheel speed from front wheel speed sensors. Wheel speed from front left wheel speed sensor using nominal value of wheel radius. [m/s] [0.0|125.0027] [initial_value:0]
  optional double whl_spd_circuml_frnt_for_bkp_whl_spd_circuml_frnt_le = 4;
  // description Individual wheel speed from front wheel speed sensors. Qf for wheel speed sensor [] [0|3] [initial_value:0]
  optional WhlSpdCircumlFrntForBkpWhlSpdCircumlFrntLeQfType whl_spd_circuml_frnt_for_bkp_whl_spd_circuml_frnt_le_qf = 5;
  // description Individual wheel speed from front wheel speed sensors. Qf for wheel speed sensor [] [0|3] [initial_value:0]
  optional WhlSpdCircumlFrntForBkpWhlSpdCircumlFrntRiQfType whl_spd_circuml_frnt_for_bkp_whl_spd_circuml_frnt_ri_qf = 6;
  // [m/s] [0.0|125.0027] [initial_value:0]
  optional double whl_spd_circuml_frnt_for_bkp_whl_spd_circuml_frnt_whl_spd_circuml_frnt_ri = 7;
}

message ADCU_AD_REDUNDANCY_CANVFC_VECT_FR_546 {
// Control Message
  // description BlockID [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 vfc_vector_adcu_block_id = 1;
  // description SettingsComfort [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid0 = 2;
  // description ParkingDrivingClimatization [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid1 = 3;
  // description ExteriorLighting [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid10 = 4;
  // description VFCid11 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid11 = 5;
  // description Alarm [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid12 = 6;
  // description VFCid13 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid13 = 7;
  // description InteriorLighting [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid14 = 8;
  // description VFCid15 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid15 = 9;
  // description Locking [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid16 = 10;
  // description RemoteKeyFunctionality [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid17 = 11;
  // description PropulsionStart [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid18 = 12;
  // description VFCid19 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid19 = 13;
  // description PostClimatisation [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid2 = 14;
  // description VFCid20 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid20 = 15;
  // description PowerClosures [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid21 = 16;
  // description VehicleDriving [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid22 = 17;
  // description VFCid23 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid23 = 18;
  // description SettingsProfile [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid24 = 19;
  // description SeatComfortFunctions [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid25 = 20;
  // description Brake [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid26 = 21;
  // description InfotainmentPoll [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid27 = 22;
  // description HVEnergyStorage [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid28 = 23;
  // description VFCid29 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid29 = 24;
  // description PowertrainParkingClimatization [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid3 = 25;
  // description TelematicsConnectivity [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid30 = 26;
  // description VFCid31 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid31 = 27;
  // description VFCid32 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid32 = 28;
  // description Diagnostics [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid33 = 29;
  // description VehicleModeManagement [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid34 = 30;
  // description TrailerCaravanFunctions [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid35 = 31;
  // description Immobilizer [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid36 = 32;
  // description Windows [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid37 = 33;
  // description Visibility [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid38 = 34;
  // description VFCid39 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid39 = 35;
  // description VFCid4 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid4 = 36;
  // description VFCid40 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid40 = 37;
  // description InfotainmentPush [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid41 = 38;
  // description ChargingHV [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid42 = 39;
  // description BodyPreClimatisation [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid43 = 40;
  // description Crash [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid44 = 41;
  // description GlobalShortDuration [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid45 = 42;
  // description ExteriorLightsHazard [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid46 = 43;
  // description VFCid47 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid47 = 44;
  // description DoorOpenWarning [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid48 = 45;
  // description ChargingLVInit [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid49 = 46;
  // description VFCid5 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid5 = 47;
  // description VFCid50 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid50 = 48;
  // description VFCid51 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid51 = 49;
  // description HVBatteryThermalEventWarning [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid52 = 50;
  // description VisualAssist [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid53 = 51;
  // description PassiveSafety [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid54 = 52;
  // description LifeDetection [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid55 = 53;
  // description BackboneFlexray [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid56 = 54;
  // description Functionmarket [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid57 = 55;
  // description VFCid58 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid58 = 56;
  // description VFCid59 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid59 = 57;
  // description SettingsVehicle [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid6 = 58;
  // description VFCid60 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid60 = 59;
  // description VFCid61 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid61 = 60;
  // description VFCid7 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid7 = 61;
  // description VFCid8 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid8 = 62;
  // description IPWakeup [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid9 = 63;
}

message BBM_AD_REDUNDANCY_FR14_56 {
// Report Message
  enum WhlVAgrFrntForBkpWhlVAgrFrntLeQfType {
    WHLVAGRFRNTFORBKPWHLVAGRFRNTLEQF_GENQF1_UNDEFINDDATAACCUR = 0;
    WHLVAGRFRNTFORBKPWHLVAGRFRNTLEQF_GENQF1_TMPUNDEFDDATA = 1;
    WHLVAGRFRNTFORBKPWHLVAGRFRNTLEQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    WHLVAGRFRNTFORBKPWHLVAGRFRNTLEQF_GENQF1_ACCURDATA = 3;
  }
  enum WhlVAgrFrntForBkpWhlVAgrFrntRiQfType {
    WHLVAGRFRNTFORBKPWHLVAGRFRNTRIQF_GENQF1_UNDEFINDDATAACCUR = 0;
    WHLVAGRFRNTFORBKPWHLVAGRFRNTRIQF_GENQF1_TMPUNDEFDDATA = 1;
    WHLVAGRFRNTFORBKPWHLVAGRFRNTRIQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    WHLVAGRFRNTFORBKPWHLVAGRFRNTRIQF_GENQF1_ACCURDATA = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool whl_v_agr_frnt_for_bkp_ub = 1;
  // description Unfiltered angular velocity of individual front left wheel for backup. [rad/s] [-255.0|255.0] [initial_value:0]
  optional double whl_v_agr_frnt_for_bkp_whl_v_agr_frnt_le = 2;
  // description qf [] [0|3] [initial_value:0]
  optional WhlVAgrFrntForBkpWhlVAgrFrntLeQfType whl_v_agr_frnt_for_bkp_whl_v_agr_frnt_le_qf = 3;
  // description Unfiltered angular velocity of individual front right wheel fo backup. [rad/s] [-255.0|255.0] [initial_value:0]
  optional double whl_v_agr_frnt_for_bkp_whl_v_agr_frnt_ri = 4;
  // description qf [] [0|3] [initial_value:0]
  optional WhlVAgrFrntForBkpWhlVAgrFrntRiQfType whl_v_agr_frnt_for_bkp_whl_v_agr_frnt_ri_qf = 5;
}

message BBM_AD_REDUNDANCY_FR13_57 {
// Report Message
  enum VehMtnStForBkpVehMtnStType {
    VEHMTNSTFORBKPVEHMTNST_VEHMTNST2_UKWN = 0;
    VEHMTNSTFORBKPVEHMTNST_VEHMTNST2_STANDSTILLVAL1 = 1;
    VEHMTNSTFORBKPVEHMTNST_VEHMTNST2_STANDSTILLVAL2 = 2;
    VEHMTNSTFORBKPVEHMTNST_VEHMTNST2_STANDSTILLVAL3 = 3;
    VEHMTNSTFORBKPVEHMTNST_VEHMTNST2_ROLLGFWDVAL1 = 4;
    VEHMTNSTFORBKPVEHMTNST_VEHMTNST2_ROLLGFWDVAL2 = 5;
    VEHMTNSTFORBKPVEHMTNST_VEHMTNST2_ROLLGBACKWVAL1 = 6;
    VEHMTNSTFORBKPVEHMTNST_VEHMTNST2_ROLLGBACKWVAL2 = 7;
  }
  // [] [0|1] [initial_value:None]
  optional bool veh_mtn_st_for_bkp_ub = 1;
  // description Vehicle motion state information based on wheel speed sensors. Provides information about vehicle stand still and vehicle rolling direction. Vehicle motion state for backup [] [0|7] [initial_value:0]
  optional VehMtnStForBkpVehMtnStType veh_mtn_st_for_bkp_veh_mtn_st = 2;
  // description Vehicle motion state information based on wheel speed sensors. Provides information about vehicle stand still and vehicle rolling direction. Checksum for vehicle motion state [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_mtn_st_for_bkp_veh_mtn_st_chks = 3;
  // description Vehicle motion state information based on wheel speed sensors. Provides information about vehicle stand still and vehicle rolling direction. Counter for vehicle motion state [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 veh_mtn_st_for_bkp_veh_mtn_st_cntr = 4;
}

message BBM_AD_REDUNDANCY_FR16_59 {
// Report Message
  enum WhlVAgrReForBkpWhlVAgrReLeQfType {
    WHLVAGRREFORBKPWHLVAGRRELEQF_GENQF1_UNDEFINDDATAACCUR = 0;
    WHLVAGRREFORBKPWHLVAGRRELEQF_GENQF1_TMPUNDEFDDATA = 1;
    WHLVAGRREFORBKPWHLVAGRRELEQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    WHLVAGRREFORBKPWHLVAGRRELEQF_GENQF1_ACCURDATA = 3;
  }
  enum WhlVAgrReForBkpWhlVAgrReRiQfType {
    WHLVAGRREFORBKPWHLVAGRRERIQF_GENQF1_UNDEFINDDATAACCUR = 0;
    WHLVAGRREFORBKPWHLVAGRRERIQF_GENQF1_TMPUNDEFDDATA = 1;
    WHLVAGRREFORBKPWHLVAGRRERIQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    WHLVAGRREFORBKPWHLVAGRRERIQF_GENQF1_ACCURDATA = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool whl_v_agr_re_for_bkp_ub = 1;
  // description Unfiltered angular velocity of individual rear left wheel for backup. [rad/s] [-255.0|255.0] [initial_value:0]
  optional double whl_v_agr_re_for_bkp_whl_v_agr_re_le = 2;
  // description qf [] [0|3] [initial_value:0]
  optional WhlVAgrReForBkpWhlVAgrReLeQfType whl_v_agr_re_for_bkp_whl_v_agr_re_le_qf = 3;
  // description Unfiltered angular velocity of individual rear right wheel for backup. [rad/s] [-255.0|255.0] [initial_value:0]
  optional double whl_v_agr_re_for_bkp_whl_v_agr_re_ri = 4;
  // description qf [] [0|3] [initial_value:0]
  optional WhlVAgrReForBkpWhlVAgrReRiQfType whl_v_agr_re_for_bkp_whl_v_agr_re_ri_qf = 5;
}

message BBM_AD_REDUNDANCY_FR18_71 {
// Report Message
  enum WhlDirRotlReForBkpLeType {
    WHLDIRROTLREFORBKPLE_WHLROTLDIRSTD1_UNDEFD = 0;
    WHLDIRROTLREFORBKPLE_WHLROTLDIRSTD1_STANDSTILL = 1;
    WHLDIRROTLREFORBKPLE_WHLROTLDIRSTD1_FWD = 2;
    WHLDIRROTLREFORBKPLE_WHLROTLDIRSTD1_BACKW = 3;
  }
  enum WhlDirRotlReForBkpRiType {
    WHLDIRROTLREFORBKPRI_WHLROTLDIRSTD1_UNDEFD = 0;
    WHLDIRROTLREFORBKPRI_WHLROTLDIRSTD1_STANDSTILL = 1;
    WHLDIRROTLREFORBKPRI_WHLROTLDIRSTD1_FWD = 2;
    WHLDIRROTLREFORBKPRI_WHLROTLDIRSTD1_BACKW = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool whl_dir_rotl_re_for_bkp_ub = 1;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 whl_dir_rotl_re_for_bkp_chks = 2;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 whl_dir_rotl_re_for_bkp_cntr = 3;
  // description Rotational direction for the rear individual wheels. Wheel rotation direction of rear left wheel. [] [0|3] [initial_value:0]
  optional WhlDirRotlReForBkpLeType whl_dir_rotl_re_for_bkp_le = 4;
  // description Rotational direction for the rear individual wheels. Wheel rotation direction of rear right wheel. [] [0|3] [initial_value:0]
  optional WhlDirRotlReForBkpRiType whl_dir_rotl_re_for_bkp_ri = 5;
  // [] [0|1] [initial_value:None]
  optional bool whl_rot_tooth_cntr_for_bkp_ub = 6;
  // description check sum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 whl_rot_tooth_cntr_for_bkp_chks = 7;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 whl_rot_tooth_cntr_for_bkp_cntr = 8;
  // description Wheel rotation ticks for each individual wheel. Wheel rotation impuls counter front left. For one complete wheel revolution the counter will increase by 96 (with 48 magnetic pole-pairs). [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 whl_rot_tooth_cntr_for_bkp_whl_rot_tooth_cntr_frnt_le = 9;
  // description Wheel rotation ticks for each individual wheel. Wheel rotation impuls counter front right. For one complete wheel revolution the counter will increase by 96 (with 48 magnetic pole-pairs). [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 whl_rot_tooth_cntr_for_bkp_whl_rot_tooth_cntr_frnt_ri = 10;
  // description Wheel rotation ticks for each individual wheel. Wheel rotation impuls counter rear left. For one complete wheel revolution the counter will increase by 96 (with 48 magnetic pole-pairs). [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 whl_rot_tooth_cntr_for_bkp_whl_rot_tooth_cntr_re_le = 11;
  // description Wheel rotation ticks for each individual wheel. Wheel rotation impuls counter rear right. For one complete wheel revolution the counter will increase by 96 (with 48 magnetic pole-pairs). [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 whl_rot_tooth_cntr_for_bkp_whl_rot_tooth_cntr_re_ri = 12;
}

message ADCU_AD_REDUNDANCY_FR01_80 {
// Control Message
  enum PrimBrkSysSt2BrkSysStType {
    PRIMBRKSYSST2BRKSYSST_NOTAVAILABLE_TEMPORARY = 0;
    PRIMBRKSYSST2BRKSYSST_NOTAVAILABLE_NOTRELEASED = 1;
    PRIMBRKSYSST2BRKSYSST_NOTAVAILABLE_PERMANENT = 2;
    PRIMBRKSYSST2BRKSYSST_NOTACTIVATED_FULLAVAILABLE = 3;
    PRIMBRKSYSST2BRKSYSST_ACTIVATION_PREPARATION = 4;
    PRIMBRKSYSST2BRKSYSST_ACTIVATION_PENDING = 5;
    PRIMBRKSYSST2BRKSYSST_ACTIVATION_PENDINGREDUNDANCYLOST = 6;
    PRIMBRKSYSST2BRKSYSST_ACTIVATION_PENDINGFAILOPERATION = 7;
    PRIMBRKSYSST2BRKSYSST_ACTIVATED_FULLAVAILABLE = 8;
    PRIMBRKSYSST2BRKSYSST_ACTIVATED_FAILOPERATION = 9;
    PRIMBRKSYSST2BRKSYSST_ACTIVATED_REDUNDANCYLOST = 10;
    PRIMBRKSYSST2BRKSYSST_DEACTIVATION_PENDING = 11;
  }
  enum RbuCtrlModReqSafe2BrkSysModCfmdType {
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_NOREQ = 0;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_E2E = 1;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_RESERVED2 = 2;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_RESERVED3 = 3;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_RESERVED4 = 4;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_RESERVED5 = 5;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_RESERVED6 = 6;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_RESERVED7 = 7;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_RESERVED8 = 8;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_ACC_HWA = 9;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_PEB = 10;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_APA = 11;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_RPA = 12;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_HPA = 13;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_TJP_HWC = 14;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_NOP = 15;
  }
  // [] [0|1] [initial_value:None]
  optional bool brk_f_act2_ub = 1;
  // description AutParkBrkSpprtReq [] [0|1] [initial_value:0]
  optional bool brk_f_act2_aut_park_brk_spprt_req = 2;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 brk_f_act2_chks = 3;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 brk_f_act2_cntr = 4;
  // description Brake force in Newtons [N] [0.0|50000.0] [initial_value:0]
  optional double brk_f_act2_force = 5;
  // [] [0|1] [initial_value:None]
  optional bool prim_brk_sys_st2_ub = 6;
  // description Brake system state. [] [0|15] [initial_value:0]
  optional PrimBrkSysSt2BrkSysStType prim_brk_sys_st2_brk_sys_st = 7;
  // description Checksum. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 prim_brk_sys_st2_chks = 8;
  // description Rolling counter. [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 prim_brk_sys_st2_cntr = 9;
  // [] [0|1] [initial_value:None]
  optional bool rbu_ctrl_mod_req_safe2_ub = 10;
  // description mode confirmation [] [0|15] [initial_value:0]
  optional RbuCtrlModReqSafe2BrkSysModCfmdType rbu_ctrl_mod_req_safe2_brk_sys_mod_cfmd = 11;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 rbu_ctrl_mod_req_safe2_chks = 12;
  // description cpimter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 rbu_ctrl_mod_req_safe2_cntr = 13;
}

message PSCM_AD_REDUNDANCY_FR01_85 {
// Report Message
  enum PinionSteerAgGroupForBkpPinionSteerAgQfForBkpType {
    PINIONSTEERAGGROUPFORBKPPINIONSTEERAGQFFORBKP_GENQF1_UNDEFINDDATAACCUR = 0;
    PINIONSTEERAGGROUPFORBKPPINIONSTEERAGQFFORBKP_GENQF1_TMPUNDEFDDATA = 1;
    PINIONSTEERAGGROUPFORBKPPINIONSTEERAGQFFORBKP_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    PINIONSTEERAGGROUPFORBKPPINIONSTEERAGQFFORBKP_GENQF1_ACCURDATA = 3;
  }
  enum PinionSteerAgGroupForBkpPinionSteerAgSpdQfForBkpType {
    PINIONSTEERAGGROUPFORBKPPINIONSTEERAGSPDQFFORBKP_GENQF1_UNDEFINDDATAACCUR = 0;
    PINIONSTEERAGGROUPFORBKPPINIONSTEERAGSPDQFFORBKP_GENQF1_TMPUNDEFDDATA = 1;
    PINIONSTEERAGGROUPFORBKPPINIONSTEERAGSPDQFFORBKP_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    PINIONSTEERAGGROUPFORBKPPINIONSTEERAGSPDQFFORBKP_GENQF1_ACCURDATA = 3;
  }
  enum PinionSteerAgGroupForBkpSteerWhlTqQfForBkpType {
    PINIONSTEERAGGROUPFORBKPSTEERWHLTQQFFORBKP_GENQF1_UNDEFINDDATAACCUR = 0;
    PINIONSTEERAGGROUPFORBKPSTEERWHLTQQFFORBKP_GENQF1_TMPUNDEFDDATA = 1;
    PINIONSTEERAGGROUPFORBKPSTEERWHLTQQFFORBKP_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    PINIONSTEERAGGROUPFORBKPSTEERWHLTQQFFORBKP_GENQF1_ACCURDATA = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool pinion_steer_ag_group_for_bkp_ub = 1;
  // description Checksum for PinionSteerAgGroupForBkp [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 pinion_steer_ag_group_for_bkp_chks = 2;
  // description Counter for PinionSteerAgGroupForBkp [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 pinion_steer_ag_group_for_bkp_cntr = 3;
  // description Calculated pinion steer angle at the front steering device [rad] [-14.5|14.5] [initial_value:0]
  optional double pinion_steer_ag_group_for_bkp_pinion_steer_ag_for_bkp = 4;
  // description Quality factor for PinionSteerAgForBkp [] [0|3] [initial_value:1]
  optional PinionSteerAgGroupForBkpPinionSteerAgQfForBkpType pinion_steer_ag_group_for_bkp_pinion_steer_ag_qf_for_bkp = 5;
  // description Calculated pinion steer angle speed at the front steering device  [rad/s] [-50.0|50.0] [initial_value:0]
  optional double pinion_steer_ag_group_for_bkp_pinion_steer_ag_spd_for_bkp = 6;
  // description Quality factor for PinionSteerAgSpdForBkp [] [0|3] [initial_value:1]
  optional PinionSteerAgGroupForBkpPinionSteerAgSpdQfForBkpType pinion_steer_ag_group_for_bkp_pinion_steer_ag_spd_qf_for_bkp = 7;
  // description Torque on steering wheel [NewtonMeter] [-30.0|30.0] [initial_value:0]
  optional double pinion_steer_ag_group_for_bkp_steer_whl_tq_for_bkp = 8;
  // description Quality factor for SteerWhlTqForBkp [] [0|3] [initial_value:1]
  optional PinionSteerAgGroupForBkpSteerWhlTqQfForBkpType pinion_steer_ag_group_for_bkp_steer_whl_tq_qf_for_bkp = 9;
}

message ECM_CHAS1_FR59_108 {
// Report Message
  // [] [0|1] [initial_value:None]
  optional bool accr_pedl_psd_ub = 1;
  // description Describes if the accelerator pedal is pressed. Will indicate pressed for a small pedal press. Accompanying status signal will indicate the integrity of the information. [] [0|1] [initial_value:0]
  optional bool accr_pedl_psd_accr_pedl_psd = 2;
  // description Describes if the accelerator pedal is pressed. Will indicate pressed for a small pedal press.checksum [Unitless] [0.0|255.0] [initial_value:255]
  optional uint32 accr_pedl_psd_chks = 3;
  // description Describes if the accelerator pedal is pressed. Will indicate pressed for a small pedal press.couner [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 accr_pedl_psd_cntr = 4;
  // description Describes if the accelerator pedal is pressed. Will indicate pressed for a small pedal press. Accompanying status signal will indicate the integrity of the information. AccrPedlPsd fulfills ASIL C integrity [] [0|1] [initial_value:0]
  optional bool accr_pedl_psd_sts = 5;
  // description Derivative of accelerator pedal position. [PercPerSec] [-1000.0|1000.0] [initial_value:0]
  optional double accr_pedl_rat_grdt = 6;
  // [] [0|1] [initial_value:None]
  optional bool accr_pedl_rat_grdt_ub = 7;
  // description Coolant temperature measured by sensors installed in emotor cooling citcuit. [degC] [-40.0|140.0] [initial_value:400]
  optional double coolt_t_sig_for_dt_elec = 8;
  // [] [0|1] [initial_value:None]
  optional bool coolt_t_sig_for_dt_elec_ub = 9;
}

message ASDM_CHAS1_FR07_117 {
// Control Message
  enum AsyLgtADModeReqADActiveReqType {
    ASYLGTADMODEREQADACTIVEREQ_ADMOD_NAD_MOD = 0;
    ASYLGTADMODEREQADACTIVEREQ_ADMOD_TJP_HWC = 1;
    ASYLGTADMODEREQADACTIVEREQ_ADMOD_NOP = 2;
    ASYLGTADMODEREQADACTIVEREQ_ADMOD_E2E = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool asy_a_lgt_req_rng_for_safe_ub = 1;
  // [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 asy_a_lgt_req_rng_for_safe_chks = 2;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_a_lgt_req_rng_for_safe_cntr = 3;
  // [m/s^2] [-15.0|15.0] [initial_value:1500]
  optional double asy_a_lgt_req_rng_for_safe_max = 4;
  // [m/s^2] [-15.0|15.0] [initial_value:1500]
  optional double asy_a_lgt_req_rng_for_safe_min = 5;
  // [] [0|1] [initial_value:None]
  optional bool asy_lgt_ad_mode_req_ub = 6;
  // description ADActiveRequest [] [0|3] [initial_value:0]
  optional AsyLgtADModeReqADActiveReqType asy_lgt_ad_mode_req_ad_active_req = 7;
  // description AD Deactive Request [] [0|1] [initial_value:0]
  optional bool asy_lgt_ad_mode_req_ad_deactive_req = 8;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 asy_lgt_ad_mode_req_chks = 9;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_lgt_ad_mode_req_cntr = 10;
  // description The speed limit for DIM and HUD to display. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 spd_lim_first = 11;
  // [] [0|1] [initial_value:None]
  optional bool spd_lim_first_ub = 12;
}

message ECM_CHAS1_FR68_123 {
// Report Message
  enum DrvgDirDesDrvgDirDesType {
    DRVGDIRDESDRVGDIRDES_GEARLVRINDCN2_PARKINDCN = 0;
    DRVGDIRDESDRVGDIRDES_GEARLVRINDCN2_RVSINDCN = 1;
    DRVGDIRDESDRVGDIRDES_GEARLVRINDCN2_NEUTINDCN = 2;
    DRVGDIRDESDRVGDIRDES_GEARLVRINDCN2_DRVINDCN = 3;
    DRVGDIRDESDRVGDIRDES_GEARLVRINDCN2_MANMODEINDCN = 4;
    DRVGDIRDESDRVGDIRDES_GEARLVRINDCN2_RESD1 = 5;
    DRVGDIRDESDRVGDIRDES_GEARLVRINDCN2_RESD2 = 6;
    DRVGDIRDESDRVGDIRDES_GEARLVRINDCN2_UNDEFD = 7;
  }
  // [] [0|1] [initial_value:None]
  optional bool drvg_dir_des_ub = 1;
  // description Checksum for DrvgDirDes [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 drvg_dir_des_chks = 2;
  // description Counter for DrvgDirDes [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 drvg_dir_des_cntr = 3;
  // description Gear lever indication for ASILB [] [0|7] [initial_value:7]
  optional DrvgDirDesDrvgDirDesType drvg_dir_des_drvg_dir_des = 4;
}

message ECM_CHAS1_FR60_129 {
// Report Message
  enum GearMovmtFlgType {
    GEARMOVMTFLG_FUNCSTS_NOREQ = 0;
    GEARMOVMTFLG_FUNCSTS_SET = 1;
    GEARMOVMTFLG_FUNCSTS_RESUME = 2;
    GEARMOVMTFLG_FUNCSTS_CANCLE = 3;
  }
  // description A signal flag to make DHU control the ASL&ACC function open or close. [] [0|3] [initial_value:0]
  optional GearMovmtFlgType gear_movmt_flg = 1;
  // [] [0|1] [initial_value:None]
  optional bool gear_movmt_flg_ub = 2;
}

message ASDM_CHAS1_FR06_131 {
// Control Message
  enum AsyADL3LgtFuncCtrlStsADModType {
    ASYADL3LGTFUNCCTRLSTSADMOD_ADMOD_NAD_MOD = 0;
    ASYADL3LGTFUNCCTRLSTSADMOD_ADMOD_TJP_HWC = 1;
    ASYADL3LGTFUNCCTRLSTSADMOD_ADMOD_NOP = 2;
    ASYADL3LGTFUNCCTRLSTSADMOD_ADMOD_E2E = 3;
  }
  enum AsyADL3LgtFuncCtrlStsQfType {
    ASYADL3LGTFUNCCTRLSTSQF_GENQF1_UNDEFINDDATAACCUR = 0;
    ASYADL3LGTFUNCCTRLSTSQF_GENQF1_TMPUNDEFDDATA = 1;
    ASYADL3LGTFUNCCTRLSTSQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    ASYADL3LGTFUNCCTRLSTSQF_GENQF1_ACCURDATA = 3;
  }
  enum AsyADL3LgtFuncCtrlStsStsType {
    ASYADL3LGTFUNCCTRLSTSSTS_COLORSTS_RED = 0;
    ASYADL3LGTFUNCCTRLSTSSTS_COLORSTS_YELLOW = 1;
    ASYADL3LGTFUNCCTRLSTSSTS_COLORSTS_GREEN = 2;
    ASYADL3LGTFUNCCTRLSTSSTS_COLORSTS_RESERVED = 3;
  }
  enum RoadSgnInfoStsType {
    ROADSGNINFOSTS_TRFCSGNINFOSTS_TSIUNKNOWN = 0;
    ROADSGNINFOSTS_TRFCSGNINFOSTS_TSIOFF = 1;
    ROADSGNINFOSTS_TRFCSGNINFOSTS_TSION_FUSION = 2;
    ROADSGNINFOSTS_TRFCSGNINFOSTS_TSION_VISIONONLYMODE = 3;
    ROADSGNINFOSTS_TRFCSGNINFOSTS_TSION_NAVIGATIONONLYMODE = 4;
    ROADSGNINFOSTS_TRFCSGNINFOSTS_TSIUNAVAILABLE = 5;
    ROADSGNINFOSTS_TRFCSGNINFOSTS_TSISERVICEREQUIRED = 6;
    ROADSGNINFOSTS_TRFCSGNINFOSTS_RESERVED = 7;
  }
  // [] [0|1] [initial_value:None]
  optional bool accr_ovrdn_allwd_for_aut_drv_ub = 1;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 accr_ovrdn_allwd_for_aut_drv_chks = 2;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 accr_ovrdn_allwd_for_aut_drv_cntr = 3;
  // description allwd driver to override  [] [0|1] [initial_value:0]
  optional bool accr_ovrdn_allwd_for_aut_drv_yes_no1 = 4;
  // [] [0|1] [initial_value:None]
  optional bool ad4_accr_ovrdn_allwd_for_bkp_ub = 5;
  // description check sum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_accr_ovrdn_allwd_for_bkp_chks = 6;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_accr_ovrdn_allwd_for_bkp_cntr = 7;
  // description The signal is allowance about acceleration override for AD Backup. 0=Allowed, 1= Not Allowed. [] [0|1] [initial_value:0]
  optional bool ad4_accr_ovrdn_allwd_for_bkp_yes_no1 = 8;
  // [] [0|1] [initial_value:None]
  optional bool asy_adl3_lgt_func_ctrl_sts_ub = 9;
  // description ADMod [] [0|3] [initial_value:0]
  optional AsyADL3LgtFuncCtrlStsADModType asy_adl3_lgt_func_ctrl_sts_ad_mod = 10;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 asy_adl3_lgt_func_ctrl_sts_chks = 11;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_adl3_lgt_func_ctrl_sts_cntr = 12;
  // description CtrlSts [] [0|1] [initial_value:0]
  optional bool asy_adl3_lgt_func_ctrl_sts_ctrl_sts = 13;
  // description Degraded [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_adl3_lgt_func_ctrl_sts_degraded = 14;
  // description Qf [] [0|3] [initial_value:0]
  optional AsyADL3LgtFuncCtrlStsQfType asy_adl3_lgt_func_ctrl_sts_qf = 15;
  // description Status [] [0|3] [initial_value:0]
  optional AsyADL3LgtFuncCtrlStsStsType asy_adl3_lgt_func_ctrl_sts_sts = 16;
  // description Indicates the TSR function status. [] [0|7] [initial_value:0]
  optional RoadSgnInfoStsType road_sgn_info_sts = 17;
  // [] [0|1] [initial_value:None]
  optional bool road_sgn_info_sts_ub = 18;
}

message ECM_CHAS1_FR67_15D {
// Report Message
  enum OffrdCrzStateType {
    OFFRDCRZSTATE_OFFRDCRZSTATE_UNDEFINED = 0;
    OFFRDCRZSTATE_OFFRDCRZSTATE_OFF = 1;
    OFFRDCRZSTATE_OFFRDCRZSTATE_STANDBY = 2;
    OFFRDCRZSTATE_OFFRDCRZSTATE_ACTIVE = 3;
  }
  // [] [0|3] [initial_value:0]
  optional OffrdCrzStateType offrd_crz_state = 1;
  // [] [0|1] [initial_value:None]
  optional bool offrd_crz_state_ub = 2;
}

message IEM_CHAS1_FR02_161 {
// Report Message
  enum TankTurnModStsTankTurnModStsType {
    TANKTURNMODSTSTANKTURNMODSTS_TURNMODSTS_OFF = 0;
    TANKTURNMODSTSTANKTURNMODSTS_TURNMODSTS_STANDBY = 1;
    TANKTURNMODSTSTANKTURNMODSTS_TURNMODSTS_READY = 2;
    TANKTURNMODSTSTANKTURNMODSTS_TURNMODSTS_ACTIVE = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool tank_turn_mod_sts_ub = 1;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 tank_turn_mod_sts_chks = 2;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 tank_turn_mod_sts_cntr = 3;
  // description Tank turn control status [] [0|7] [initial_value:0]
  optional TankTurnModStsTankTurnModStsType tank_turn_mod_sts_tank_turn_mod_sts = 4;
}

message ASDM_CHAS1_FR05_165 {
// Control Message
  enum RoadSurfCondRoadSurfCondType {
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_UNKNOWN = 0;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_WELLPAVEDROAD = 1;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_GRASSROAD = 2;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_SANDROAD = 3;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_SNOWROAD = 4;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_MUDROAD = 5;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_RESERVE1 = 6;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_RESERVE2 = 7;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_RESERVE3 = 8;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_UNPAVEDROAD = 9;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_SPLICEROAD = 10;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_GRAVELROAD = 11;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_MANHOLECOVERROAD = 12;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_SPEEDSTRIPROAD = 13;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_FORDINGROAD = 14;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_RAILWAYROAD = 15;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_CONCRETEDIRTROAD = 16;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_HOLLOWROAD = 17;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_LONGWAVEROAD = 18;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_SHORTWAVEROAD = 19;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_WASHBOARDROAD = 20;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_ROCKYROAD = 21;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_BELGIUMROAD = 22;
    ROADSURFCONDROADSURFCOND_ROADTYPEL5_TWISTINGROAD = 23;
  }
  // [] [0|1] [initial_value:None]
  optional bool road_surf_cond_ub = 1;
  // description Describes the confidence of the Road surface condition. [Unitless] [0.0|1.0] [initial_value:0]
  optional double road_surf_cond_confidence = 2;
  // description road surface condition [] [0|31] [initial_value:0]
  optional RoadSurfCondRoadSurfCondType road_surf_cond_road_surf_cond = 3;
  // description Road Surface Condition timestamp. [s] [0.0|429496.7295] [initial_value:0]
  optional double road_surf_cond_ti_stamp = 4;
}

message ASDM_CHAS1_FR21_167 {
  // Control Message
    enum RoadSurfCondLeftRoadSurfCondType {
      ROADSURFCONDLEFTROADSURFCOND_ROADTYPELEN5_INVALID = 0;
      ROADSURFCONDLEFTROADSURFCOND_ROADTYPELEN5_WELLPAVEDROAD = 1;
      ROADSURFCONDLEFTROADSURFCOND_ROADTYPELEN5_GRASSROAD = 2;
      ROADSURFCONDLEFTROADSURFCOND_ROADTYPELEN5_SANDROAD = 3;
      ROADSURFCONDLEFTROADSURFCOND_ROADTYPELEN5_SNOWROAD = 4;
      ROADSURFCONDLEFTROADSURFCOND_ROADTYPELEN5_MUDROAD = 5;
      ROADSURFCONDLEFTROADSURFCOND_ROADTYPELEN5_ROCKYROAD = 6;
      ROADSURFCONDLEFTROADSURFCOND_ROADTYPELEN5_FORDINGROAD = 7;
      ROADSURFCONDLEFTROADSURFCOND_ROADTYPELEN5_GRAVELROAD = 8;
      ROADSURFCONDLEFTROADSURFCOND_ROADTYPELEN5_ICEROAD = 9;
      ROADSURFCONDLEFTROADSURFCOND_ROADTYPELEN5_RESERVE = 10;
    }
    // [] [0|1] [initial_value:None]
    optional bool road_surf_cond_left_ub = 1;
    // description Confidence [Unitless] [0.0|1.0] [initial_value:0]
    optional double road_surf_cond_left_confidence = 2;
    // description Distance [Unitless] [0.0|51.1] [initial_value:0]
    optional double road_surf_cond_leftdistance = 3;
    // description RoadSurfType [] [0|31] [initial_value:0]
    optional RoadSurfCondLeftRoadSurfCondType road_surf_cond_left_road_surf_cond = 4;
    // description TimeStamp [s] [0.0|429496.7295] [initial_value:0]
    optional double road_surf_cond_left_ti_stamp = 5;
  }
  
  message ASDM_CHAS1_FR22_16E {
  // Control Message
    enum RoadSurfCondRightRoadSurfCondType {
      ROADSURFCONDRIGHTROADSURFCOND_ROADTYPELEN5_INVALID = 0;
      ROADSURFCONDRIGHTROADSURFCOND_ROADTYPELEN5_WELLPAVEDROAD = 1;
      ROADSURFCONDRIGHTROADSURFCOND_ROADTYPELEN5_GRASSROAD = 2;
      ROADSURFCONDRIGHTROADSURFCOND_ROADTYPELEN5_SANDROAD = 3;
      ROADSURFCONDRIGHTROADSURFCOND_ROADTYPELEN5_SNOWROAD = 4;
      ROADSURFCONDRIGHTROADSURFCOND_ROADTYPELEN5_MUDROAD = 5;
      ROADSURFCONDRIGHTROADSURFCOND_ROADTYPELEN5_ROCKYROAD = 6;
      ROADSURFCONDRIGHTROADSURFCOND_ROADTYPELEN5_FORDINGROAD = 7;
      ROADSURFCONDRIGHTROADSURFCOND_ROADTYPELEN5_GRAVELROAD = 8;
      ROADSURFCONDRIGHTROADSURFCOND_ROADTYPELEN5_ICEROAD = 9;
      ROADSURFCONDRIGHTROADSURFCOND_ROADTYPELEN5_RESERVE = 10;
    }
    // [] [0|1] [initial_value:None]
    optional bool road_surf_cond_right_ub = 1;
    // description Confidence [Unitless] [0.0|1.0] [initial_value:0]
    optional double road_surf_cond_right_confidence = 2;
    // description Distance [Unitless] [0.0|51.1] [initial_value:0]
    optional double road_surf_cond_rightdistance = 3;
    // description RoadSurfType [] [0|31] [initial_value:0]
    optional RoadSurfCondRightRoadSurfCondType road_surf_cond_right_road_surf_cond = 4;
    // description TimeStamp [s] [0.0|429496.7295] [initial_value:0]
    optional double road_surf_cond_right_ti_stamp = 5;
}

message ASDM_CHAS1_FR11_176 {
// Control Message
  enum AsyLineLeColorType {
    ASYLINELECOLOR_ASYLINELECOLOR_GREY = 0;
    ASYLINELECOLOR_ASYLINELECOLOR_WHITE = 1;
    ASYLINELECOLOR_ASYLINELECOLOR_BLUE = 2;
    ASYLINELECOLOR_ASYLINELECOLOR_RED = 3;
    ASYLINELECOLOR_ASYLINELECOLOR_YELLOW = 4;
  }
  enum AsyLineLeTypType {
    ASYLINELETYP_ASYLINELETYP_NODISPLAY = 0;
    ASYLINELETYP_ASYLINELETYP_SOLIDLINE = 1;
    ASYLINELETYP_ASYLINELETYP_DASHLINE = 2;
  }
  enum AsyLineRiColorType {
    ASYLINERICOLOR_ASYLINELECOLOR_GREY = 0;
    ASYLINERICOLOR_ASYLINELECOLOR_WHITE = 1;
    ASYLINERICOLOR_ASYLINELECOLOR_BLUE = 2;
    ASYLINERICOLOR_ASYLINELECOLOR_RED = 3;
    ASYLINERICOLOR_ASYLINELECOLOR_YELLOW = 4;
  }
  enum AsyLineRiTypType {
    ASYLINERITYP_ASYLINELETYP_NODISPLAY = 0;
    ASYLINERITYP_ASYLINELETYP_SOLIDLINE = 1;
    ASYLINERITYP_ASYLINELETYP_DASHLINE = 2;
  }
  // description The signal indicates the color of the left line of ego lane. [] [0|15] [initial_value:0]
  optional AsyLineLeColorType asy_line_le_color = 1;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_le_color_ub = 2;
  // description The signal indicates the type of the left line of ego lane. [] [0|15] [initial_value:0]
  optional AsyLineLeTypType asy_line_le_typ = 3;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_le_typ_ub = 4;
  // description The signal indicates the color of the right line of ego lane. [] [0|15] [initial_value:0]
  optional AsyLineRiColorType asy_line_ri_color = 5;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_ri_color_ub = 6;
  // description The signal indicates the type of the right line of ego lane. [] [0|15] [initial_value:0]
  optional AsyLineRiTypType asy_line_ri_typ = 7;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_ri_typ_ub = 8;
  // description To indicate whether there is non-traversable road edge on the left side of ego lane [] [0|1] [initial_value:0]
  optional bool non_trvrsble_road_edge_on_left = 9;
  // [] [0|1] [initial_value:None]
  optional bool non_trvrsble_road_edge_on_left_ub = 10;
  // description To indicate whether there is non-traversable road edge on the right side of ego lane [] [0|1] [initial_value:0]
  optional bool non_trvrsble_road_edge_on_right = 11;
  // [] [0|1] [initial_value:None]
  optional bool non_trvrsble_road_edge_on_right_ub = 12;
}

message ASDM_CHAS1_FR08_199 {
// Control Message
  enum ActvSafeCtrlrStsType {
    ACTVSAFECTRLRSTS_SNSRSYSSTSLEFRNT_OFF = 0;
    ACTVSAFECTRLRSTS_SNSRSYSSTSLEFRNT_ON = 1;
    ACTVSAFECTRLRSTS_SNSRSYSSTSLEFRNT_CALIBRATION = 2;
    ACTVSAFECTRLRSTS_SNSRSYSSTSLEFRNT_BLOCKORHOT = 3;
    ACTVSAFECTRLRSTS_SNSRSYSSTSLEFRNT_FAULTY = 4;
    ACTVSAFECTRLRSTS_SNSRSYSSTSLEFRNT_RESD1 = 5;
    ACTVSAFECTRLRSTS_SNSRSYSSTSLEFRNT_RESD2 = 6;
    ACTVSAFECTRLRSTS_SNSRSYSSTSLEFRNT_RESD3 = 7;
  }
  enum ObjFrnt1ColorOfObjFrnt1Type {
    OBJFRNT1COLOROFOBJFRNT1_ASYLINELECOLOR_GREY = 0;
    OBJFRNT1COLOROFOBJFRNT1_ASYLINELECOLOR_WHITE = 1;
    OBJFRNT1COLOROFOBJFRNT1_ASYLINELECOLOR_BLUE = 2;
    OBJFRNT1COLOROFOBJFRNT1_ASYLINELECOLOR_RED = 3;
    OBJFRNT1COLOROFOBJFRNT1_ASYLINELECOLOR_YELLOW = 4;
  }
  enum ObjFrnt1HdDirOfObjFrnt1Type {
    OBJFRNT1HDDIROFOBJFRNT1_STRAIGHT = 0;
    OBJFRNT1HDDIROFOBJFRNT1_LEFT_LEAN = 1;
    OBJFRNT1HDDIROFOBJFRNT1_RIGHT_LEAN = 2;
  }
  enum ObjFrnt1TypOfObjFrnt1Type {
    OBJFRNT1TYPOFOBJFRNT1_TYPOFOBJFRNT1_NODISPLAY = 0;
    OBJFRNT1TYPOFOBJFRNT1_TYPOFOBJFRNT1_CAR = 1;
    OBJFRNT1TYPOFOBJFRNT1_TYPOFOBJFRNT1_PEDESTRIAN = 2;
    OBJFRNT1TYPOFOBJFRNT1_TYPOFOBJFRNT1_BIKECYCLE = 3;
    OBJFRNT1TYPOFOBJFRNT1_TYPOFOBJFRNT1_ANIMAL = 4;
    OBJFRNT1TYPOFOBJFRNT1_TYPOFOBJFRNT1_MOTOCYCLE = 5;
    OBJFRNT1TYPOFOBJFRNT1_TYPOFOBJFRNT1_BUS = 6;
    OBJFRNT1TYPOFOBJFRNT1_TYPOFOBJFRNT1_TRUCK = 7;
  }
  // description Status signal which indicates the status of the ASDM. [] [0|7] [initial_value:0]
  optional ActvSafeCtrlrStsType actv_safe_ctrlr_sts = 1;
  // [] [0|1] [initial_value:None]
  optional bool actv_safe_ctrlr_sts_ub = 2;
  // [] [0|1] [initial_value:None]
  optional bool obj_frnt1_ub = 3;
  // description the information of Front object 1 [] [0|15] [initial_value:0]
  optional ObjFrnt1ColorOfObjFrnt1Type obj_frnt1_color_of_obj_frnt1 = 4;
  // description the information of Front object 1 [m] [-12.7|12.700000000000003] [initial_value:127]
  optional double obj_frnt1_dst_lat_of_obj_frnt1 = 5;
  // description the information of Front object 1 [m] [-30.0|225.0] [initial_value:30]
  optional double obj_frnt1_dst_lgt_of_obj_frnt1 = 6;
  // description the information of Front object 1 [] [0|7] [initial_value:0]
  optional ObjFrnt1HdDirOfObjFrnt1Type obj_frnt1_hd_dir_of_obj_frnt1 = 7;
  // description the information of Front object 1 [] [0|15] [initial_value:0]
  optional ObjFrnt1TypOfObjFrnt1Type obj_frnt1_typ_of_obj_frnt1 = 8;
}

message VDDM_CHAS1_FR10_1B1 {
// Report Message
  enum BrkPedlPsdQfType {
    BRKPEDLPSDQF_GENQF1_UNDEFINDDATAACCUR = 0;
    BRKPEDLPSDQF_GENQF1_TMPUNDEFDDATA = 1;
    BRKPEDLPSDQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    BRKPEDLPSDQF_GENQF1_ACCURDATA = 3;
  }
  enum WhlSpdCircumlFrntLeQfType {
    WHLSPDCIRCUMLFRNTLEQF_GENQF1_UNDEFINDDATAACCUR = 0;
    WHLSPDCIRCUMLFRNTLEQF_GENQF1_TMPUNDEFDDATA = 1;
    WHLSPDCIRCUMLFRNTLEQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    WHLSPDCIRCUMLFRNTLEQF_GENQF1_ACCURDATA = 3;
  }
  enum WhlSpdCircumlFrntRiQfType {
    WHLSPDCIRCUMLFRNTRIQF_GENQF1_UNDEFINDDATAACCUR = 0;
    WHLSPDCIRCUMLFRNTRIQF_GENQF1_TMPUNDEFDDATA = 1;
    WHLSPDCIRCUMLFRNTRIQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    WHLSPDCIRCUMLFRNTRIQF_GENQF1_ACCURDATA = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool brk_pedl_psd_ub = 1;
  // description Set to 1 if brake pedal is not pressed, otherwise 0 [] [0|1] [initial_value:0]
  optional bool brk_pedl_psd_brk_pedl_not_psd_safe = 2;
  // description Set to 1 if brake pedal is pressed, otherwise 0 [] [0|1] [initial_value:0]
  optional bool brk_pedl_psd_brk_pedl_psd = 3;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 brk_pedl_psd_chks = 4;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 brk_pedl_psd_cntr = 5;
  // description Quality factor [] [0|3] [initial_value:0]
  optional BrkPedlPsdQfType brk_pedl_psd_qf = 6;
  // [] [0|1] [initial_value:None]
  optional bool whl_spd_circuml_frnt_ub = 7;
  // description Individual wheel speed from front wheel speed sensors. Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 whl_spd_circuml_frnt_chks = 8;
  // description Individual wheel speed from front wheel speed sensors. Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 whl_spd_circuml_frnt_cntr = 9;
  // description Individual wheel speed from front wheel speed sensors. Wheel speed from front left wheel speed sensor using nominal value of wheel radius. [m/s] [0.0|125.0027] [initial_value:0]
  optional double whl_spd_circuml_frnt_le = 10;
  // description Individual wheel speed from front wheel speed sensors. Qf for wheel speed sensor [] [0|3] [initial_value:1]
  optional WhlSpdCircumlFrntLeQfType whl_spd_circuml_frnt_le_qf = 11;
  // description Individual wheel speed from front wheel speed sensors. Qf for wheel speed sensor [] [0|3] [initial_value:1]
  optional WhlSpdCircumlFrntRiQfType whl_spd_circuml_frnt_ri_qf = 12;
  // description Individual wheel speed from front wheel speed sensors. Wheel speed from front right wheel speed sensor using nominal value of wheel radius [m/s] [0.0|125.0027] [initial_value:0]
  optional double whl_spd_circuml_frnt_whl_spd_circuml_frnt_ri = 13;
}

message VDDM_CHAS1_FR55_1B7 {
// Report Message
  enum WhlSpdCircumlReLeQfType {
    WHLSPDCIRCUMLRELEQF_GENQF1_UNDEFINDDATAACCUR = 0;
    WHLSPDCIRCUMLRELEQF_GENQF1_TMPUNDEFDDATA = 1;
    WHLSPDCIRCUMLRELEQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    WHLSPDCIRCUMLRELEQF_GENQF1_ACCURDATA = 3;
  }
  enum WhlSpdCircumlReRiQfType {
    WHLSPDCIRCUMLRERIQF_GENQF1_UNDEFINDDATAACCUR = 0;
    WHLSPDCIRCUMLRERIQF_GENQF1_TMPUNDEFDDATA = 1;
    WHLSPDCIRCUMLRERIQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    WHLSPDCIRCUMLRERIQF_GENQF1_ACCURDATA = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool whl_spd_circuml_re_ub = 1;
  // description Individual wheel speed from rear wheel speed sensors. Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 whl_spd_circuml_re_chks = 2;
  // description Individual wheel speed from rear wheel speed sensors. Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 whl_spd_circuml_re_cntr = 3;
  // description Individual wheel speed from rear wheel speed sensors. Wheel speed from rear left wheel speed sensor using nominal value of wheel radius. [m/s] [0.0|125.0027] [initial_value:0]
  optional double whl_spd_circuml_re_le = 4;
  // description Individual wheel speed from rear wheel speed sensors. Qf for wheel speed sensor [] [0|3] [initial_value:1]
  optional WhlSpdCircumlReLeQfType whl_spd_circuml_re_le_qf = 5;
  // description Individual wheel speed from rear wheel speed sensors. Wheel speed from rear right wheel speed sensor using nominal value of wheel radius. [m/s] [0.0|125.0027] [initial_value:0]
  optional double whl_spd_circuml_re_ri = 6;
  // description Individual wheel speed from rear wheel speed sensors. Qf for wheel speed sensor [] [0|3] [initial_value:1]
  optional WhlSpdCircumlReRiQfType whl_spd_circuml_re_ri_qf = 7;
}

message PSCM_CHAS1_FR03_1BC {
// Report Message
  enum DrvrSteerWhlHldGroupDrvrSteerWhlHldType {
    DRVRSTEERWHLHLDGROUPDRVRSTEERWHLHLD_ONOFFDETD1_NOINFO = 0;
    DRVRSTEERWHLHLDGROUPDRVRSTEERWHLHLD_ONOFFDETD1_OFFDETD = 1;
    DRVRSTEERWHLHLDGROUPDRVRSTEERWHLHLD_ONOFFDETD1_NOTONOROFFDETD = 2;
    DRVRSTEERWHLHLDGROUPDRVRSTEERWHLHLD_ONOFFDETD1_ONDETD = 3;
  }
  enum SteerStsToParkAssiType {
    STEERSTSTOPARKASSI_STEERSTSTOPARKASSI_NORMOPER = 0;
    STEERSTSTOPARKASSI_STEERSTSTOPARKASSI_STEERABORTBYSPDHI = 1;
    STEERSTSTOPARKASSI_STEERSTSTOPARKASSI_CTRLDIFHI = 2;
    STEERSTSTOPARKASSI_STEERSTSTOPARKASSI_STEERCTRLINTERR = 3;
    STEERSTSTOPARKASSI_STEERSTSTOPARKASSI_STEERABORTBYDRVRINTV = 4;
    STEERSTSTOPARKASSI_STEERSTSTOPARKASSI_STEERTQHI = 5;
    STEERSTSTOPARKASSI_STEERSTSTOPARKASSI_SPARE1 = 6;
    STEERSTSTOPARKASSI_STEERSTSTOPARKASSI_SPARE2 = 7;
  }
  // [] [0|1] [initial_value:None]
  optional bool drvr_steer_whl_hld_group_ub = 1;
  // description Hands on steering wheel information. Signal indicating whether the driver has his hands on the steering wheel or not. [] [0|3] [initial_value:0]
  optional DrvrSteerWhlHldGroupDrvrSteerWhlHldType drvr_steer_whl_hld_group_drvr_steer_whl_hld = 2;
  // description Hands on steering wheel information. Confidence value for the DrvrSteerWhlHld estimation calculation, specifically indicating the confidence for the hands off state. [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 drvr_steer_whl_hld_group_drvr_steer_whl_hld_qly = 3;
  // [] [0|1] [initial_value:None]
  optional bool steer_ext_fct_sts_ub = 4;
  // description Confirmation of steer external function status Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 steer_ext_fct_sts_chks = 5;
  // description Confirmation of steer external function status Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 steer_ext_fct_sts_cntr = 6;
  // description Steering request of asking driver to take over [] [0|1] [initial_value:0]
  optional bool steer_ext_fct_sts_drvr_steer_ovrd = 7;
  // description Column  Torque Lower Limit  [] [0|1] [initial_value:0]
  optional bool steer_ext_fct_sts_ext_fct_lower_lim_active = 8;
  // description External function rate Limit  [] [0|1] [initial_value:0]
  optional bool steer_ext_fct_sts_ext_fct_rate_lim_active = 9;
  // description Column Torque Upper Limit  [] [0|1] [initial_value:0]
  optional bool steer_ext_fct_sts_ext_fct_upper_lim_active = 10;
  // description External function torque output vs defined safety limiters  [] [0|1] [initial_value:0]
  optional bool steer_ext_fct_sts_ext_safe_lim_active = 11;
  // description Pinion angle /current trajectory between primary and fall back  [] [0|1] [initial_value:0]
  optional bool steer_ext_fct_sts_lat_ag_req_not_in_range = 12;
  // description Lateral Ctrl request and primary and fall back  [] [0|1] [initial_value:0]
  optional bool steer_ext_fct_sts_lat_ctrl_req_not_in_range = 13;
  // description Indicates the status of the PSCM's safety limiter for external functions. [] [0|1] [initial_value:0]
  optional bool steer_sfty_limr_sts = 14;
  // [] [0|1] [initial_value:None]
  optional bool steer_sfty_limr_sts_ub = 15;
  // description SteerStsToParkAssi contains PSCM status related to execution of SAP. [] [0|7] [initial_value:0]
  optional SteerStsToParkAssiType steer_sts_to_park_assi = 16;
  // [] [0|1] [initial_value:None]
  optional bool steer_sts_to_park_assi_ub = 17;
}

message ECM_CHAS1_FR24_1C7 {
// Report Message
  // [] [0|1] [initial_value:None]
  optional bool accrpedl_sts_ub = 1;
  // description  It should provide acceleration pedal Status signal ( AccrpedlSts ) to predict whether the accelerator pedal  has fault or not.1-Fault; 0-NoFault [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 accrpedl_sts_chks = 2;
  // description  It should provide acceleration pedal Status signal ( AccrpedlSts ) to predict whether the accelerator pedal  has fault or not.1-Fault; 0-NoFault [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 accrpedl_sts_cntr = 3;
  // description  It should provide acceleration pedal Status signal ( AccrpedlSts ) to predict whether the accelerator pedal  has fault or not.1-Fault; 0-NoFault [] [0|1] [initial_value:0]
  optional bool accrpedl_sts_flt_sts = 4;
}

message VDDM_CHAS1_FR53_1F0 {
// Report Message
  // description Ignition relay status [] [0|1] [initial_value:0]
  optional bool rly_pwr_distbn_cmd1_wd_ign_rly_cmd = 1;
  // [] [0|1] [initial_value:None]
  optional bool rly_pwr_distbn_cmd1_wd_ign_rly_cmd_ub = 2;
}

message BCM_CHAS1_FR17_2E {
// Report Message
  enum WhlDirRotlFrntLeType {
    WHLDIRROTLFRNTLE_WHLROTLDIRSTD1_UNDEFD = 0;
    WHLDIRROTLFRNTLE_WHLROTLDIRSTD1_STANDSTILL = 1;
    WHLDIRROTLFRNTLE_WHLROTLDIRSTD1_FWD = 2;
    WHLDIRROTLFRNTLE_WHLROTLDIRSTD1_BACKW = 3;
  }
  enum WhlDirRotlFrntRiType {
    WHLDIRROTLFRNTRI_WHLROTLDIRSTD1_UNDEFD = 0;
    WHLDIRROTLFRNTRI_WHLROTLDIRSTD1_STANDSTILL = 1;
    WHLDIRROTLFRNTRI_WHLROTLDIRSTD1_FWD = 2;
    WHLDIRROTLFRNTRI_WHLROTLDIRSTD1_BACKW = 3;
  }
  enum WhlDirRotlReLeType {
    WHLDIRROTLRELE_WHLROTLDIRSTD1_UNDEFD = 0;
    WHLDIRROTLRELE_WHLROTLDIRSTD1_STANDSTILL = 1;
    WHLDIRROTLRELE_WHLROTLDIRSTD1_FWD = 2;
    WHLDIRROTLRELE_WHLROTLDIRSTD1_BACKW = 3;
  }
  enum WhlDirRotlReRiType {
    WHLDIRROTLRERI_WHLROTLDIRSTD1_UNDEFD = 0;
    WHLDIRROTLRERI_WHLROTLDIRSTD1_STANDSTILL = 1;
    WHLDIRROTLRERI_WHLROTLDIRSTD1_FWD = 2;
    WHLDIRROTLRERI_WHLROTLDIRSTD1_BACKW = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool whl_dir_rotl_frnt_ub = 1;
  // description check sum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 whl_dir_rotl_frnt_chks = 2;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 whl_dir_rotl_frnt_cntr = 3;
  // description Rotational direction for the front individual wheels. Wheel rotation direction of front left wheel. [] [0|3] [initial_value:0]
  optional WhlDirRotlFrntLeType whl_dir_rotl_frnt_le = 4;
  // description Rotational direction for the front individual wheels. Wheel rotation direction of front right wheel. [] [0|3] [initial_value:0]
  optional WhlDirRotlFrntRiType whl_dir_rotl_frnt_ri = 5;
  // [] [0|1] [initial_value:None]
  optional bool whl_dir_rotl_re_ub = 6;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 whl_dir_rotl_re_chks = 7;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 whl_dir_rotl_re_cntr = 8;
  // description Rotational direction for the rear individual wheels. Wheel rotation direction of rear left wheel. [] [0|3] [initial_value:0]
  optional WhlDirRotlReLeType whl_dir_rotl_re_le = 9;
  // description Rotational direction for the rear individual wheels. Wheel rotation direction of rear right wheel. [] [0|3] [initial_value:0]
  optional WhlDirRotlReRiType whl_dir_rotl_re_ri = 10;
}

message VDDM_CHAS1_FR23_310 {
// Report Message
  enum CmptmtTFrntQfType {
    CMPTMTTFRNTQF_CMPTMTTFRNTQF_SNSRDATAUNDEFD = 0;
    CMPTMTTFRNTQF_CMPTMTTFRNTQF_FANNOTRUNNING = 1;
    CMPTMTTFRNTQF_CMPTMTTFRNTQF_SNSRDATANOTOK = 2;
    CMPTMTTFRNTQF_CMPTMTTFRNTQF_SNSRDATAOK = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool cmptmt_t_frnt_ub = 1;
  // description Measured temperature in compartment.  [degC] [-60.0|125.0] [initial_value:600]
  optional double cmptmt_t_frnt_cmptmt_t_frnt = 2;
  // description Fan for component temperature requirement. [] [0|1] [initial_value:0]
  optional bool cmptmt_t_frnt_fan_for_cmptmt_t_runng = 3;
  // description Component temperature sensor signal quality. [] [0|3] [initial_value:1]
  optional CmptmtTFrntQfType cmptmt_t_frnt_qf = 4;
}

message ASDM_CHAS1_FR03_33 {
// Control Message
  // description Lower limit for angle controller torque request. [Nm] [-30.0|30.0] [initial_value:240]
  optional double ag_ctrl_tq_lowr_lim = 1;
  // [] [0|1] [initial_value:None]
  optional bool ag_ctrl_tq_lowr_lim_ub = 2;
  // description Upper limit for angle controller torque request. [Nm] [-30.0|30.0] [initial_value:240]
  optional double ag_ctrl_tq_uppr_lim = 3;
  // [] [0|1] [initial_value:None]
  optional bool ag_ctrl_tq_uppr_lim_ub = 4;
  // [] [0|1] [initial_value:None]
  optional bool asy_pinion_ag_req_safe_ub = 5;
  // description Steering request signal from Active Safety with end-to-end protection  [rad] [-14.5|17.4990234375] [initial_value:14848]
  optional double asy_pinion_ag_req_safe_asy_pinion_ag_req = 6;
  // description CRC [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 asy_pinion_ag_req_safe_asy_pinion_ag_req_chks = 7;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_pinion_ag_req_safe_asy_pinion_ag_req_cntr = 8;
}

message VDDM_CHAS1_FR56_34 {
// Report Message
  // [] [0|1] [initial_value:None]
  optional bool crash_sts_safe_ub = 1;
  // description Checksum for E2E [Unitless] [0.0|255.0] [initial_value:255]
  optional uint32 crash_sts_safe_chks = 2;
  // description Counter for E2E [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 crash_sts_safe_cntr = 3;
  // description Information if a crash has been detected by SRS. [] [0|1] [initial_value:0]
  optional bool crash_sts_safe_sts = 4;
}

message ASDM_CHAS1_FR09_379 {
// Control Message
  // description AD4 Cooling service req [] [0|1] [initial_value:0]
  optional bool ad4_cool_req = 1;
  // [] [0|1] [initial_value:None]
  optional bool ad4_cool_req_ub = 2;
  // description AD4 Coolt Flow req [L / min] [0.0|15.33] [initial_value:0]
  optional double ad4_coolt_flow_req = 3;
  // [] [0|1] [initial_value:None]
  optional bool ad4_coolt_flow_req_ub = 4;
}

message PSCM_CHAS1_FR06_3BB {
// Report Message
  // description PinionSteerAgMax1 contains the current maximal pinion angle. Depends on tire size and vehicle type. [rad] [-14.5|14.5] [initial_value:0]
  optional double pinion_steer_ag_max1 = 1;
  // [] [0|1] [initial_value:None]
  optional bool pinion_steer_ag_max1_ub = 2;
}

message SAS_CHAS1_FR01_40 {
// Report Message
  enum SteerWhlSnsrQfType {
    STEERWHLSNSRQF_GENQF1_UNDEFINDDATAACCUR = 0;
    STEERWHLSNSRQF_GENQF1_TMPUNDEFDDATA = 1;
    STEERWHLSNSRQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    STEERWHLSNSRQF_GENQF1_ACCURDATA = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool steer_whl_snsr_ub = 1;
  // description Actual steering wheel angle from the actual centre position of the steering wheel.  [rad] [-14.5|14.5] [initial_value:0]
  optional double steer_whl_snsr_ag = 2;
  // description Actual steering wheel angle from the actual centre position of the steering wheel. Steering angle speed with steering wheel rotation direction.   [rad/s] [-50.0|50.0] [initial_value:0]
  optional double steer_whl_snsr_ag_spd = 3;
  // description Checksum for steering wheel sensor data. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 steer_whl_snsr_chks = 4;
  // description Counter value for steering wheel sensor data. [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 steer_whl_snsr_cntr = 5;
  // description Qf for steering wheel sensor information [] [0|3] [initial_value:1]
  optional SteerWhlSnsrQfType steer_whl_snsr_qf = 6;
}

message VDDM_CHAS1_FR46_44B {
// Report Message
  // [] [0|1] [initial_value:None]
  optional bool whl_rot_tooth_cntr_ub = 1;
  // description check sum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 whl_rot_tooth_cntr_chks = 2;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 whl_rot_tooth_cntr_cntr = 3;
  // description Wheel rotation ticks for each individual wheel. Wheel rotation impuls counter front left. For one complete wheel revolution the counter will increase by 96 (with 48 magnetic pole-pairs). [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 whl_rot_tooth_cntr_frnt_le = 4;
  // description Wheel rotation ticks for each individual wheel. Wheel rotation impuls counter front right. For one complete wheel revolution the counter will increase by 96 (with 48 magnetic pole-pairs). [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 whl_rot_tooth_cntr_frnt_ri = 5;
  // description Wheel rotation ticks for each individual wheel. Wheel rotation impuls counter rear left. For one complete wheel revolution the counter will increase by 96 (with 48 magnetic pole-pairs). [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 whl_rot_tooth_cntr_re_le = 6;
  // description Wheel rotation ticks for each individual wheel. Wheel rotation impuls counter rear right. For one complete wheel revolution the counter will increase by 96 (with 48 magnetic pole-pairs). [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 whl_rot_tooth_cntr_re_ri = 7;
}

message ECM_CHAS1_FR08_457 {
// Report Message
  enum PtTqAtWhlFrntActPtTqAtWhlsFrntQlyType {
    PTTQATWHLFRNTACTPTTQATWHLSFRNTQLY_QLY3_DE0 = 0;
    PTTQATWHLFRNTACTPTTQATWHLSFRNTQLY_QLY3_DE1 = 1;
    PTTQATWHLFRNTACTPTTQATWHLSFRNTQLY_QLY3_DE2 = 2;
    PTTQATWHLFRNTACTPTTQATWHLSFRNTQLY_QLY3_DE3 = 3;
    PTTQATWHLFRNTACTPTTQATWHLSFRNTQLY_QLY3_DE4 = 4;
    PTTQATWHLFRNTACTPTTQATWHLSFRNTQLY_QLY3_DE5 = 5;
    PTTQATWHLFRNTACTPTTQATWHLSFRNTQLY_QLY3_DE6 = 6;
    PTTQATWHLFRNTACTPTTQATWHLSFRNTQLY_QLY3_DE7 = 7;
  }
  // [] [0|1] [initial_value:None]
  optional bool pt_tq_at_whl_frnt_act_ub = 1;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 pt_tq_at_whl_frnt_act_chks = 2;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 pt_tq_at_whl_frnt_act_cntr = 3;
  // description Actual torque delivered by the powertrain to the front axle [NewtonMeter] [-20000.0|20000.0] [initial_value:0]
  optional double pt_tq_at_whl_frnt_act_pt_tq_at_axle_frnt_act = 4;
  // description Actual torque delivered by the powertrain to the front left wheel. [NewtonMeter] [-20000.0|20000.0] [initial_value:0]
  optional double pt_tq_at_whl_frnt_act_pt_tq_at_whl_frnt_le_act = 5;
  // description Actual torque delivered by the powertrain to the front right wheel. [NewtonMeter] [-20000.0|20000.0] [initial_value:0]
  optional double pt_tq_at_whl_frnt_act_pt_tq_at_whl_frnt_ri_act = 6;
  // description quality factor [] [0|7] [initial_value:0]
  optional PtTqAtWhlFrntActPtTqAtWhlsFrntQlyType pt_tq_at_whl_frnt_act_pt_tq_at_whls_frnt_qly = 7;
}

message PSCM_CHAS1_FR02_46 {
// Report Message
  enum AESCtrlStsType {
    AESCTRLSTS_AESCTRLSTS_OFF = 0;
    AESCTRLSTS_AESCTRLSTS_ACTIVE = 1;
    AESCTRLSTS_AESCTRLSTS_ERROR = 2;
    AESCTRLSTS_AESCTRLSTS_RESERVED = 3;
  }
  enum LatCtrlModCfmdLatCtrlModType {
    LATCTRLMODCFMDLATCTRLMOD_LATCTRLMOD5_NOREQ = 0;
    LATCTRLMODCFMDLATCTRLMOD_LATCTRLMOD5_HIGHWAYASSIST = 1;
    LATCTRLMODCFMDLATCTRLMOD_LATCTRLMOD5_EMGYLANEKEEPAIDFOROBJRE = 2;
    LATCTRLMODCFMDLATCTRLMOD_LATCTRLMOD5_EMGYLANEKEEPAIDFORSTAT = 3;
    LATCTRLMODCFMDLATCTRLMOD_LATCTRLMOD5_SFTYLANEKEEPAID = 4;
    LATCTRLMODCFMDLATCTRLMOD_LATCTRLMOD5_STEERASSC = 5;
    LATCTRLMODCFMDLATCTRLMOD_LATCTRLMOD5_DSROVERSTEER = 6;
    LATCTRLMODCFMDLATCTRLMOD_LATCTRLMOD5_DSRMUESPLIT = 7;
    LATCTRLMODCFMDLATCTRLMOD_LATCTRLMOD5_DSRTRLRSTABY = 8;
    LATCTRLMODCFMDLATCTRLMOD_LATCTRLMOD5_EMGYMANVASSI = 9;
    LATCTRLMODCFMDLATCTRLMOD_LATCTRLMOD5_RESERVED1 = 10;
    LATCTRLMODCFMDLATCTRLMOD_LATCTRLMOD5_E2E = 11;
    LATCTRLMODCFMDLATCTRLMOD_LATCTRLMOD5_SHWA = 12;
    LATCTRLMODCFMDLATCTRLMOD_LATCTRLMOD5_APA = 13;
    LATCTRLMODCFMDLATCTRLMOD_LATCTRLMOD5_RPA = 14;
    LATCTRLMODCFMDLATCTRLMOD_LATCTRLMOD5_HPA = 15;
  }
  // description PSCM send AES steering function status feedbacks to  chassis CAN. [] [0|3] [initial_value:0]
  optional AESCtrlStsType aes_ctrl_sts = 1;
  // [] [0|1] [initial_value:None]
  optional bool aes_ctrl_sts_ub = 2;
  // [] [0|1] [initial_value:None]
  optional bool lat_ctrl_mod_cfmd_ub = 3;
  // description Confirmation of lateral control request Confirmed lateral mode [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 lat_ctrl_mod_cfmd_chks = 4;
  // description Confirmation of lateral control request Confirmed lateral mode [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 lat_ctrl_mod_cfmd_cntr = 5;
  // description Confirmation of lateral control request Confirmed lateral mode [] [0|15] [initial_value:0]
  optional LatCtrlModCfmdLatCtrlModType lat_ctrl_mod_cfmd_lat_ctrl_mod = 6;
  // description Status of lateral control request [] [0|1] [initial_value:0]
  optional bool steer_servo_sts = 7;
  // [] [0|1] [initial_value:None]
  optional bool steer_servo_sts_ub = 8;
  // description Overlay torque from external requests [NewtonMeter] [-30.0|30.0] [initial_value:0]
  optional double steer_whl_tq_addl = 9;
  // [] [0|1] [initial_value:None]
  optional bool steer_whl_tq_addl_ub = 10;
  // description Total torque at motor [NewtonMeter] [-30.0|30.0] [initial_value:0]
  optional double tq_ass_addl = 11;
  // [] [0|1] [initial_value:None]
  optional bool tq_ass_addl_ub = 12;
}

message ECM_CHAS1_FR58_48 {
// Report Message
  enum PtTqAtWhlReActPtTqAtWhlsReQlyType {
    PTTQATWHLREACTPTTQATWHLSREQLY_QLY3_DE0 = 0;
    PTTQATWHLREACTPTTQATWHLSREQLY_QLY3_DE1 = 1;
    PTTQATWHLREACTPTTQATWHLSREQLY_QLY3_DE2 = 2;
    PTTQATWHLREACTPTTQATWHLSREQLY_QLY3_DE3 = 3;
    PTTQATWHLREACTPTTQATWHLSREQLY_QLY3_DE4 = 4;
    PTTQATWHLREACTPTTQATWHLSREQLY_QLY3_DE5 = 5;
    PTTQATWHLREACTPTTQATWHLSREQLY_QLY3_DE6 = 6;
    PTTQATWHLREACTPTTQATWHLSREQLY_QLY3_DE7 = 7;
  }
  // [] [0|1] [initial_value:None]
  optional bool pt_tq_at_whl_re_act_ub = 1;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 pt_tq_at_whl_re_act_chks = 2;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 pt_tq_at_whl_re_act_cntr = 3;
  // description Actual torque delivered by the powertrain to the rear axle [NewtonMeter] [-20000.0|20000.0] [initial_value:0]
  optional double pt_tq_at_whl_re_act_pt_tq_at_axle_re_act = 4;
  // description Actual torque delivered by the powertrain to the rear left wheel. [NewtonMeter] [-20000.0|20000.0] [initial_value:0]
  optional double pt_tq_at_whl_re_act_pt_tq_at_whl_re_le_act = 5;
  // description Actual torque delivered by the powertrain to the rear right wheel. [NewtonMeter] [-20000.0|20000.0] [initial_value:0]
  optional double pt_tq_at_whl_re_act_pt_tq_at_whl_re_ri_act = 6;
  // description quality factor [] [0|7] [initial_value:0]
  optional PtTqAtWhlReActPtTqAtWhlsReQlyType pt_tq_at_whl_re_act_pt_tq_at_whls_re_qly = 7;
}

message PSCM_CHAS1_FR07_4E {
// Report Message
  enum PinionSteerAgGroupPinionSteerAg1QfType {
    PINIONSTEERAGGROUPPINIONSTEERAG1QF_GENQF1_UNDEFINDDATAACCUR = 0;
    PINIONSTEERAGGROUPPINIONSTEERAG1QF_GENQF1_TMPUNDEFDDATA = 1;
    PINIONSTEERAGGROUPPINIONSTEERAG1QF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    PINIONSTEERAGGROUPPINIONSTEERAG1QF_GENQF1_ACCURDATA = 3;
  }
  enum PinionSteerAgGroupPinionSteerAgSpd1QfType {
    PINIONSTEERAGGROUPPINIONSTEERAGSPD1QF_GENQF1_UNDEFINDDATAACCUR = 0;
    PINIONSTEERAGGROUPPINIONSTEERAGSPD1QF_GENQF1_TMPUNDEFDDATA = 1;
    PINIONSTEERAGGROUPPINIONSTEERAGSPD1QF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    PINIONSTEERAGGROUPPINIONSTEERAGSPD1QF_GENQF1_ACCURDATA = 3;
  }
  enum PinionSteerAgGroupSteerWhlTqQfType {
    PINIONSTEERAGGROUPSTEERWHLTQQF_GENQF1_UNDEFINDDATAACCUR = 0;
    PINIONSTEERAGGROUPSTEERWHLTQQF_GENQF1_TMPUNDEFDDATA = 1;
    PINIONSTEERAGGROUPSTEERWHLTQQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    PINIONSTEERAGGROUPSTEERWHLTQQF_GENQF1_ACCURDATA = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool pinion_steer_ag_group_ub = 1;
  // description Checksum for PinionSteerAgGroup [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 pinion_steer_ag_group_chks = 2;
  // description Counter for PinionSteerAgGroup [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 pinion_steer_ag_group_cntr = 3;
  // description Calculated pinion steer angle at the front steering device [rad] [-14.5|14.5] [initial_value:0]
  optional double pinion_steer_ag_group_pinion_steer_ag1 = 4;
  // description Quality factor for PinionSteerAg1 [] [0|3] [initial_value:1]
  optional PinionSteerAgGroupPinionSteerAg1QfType pinion_steer_ag_group_pinion_steer_ag1_qf = 5;
  // description Calculated pinion steer angle speed at the front steering device  [rad/s] [-50.0|50.0] [initial_value:0]
  optional double pinion_steer_ag_group_pinion_steer_ag_spd1 = 6;
  // description Quality factor for PinionSteerAgSpd1 [] [0|3] [initial_value:1]
  optional PinionSteerAgGroupPinionSteerAgSpd1QfType pinion_steer_ag_group_pinion_steer_ag_spd1_qf = 7;
  // description Torque on steering wheel [NewtonMeter] [-30.0|30.0] [initial_value:0]
  optional double pinion_steer_ag_group_steer_whl_tq = 8;
  // description Quality factor for SteerWhlTq [] [0|3] [initial_value:1]
  optional PinionSteerAgGroupSteerWhlTqQfType pinion_steer_ag_group_steer_whl_tq_qf = 9;
}

message ASDM_CHAS1_NM_FR_529 {
// Control Message
  // [] [0|0] [initial_value:None]
  optional bool pnc23_asdm = 1;
  // [] [0|0] [initial_value:None]
  optional bool pnc25_asdm = 2;
  // [] [0|0] [initial_value:None]
  optional bool pnc29_asdm = 3;
  // [] [0|0] [initial_value:None]
  optional bool pnc36_asdm = 4;
  // [] [0|0] [initial_value:None]
  optional bool pnc38_asdm = 5;
  // [] [0|0] [initial_value:None]
  optional bool nm_pni_asdm = 6;
  // [] [0|0] [initial_value:None]
  optional bool nm_aw_asdm = 7;
  // [] [0|0] [initial_value:None]
  optional bool nm_cs_asdm = 8;
  // [] [0|0] [initial_value:None]
  optional bool nm_rmr_asdm = 9;
  // [] [0|0] [initial_value:None]
  optional uint32 nm_node_id_asdm = 10;
}

message ASDM_CHAS1_FR10_54 {
// Control Message
  enum AESCtrlReqAESCtrlReqType {
    AESCTRLREQAESCTRLREQ_AESCTRLREQ_NOREQUEST = 0;
    AESCTRLREQAESCTRLREQ_AESCTRLREQ_RESERVED1 = 1;
    AESCTRLREQAESCTRLREQ_AESCTRLREQ_RESERVED2 = 2;
    AESCTRLREQAESCTRLREQ_AESCTRLREQ_REQUESTWITHAES = 3;
  }
  enum AsyD2DModeD2DModeType {
    ASYD2DMODED2DMODE_ASYD2DMODE_NAD = 0;
    ASYD2DMODED2DMODE_ASYD2DMODE_HNOA = 1;
    ASYD2DMODED2DMODE_ASYD2DMODE_UNOA = 2;
    ASYD2DMODED2DMODE_ASYD2DMODE_HPACRUISEGROUND = 3;
    ASYD2DMODED2DMODE_ASYD2DMODE_HPACRUISEUNDERGROUND = 4;
    ASYD2DMODED2DMODE_ASYD2DMODE_HPAPARKING = 5;
    ASYD2DMODED2DMODE_ASYD2DMODE_APA = 6;
    ASYD2DMODED2DMODE_ASYD2DMODE_RESERVED = 7;
  }
  // [] [0|1] [initial_value:None]
  optional bool aes_ctrl_req_ub = 1;
  // description AES function steering control handshake request [] [0|3] [initial_value:0]
  optional AESCtrlReqAESCtrlReqType aes_ctrl_req_aes_ctrl_req = 2;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 aes_ctrl_req_chks = 3;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 aes_ctrl_req_cntr = 4;
  // [] [0|1] [initial_value:None]
  optional bool asy_d2_d_mode_ub = 5;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 asy_d2_d_mode_chks = 6;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_d2_d_mode_cntr = 7;
  // description Describe D2D Ctrl Mode = HNOA\UNOA\HPA\APA [] [0|15] [initial_value:0]
  optional AsyD2DModeD2DModeType asy_d2_d_mode_d2_d_mode = 8;
}

message ADCU_CHAS1_VFC_VECTOR_FR_569 {
// Control Message
  // description BlockID [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 vfc_vector_adcu_block_id = 1;
  // description SettingsComfort [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid0 = 2;
  // description ParkingDrivingClimatization [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid1 = 3;
  // description ExteriorLighting [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid10 = 4;
  // description VFCid11 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid11 = 5;
  // description Alarm [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid12 = 6;
  // description VFCid13 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid13 = 7;
  // description InteriorLighting [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid14 = 8;
  // description VFCid15 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid15 = 9;
  // description Locking [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid16 = 10;
  // description RemoteKeyFunctionality [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid17 = 11;
  // description PropulsionStart [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid18 = 12;
  // description VFCid19 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid19 = 13;
  // description PostClimatisation [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid2 = 14;
  // description VFCid20 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid20 = 15;
  // description PowerClosures [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid21 = 16;
  // description VehicleDriving [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid22 = 17;
  // description VFCid23 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid23 = 18;
  // description SettingsProfile [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid24 = 19;
  // description SeatComfortFunctions [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid25 = 20;
  // description Brake [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid26 = 21;
  // description InfotainmentPoll [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid27 = 22;
  // description HVEnergyStorage [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid28 = 23;
  // description VFCid29 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid29 = 24;
  // description PowertrainParkingClimatization [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid3 = 25;
  // description TelematicsConnectivity [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid30 = 26;
  // description VFCid31 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid31 = 27;
  // description VFCid32 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid32 = 28;
  // description Diagnostics [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid33 = 29;
  // description VehicleModeManagement [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid34 = 30;
  // description TrailerCaravanFunctions [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid35 = 31;
  // description Immobilizer [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid36 = 32;
  // description Windows [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid37 = 33;
  // description Visibility [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid38 = 34;
  // description VFCid39 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid39 = 35;
  // description VFCid4 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid4 = 36;
  // description VFCid40 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid40 = 37;
  // description InfotainmentPush [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid41 = 38;
  // description ChargingHV [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid42 = 39;
  // description BodyPreClimatisation [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid43 = 40;
  // description Crash [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid44 = 41;
  // description GlobalShortDuration [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid45 = 42;
  // description ExteriorLightsHazard [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid46 = 43;
  // description VFCid47 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid47 = 44;
  // description DoorOpenWarning [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid48 = 45;
  // description ChargingLVInit [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid49 = 46;
  // description VFCid5 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid5 = 47;
  // description VFCid50 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid50 = 48;
  // description VFCid51 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid51 = 49;
  // description HVBatteryThermalEventWarning [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid52 = 50;
  // description VisualAssist [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid53 = 51;
  // description PassiveSafety [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid54 = 52;
  // description LifeDetection [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid55 = 53;
  // description BackboneFlexray [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid56 = 54;
  // description Functionmarket [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid57 = 55;
  // description VFCid58 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid58 = 56;
  // description VFCid59 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid59 = 57;
  // description SettingsVehicle [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid6 = 58;
  // description VFCid60 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid60 = 59;
  // description VFCid61 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid61 = 60;
  // description VFCid7 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid7 = 61;
  // description VFCid8 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid8 = 62;
  // description IPWakeup [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid9 = 63;
}

message VDCU_IEM_CHAS1_FR02_57 {
// Report Message
  enum GVMCVehCtrlrStsCtrlrStsType {
    GVMCVEHCTRLRSTSCTRLRSTS_GVMCVEHCTRLRSTS2_INIT = 0;
    GVMCVEHCTRLRSTSCTRLRSTS_GVMCVEHCTRLRSTS2_ENABLED = 1;
    GVMCVEHCTRLRSTSCTRLRSTS_GVMCVEHCTRLRSTS2_DISABLED = 2;
    GVMCVEHCTRLRSTSCTRLRSTS_GVMCVEHCTRLRSTS2_RWSDISABLED = 3;
    GVMCVEHCTRLRSTSCTRLRSTS_GVMCVEHCTRLRSTS2_DISABLEDWITHERROR = 4;
    GVMCVEHCTRLRSTSCTRLRSTS_GVMCVEHCTRLRSTS2_RWSDISABLEDWITHERROR = 5;
    GVMCVEHCTRLRSTSCTRLRSTS_GVMCVEHCTRLRSTS2_TORQUEDISTRIBUTIONDISABLEDWITHERROR = 6;
    GVMCVEHCTRLRSTSCTRLRSTS_GVMCVEHCTRLRSTS2_BRAKETORQUECONTROLDISABLEDWITHERROR = 7;
    GVMCVEHCTRLRSTSCTRLRSTS_GVMCVEHCTRLRSTS2_VMCYAWTORQUECONTROLDEGRADED = 8;
    GVMCVEHCTRLRSTSCTRLRSTS_GVMCVEHCTRLRSTS2_SUSPENSIONDEGRADE = 9;
    GVMCVEHCTRLRSTSCTRLRSTS_GVMCVEHCTRLRSTS2_ENTERTOBOTH8AND9DEGRADATIONSTATUS = 10;
    GVMCVEHCTRLRSTSCTRLRSTS_GVMCVEHCTRLRSTS2_NOTAVAILABLEFORPILOT = 11;
    GVMCVEHCTRLRSTSCTRLRSTS_GVMCVEHCTRLRSTS2_NOTAVAILABLEFORCRABMOV_LOWSPDSTR_TANKTURN = 12;
    GVMCVEHCTRLRSTSCTRLRSTS_GVMCVEHCTRLRSTS2_ENTERTOBOTH11AND12 = 13;
    GVMCVEHCTRLRSTSCTRLRSTS_GVMCVEHCTRLRSTS2_GVMCOFF = 14;
    GVMCVEHCTRLRSTSCTRLRSTS_GVMCVEHCTRLRSTS2_RESD = 15;
  }
  // [] [0|1] [initial_value:None]
  optional bool gvmc_veh_ctrlr_sts_ub = 1;
  // description GVMC vehicle controler Status Chks [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 gvmc_veh_ctrlr_sts_chks = 2;
  // description GVMC vehicle controler Status Cntr [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 gvmc_veh_ctrlr_sts_cntr = 3;
  // description GVMC vehicle control status [] [0|255] [initial_value:0]
  optional GVMCVehCtrlrStsCtrlrStsType gvmc_veh_ctrlr_sts_ctrlr_sts = 4;
}

message IEM_CHAS1_FR01_76 {
// Report Message
  enum TankTrunLockWhlAndRotDirType {
    TANKTRUNLOCKWHLANDROTDIR_TANKTRUNLOCKWHLANDROTDIR_UNLOCK = 0;
    TANKTRUNLOCKWHLANDROTDIR_TANKTRUNLOCKWHLANDROTDIR_LOCKLFANDTURNLEFT = 1;
    TANKTRUNLOCKWHLANDROTDIR_TANKTRUNLOCKWHLANDROTDIR_LOCKLFANDTURNRIGHT = 2;
    TANKTRUNLOCKWHLANDROTDIR_TANKTRUNLOCKWHLANDROTDIR_LOCKRFANDTURNLEFT = 3;
    TANKTRUNLOCKWHLANDROTDIR_TANKTRUNLOCKWHLANDROTDIR_LOCKRFANDTURNRIGHT = 4;
    TANKTRUNLOCKWHLANDROTDIR_TANKTRUNLOCKWHLANDROTDIR_LOCKLRANDTURNLEFT = 5;
    TANKTRUNLOCKWHLANDROTDIR_TANKTRUNLOCKWHLANDROTDIR_LOCKLRANDTURNRIGHT = 6;
    TANKTRUNLOCKWHLANDROTDIR_TANKTRUNLOCKWHLANDROTDIR_LOCKRRANDTURNLEFT = 7;
    TANKTRUNLOCKWHLANDROTDIR_TANKTRUNLOCKWHLANDROTDIR_LOCKRRANDTURNRIGHT = 8;
  }
  // description TankTurn actual wheel lock status and turn direction. [] [0|15] [initial_value:0]
  optional TankTrunLockWhlAndRotDirType tank_trun_lock_whl_and_rot_dir = 1;
  // [] [0|1] [initial_value:None]
  optional bool tank_trun_lock_whl_and_rot_dir_ub = 2;
}

message VDDM_CHAS1_FR24_89 {
// Report Message
  enum WhlFastSpdSafeQFType {
    WHLFASTSPDSAFEQF_GENQF1_UNDEFINDDATAACCUR = 0;
    WHLFASTSPDSAFEQF_GENQF1_TMPUNDEFDDATA = 1;
    WHLFASTSPDSAFEQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    WHLFASTSPDSAFEQF_GENQF1_ACCURDATA = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool whl_fast_spd_safe_ub = 1;
  // description Vehicle speed longitudinal based on wheel speed sensors and longitudinal acceleration. [m/s] [0.0|125.0027] [initial_value:0]
  optional double whl_fast_spd_safe_a = 2;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 whl_fast_spd_safe_chks = 3;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 whl_fast_spd_safe_cntr = 4;
  // description Quality factor for vehicle speed as measured by wheel speed sensors and longitudinal acceleration. [] [0|3] [initial_value:1]
  optional WhlFastSpdSafeQFType whl_fast_spd_safe_qf = 5;
}

message ASDM_CHAS1_FR01_93 {
// Control Message
  enum AsyADL3FuncCtrlStsADModType {
    ASYADL3FUNCCTRLSTSADMOD_ADMOD_NAD_MOD = 0;
    ASYADL3FUNCCTRLSTSADMOD_ADMOD_TJP_HWC = 1;
    ASYADL3FUNCCTRLSTSADMOD_ADMOD_NOP = 2;
    ASYADL3FUNCCTRLSTSADMOD_ADMOD_E2E = 3;
  }
  enum AsyADL3FuncCtrlStsQfType {
    ASYADL3FUNCCTRLSTSQF_GENQF1_UNDEFINDDATAACCUR = 0;
    ASYADL3FUNCCTRLSTSQF_GENQF1_TMPUNDEFDDATA = 1;
    ASYADL3FUNCCTRLSTSQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    ASYADL3FUNCCTRLSTSQF_GENQF1_ACCURDATA = 3;
  }
  enum AsyADL3FuncCtrlStsStsType {
    ASYADL3FUNCCTRLSTSSTS_COLORSTS_RED = 0;
    ASYADL3FUNCCTRLSTSSTS_COLORSTS_YELLOW = 1;
    ASYADL3FUNCCTRLSTSSTS_COLORSTS_GREEN = 2;
    ASYADL3FUNCCTRLSTSSTS_COLORSTS_RESERVED = 3;
  }
  enum AsyADModeReqADActiveReqType {
    ASYADMODEREQADACTIVEREQ_ADMOD_NAD_MOD = 0;
    ASYADMODEREQADACTIVEREQ_ADMOD_TJP_HWC = 1;
    ASYADMODEREQADACTIVEREQ_ADMOD_NOP = 2;
    ASYADMODEREQADACTIVEREQ_ADMOD_E2E = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool asy_adl3_func_ctrl_sts_ub = 1;
  // description ADMod [] [0|3] [initial_value:0]
  optional AsyADL3FuncCtrlStsADModType asy_adl3_func_ctrl_sts_ad_mod = 2;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 asy_adl3_func_ctrl_sts_chks = 3;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_adl3_func_ctrl_sts_cntr = 4;
  // description CtrlSts [] [0|1] [initial_value:0]
  optional bool asy_adl3_func_ctrl_sts_ctrl_sts = 5;
  // description Degraded [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_adl3_func_ctrl_sts_degraded = 6;
  // description Qf [] [0|3] [initial_value:0]
  optional AsyADL3FuncCtrlStsQfType asy_adl3_func_ctrl_sts_qf = 7;
  // description Status [] [0|3] [initial_value:0]
  optional AsyADL3FuncCtrlStsStsType asy_adl3_func_ctrl_sts_sts = 8;
  // [] [0|1] [initial_value:None]
  optional bool asy_ad_mode_req_ub = 9;
  // description ADActiveRequest [] [0|3] [initial_value:0]
  optional AsyADModeReqADActiveReqType asy_ad_mode_req_ad_active_req = 10;
  // description AD Deactive Request [] [0|1] [initial_value:0]
  optional bool asy_ad_mode_req_ad_deactive_req = 11;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 asy_ad_mode_req_chks = 12;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_ad_mode_req_cntr = 13;
  // description Let the relative subsystem to know, the vehicle is stopped by AEB, and now the vehicle need to keep standstill. [] [0|1] [initial_value:0]
  optional bool asy_sfty_stand_still_req = 14;
  // [] [0|1] [initial_value:None]
  optional bool asy_sfty_stand_still_req_ub = 15;
  // description Parking function. [] [0|1] [initial_value:0]
  optional bool pas_func_active = 16;
  // [] [0|1] [initial_value:None]
  optional bool pas_func_active_ub = 17;
  // [] [0|1] [initial_value:0]
  optional bool rcta_brk_req_qm = 18;
  // [] [0|1] [initial_value:None]
  optional bool rcta_brk_req_qm_ub = 19;
  // description Indicating RCW braking request is committed. This signal complies with QM. [] [0|1] [initial_value:0]
  optional bool rcwm_brk_req_qm = 20;
  // [] [0|1] [initial_value:None]
  optional bool rcwm_brk_req_qm_ub = 21;
}

message PAS_CHAS1_FR04_95 {
// Control Message
  // [] [0|1] [initial_value:None]
  optional bool prkg_gear_req_group_ub = 1;
  // description counter [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 prkg_gear_req_group_chks = 2;
  // description checksum [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 prkg_gear_req_group_cntr = 3;
  // description After selecting the RPA and before the handshake is successful, the PAS requests to suspend the P file to pull up the EPB [] [0|1] [initial_value:0]
  optional bool prkg_gear_req_group_req_sts1 = 4;
}

message BCM_CHAS1_FR09_B9 {
// Report Message
  enum ALgtStdFromWhlSpdQfType {
    ALGTSTDFROMWHLSPDQF_GENQF1_UNDEFINDDATAACCUR = 0;
    ALGTSTDFROMWHLSPDQF_GENQF1_TMPUNDEFDDATA = 1;
    ALGTSTDFROMWHLSPDQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    ALGTSTDFROMWHLSPDQF_GENQF1_ACCURDATA = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool a_lgt_std_from_whl_spd_ub = 1;
  // [m/s^2] [-18.0|18.0] [initial_value:0]
  optional double a_lgt_std_from_whl_spd_a_lgt_std_from_whl_spd = 2;
  // [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 a_lgt_std_from_whl_spd_chks = 3;
  // [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 a_lgt_std_from_whl_spd_cntr = 4;
  // [] [0|3] [initial_value:1]
  optional ALgtStdFromWhlSpdQfType a_lgt_std_from_whl_spd_qf = 5;
}

message PAS_CHAS1_FR02_EB {
// Control Message
  enum PrkgPinionAgReqGroupQFType {
    PRKGPINIONAGREQGROUPQF_GENQF1_UNDEFINDDATAACCUR = 0;
    PRKGPINIONAGREQGROUPQF_GENQF1_TMPUNDEFDDATA = 1;
    PRKGPINIONAGREQGROUPQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    PRKGPINIONAGREQGROUPQF_GENQF1_ACCURDATA = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool prkg_pinion_ag_req_group_ub = 1;
  // description The requested steering pinion angle by the autonomous parking system. [rad] [-14.5|17.499039821] [initial_value:14847]
  optional double prkg_pinion_ag_req_group_park_assi_pinion_ag_req = 2;
  // description counter,For E2E Protection [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 prkg_pinion_ag_req_group_park_assi_pinion_ag_req_chks = 3;
  // description CRC,to check the signal,For E2E Protection [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 prkg_pinion_ag_req_group_park_assi_pinion_ag_req_cntr = 4;
  // description QF [] [0|3] [initial_value:1]
  optional PrkgPinionAgReqGroupQFType prkg_pinion_ag_req_group_qf = 5;
  // [] [0|1] [initial_value:None]
  optional bool uturn_trq_rels_ub = 6;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 uturn_trq_rels_chks = 7;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 uturn_trq_rels_cntr = 8;
  // description Describes whether the current lateral control request is in U-turn mode. [] [0|1] [initial_value:0]
  optional bool uturn_trq_rels_uturn_trq_rels = 9;
}

message PSCM_CHAS1_FR01_F6 {
// Report Message
  enum ADL3LatCtrlStsADModType {
    ADL3LATCTRLSTSADMOD_ADMOD_NAD_MOD = 0;
    ADL3LATCTRLSTSADMOD_ADMOD_TJP_HWC = 1;
    ADL3LATCTRLSTSADMOD_ADMOD_NOP = 2;
    ADL3LATCTRLSTSADMOD_ADMOD_E2E = 3;
  }
  enum ADL3LatCtrlStsDegradedType {
    ADL3LATCTRLSTSDEGRADED_LATDEGRAD_NODEGRADATION_GREEN = 0;
    ADL3LATCTRLSTSDEGRADED_LATDEGRAD_RED_FAULT1 = 1;
    ADL3LATCTRLSTSDEGRADED_LATDEGRAD_YELLOW_FAULT2 = 2;
    ADL3LATCTRLSTSDEGRADED_LATDEGRAD_YELLOW_FAULT3 = 3;
    ADL3LATCTRLSTSDEGRADED_LATDEGRAD_YELLOW_FAULT4 = 4;
    ADL3LATCTRLSTSDEGRADED_LATDEGRAD_YELLOW_FAULT5 = 5;
    ADL3LATCTRLSTSDEGRADED_LATDEGRAD_YELLOW_FAULT6 = 6;
    ADL3LATCTRLSTSDEGRADED_LATDEGRAD_YELLOW_FAULT7 = 7;
    ADL3LATCTRLSTSDEGRADED_LATDEGRAD_YELLOW_FAULT8 = 8;
    ADL3LATCTRLSTSDEGRADED_LATDEGRAD_YELLOW_FAULT9 = 9;
    ADL3LATCTRLSTSDEGRADED_LATDEGRAD_YELLOW_FAULT10 = 10;
    ADL3LATCTRLSTSDEGRADED_LATDEGRAD_RESERVED1 = 11;
  }
  enum ADL3LatCtrlStsQfType {
    ADL3LATCTRLSTSQF_GENQF1_UNDEFINDDATAACCUR = 0;
    ADL3LATCTRLSTSQF_GENQF1_TMPUNDEFDDATA = 1;
    ADL3LATCTRLSTSQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    ADL3LATCTRLSTSQF_GENQF1_ACCURDATA = 3;
  }
  enum ADL3LatCtrlStsStsType {
    ADL3LATCTRLSTSSTS_COLORSTS_RED = 0;
    ADL3LATCTRLSTSSTS_COLORSTS_YELLOW = 1;
    ADL3LATCTRLSTSSTS_COLORSTS_GREEN = 2;
    ADL3LATCTRLSTSSTS_COLORSTS_RESERVED = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool adl3_lat_ctrl_sts_ub = 1;
  // description Steering system AD mode status [] [0|3] [initial_value:0]
  optional ADL3LatCtrlStsADModType adl3_lat_ctrl_sts_ad_mod = 2;
  // description Counter of the signal group [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 adl3_lat_ctrl_sts_chks = 3;
  // description Counter of the signal group [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 adl3_lat_ctrl_sts_cntr = 4;
  // description Inform to AD systems which Channel (Primary/Secondary) signals is being used [] [0|1] [initial_value:0]
  optional bool adl3_lat_ctrl_sts_ctrl_sts = 5;
  // description degraded [] [0|15] [initial_value:0]
  optional ADL3LatCtrlStsDegradedType adl3_lat_ctrl_sts_degraded = 6;
  // description quality factor [] [0|3] [initial_value:0]
  optional ADL3LatCtrlStsQfType adl3_lat_ctrl_sts_qf = 7;
  // description - Green (2)- Full TJP function, neither input signal nor ECU internal error - Yellow (1)- TJP function but with minor error-  Red (0) - One or more Channel (Primary /Secondary) cant implement TJP for internal ECU or input signal error [] [0|3] [initial_value:0]
  optional ADL3LatCtrlStsStsType adl3_lat_ctrl_sts_sts = 8;
  // [] [0|1] [initial_value:None]
  optional bool drvr_steer_actv_ub = 9;
  // description Confirmation of driver steer actively Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 drvr_steer_actv_chks = 10;
  // description Confirmation of driver steer actively Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 drvr_steer_actv_cntr = 11;
  // description Indicates if the driver steers actively [] [0|1] [initial_value:0]
  optional bool drvr_steer_actv_drvr_steer_actv = 12;
}

message ADCU_ZCUCANFD1_FR33_100 {
// Control Message
  enum AD4IMUStatIMUStatType {
    AD4IMUSTATIMUSTAT_IMUSTAT_NORMAL = 0;
    AD4IMUSTATIMUSTAT_IMUSTAT_SENSORERROR = 1;
    AD4IMUSTATIMUSTAT_IMUSTAT_RESERVED1 = 2;
    AD4IMUSTATIMUSTAT_IMUSTAT_RESERVED2 = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool ad4_imu_acce_x_ub = 1;
  // description IMU(vehicle) acceleration of X [g] [-10.0|10.0] [initial_value:0]
  optional double ad4_imu_acce_x_acce = 2;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_imu_acce_x_chks = 3;
  // description count [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_acce_x_cntr = 4;
  // description Simultaneous number identification  [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_acce_x_head = 5;
  // [] [0|1] [initial_value:None]
  optional bool ad4_imu_acce_y_ub = 6;
  // description IMU(vehicle) acceleration of Y [g] [-10.0|10.0] [initial_value:0]
  optional double ad4_imu_acce_y_acce = 7;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_imu_acce_y_chks = 8;
  // description count [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_acce_y_cntr = 9;
  // description Simultaneous number identification  [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_acce_y_head = 10;
  // [] [0|1] [initial_value:None]
  optional bool ad4_imu_acce_z_ub = 11;
  // description IMU(vehicle) acceleration of Z [g] [-10.0|10.0] [initial_value:0]
  optional double ad4_imu_acce_z_acce = 12;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_imu_acce_z_chks = 13;
  // description count [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_acce_z_cntr = 14;
  // description Simultaneous number identification  [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_acce_z_head = 15;
  // [] [0|1] [initial_value:None]
  optional bool ad4_imu_gyro_x_ub = 16;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_imu_gyro_x_chks = 17;
  // description count [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_gyro_x_cntr = 18;
  // description IMU(vehicle) gyroscope of X [DegPerSec] [-500.0|500.0] [initial_value:0]
  optional double ad4_imu_gyro_x_gyro = 19;
  // description Simultaneous number identification  [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_gyro_x_head = 20;
  // [] [0|1] [initial_value:None]
  optional bool ad4_imu_gyro_y_ub = 21;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_imu_gyro_y_chks = 22;
  // description count [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_gyro_y_cntr = 23;
  // description IMU(vehicle) gyroscope of Y [DegPerSec] [-500.0|500.0] [initial_value:0]
  optional double ad4_imu_gyro_y_gyro = 24;
  // description Simultaneous number identification  [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_gyro_y_head = 25;
  // [] [0|1] [initial_value:None]
  optional bool ad4_imu_gyro_z_ub = 26;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_imu_gyro_z_chks = 27;
  // description count [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_gyro_z_cntr = 28;
  // description IMU(vehicle) gyroscope of Z [DegPerSec] [-500.0|500.0] [initial_value:0]
  optional double ad4_imu_gyro_z_gyro = 29;
  // description Simultaneous number identification  [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_gyro_z_head = 30;
  // [] [0|1] [initial_value:None]
  optional bool ad4_imu_stat_ub = 31;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_imu_stat_chks = 32;
  // description count [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_stat_cntr = 33;
  // description Simultaneous number identification  [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_imu_stat_head = 34;
  // description IMU(vehicle)  status [] [0|3] [initial_value:0]
  optional AD4IMUStatIMUStatType ad4_imu_stat_imu_stat = 35;
  // description IMU temperature [degC] [-50.0|150.0] [initial_value:0]
  optional double ad4_imu_stat_imu_temp = 36;
}

message BCM_ZCUCANFD1_FR01_101 {
// Report Message
  enum AsyALgtCtrlModCfmdAsyALgtCtrlMod1Type {
    ASYALGTCTRLMODCFMDASYALGTCTRLMOD1_ASYALGTCTRLMOD_NOREQ = 0;
    ASYALGTCTRLMODCFMDASYALGTCTRLMOD1_ASYALGTCTRLMOD_PEB = 10;
    ASYALGTCTRLMODCFMDASYALGTCTRLMOD1_ASYALGTCTRLMOD_APA = 11;
    ASYALGTCTRLMODCFMDASYALGTCTRLMOD1_ASYALGTCTRLMOD_RPA = 12;
    ASYALGTCTRLMODCFMDASYALGTCTRLMOD1_ASYALGTCTRLMOD_HPA = 13;
  }
  enum FricEstimnFromVehDynQlyType {
    FRICESTIMNFROMVEHDYNQLY_QLY3_DE0 = 0;
    FRICESTIMNFROMVEHDYNQLY_QLY3_DE1 = 1;
    FRICESTIMNFROMVEHDYNQLY_QLY3_DE2 = 2;
    FRICESTIMNFROMVEHDYNQLY_QLY3_DE3 = 3;
    FRICESTIMNFROMVEHDYNQLY_QLY3_DE4 = 4;
    FRICESTIMNFROMVEHDYNQLY_QLY3_DE5 = 5;
    FRICESTIMNFROMVEHDYNQLY_QLY3_DE6 = 6;
    FRICESTIMNFROMVEHDYNQLY_QLY3_DE7 = 7;
  }
  // [] [0|1] [initial_value:None]
  optional bool abs_ctrl_actv_ub = 1;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 abs_ctrl_actv_chks = 2;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 abs_ctrl_actv_cntr = 3;
  // [] [0|1] [initial_value:0]
  optional bool abs_ctrl_actv_ctrl_sts1 = 4;
  // [] [0|1] [initial_value:None]
  optional bool asy_a_lgt_ctrl_mod_cfmd_ub = 5;
  // description to feedback the confirmation of AsyALgtCtrlMod [] [0|15] [initial_value:0]
  optional AsyALgtCtrlModCfmdAsyALgtCtrlMod1Type asy_a_lgt_ctrl_mod_cfmd_asy_a_lgt_ctrl_mod1 = 6;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 asy_a_lgt_ctrl_mod_cfmd_chks = 7;
  // description rollingcounter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_a_lgt_ctrl_mod_cfmd_cntr = 8;
  // [] [0|1] [initial_value:None]
  optional bool brk_fric_tq_at_whl_act_ub = 9;
  // description Actual service brake torque for each wheel. Brake torque acting on the front left wheel. Based on nominal brake parameters (e.g. constant pads friction) and (estimated) brake pressures (clamp forces). Not included: parking brake torque or regenerative brake torque. [Nm] [0.0|8191.0] [initial_value:0]
  optional uint32 brk_fric_tq_at_whl_act_brk_fric_tq_at_whl_frnt_le_act = 10;
  // description Actual service brake torque for each wheel. Brake torque acting on the front right wheel. Based on nominal brake parameters (e.g. constant pads friction) and (estimated) brake pressures (clamp forces). Not included: parking brake torque or regenerative brake torque. [Nm] [0.0|8191.0] [initial_value:0]
  optional uint32 brk_fric_tq_at_whl_act_brk_fric_tq_at_whl_frnt_ri_act = 11;
  // description Actual service brake torque for each wheel. Brake torque acting on the rear left wheel. Based on nominal brake parameters (e.g. constant pads friction) and (estimated) brake pressures (clamp forces). Not included: parking brake torque or regenerative brake torque. [Nm] [0.0|8191.0] [initial_value:0]
  optional uint32 brk_fric_tq_at_whl_act_brk_fric_tq_at_whl_re_le_act = 12;
  // description Actual service brake torque for each wheel. Brake torque acting on the rear right wheel. Based on nominal brake parameters (e.g. constant pads friction) and (estimated) brake pressures (clamp forces). Not included: parking brake torque or regenerative brake torque. [Nm] [0.0|8191.0] [initial_value:0]
  optional uint32 brk_fric_tq_at_whl_act_brk_fric_tq_at_whl_re_ri_act = 13;
  // [] [0|1] [initial_value:None]
  optional bool fric_estimn_from_veh_dyn_ub = 14;
  // description momentary friction estimate [Unitless] [0.0|2.0] [initial_value:0]
  optional double fric_estimn_from_veh_dyn_fric_estimn_from_veh_dyn = 15;
  // description quality of momentary friction estimate [] [0|7] [initial_value:1]
  optional FricEstimnFromVehDynQlyType fric_estimn_from_veh_dyn_qly = 16;
}

message ZCUD_ZCUCANFD1_FR02_105 {
// Report Message
  enum AlrmStsAlrmStType {
    ALRMSTSALRMST_ALRMST_DISARMD = 0;
    ALRMSTSALRMST_ALRMST_ARMD = 1;
    ALRMSTSALRMST_ALRMST_ACTV = 2;
  }
  enum AlrmStsAlrmTrgSrcType {
    ALRMSTSALRMTRGSRC_ALRMTRGSRC_NOTRIGSRC = 0;
    ALRMSTSALRMTRGSRC_ALRMTRGSRC_SNSRSOUNDRBATTBACKED = 1;
    ALRMSTSALRMTRGSRC_ALRMTRGSRC_SNSRINCLN = 2;
    ALRMSTSALRMTRGSRC_ALRMTRGSRC_SNSRINTRSCANR = 3;
    ALRMSTSALRMTRGSRC_ALRMTRGSRC_HOOD = 4;
    ALRMSTSALRMTRGSRC_ALRMTRGSRC_TR = 5;
    ALRMSTSALRMTRGSRC_ALRMTRGSRC_DOORDRVR = 6;
    ALRMSTSALRMTRGSRC_ALRMTRGSRC_DOORPASS = 7;
    ALRMSTSALRMTRGSRC_ALRMTRGSRC_DOORRELE = 8;
    ALRMSTSALRMTRGSRC_ALRMTRGSRC_DOORRERI = 9;
    ALRMSTSALRMTRGSRC_ALRMTRGSRC_VEHIMOBNINVLD = 10;
    ALRMSTSALRMTRGSRC_ALRMTRGSRC_VSTD = 11;
    ALRMSTSALRMTRGSRC_ALRMTRGSRC_ALCOLOCH = 12;
  }
  enum CrabMovModStsTankTurnModStsType {
    CRABMOVMODSTSTANKTURNMODSTS_TURNMODSTS_OFF = 0;
    CRABMOVMODSTSTANKTURNMODSTS_TURNMODSTS_STANDBY = 1;
    CRABMOVMODSTSTANKTURNMODSTS_TURNMODSTS_READY = 2;
    CRABMOVMODSTSTANKTURNMODSTS_TURNMODSTS_ACTIVE = 3;
  }
  enum DoorDrvrStsType {
    DOORDRVRSTS_DOORSTS2_UKWN = 0;
    DOORDRVRSTS_DOORSTS2_OPEND = 1;
    DOORDRVRSTS_DOORSTS2_CLSD = 2;
  }
  enum DoorDrvrStsWithFacQlyDoorStsType {
    DOORDRVRSTSWITHFACQLYDOORSTS_DOORSTS2_UKWN = 0;
    DOORDRVRSTSWITHFACQLYDOORSTS_DOORSTS2_OPEND = 1;
    DOORDRVRSTSWITHFACQLYDOORSTS_DOORSTS2_CLSD = 2;
  }
  enum DoorDrvrStsWithFacQlyFacQlyType {
    DOORDRVRSTSWITHFACQLYFACQLY_GENQF1_UNDEFINDDATAACCUR = 0;
    DOORDRVRSTSWITHFACQLYFACQLY_GENQF1_TMPUNDEFDDATA = 1;
    DOORDRVRSTSWITHFACQLYFACQLY_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    DOORDRVRSTSWITHFACQLYFACQLY_GENQF1_ACCURDATA = 3;
  }
  enum DoorLeReStsType {
    DOORLERESTS_DOORSTS2_UKWN = 0;
    DOORLERESTS_DOORSTS2_OPEND = 1;
    DOORLERESTS_DOORSTS2_CLSD = 2;
  }
  enum DoorPassStsType {
    DOORPASSSTS_DOORSTS2_UKWN = 0;
    DOORPASSSTS_DOORSTS2_OPEND = 1;
    DOORPASSSTS_DOORSTS2_CLSD = 2;
  }
  enum DoorRiReStsType {
    DOORRIRESTS_DOORSTS2_UKWN = 0;
    DOORRIRESTS_DOORSTS2_OPEND = 1;
    DOORRIRESTS_DOORSTS2_CLSD = 2;
  }
  enum DrvrPrsntStsDrvrPrsntType {
    DRVRPRSNTSTSDRVRPRSNT_NOYESCRIT1_NOTVLD1 = 0;
    DRVRPRSNTSTSDRVRPRSNT_NOYESCRIT1_NO = 1;
    DRVRPRSNTSTSDRVRPRSNT_NOYESCRIT1_YES = 2;
    DRVRPRSNTSTSDRVRPRSNT_NOYESCRIT1_NOTVLD2 = 3;
  }
  enum DrvrPrsntStsDrvrPrsntQfType {
    DRVRPRSNTSTSDRVRPRSNTQF_QF1_DEVOFDATAUNDEFD = 0;
    DRVRPRSNTSTSDRVRPRSNTQF_QF1_DATATMPUNDEFDANDEVLNINPROGS = 1;
    DRVRPRSNTSTSDRVRPRSNTQF_QF1_DEVOFDATANOTWITHINRNGALLWD = 2;
    DRVRPRSNTSTSDRVRPRSNTQF_QF1_DATACALCDWITHDEVDEFD = 3;
  }
  enum GearLvrIndcnType {
    GEARLVRINDCN_GEARLVRINDCN2_PARKINDCN = 0;
    GEARLVRINDCN_GEARLVRINDCN2_RVSINDCN = 1;
    GEARLVRINDCN_GEARLVRINDCN2_NEUTINDCN = 2;
    GEARLVRINDCN_GEARLVRINDCN2_DRVINDCN = 3;
    GEARLVRINDCN_GEARLVRINDCN2_MANMODEINDCN = 4;
    GEARLVRINDCN_GEARLVRINDCN2_RESD1 = 5;
    GEARLVRINDCN_GEARLVRINDCN2_RESD2 = 6;
    GEARLVRINDCN_GEARLVRINDCN2_UNDEFD = 7;
  }
  enum GearMovType {
    GEARMOV_NOYESUNKNOWNYES_NO = 0;
    GEARMOV_NOYESUNKNOWNYES_YESNO = 1;
    GEARMOV_NOYESUNKNOWNYES_UNKNOWN = 2;
    GEARMOV_NOYESUNKNOWNYES_YESYES = 3;
  }
  enum HoodStsType {
    HOODSTS_DOORSTS2_UKWN = 0;
    HOODSTS_DOORSTS2_OPEND = 1;
    HOODSTS_DOORSTS2_CLSD = 2;
  }
  enum IndcrStsType {
    INDCRSTS_INDCRSTS1_OFF = 0;
    INDCRSTS_INDCRSTS1_LEON = 1;
    INDCRSTS_INDCRSTS1_RION = 2;
    INDCRSTS_INDCRSTS1_LEANDRION = 3;
  }
  enum LockgCenStsLockStType {
    LOCKGCENSTSLOCKST_LOCKST3_LOCKUNDEFD = 0;
    LOCKGCENSTSLOCKST_LOCKST3_LOCKUNLCKD = 1;
    LOCKGCENSTSLOCKST_LOCKST3_LOCKTRUNLCKD = 2;
    LOCKGCENSTSLOCKST_LOCKST3_LOCKLOCKD = 3;
  }
  enum LockgCenStsTrigSrcType {
    LOCKGCENSTSTRIGSRC_LOCKTRIGSRC2_NOTRIGSRC = 0;
    LOCKGCENSTSTRIGSRC_LOCKTRIGSRC2_KEYREM = 1;
    LOCKGCENSTSTRIGSRC_LOCKTRIGSRC2_KEYLS = 2;
    LOCKGCENSTSTRIGSRC_LOCKTRIGSRC2_INTRSWT = 3;
    LOCKGCENSTSTRIGSRC_LOCKTRIGSRC2_SPDAUT = 4;
    LOCKGCENSTSTRIGSRC_LOCKTRIGSRC2_TMRAUT = 5;
    LOCKGCENSTSTRIGSRC_LOCKTRIGSRC2_SLAM = 6;
    LOCKGCENSTSTRIGSRC_LOCKTRIGSRC2_TELM = 7;
    LOCKGCENSTSTRIGSRC_LOCKTRIGSRC2_CRASH = 8;
    LOCKGCENSTSTRIGSRC_LOCKTRIGSRC2_APPRCH = 9;
    LOCKGCENSTSTRIGSRC_LOCKTRIGSRC2_OUTSOTH = 10;
    LOCKGCENSTSTRIGSRC_LOCKTRIGSRC2_INSOTH = 11;
  }
  enum LvlgDirMovmtIndcrType {
    LVLGDIRMOVMTINDCR_TRIST1_NEGST = 0;
    LVLGDIRMOVMTINDCR_TRIST1_STABST = 1;
    LVLGDIRMOVMTINDCR_TRIST1_POSST = 2;
    LVLGDIRMOVMTINDCR_TRIST1_NOTUSED = 3;
  }
  enum MirrFoldStsAtDrvrType {
    MIRRFOLDSTSATDRVR_MIRRFOLDSTSTYP_MIRRFOLDPOSNUNDEFD = 0;
    MIRRFOLDSTSATDRVR_MIRRFOLDSTSTYP_MIRRNOTFOLDPOSN = 1;
    MIRRFOLDSTSATDRVR_MIRRFOLDSTSTYP_MIRRFOLDPOSN = 2;
    MIRRFOLDSTSATDRVR_MIRRFOLDSTSTYP_MIRRMOVGTONOTFOLD = 3;
    MIRRFOLDSTSATDRVR_MIRRFOLDSTSTYP_MIRRMOVGTOFOLD = 4;
  }
  enum PtBrkTqActTotQfType {
    PTBRKTQACTTOTQF_QF1_DEVOFDATAUNDEFD = 0;
    PTBRKTQACTTOTQF_QF1_DATATMPUNDEFDANDEVLNINPROGS = 1;
    PTBRKTQACTTOTQF_QF1_DEVOFDATANOTWITHINRNGALLWD = 2;
    PTBRKTQACTTOTQF_QF1_DATACALCDWITHDEVDEFD = 3;
  }
  enum PtBrkTqQfType {
    PTBRKTQQF_QF1_DEVOFDATAUNDEFD = 0;
    PTBRKTQQF_QF1_DATATMPUNDEFDANDEVLNINPROGS = 1;
    PTBRKTQQF_QF1_DEVOFDATANOTWITHINRNGALLWD = 2;
    PTBRKTQQF_QF1_DATACALCDWITHDEVDEFD = 3;
  }
  enum StsForRtrctrRvsbLeType {
    STSFORRTRCTRRVSBLE_NOTOKOK_NOTOK = 0;
    STSFORRTRCTRRVSBLE_NOTOKOK_OK = 1;
    STSFORRTRCTRRVSBLE_NOTOKOK_DI = 2;
    STSFORRTRCTRRVSBLE_NOTOKOK_RESD = 3;
  }
  enum StsForRtrctrRvsbRiType {
    STSFORRTRCTRRVSBRI_NOTOKOK_NOTOK = 0;
    STSFORRTRCTRRVSBRI_NOTOKOK_OK = 1;
    STSFORRTRCTRRVSBRI_NOTOKOK_DI = 2;
    STSFORRTRCTRRVSBRI_NOTOKOK_RESD = 3;
  }
  enum SunRoofPosnStsType {
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_POSNUKWN = 0;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_CLSFULL = 1;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN4 = 2;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN8 = 3;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN12 = 4;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN16 = 5;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN20 = 6;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN24 = 7;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN28 = 8;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN32 = 9;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN36 = 10;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN40 = 11;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN44 = 12;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN48 = 13;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN52 = 14;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN56 = 15;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN60 = 16;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN64 = 17;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN68 = 18;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN72 = 19;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN76 = 20;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN80 = 21;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN84 = 22;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN88 = 23;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN92 = 24;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_PERCOPEN96 = 25;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_OPENFULL = 26;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_RESD1 = 27;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_RESD2 = 28;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_RESD3 = 29;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_RESD4 = 30;
    SUNROOFPOSNSTS_WINANDROOFANDCURTPOSNTYP_MOVG = 31;
  }
  enum SuspHeiLvlIndcnType {
    SUSPHEILVLINDCN_SUSPHEILVLCTRL_NRH = 0;
    SUSPHEILVLINDCN_SUSPHEILVLCTRL_HL2 = 1;
    SUSPHEILVLINDCN_SUSPHEILVLCTRL_HL1 = 2;
    SUSPHEILVLINDCN_SUSPHEILVLCTRL_LL1 = 3;
    SUSPHEILVLINDCN_SUSPHEILVLCTRL_LL2 = 4;
  }
  enum TrsmParkLockdTrsmParkLockdType {
    TRSMPARKLOCKDTRSMPARKLOCKD_TRSMPARKLOCK1_PARKNOTENGD = 0;
    TRSMPARKLOCKDTRSMPARKLOCKD_TRSMPARKLOCK1_PARKENGD = 1;
    TRSMPARKLOCKDTRSMPARKLOCKD_TRSMPARKLOCK1_NOTINUSE = 2;
    TRSMPARKLOCKDTRSMPARKLOCKD_TRSMPARKLOCK1_UNDEFD = 3;
  }
  enum TrStsType {
    TRSTS_DOORSTS2_UKWN = 0;
    TRSTS_DOORSTS2_OPEND = 1;
    TRSTS_DOORSTS2_CLSD = 2;
  }
  // description Signals to the SRS (and other nodes) that the belts have triggered. [] [0|1] [initial_value:0]
  optional bool actvn_sts_of_rtrctr_rvsb_le = 1;
  // [] [0|1] [initial_value:None]
  optional bool actvn_sts_of_rtrctr_rvsb_le_ub = 2;
  // description Signals to the SRS (and other nodes) that the belts have triggered. [] [0|1] [initial_value:0]
  optional bool actvn_sts_of_rtrctr_rvsb_ri = 3;
  // [] [0|1] [initial_value:None]
  optional bool actvn_sts_of_rtrctr_rvsb_ri_ub = 4;
  // [] [0|1] [initial_value:None]
  optional bool alrm_sts_ub = 5;
  // description Indicates alarm status, last trigger source and alarm component errors. [] [0|1] [initial_value:0]
  optional bool alrm_sts_alrm_failr = 6;
  // description Indicates alarm status, last trigger source and alarm component errors. [] [0|3] [initial_value:0]
  optional AlrmStsAlrmStType alrm_sts_alrm_st = 7;
  // description Indicates alarm status, last trigger source and alarm component errors. [] [0|15] [initial_value:0]
  optional AlrmStsAlrmTrgSrcType alrm_sts_alrm_trg_src = 8;
  // description Indicates alarm status, last trigger source and alarm component errors. [] [0|1] [initial_value:0]
  optional bool alrm_sts_snsr_incln_failr = 9;
  // description Indicates alarm status, last trigger source and alarm component errors. [] [0|1] [initial_value:0]
  optional bool alrm_sts_snsr_intr_scanr_failr = 10;
  // [] [0|1] [initial_value:None]
  optional bool blt_lock_st_safe_at_drvr_ub = 11;
  // description State of belt lock at driver seating position Belt lock state, locked/unlocked [] [0|1] [initial_value:1]
  optional bool blt_lock_st_safe_at_drvr_blt_lock_st1 = 12;
  // description State of belt lock at driver seating position Belt lock status, OK/NOK [] [0|1] [initial_value:0]
  optional bool blt_lock_st_safe_at_drvr_blt_lock_st_err_sts = 13;
  // description Counter for E2E [Unitless] [0.0|255.0] [initial_value:255]
  optional uint32 blt_lock_st_safe_at_drvr_chks = 14;
  // description Checksum for E2E [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 blt_lock_st_safe_at_drvr_cntr = 15;
  // [] [0|1] [initial_value:None]
  optional bool crab_mov_mod_sts_ub = 16;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 crab_mov_mod_sts_chks = 17;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 crab_mov_mod_sts_cntr = 18;
  // description Control status of CrabMoving. [] [0|7] [initial_value:0]
  optional CrabMovModStsTankTurnModStsType crab_mov_mod_sts_tank_turn_mod_sts = 19;
  // [] [0|3] [initial_value:0]
  optional DoorDrvrStsType door_drvr_sts = 20;
  // [] [0|1] [initial_value:None]
  optional bool door_drvr_sts_ub = 21;
  // [] [0|1] [initial_value:None]
  optional bool door_drvr_sts_with_fac_qly_ub = 22;
  // [] [0|3] [initial_value:0]
  optional DoorDrvrStsWithFacQlyDoorStsType door_drvr_sts_with_fac_qly_door_sts = 23;
  // [] [0|3] [initial_value:1]
  optional DoorDrvrStsWithFacQlyFacQlyType door_drvr_sts_with_fac_qly_fac_qly = 24;
  // [] [0|3] [initial_value:0]
  optional DoorLeReStsType door_le_re_sts = 25;
  // [] [0|1] [initial_value:None]
  optional bool door_le_re_sts_ub = 26;
  // [] [0|3] [initial_value:0]
  optional DoorPassStsType door_pass_sts = 27;
  // [] [0|1] [initial_value:None]
  optional bool door_pass_sts_ub = 28;
  // [] [0|3] [initial_value:0]
  optional DoorRiReStsType door_ri_re_sts = 29;
  // [] [0|1] [initial_value:None]
  optional bool door_ri_re_sts_ub = 30;
  // [] [0|1] [initial_value:None]
  optional bool drvr_prsnt_sts_ub = 31;
  // description Driver present [] [0|3] [initial_value:0]
  optional DrvrPrsntStsDrvrPrsntType drvr_prsnt_sts_drvr_prsnt = 32;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 drvr_prsnt_sts_drvr_prsnt_chks = 33;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 drvr_prsnt_sts_drvr_prsnt_cntr = 34;
  // description Driver present [] [0|3] [initial_value:0]
  optional DrvrPrsntStsDrvrPrsntQfType drvr_prsnt_sts_drvr_prsnt_qf = 35;
  // [] [0|7] [initial_value:7]
  optional GearLvrIndcnType gear_lvr_indcn = 36;
  // [] [0|1] [initial_value:None]
  optional bool gear_lvr_indcn_ub = 37;
  // [] [0|3] [initial_value:2]
  optional GearMovType gear_mov = 38;
  // [] [0|1] [initial_value:None]
  optional bool gear_mov_ub = 39;
  // [] [0|3] [initial_value:0]
  optional HoodStsType hood_sts = 40;
  // [] [0|1] [initial_value:None]
  optional bool hood_sts_ub = 41;
  // description Provides the state and not the event of HWL/Direction Indicator. [] [0|3] [initial_value:0]
  optional IndcrStsType indcr_sts = 42;
  // [] [0|1] [initial_value:None]
  optional bool indcr_sts_ub = 43;
  // [] [0|1] [initial_value:None]
  optional bool lockg_cen_sts_ub = 44;
  // [] [0|3] [initial_value:0]
  optional LockgCenStsLockStType lockg_cen_sts_lock_st = 45;
  // [] [0|15] [initial_value:0]
  optional LockgCenStsTrigSrcType lockg_cen_sts_trig_src = 46;
  // [] [0|1] [initial_value:0]
  optional bool lockg_cen_sts_upd_eve = 47;
  // description This signal is used for indicating the movement direction in the air suspension during its change. [] [0|3] [initial_value:1]
  optional LvlgDirMovmtIndcrType lvlg_dir_movmt_indcr = 48;
  // [] [0|1] [initial_value:None]
  optional bool lvlg_dir_movmt_indcr_ub = 49;
  // description Reports the fold status of the outer rear view mirrors. Driver side. [] [0|7] [initial_value:0]
  optional MirrFoldStsAtDrvrType mirr_fold_sts_at_drvr = 50;
  // [] [0|1] [initial_value:None]
  optional bool mirr_fold_sts_at_drvr_ub = 51;
  // [] [0|1] [initial_value:None]
  optional bool pt_brk_tq_ub = 52;
  // description Total actual Powertrain brake torque [NewtonMeter] [-16384.0|16380.0] [initial_value:0]
  optional double pt_brk_tq_act_tot = 53;
  // description Total actual Powertrain brake torque quality factor [] [0|3] [initial_value:0]
  optional PtBrkTqActTotQfType pt_brk_tq_act_tot_qf = 54;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 pt_brk_tq_chks = 55;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 pt_brk_tq_cntr = 56;
  // description Quality factor [] [0|3] [initial_value:0]
  optional PtBrkTqQfType pt_brk_tq_qf = 57;
  // description Powertrain brake torque for brake system [NewtonMeter] [-16384.0|16380.0] [initial_value:0]
  optional double pt_brk_tq_req_for_brk_sys = 58;
  // description Actual powertrain regeneration torque at rear axle [NewtonMeter] [-16384.0|16380.0] [initial_value:0]
  optional double pt_brk_tq_rgn_at_axle_re_act = 59;
  // description Belt ready status [] [0|3] [initial_value:0]
  optional StsForRtrctrRvsbLeType sts_for_rtrctr_rvsb_le = 60;
  // [] [0|1] [initial_value:None]
  optional bool sts_for_rtrctr_rvsb_le_ub = 61;
  // description Belt ready status [] [0|3] [initial_value:1]
  optional StsForRtrctrRvsbRiType sts_for_rtrctr_rvsb_ri = 62;
  // [] [0|1] [initial_value:None]
  optional bool sts_for_rtrctr_rvsb_ri_ub = 63;
  // description Sun roof position status [] [0|31] [initial_value:0]
  optional SunRoofPosnStsType sun_roof_posn_sts = 64;
  // [] [0|1] [initial_value:None]
  optional bool sun_roof_posn_sts_ub = 65;
  // description This signal specifies which height the body has reached. [] [0|7] [initial_value:0]
  optional SuspHeiLvlIndcnType susp_hei_lvl_indcn = 66;
  // [] [0|1] [initial_value:None]
  optional bool susp_hei_lvl_indcn_ub = 67;
  // [] [0|1] [initial_value:None]
  optional bool trsm_park_lockd_ub = 68;
  // description Checksum for TrsmParkLockd [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 trsm_park_lockd_chks = 69;
  // description Counter for TrsmParkLockd [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 trsm_park_lockd_cntr = 70;
  // description Transmission park lock status [] [0|3] [initial_value:3]
  optional TrsmParkLockdTrsmParkLockdType trsm_park_lockd_trsm_park_lockd = 71;
  // [] [0|3] [initial_value:0]
  optional TrStsType tr_sts = 72;
  // [] [0|1] [initial_value:None]
  optional bool tr_sts_ub = 73;
}

message BCM_ZCUCANFD1_FR17_10A {
// Report Message
  enum ADL3LgtCtrlStsADModType {
    ADL3LGTCTRLSTSADMOD_ADMOD_NAD_MOD = 0;
    ADL3LGTCTRLSTSADMOD_ADMOD_TJP_HWC = 1;
    ADL3LGTCTRLSTSADMOD_ADMOD_NOP = 2;
    ADL3LGTCTRLSTSADMOD_ADMOD_E2E = 3;
  }
  enum ADL3LgtCtrlStsDegradedType {
    ADL3LGTCTRLSTSDEGRADED_LGTDEGRAD1_NODEGRADATION_GREEN = 0;
    ADL3LGTCTRLSTSDEGRADED_LGTDEGRAD1_LGTFAILR_RED = 1;
    ADL3LGTCTRLSTSDEGRADED_LGTDEGRAD1_ABSESCTEMPORARILYOFF_YELLOW = 2;
    ADL3LGTCTRLSTSDEGRADED_LGTDEGRAD1_ESCSERVICEREQUIRED_YELLOW = 3;
    ADL3LGTCTRLSTSDEGRADED_LGTDEGRAD1_ESCTEMPORARILYOFF_YELLOW = 4;
    ADL3LGTCTRLSTSDEGRADED_LGTDEGRAD1_STCTEMPORARILYOFF_YELLOW = 5;
    ADL3LGTCTRLSTSDEGRADED_LGTDEGRAD1_EPBFAILR_YELLOW = 6;
    ADL3LGTCTRLSTSDEGRADED_LGTDEGRAD1_VDSWNOK_YELLOW = 7;
    ADL3LGTCTRLSTSDEGRADED_LGTDEGRAD1_PROPADMODCTRLINHBN_YELLOW = 8;
    ADL3LGTCTRLSTSDEGRADED_LGTDEGRAD1_PROPTRQLIMITATION_YELLOW = 9;
    ADL3LGTCTRLSTSDEGRADED_LGTDEGRAD1_PROPTOTALLYFAULT_YELLOW = 10;
    ADL3LGTCTRLSTSDEGRADED_LGTDEGRAD1_GENERALBRAKEFAILURE_YELLOW = 11;
    ADL3LGTCTRLSTSDEGRADED_LGTDEGRAD1_RESERVED4 = 12;
    ADL3LGTCTRLSTSDEGRADED_LGTDEGRAD1_RESERVED5 = 13;
    ADL3LGTCTRLSTSDEGRADED_LGTDEGRAD1_RESERVED6 = 14;
    ADL3LGTCTRLSTSDEGRADED_LGTDEGRAD1_RESERVED7 = 15;
  }
  enum ADL3LgtCtrlStsQfType {
    ADL3LGTCTRLSTSQF_GENQF1_UNDEFINDDATAACCUR = 0;
    ADL3LGTCTRLSTSQF_GENQF1_TMPUNDEFDDATA = 1;
    ADL3LGTCTRLSTSQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    ADL3LGTCTRLSTSQF_GENQF1_ACCURDATA = 3;
  }
  enum ADL3LgtCtrlStsStsType {
    ADL3LGTCTRLSTSSTS_COLORSTS_RED = 0;
    ADL3LGTCTRLSTSSTS_COLORSTS_YELLOW = 1;
    ADL3LGTCTRLSTSSTS_COLORSTS_GREEN = 2;
    ADL3LGTCTRLSTSSTS_COLORSTS_RESERVED = 3;
  }
  enum PrimBrkSysSt2BrkSysStType {
    PRIMBRKSYSST2BRKSYSST_NOTAVAILABLE_TEMPORARY = 0;
    PRIMBRKSYSST2BRKSYSST_NOTAVAILABLE_NOTRELEASED = 1;
    PRIMBRKSYSST2BRKSYSST_NOTAVAILABLE_PERMANENT = 2;
    PRIMBRKSYSST2BRKSYSST_NOTACTIVATED_FULLAVAILABLE = 3;
    PRIMBRKSYSST2BRKSYSST_ACTIVATION_PREPARATION = 4;
    PRIMBRKSYSST2BRKSYSST_ACTIVATION_PENDING = 5;
    PRIMBRKSYSST2BRKSYSST_ACTIVATION_PENDINGREDUNDANCYLOST = 6;
    PRIMBRKSYSST2BRKSYSST_ACTIVATION_PENDINGFAILOPERATION = 7;
    PRIMBRKSYSST2BRKSYSST_ACTIVATED_FULLAVAILABLE = 8;
    PRIMBRKSYSST2BRKSYSST_ACTIVATED_FAILOPERATION = 9;
    PRIMBRKSYSST2BRKSYSST_ACTIVATED_REDUNDANCYLOST = 10;
    PRIMBRKSYSST2BRKSYSST_DEACTIVATION_PENDING = 11;
  }
  enum RbuCtrlModReqSafe2BrkSysModCfmdType {
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_NOREQ = 0;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_E2E = 1;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_RESERVED2 = 2;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_RESERVED3 = 3;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_RESERVED4 = 4;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_RESERVED5 = 5;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_RESERVED6 = 6;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_RESERVED7 = 7;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_RESERVED8 = 8;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_ACC_HWA = 9;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_PEB = 10;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_APA = 11;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_RPA = 12;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_HPA = 13;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_TJP_HWC = 14;
    RBUCTRLMODREQSAFE2BRKSYSMODCFMD_MODCFMD_NOP = 15;
  }
  // [] [0|1] [initial_value:None]
  optional bool adl3_lgt_ctrl_sts_ub = 1;
  // description AD Mode [] [0|3] [initial_value:0]
  optional ADL3LgtCtrlStsADModType adl3_lgt_ctrl_sts_ad_mod = 2;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 adl3_lgt_ctrl_sts_chks = 3;
  // description Counter  [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 adl3_lgt_ctrl_sts_cntr = 4;
  // description Active controller [] [0|1] [initial_value:0]
  optional bool adl3_lgt_ctrl_sts_ctrl_status = 5;
  // description Degradation [] [0|15] [initial_value:0]
  optional ADL3LgtCtrlStsDegradedType adl3_lgt_ctrl_sts_degraded = 6;
  // description Quality factor [] [0|3] [initial_value:0]
  optional ADL3LgtCtrlStsQfType adl3_lgt_ctrl_sts_qf = 7;
  // description Status [] [0|3] [initial_value:0]
  optional ADL3LgtCtrlStsStsType adl3_lgt_ctrl_sts_sts = 8;
  // [] [0|1] [initial_value:None]
  optional bool bcm_chassis_resd_sig1_safety_ub = 9;
  // description BCMChassisResdSig1 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 bcm_chassis_resd_sig1_safety_chks = 10;
  // description BCMChassisResdSig1 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 bcm_chassis_resd_sig1_safety_cntr = 11;
  // description BCMChassisResdSig1 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 bcm_chassis_resd_sig1_safety_u_int16 = 12;
  // description BCMChassisResdSig1 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 bcm_chassis_resd_sig1_safety_u_int4 = 13;
  // [] [0|1] [initial_value:None]
  optional bool bcm_chassis_resd_sig2_safety_ub = 14;
  // description BCMChassisResdSig2 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 bcm_chassis_resd_sig2_safety_chks = 15;
  // description BCMChassisResdSig2 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 bcm_chassis_resd_sig2_safety_cntr = 16;
  // description BCMChassisResdSig2 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 bcm_chassis_resd_sig2_safety_u_int16 = 17;
  // description BCMChassisResdSig2 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 bcm_chassis_resd_sig2_safety_u_int4 = 18;
  // [] [0|1] [initial_value:None]
  optional bool bcm_chassis_resd_sig3_safety_ub = 19;
  // description BCMChassisResdSig3 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 bcm_chassis_resd_sig3_safety_chks = 20;
  // description BCMChassisResdSig3 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 bcm_chassis_resd_sig3_safety_cntr = 21;
  // description BCMChassisResdSig3 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 bcm_chassis_resd_sig3_safety_u_int16 = 22;
  // description BCMChassisResdSig3 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 bcm_chassis_resd_sig3_safety_u_int4 = 23;
  // [] [0|1] [initial_value:None]
  optional bool brk_f_act2_ub = 24;
  // description AutParkBrkSpprtReq [] [0|1] [initial_value:0]
  optional bool brk_f_act2_aut_park_brk_spprt_req = 25;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 brk_f_act2_chks = 26;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 brk_f_act2_cntr = 27;
  // description Brake force in Newtons [N] [0.0|50000.0] [initial_value:0]
  optional double brk_f_act2_force = 28;
  // [] [0|1] [initial_value:None]
  optional bool prim_brk_sys_st2_ub = 29;
  // description Brake system state. [] [0|15] [initial_value:0]
  optional PrimBrkSysSt2BrkSysStType prim_brk_sys_st2_brk_sys_st = 30;
  // description Checksum. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 prim_brk_sys_st2_chks = 31;
  // description Rolling counter. [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 prim_brk_sys_st2_cntr = 32;
  // [] [0|1] [initial_value:None]
  optional bool rbu_ctrl_mod_req_safe2_ub = 33;
  // description mode confirmation [] [0|15] [initial_value:0]
  optional RbuCtrlModReqSafe2BrkSysModCfmdType rbu_ctrl_mod_req_safe2_brk_sys_mod_cfmd = 34;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 rbu_ctrl_mod_req_safe2_chks = 35;
  // description cpimter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 rbu_ctrl_mod_req_safe2_cntr = 36;
  // [] [0|1] [initial_value:None]
  optional bool spd_ctrl_lgt_group_ub = 37;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 spd_ctrl_lgt_group_chks = 38;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 spd_ctrl_lgt_group_cntr = 39;
  // description longitudinal speed control actual [m/s] [0.0|81.91] [initial_value:0]
  optional double spd_ctrl_lgt_group_spd_ctrl_act_lgt = 40;
  // description speed control status [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 spd_ctrl_lgt_group_spd_ctrl_sts = 41;  
}

message PASZCUCANFD1_FR20_112 {
// Control Message
  enum BackPushAPAInfoReqType {
    BACKPUSHAPAINFOREQ_AVAILABLE_DEFAULT = 0;
    BACKPUSHAPAINFOREQ_AVAILABLE_UNAVAILABLE = 1;
    BACKPUSHAPAINFOREQ_AVAILABLE_AVAILABLE = 2;
    BACKPUSHAPAINFOREQ_AVAILABLE_RESERVED = 3;
  }
  enum DrvrAsscSysIndcrReqType {
    DRVRASSCSYSINDCRREQ_PASTURNINDCRREQ_NOREQUEST = 0;
    DRVRASSCSYSINDCRREQ_PASTURNINDCRREQ_LEFTREQUEST = 1;
    DRVRASSCSYSINDCRREQ_PASTURNINDCRREQ_RIGHTREQUEST = 2;
    DRVRASSCSYSINDCRREQ_PASTURNINDCRREQ_HWLREQ = 3;
  }
  enum DrvrAsscSysIndcrReq1Type {
    DRVRASSCSYSINDCRREQ1_DRVRASSCSYSINDCRREQ1_NOREQUEST = 0;
    DRVRASSCSYSINDCRREQ1_DRVRASSCSYSINDCRREQ1_LEFTREQUESTOFF = 1;
    DRVRASSCSYSINDCRREQ1_DRVRASSCSYSINDCRREQ1_RIGHTREQUESTOFF = 2;
    DRVRASSCSYSINDCRREQ1_DRVRASSCSYSINDCRREQ1_HWLREQUESTOFF = 3;
    DRVRASSCSYSINDCRREQ1_DRVRASSCSYSINDCRREQ1_RESERVED1 = 4;
    DRVRASSCSYSINDCRREQ1_DRVRASSCSYSINDCRREQ1_RESERVED2 = 5;
    DRVRASSCSYSINDCRREQ1_DRVRASSCSYSINDCRREQ1_RESERVED3 = 6;
    DRVRASSCSYSINDCRREQ1_DRVRASSCSYSINDCRREQ1_RESERVED4 = 7;
  }
  enum DrvrAsscSysStsType {
    DRVRASSCSYSSTS_DRVRASSCSYSSTS_OFF = 0;
    DRVRASSCSYSSTS_DRVRASSCSYSSTS_STANDBY = 1;
    DRVRASSCSYSSTS_DRVRASSCSYSSTS_FAILURE = 2;
    DRVRASSCSYSSTS_DRVRASSCSYSSTS_SEARCHING = 3;
    DRVRASSCSYSSTS_DRVRASSCSYSSTS_PARKINGPROCESSACTIVE = 4;
    DRVRASSCSYSSTS_DRVRASSCSYSSTS_PARKINGPROCESSCOMPLETED = 5;
    DRVRASSCSYSSTS_DRVRASSCSYSSTS_QUIT = 6;
    DRVRASSCSYSSTS_DRVRASSCSYSSTS_SUSPEND = 7;
    DRVRASSCSYSSTS_DRVRASSCSYSSTS_ABORT = 8;
    DRVRASSCSYSSTS_DRVRASSCSYSSTS_PREPARKINGPROCESSACTIVE = 9;
  }
  enum KeyReadReqFromASMType {
    KEYREADREQFROMASM_KEYLOCN1_KEYLOCNIDLE = 0;
    KEYREADREQFROMASM_KEYLOCN1_KEYLOCNALL = 1;
    KEYREADREQFROMASM_KEYLOCN1_KEYLOCNALLEXT = 2;
    KEYREADREQFROMASM_KEYLOCN1_KEYLOCNDRVREXT = 3;
    KEYREADREQFROMASM_KEYLOCN1_KEYLOCNPASSEXT = 4;
    KEYREADREQFROMASM_KEYLOCN1_KEYLOCNTREXT = 5;
    KEYREADREQFROMASM_KEYLOCN1_KEYLOCNALLINT = 6;
    KEYREADREQFROMASM_KEYLOCN1_KEYLOCNDRVRINT = 7;
    KEYREADREQFROMASM_KEYLOCN1_KEYLOCNPASSINT = 8;
    KEYREADREQFROMASM_KEYLOCN1_KEYLOCNRESVINT = 9;
    KEYREADREQFROMASM_KEYLOCN1_KEYLOCNRESVINTSIMPLE = 10;
  }
  enum MapIDandStsAType {
    MAPIDANDSTS_A_MAPSTS_DEFAULT = 0;
    MAPIDANDSTS_A_MAPSTS_MAPUNAVAILABLE = 1;
    MAPIDANDSTS_A_MAPSTS_MAPAVAILABLE = 2;
    MAPIDANDSTS_A_MAPSTS_MAPTOBECREATED = 3;
  }
  enum MapIDandStsBType {
    MAPIDANDSTS_B_MAPSTS_DEFAULT = 0;
    MAPIDANDSTS_B_MAPSTS_MAPUNAVAILABLE = 1;
    MAPIDANDSTS_B_MAPSTS_MAPAVAILABLE = 2;
    MAPIDANDSTS_B_MAPSTS_MAPTOBECREATED = 3;
  }
  enum MapIDandStsCType {
    MAPIDANDSTS_C_MAPSTS_DEFAULT = 0;
    MAPIDANDSTS_C_MAPSTS_MAPUNAVAILABLE = 1;
    MAPIDANDSTS_C_MAPSTS_MAPAVAILABLE = 2;
    MAPIDANDSTS_C_MAPSTS_MAPTOBECREATED = 3;
  }
  enum MapIDandStsDType {
    MAPIDANDSTS_D_MAPSTS_DEFAULT = 0;
    MAPIDANDSTS_D_MAPSTS_MAPUNAVAILABLE = 1;
    MAPIDANDSTS_D_MAPSTS_MAPAVAILABLE = 2;
    MAPIDANDSTS_D_MAPSTS_MAPTOBECREATED = 3;
  }
  enum MapIDandStsEType {
    MAPIDANDSTS_E_MAPSTS_DEFAULT = 0;
    MAPIDANDSTS_E_MAPSTS_MAPUNAVAILABLE = 1;
    MAPIDANDSTS_E_MAPSTS_MAPAVAILABLE = 2;
    MAPIDANDSTS_E_MAPSTS_MAPTOBECREATED = 3;
  }
  enum MapIDandStsFType {
    MAPIDANDSTS_F_MAPSTS_DEFAULT = 0;
    MAPIDANDSTS_F_MAPSTS_MAPUNAVAILABLE = 1;
    MAPIDANDSTS_F_MAPSTS_MAPAVAILABLE = 2;
    MAPIDANDSTS_F_MAPSTS_MAPTOBECREATED = 3;
  }
  enum MapIDandStsGType {
    MAPIDANDSTS_G_MAPSTS_DEFAULT = 0;
    MAPIDANDSTS_G_MAPSTS_MAPUNAVAILABLE = 1;
    MAPIDANDSTS_G_MAPSTS_MAPAVAILABLE = 2;
    MAPIDANDSTS_G_MAPSTS_MAPTOBECREATED = 3;
  }
  enum MapIDandStsHType {
    MAPIDANDSTS_H_MAPSTS_DEFAULT = 0;
    MAPIDANDSTS_H_MAPSTS_MAPUNAVAILABLE = 1;
    MAPIDANDSTS_H_MAPSTS_MAPAVAILABLE = 2;
    MAPIDANDSTS_H_MAPSTS_MAPTOBECREATED = 3;
  }
  enum MapIDandStsIType {
    MAPIDANDSTS_I_MAPSTS_DEFAULT = 0;
    MAPIDANDSTS_I_MAPSTS_MAPUNAVAILABLE = 1;
    MAPIDANDSTS_I_MAPSTS_MAPAVAILABLE = 2;
    MAPIDANDSTS_I_MAPSTS_MAPTOBECREATED = 3;
  }
  enum MapIDandStsJType {
    MAPIDANDSTS_J_MAPSTS_DEFAULT = 0;
    MAPIDANDSTS_J_MAPSTS_MAPUNAVAILABLE = 1;
    MAPIDANDSTS_J_MAPSTS_MAPAVAILABLE = 2;
    MAPIDANDSTS_J_MAPSTS_MAPTOBECREATED = 3;
  }
  enum MobDevRPAReqRespType {
    MOBDEVRPAREQRESP_EXECUTION_DEFAULT = 0;
    MOBDEVRPAREQRESP_EXECUTION_RESULTOK = 1;
    MOBDEVRPAREQRESP_EXECUTION_RESULTERROR = 2;
    MOBDEVRPAREQRESP_EXECUTION_EXECUTING = 3;
  }
  enum PopupPrkgDisplaySigType {
    POPUPPRKGDISPLAYSIG_POPUPPRKGDISPLAYSIG_NODISPLAY = 0;
    POPUPPRKGDISPLAYSIG_POPUPPRKGDISPLAYSIG_DISPLAY50MPOPUP = 1;
    POPUPPRKGDISPLAYSIG_POPUPPRKGDISPLAYSIG_RESERVED1 = 2;
    POPUPPRKGDISPLAYSIG_POPUPPRKGDISPLAYSIG_RESERVED2 = 3;
    POPUPPRKGDISPLAYSIG_POPUPPRKGDISPLAYSIG_RESERVED3 = 4;
    POPUPPRKGDISPLAYSIG_POPUPPRKGDISPLAYSIG_RESERVED4 = 5;
    POPUPPRKGDISPLAYSIG_POPUPPRKGDISPLAYSIG_RESERVED5 = 6;
    POPUPPRKGDISPLAYSIG_POPUPPRKGDISPLAYSIG_RESERVED6 = 7;
  }
  enum PrkgBrkElectcCtrlReqReqType {
    PRKGBRKELECTCCTRLREQREQ_PRKGBRKELECTCCTRLREQ_NOREQUEST = 0;
    PRKGBRKELECTCCTRLREQREQ_PRKGBRKELECTCCTRLREQ_RELEASEREQUEST = 1;
    PRKGBRKELECTCCTRLREQREQ_PRKGBRKELECTCCTRLREQ_APPLYREQUEST = 2;
    PRKGBRKELECTCCTRLREQREQ_PRKGBRKELECTCCTRLREQ_RESERVED = 3;
  }
  enum PrkgEmgyBrkSysStsType {
    PRKGEMGYBRKSYSSTS_PEBSYSSTS_OFF = 0;
    PRKGEMGYBRKSYSSTS_PEBSYSSTS_STANDBY = 1;
    PRKGEMGYBRKSYSSTS_PEBSYSSTS_INACTIVATE = 2;
    PRKGEMGYBRKSYSSTS_PEBSYSSTS_PEBACTIVATE = 3;
    PRKGEMGYBRKSYSSTS_PEBSYSSTS_MSPACTIVATE = 4;
    PRKGEMGYBRKSYSSTS_PEBSYSSTS_FAILURE = 5;
    PRKGEMGYBRKSYSSTS_PEBSYSSTS_INHIBITED = 6;
    PRKGEMGYBRKSYSSTS_PEBSYSSTS_INITIALZE = 7;
    PRKGEMGYBRKSYSSTS_PEBSYSSTS_RESERVED1 = 8;
    PRKGEMGYBRKSYSSTS_PEBSYSSTS_RESERVED2 = 9;
    PRKGEMGYBRKSYSSTS_PEBSYSSTS_RESERVED3 = 10;
    PRKGEMGYBRKSYSSTS_PEBSYSSTS_RESERVED4 = 11;
    PRKGEMGYBRKSYSSTS_PEBSYSSTS_RESERVED5 = 12;
    PRKGEMGYBRKSYSSTS_PEBSYSSTS_RESERVED6 = 13;
    PRKGEMGYBRKSYSSTS_PEBSYSSTS_RESERVED7 = 14;
    PRKGEMGYBRKSYSSTS_PEBSYSSTS_RESERVED8 = 15;
  }
  enum PrkgLockReqType {
    PRKGLOCKREQ_LOCKGCENREQ2_IDLE = 0;
    PRKGLOCKREQ_LOCKGCENREQ2_UNLCK = 1;
    PRKGLOCKREQ_LOCKGCENREQ2_LOCK = 2;
  }
  enum PrkgModInclnType {
    PRKGMODINCLN_PRKGMODINCLN_DEFAULT = 0;
    PRKGMODINCLN_PRKGMODINCLN_RPAREQPARKINGIN = 1;
    PRKGMODINCLN_PRKGMODINCLN_RPAREQPARKINGOUT = 2;
    PRKGMODINCLN_PRKGMODINCLN_RPPREQPARKINGIN = 3;
    PRKGMODINCLN_PRKGMODINCLN_RPPREQPARKINGOUT = 4;
    PRKGMODINCLN_PRKGMODINCLN_RSPAREQ = 5;
    PRKGMODINCLN_PRKGMODINCLN_RESERVED1 = 6;
    PRKGMODINCLN_PRKGMODINCLN_RESERVED2 = 7;
  }
  enum RemCtrlPrkgFbType {
    REMCTRLPRKGFB_REMCTRLPRKGFB_DEFAULT = 0;
    REMCTRLPRKGFB_REMCTRLPRKGFB_VOICEPARKING = 1;
    REMCTRLPRKGFB_REMCTRLPRKGFB_VOICEREMOTEKEYPARKING = 2;
    REMCTRLPRKGFB_REMCTRLPRKGFB_UWBKEYPARKING = 3;
    REMCTRLPRKGFB_REMCTRLPRKGFB_MOBILEPHONEPARKING = 4;
  }
  enum SteerReInhibReqAD4RWSInhibReqType {
    STEERREINHIBREQAD4RWSINHIBREQ_STEERREINHIBREQ_DEFAULT = 0;
    STEERREINHIBREQAD4RWSINHIBREQ_STEERREINHIBREQ_REQSUPPRESSION = 1;
    STEERREINHIBREQAD4RWSINHIBREQ_STEERREINHIBREQ_REQRELEASESUPPRESSION = 2;
    STEERREINHIBREQAD4RWSINHIBREQ_STEERREINHIBREQ_RESERVED = 3;
  }
  enum SuspLockReqType {
    SUSPLOCKREQ_LOCKREQ_DEFAULT = 0;
    SUSPLOCKREQ_LOCKREQ_REQUESTLOCK = 1;
    SUSPLOCKREQ_LOCKREQ_REQUESTUNLOCK = 2;
    SUSPLOCKREQ_LOCKREQ_RESERVED = 3;
  }
  enum UndoProcStsType {
    UNDOPROCSTS_SYSUNDOFCTSTS_DEFAULT = 0;
    UNDOPROCSTS_SYSUNDOFCTSTS_UNDOVALID = 1;
    UNDOPROCSTS_SYSUNDOFCTSTS_UNDOINVALID = 2;
  }
  enum ValtPrkgProcesReqType {
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_NOREQUEST = 0;
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_MAPCHOOSEORDELETEORNEW = 1;
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_PARKINLOCALIZATIONPROCESS = 2;
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_GEARPREQUIREMENT = 3;
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_MOBILECONNECTORACTIVATEREQUIREMENT = 4;
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_EPBREQUIREMENT = 5;
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_APPROPRIATELIGHTSTATUSREQUIRMENT = 6;
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_PARKINGPROCESSISONGOING = 7;
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_PARKINGPROCESSFINISHSUCCESSFULLY = 8;
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_PARKINGPROCESSFAIL = 9;
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_PARKINGFUNCTIONTYPECHOOSINGFORNEWMAP = 10;
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_SLOTSEARCHINGFORNEWMAPMOVING = 11;
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_SLOTSEARCHINGFORNEWMAPSTANDSTILL = 12;
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_SLOTCONFIRMFORNEWMAP = 13;
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_SLOTLEARNINGSUCCESSFULLY = 14;
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_PARKOUTLEARNING_MOVING = 15;
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_PARKOUTLEARNING_STANDSTILL = 16;
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_MAPGENERATING = 17;
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_MAPGENERATINGFAIL = 18;
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_MAPGENERATINGSUCCESSFULLY = 19;
    VALTPRKGPROCESREQ_VALTPRKGPROCESREQ_IMDTEPARKINEXPREQ = 20;
    VALTPRKGPROCESREQ_VALTPRKGPROCESSREQ_NOCOVERAGEREQUEST = 21;
    VALTPRKGPROCESREQ_VALTPRKGPROCESSREQ_PRKGOUTPROCESSISONGING = 22;
    VALTPRKGPROCESREQ_VALTPRKGPROCESSREQ_PRKGOUTPROCESSFINISHSUCCESSFULLY = 23;
    VALTPRKGPROCESREQ_VALTPRKGPROCESSREQ_PRKGOUTPROCESSFAIL = 24;
    VALTPRKGPROCESREQ_VALTPRKGPROCESSREQ_PRKGLOADING = 25;
    VALTPRKGPROCESREQ_VALTPRKGPROCESSREQ_PRKGINPROCESSPROMPTMMOVING = 26;
    VALTPRKGPROCESREQ_VALTPRKGPROCESSREQ_PRKGINPROCESSPROMPTSSTANDSTILL = 27;
    VALTPRKGPROCESREQ_VALTPRKGPROCESSREQ_STEERINGWHEELANDBRAKEPEDALREMINDERFORPARKIN = 28;
    VALTPRKGPROCESREQ_VALTPRKGPROCESSREQ_PRKGINCRUISINGPROCESSONGOING = 29;
    VALTPRKGPROCESREQ_VALTPRKGPROCESSREQ_PRKGOUTPROCESSPROMPTSTANDSTILL = 30;
    VALTPRKGPROCESREQ_VALTPRKGPROCESSREQ_STEERINGWHEELANDBRAKEPEDALREMINDERFORPARKOUT = 31;
    VALTPRKGPROCESREQ_VALTPRKGPROCESSREQ_PRKGOUTCRUISINGPROCESSONGOING = 32;
    VALTPRKGPROCESREQ_VALTPRKGPROCESSREQ_VIRTANDAROUNDVIEW = 33;
    VALTPRKGPROCESREQ_VALTPRKGPROCESSREQ_VIRTAROUNDANDSNGVIEW = 34;
    VALTPRKGPROCESREQ_VALTPRKGPROCESSREQ_RAMPING = 35;
    VALTPRKGPROCESREQ_VALTPRKGPROCESSREQ_VIRTANDAROUNDVIEWTHUMBNAIL = 36;
    VALTPRKGPROCESREQ_VALTPRKGPROCESSREQ_VIRTAROUNDANDSNGVIEWTHUMBNAIL = 37;
    VALTPRKGPROCESREQ_VALTPRKGPROCESSREQ_PRKGINCREATESUCCESS = 38;
    VALTPRKGPROCESREQ_VALTPRKGPROCESSREQ_PRKGOUTCREATESUCCESS = 39;
  }
  enum ValtPrkgReminderType {
    VALTPRKGREMINDER_VALTPRKGREMINDER1_NOFAULT = 0;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_RESERVED1 = 1;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT = 2;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_RESERVED3 = 3;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_RESERVED4 = 4;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_RESERVED5 = 5;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_OVERSPEED_FUNCTIONEXIT = 6;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_LEARNINGDISTANCEBEYONDLIMIT_FUNCTIONEXIT = 7;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_RESERVED8 = 8;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_HOODISOPEN_FUNCTIONEXIT = 9;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_TAILGATEISOPEN_FUNCTIONEXIT = 10;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_DOORSAREOPEN_FUNCTIONEXIT = 11;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_REARVIEWMIRRORSAREFOLD_FUNCTIONEXIT = 12;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_RESERVED13 = 13;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_DOORSORHOODORTAILGATEORREARVIEWMIRRORUNANTICIPATEDSTATUS_PLEASESHOWONCARMODEL = 14;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_PLEASESLOWDOWN = 15;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_AVMCOVEREDORDIRTY = 16;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_USSCOVEREDORDIRTY = 17;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_TRAILERCONNECTED = 18;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_TRAILERMODEACTIVATED = 19;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_TIREPRESSUREABNORMAL = 20;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_MAPDAMAGE = 21;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_STORAGEFULLNEEDDELETEMAPS = 22;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_LOADING = 23;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_TRAILERCONNECTED = 24;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_TRAILERMODEACTIVATED = 25;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_USSCOVEREDORDIRTYPLEASESOVLETHEPROBLEM = 26;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_AVMCOVEREDORDIRTYPLEASESOVLETHEPROBLEM = 27;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_TIREPRESSUREABNORMALPLEASESOVLETHEPROBLEM = 28;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_PLEASESLOWDOWNTOSPEEDTHRESHOLD = 29;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_PLEASEDRIVETORIGHTODD = 30;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_PLEASEDRIVETOGOODNETWORKPLACE = 31;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_VMMMODEWRONG = 32;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_USSFAILURE = 33;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_AVMFAILURE = 34;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_RELATEDSYSTEMFAILURE = 35;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_CARWASHINGMODEACTIVATE = 36;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_VEHICLECANNOTMOVE = 37;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_PARKINGTOOMANYTIMES = 38;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_SLOPETOOSTEEP = 39;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_RAINTOOHEAVY = 40;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_NOENOUGHPLACEFORPARKING = 41;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_LOADINGOVERTIME = 42;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_SUSPENDOVERTIME = 43;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_GASPEDALINTERVENTION = 44;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_STEERINGWHEELINTERVENTION = 45;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_GEARINTERVENTION = 46;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_EPBINTERVENTION = 47;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_CRUISINGOVERSPEED = 48;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_PARKINGOVERSPEED = 49;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_CRUISINGOVERTIME = 50;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_PARKINGOVERTIME = 51;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_ECUFAILURE = 52;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_ACTIVESECURITYMODULEACTIVATED = 53;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_PARKINGCONDITIONLIMITED = 54;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_LIGHTTOODARK = 55;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_PLEASEFASTENSEATBELT = 56;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_LIGHTINTERVENTION = 57;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_PLEASEDRIVETOFLATROAD = 58;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_PLEASEDRIVETOGOODLIGHTINGPLACE = 59;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXIT_PARKINGFAILURE = 60;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_PLEASEMOVEAWAYOBSTACLE = 61;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_CONTINUEHINT = 62;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXITINR = 63;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_SLOTUNAVAILABLE = 64;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXITTURNOFFESC = 65;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_TURNOFFESC = 66;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_PAYATTENTION = 67;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_HANDSHAKEFAIL = 68;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_VDDMFAIL = 69;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_RADARFAIL = 70;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_FRNTCAMFAIL = 71;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_SEATBELTFAIL = 72;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_RAINSENSORFAIL = 73;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_IDHUFAIL = 74;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_LIGHTFAIL = 75;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_SAFYFUNC = 76;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_ROADNARROW = 77;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FAILCREATEROTUE_USSDIRTY = 78;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FAILCREATEROTUE_ARNDCAMDIRTY = 79;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FAILCREATEROTUE_RADARDIRTY = 80;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FAILCREATEROTUE_DOOROPEN = 81;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FAILCREATEROTUE_TRUNKOPEN = 82;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FAILCREATEROTUE_HOODOPEN = 83;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FAILCREATEROTUE_VIEWMIRRORCLOSED = 84;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FAILCREATEROTUE_DISTANCELIMS = 85;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_DMSFAI = 86;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_UNABLEMOVEBEAFRNTOBS = 87;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_QUITHOMEPRKG_SOLVEDOOR = 88;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_QUITHOMEPRKG_SOLVEHOOD = 89;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_QUITHOMEPRKG_SOLVETRUNK = 90;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_QUITHOMEPRKG_SOLVEVIEWMIRROR = 91;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_QUITHOMEPRKG_SOLVESEATBELT = 92;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_PLETAKEOVE = 93;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_PLERETURNSTEERWHL = 94;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_PLENOTICEMAPPEDDST = 95;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_QUITHOMEPRKG_CLEANFLC = 96;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_QUITHOMEPRKG_CLEANRADAR = 97;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FAILCREATEROTUE_ASSOCIATEDSYSFLT = 98;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EMMCISFULL_PLEMANAGE = 99;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_PLESTANDSTILLTOREADTUTORIAL = 100;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_FAILCREATEROTUE = 101;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_INTVHARDSWT = 102;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_PLEASESLOWDOWNTO15 = 103;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_SYSFAIL_FAILCREATEROTUE = 104;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_PLECREATEAROUTEWITHINPARKINGAREA = 105;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_ROUTEGENNFAIL = 106;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_TAKEOVERANDDRIVECAUTIOUSLY = 107;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_PATHOUTOFPLAN = 108;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_SPACELIMITATION = 109;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_INTTRECYTIT = 110;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_OVERSPEED = 111;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXITHOMEPRKG_ECALLFUNACD = 112;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_EXCEANGLE_EXITHOMEPRKG = 113;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_INSUFFICIENTLIGHTINTENSITY_FUNCTIONEXIT = 114;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_THEPAUSETIMEDOUTANDTHEFUNCTIONEXITED = 115;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONSAREDOWN_CELLPHONEBATTERYISLOW = 116;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONSAREINTERRUPTEDANDNETWORKCONDITIONSAREPOOR = 117;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_THEFUNCTIONISINTERRUPTED_THEBARRIERISBLOCKINGTHETRAFFIC = 118;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_THEFUNCTIONISINTERRUPTED_ANDTHEMOBILEAPPLICATIONISABNORMAL = 119;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONEXITED = 120;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_FUNCTIONSUSPENDED = 121;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_VEHICLECRASHES_FUNCTIONEXITS = 122;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_THEFUNCTIONISNOTPERFORMEDFORALONGTIME = 123;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_RESD1 = 124;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_RESD2 = 125;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_RESD3 = 126;
    VALTPRKGREMINDER_VALTPRKGREMINDER1_RESD4 = 127;
  }
  enum VehBeamLoModReq1Type {
    VEHBEAMLOMODREQ1_VEHBEAMLOMODREQ1_NOREQUEST = 0;
    VEHBEAMLOMODREQ1_VEHBEAMLOMODREQ1_REQUESTHIBEAMON = 1;
    VEHBEAMLOMODREQ1_VEHBEAMLOMODREQ1_REQUESTHIBEAMOFF = 2;
    VEHBEAMLOMODREQ1_VEHBEAMLOMODREQ1_REQUESTPUDDLELIGHTON = 3;
    VEHBEAMLOMODREQ1_VEHBEAMLOMODREQ1_REQUESTPUDDLELIGHTOFF = 4;
    VEHBEAMLOMODREQ1_VEHBEAMLOMODREQ1_ALLREQUESTOFF = 5;
    VEHBEAMLOMODREQ1_VEHBEAMLOMODREQ1_RESERVED1 = 6;
    VEHBEAMLOMODREQ1_VEHBEAMLOMODREQ1_RESERVED2 = 7;
  }
  // description Background push information request [] [0|3] [initial_value:0]
  optional BackPushAPAInfoReqType back_push_apa_info_req = 1;
  // [] [0|1] [initial_value:None]
  optional bool back_push_apa_info_req_ub = 2;
  // description direction indicator Request [] [0|3] [initial_value:0]
  optional DrvrAsscSysIndcrReqType drvr_assc_sys_indcr_req = 3;
  // [] [0|1] [initial_value:None]
  optional bool drvr_assc_sys_indcr_req_ub = 4;
  // description direction indicator Request [] [0|7] [initial_value:0]
  optional DrvrAsscSysIndcrReq1Type drvr_assc_sys_indcr_req1 = 5;
  // [] [0|1] [initial_value:None]
  optional bool drvr_assc_sys_indcr_req1_ub = 6;
  // description APA status [] [0|15] [initial_value:0]
  optional DrvrAsscSysStsType drvr_assc_sys_sts = 7;
  // [] [0|1] [initial_value:None]
  optional bool drvr_assc_sys_sts_ub = 8;
  // description Key ready request from ASM [] [0|15] [initial_value:0]
  optional KeyReadReqFromASMType key_read_req_from_asm = 9;
  // [] [0|1] [initial_value:None]
  optional bool key_read_req_from_asm_ub = 10;
  // [] [0|1] [initial_value:None]
  optional bool map_i_dand_sts_ub = 11;
  // description MapIDandSts_A [] [0|3] [initial_value:0]
  optional MapIDandStsAType map_i_dand_sts_a = 12;
  // description MapIDandSts_B [] [0|3] [initial_value:0]
  optional MapIDandStsBType map_i_dand_sts_b = 13;
  // description MapIDandSts_C [] [0|3] [initial_value:0]
  optional MapIDandStsCType map_i_dand_sts_c = 14;
  // description MapIDandSts_D [] [0|3] [initial_value:0]
  optional MapIDandStsDType map_i_dand_sts_d = 15;
  // description MapIDandSts_E [] [0|3] [initial_value:0]
  optional MapIDandStsEType map_i_dand_sts_e = 16;
  // description MapIDandSts_F [] [0|3] [initial_value:0]
  optional MapIDandStsFType map_i_dand_sts_f = 17;
  // description MapIDandSts_G [] [0|3] [initial_value:0]
  optional MapIDandStsGType map_i_dand_sts_g = 18;
  // description MapIDandSts_H [] [0|3] [initial_value:0]
  optional MapIDandStsHType map_i_dand_sts_h = 19;
  // description MapIDandSts_I [] [0|3] [initial_value:0]
  optional MapIDandStsIType map_i_dand_sts_i = 20;
  // description MapIDandSts_J [] [0|3] [initial_value:0]
  optional MapIDandStsJType map_i_dand_sts_j = 21;
  // description Parking system feedback on mobile device side commands [] [0|3] [initial_value:0]
  optional MobDevRPAReqRespType mob_dev_rpa_req_resp = 22;
  // [] [0|1] [initial_value:None]
  optional bool mob_dev_rpa_req_resp_ub = 23;
  // description PopupPrkgDisplaySig [] [0|7] [initial_value:0]
  optional PopupPrkgDisplaySigType popup_prkg_display_sig = 24;
  // [] [0|1] [initial_value:None]
  optional bool popup_prkg_display_sig_ub = 25;
  // [] [0|1] [initial_value:None]
  optional bool prkg_accr_ovrdn_ctrl_reqgrp_ub = 26;
  // description Parking inhibit the accelerator pedal response signal check status [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 prkg_accr_ovrdn_ctrl_reqgrp_chks = 27;
  // description Parking inhibit the accelerator pedal response signal counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 prkg_accr_ovrdn_ctrl_reqgrp_cntr = 28;
  // description Parking inhibit the accelerator pedal response signal require [] [0|1] [initial_value:0]
  optional bool prkg_accr_ovrdn_ctrl_reqgrp_prkg_accr_ovrdn_ctrl_req = 29;
  // [] [0|1] [initial_value:None]
  optional bool prkg_brk_electc_ctrl_req_ub = 30;
  // description CRC,to check the signal,For E2E Protection [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 prkg_brk_electc_ctrl_req_chks = 31;
  // description counter,For E2E Protection [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 prkg_brk_electc_ctrl_req_cntr = 32;
  // description EPB control request status [] [0|3] [initial_value:0]
  optional PrkgBrkElectcCtrlReqReqType prkg_brk_electc_ctrl_req_req = 33;
  // description This is the PEB function operation status [] [0|15] [initial_value:0]
  optional PrkgEmgyBrkSysStsType prkg_emgy_brk_sys_sts = 34;
  // [] [0|1] [initial_value:None]
  optional bool prkg_emgy_brk_sys_sts_ub = 35;
  // description lock/unlock request for RPA function [] [0|3] [initial_value:0]
  optional PrkgLockReqType prkg_lock_req = 36;
  // [] [0|1] [initial_value:None]
  optional bool prkg_lock_req_ub = 37;
  // description Parking mode  indication, RPA RSPA RPP [] [0|7] [initial_value:0]
  optional PrkgModInclnType prkg_mod_incln = 38;
  // [] [0|1] [initial_value:None]
  optional bool prkg_mod_incln_ub = 39;
  // [m] [0.0|1000.0] [initial_value:0]
  optional double prkg_proc_dst_disp = 40;
  // [] [0|1] [initial_value:None]
  optional bool prkg_proc_dst_disp_ub = 41;
  // [] [0|1] [initial_value:None]
  optional bool prkg_standstill_req_ub = 42;
  // description CRC,to check the signal,For E2E Protection [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 prkg_standstill_req_chks = 43;
  // description counter,For E2E Protection [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 prkg_standstill_req_cntr = 44;
  // description stop the vehcile or maintain standstill request by brake pressure control [] [0|1] [initial_value:0]
  optional bool prkg_standstill_req_req_sts1 = 45;
  // description Remote control parking feedback [] [0|7] [initial_value:0]
  optional RemCtrlPrkgFbType rem_ctrl_prkg_fb = 46;
  // [] [0|1] [initial_value:None]
  optional bool rem_ctrl_prkg_fb_ub = 47;
  // [] [0|1] [initial_value:None]
  optional bool steer_re_inhib_req_ub = 48;
  // description Suppress the rear wheel turn request signal [] [0|3] [initial_value:0]
  optional SteerReInhibReqAD4RWSInhibReqType steer_re_inhib_req_ad4_rws_inhib_req = 49;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 steer_re_inhib_req_chks = 50;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 steer_re_inhib_req_cntr = 51;
  // description Air suspension lock request [] [0|3] [initial_value:0]
  optional SuspLockReqType susp_lock_req = 52;
  // [] [0|1] [initial_value:None]
  optional bool susp_lock_req_ub = 53;
  // description undo process status: Indicates whether it is in an undo process [] [0|3] [initial_value:0]
  optional UndoProcStsType undo_proc_sts = 54;
  // [] [0|1] [initial_value:None]
  optional bool undo_proc_sts_ub = 55;
  // description ValtPrkgFuncTypSts [] [0|1] [initial_value:0]
  optional bool valt_prkg_func_typ_sts = 56;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_func_typ_sts_ub = 57;
  // description ValtPrkgSurpsdistce [%] [0.0|100.0] [initial_value:0]
  optional double valt_prkg_map_geneperctg = 58;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_map_geneperctg_ub = 59;
  // description ValtPrkgProcesReq [] [0|63] [initial_value:0]
  optional ValtPrkgProcesReqType valt_prkg_proces_req = 60;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_proces_req_ub = 61;
  // description ValtPrkgReminder [] [0|127] [initial_value:0]
  optional ValtPrkgReminderType valt_prkg_reminder = 62;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_reminder_ub = 63;
  // description ValtPrkgSurpsdistce [m] [0.0|1000.0] [initial_value:1000]
  optional double valt_prkg_surpsdistce = 64;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_surpsdistce_ub = 65;
  // description Request open/close low beam mode. [] [0|7] [initial_value:0]
  optional VehBeamLoModReq1Type veh_beam_lo_mod_req1 = 66;
  // [] [0|1] [initial_value:None]
  optional bool veh_beam_lo_mod_req1_ub = 67;
  // description Voice key parking status feedback [] [0|1] [initial_value:0]
  optional bool voice_key_prkg_sts = 68;
  // [] [0|1] [initial_value:None]
  optional bool voice_key_prkg_sts_ub = 69;
}

message ADCU_ZCUCANFD1_FR23_116 {
// Control Message
  enum HpaStsFlgStsFlgType {
    HPASTSFLGSTSFLG_HSTSFLG_HPAPARKINGPHASE = 0;
    HPASTSFLGSTSFLG_HSTSFLG_HPACRUISEPHASE = 1;
    HPASTSFLGSTSFLG_HSTSFLG_HPAMAXPARKINGPHASE = 2;
    HPASTSFLGSTSFLG_HSTSFLG_HPAMAXCRUISEPHASE = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool hpa_sts_flg_ub = 1;
  // description Chks [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 hpa_sts_flg_chks = 2;
  // description Cntr [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 hpa_sts_flg_cntr = 3;
  // description StsFlg [] [0|3] [initial_value:0]
  optional HpaStsFlgStsFlgType hpa_sts_flg_sts_flg = 4;
  // [] [0|1] [initial_value:None]
  optional bool lctr_data_group_ub = 5;
  // description Parking algorithm location data [Unitless] [0.0|4294.967296] [initial_value:0]
  optional double lctr_data_group_orientation_w = 6;
  // description Parking algorithm location data [Unitless] [0.0|4294.967296] [initial_value:0]
  optional double lctr_data_group_orientation_x = 7;
  // description Parking algorithm location data [Unitless] [0.0|4294.967296] [initial_value:0]
  optional double lctr_data_group_orientation_y = 8;
  // description Parking algorithm location data [Unitless] [0.0|4294.967296] [initial_value:0]
  optional double lctr_data_group_orientation_z = 9;
  // description Parking algorithm location data [Unitless] [0.0|4294.967296] [initial_value:0]
  optional double lctr_data_group_pos_x = 10;
  // description Parking algorithm location data [Unitless] [0.0|4294.967296] [initial_value:0]
  optional double lctr_data_group_pos_y = 11;
  // description Parking algorithm location data [Unitless] [0.0|4294.967296] [initial_value:0]
  optional double lctr_data_group_pos_z = 12;
  // description Parking algorithm location data [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 lctr_data_group_reset_count = 13;
  // [] [0|1] [initial_value:None]
  optional bool prkg_cali_slot_posn_ub = 14;
  // description Reserved [Unitless] [-256.0|255.0] [initial_value:256]
  optional double prkg_cali_slot_posn_angle_disp = 15;
  // description Point 3X Coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double prkg_cali_slot_posn_end_x1 = 16;
  // description Point 4X Coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double prkg_cali_slot_posn_end_x2 = 17;
  // description Point 3Y Coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double prkg_cali_slot_posn_end_y1 = 18;
  // description Point 4Y Coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double prkg_cali_slot_posn_end_y2 = 19;
  // description Point 1X Coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double prkg_cali_slot_posn_start_x1 = 20;
  // description Point 2X Coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double prkg_cali_slot_posn_start_x2 = 21;
  // description Point 1Y Coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double prkg_cali_slot_posn_start_y1 = 22;
  // description Point 2Y Coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double prkg_cali_slot_posn_start_y2 = 23;
}

message ADCU_ZCUCANFD1_FR08_120 {
// Control Message
  enum AsyAutDrvgAvlType {
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_NOMSG = 0;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_LATCTRLNOTAVL = 1;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_HISPD = 2;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_VEHTOFOLWMISS = 3;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_OVRDTIMAXEXCDD = 4;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_DRVRNOTINLOOPDETD = 5;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_DRVRBUCDRQRD = 6;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_DRVRDOORNOTCLSD = 7;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_GEARNOTINDRV = 8;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_SNSRBLKD = 9;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_HLDTIMAXEXCDD = 10;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_DRVMODSELDNOTOK = 11;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_EPBAPPLD = 12;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_SPDLOWLIMEXCDD = 13;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_TRLRPRSNT = 14;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_MLTPLEMONROADREQ = 15;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_ENDOFHNDSOFFALLWDAREA = 16;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_ROADMONWM = 17;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_CANNOTREACTIVATE = 18;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_NOTINUSE1 = 19;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_ESC_OF = 20;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_HDC_ON = 21;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_RESERVED3 = 22;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_RESERVED4 = 23;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_RESERVED5 = 24;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_RESERVED6 = 25;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_RESERVED7 = 26;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_RESERVED8 = 27;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_RESERVED9 = 28;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_RESERVED10 = 29;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_RESERVED11 = 30;
    ASYAUTDRVGAVL_ASYAUTDRVGAVL_RESERVED12 = 31;
  }
  enum AsyD2DBrkModReqBrkModReqType {
    ASYD2DBRKMODREQBRKMODREQ_AD4E2EBRKMODREQ_COMFORT = 0;
    ASYD2DBRKMODREQBRKMODREQ_AD4E2EBRKMODREQ_EMERGENCY = 1;
    ASYD2DBRKMODREQBRKMODREQ_AD4E2EBRKMODREQ_RESERVED = 2;
    ASYD2DBRKMODREQBRKMODREQ_AD4E2EBRKMODREQ_RESERVED1 = 3;
  }
  enum AsySteerApplyRqrdType {
    ASYSTEERAPPLYRQRD_LVLWARN2_NOWARN = 0;
    ASYSTEERAPPLYRQRD_LVLWARN2_LVL1 = 1;
    ASYSTEERAPPLYRQRD_LVLWARN2_LVL2 = 2;
    ASYSTEERAPPLYRQRD_LVLWARN2_LVL3 = 3;
  }
  enum AsySVCtrlReqGroupGearCtrlReqType {
    ASYSVCTRLREQGROUPGEARCTRLREQ_GEARPRKGASSIREQ_NOREQUEST = 0;
    ASYSVCTRLREQGROUPGEARCTRLREQ_GEARPRKGASSIREQ_TARGETGEARP = 1;
    ASYSVCTRLREQGROUPGEARCTRLREQ_GEARPRKGASSIREQ_TARGETGEARR = 2;
    ASYSVCTRLREQGROUPGEARCTRLREQ_GEARPRKGASSIREQ_TARGETGEARN = 3;
    ASYSVCTRLREQGROUPGEARCTRLREQ_GEARPRKGASSIREQ_TARGETGEARD = 4;
    ASYSVCTRLREQGROUPGEARCTRLREQ_GEARPRKGASSIREQ_INVALID = 7;
  }
  enum DoorOpenwarnLeIndcnType {
    DOOROPENWARNLEINDCN_LCMAINDCN_NOLCMAWARN = 0;
    DOOROPENWARNLEINDCN_LCMAINDCN_LCMAWARNLVL1 = 1;
    DOOROPENWARNLEINDCN_LCMAINDCN_NOTUSED = 2;
    DOOROPENWARNLEINDCN_LCMAINDCN_LCMAWARNLVL2 = 3;
  }
  enum DoorOpenwarnRiIndcnType {
    DOOROPENWARNRIINDCN_LCMAINDCN_NOLCMAWARN = 0;
    DOOROPENWARNRIINDCN_LCMAINDCN_LCMAWARNLVL1 = 1;
    DOOROPENWARNRIINDCN_LCMAINDCN_NOTUSED = 2;
    DOOROPENWARNRIINDCN_LCMAINDCN_LCMAWARNLVL2 = 3;
  }
  enum EnvirPerObsFoTankTurnType {
    ENVIRPEROBSFOTANKTURN_ENVIRPEROBSFOTANKTURN_HAVENOOBSTACLEANDCANBETRUST = 0;
    ENVIRPEROBSFOTANKTURN_ENVIRPEROBSFOTANKTURN_HAVENOOBSTACLEANDCANNOTBETRUST = 1;
    ENVIRPEROBSFOTANKTURN_ENVIRPEROBSFOTANKTURN_HAVEOBSTACLEANDCANBETRUST = 2;
    ENVIRPEROBSFOTANKTURN_ENVIRPEROBSFOTANKTURN_HAVEOBSTACLEANDCANNOTBETRUST = 3;
  }
  enum IntvAndWarnModInfoStsType {
    INTVANDWARNMODINFOSTS_INTVANDWARNMODFORLANEKEEPAIDSTS_INACTIVE = 0;
    INTVANDWARNMODINFOSTS_INTVANDWARNMODFORLANEKEEPAIDSTS_INTERVENTIONANDWARNING = 1;
    INTVANDWARNMODINFOSTS_INTVANDWARNMODFORLANEKEEPAIDSTS_INTERVENTIONONLY = 2;
    INTVANDWARNMODINFOSTS_INTVANDWARNMODFORLANEKEEPAIDSTS_WARNINGONLY = 3;
  }
  enum LaneChgAutInfoForAsyHiWayType {
    LANECHGAUTINFOFORASYHIWAY_NOLANECHGAVL = 0;
    LANECHGAUTINFOFORASYHIWAY_LANECHGAVLONLESIDE = 1;
    LANECHGAUTINFOFORASYHIWAY_LANECHGAVLONRISIDE = 2;
    LANECHGAUTINFOFORASYHIWAY_LANECHGAVLONRILESIDE = 3;
  }
  enum LaneChgAutStsForAsyHiWayType {
    LANECHGAUTSTSFORASYHIWAY_NOLANECHG = 0;
    LANECHGAUTSTSFORASYHIWAY_LANECHGONLESIDEFINSH = 1;
    LANECHGAUTSTSFORASYHIWAY_LANECHGONRISIDEFINSH = 2;
    LANECHGAUTSTSFORASYHIWAY_LANECHGFAILRONLESIDE = 3;
    LANECHGAUTSTSFORASYHIWAY_LANECHGFAILRONRISIDE = 4;
    LANECHGAUTSTSFORASYHIWAY_LANECHGNOTAVLONLESIDE = 5;
    LANECHGAUTSTSFORASYHIWAY_LANECHGNOTAVLONRISIDE = 6;
    LANECHGAUTSTSFORASYHIWAY_LANECHGONLESIDEPROGRESS = 7;
    LANECHGAUTSTSFORASYHIWAY_LANECHGONRISIDEPROGRESS = 8;
    LANECHGAUTSTSFORASYHIWAY_LANECHGCNCONLESIDE = 9;
    LANECHGAUTSTSFORASYHIWAY_LANECHGCNCONRISIDE = 10;
  }
  enum LcmaIndcnLeType {
    LCMAINDCNLE_WARNLVL_NOWARN = 0;
    LCMAINDCNLE_WARNLVL_WARNLVL1 = 1;
    LCMAINDCNLE_WARNLVL_WARNLVL2_NOAUDIO = 2;
    LCMAINDCNLE_WARNLVL_WARNLVL3_AUDIO = 3;
  }
  enum LcmaIndcnRiType {
    LCMAINDCNRI_WARNLVL_NOWARN = 0;
    LCMAINDCNRI_WARNLVL_WARNLVL1 = 1;
    LCMAINDCNRI_WARNLVL_WARNLVL2_NOAUDIO = 2;
    LCMAINDCNRI_WARNLVL_WARNLVL3_AUDIO = 3;
  }
  enum MemPrkgDispGroupMemPrkgLeftType {
    MEMPRKGDISPGROUPMEMPRKGLEFT_MEMPRKG_NODISPLAY = 0;
    MEMPRKGDISPGROUPMEMPRKGLEFT_MEMPRKG_OPTIONAL = 1;
    MEMPRKGDISPGROUPMEMPRKGLEFT_MEMPRKG_RECOMMAND = 2;
    MEMPRKGDISPGROUPMEMPRKGLEFT_MEMPRKG_RESERVED = 3;
  }
  enum MemPrkgDispGroupMemPrkgRightType {
    MEMPRKGDISPGROUPMEMPRKGRIGHT_MEMPRKG_NODISPLAY = 0;
    MEMPRKGDISPGROUPMEMPRKGRIGHT_MEMPRKG_OPTIONAL = 1;
    MEMPRKGDISPGROUPMEMPRKGRIGHT_MEMPRKG_RECOMMAND = 2;
    MEMPRKGDISPGROUPMEMPRKGRIGHT_MEMPRKG_RESERVED = 3;
  }
  enum RctaIndcnLeType {
    RCTAINDCNLE_LCMAINDCN_NOLCMAWARN = 0;
    RCTAINDCNLE_LCMAINDCN_LCMAWARNLVL1 = 1;
    RCTAINDCNLE_LCMAINDCN_NOTUSED = 2;
    RCTAINDCNLE_LCMAINDCN_LCMAWARNLVL2 = 3;
  }
  enum RctaIndcnRiType {
    RCTAINDCNRI_LCMAINDCN_NOLCMAWARN = 0;
    RCTAINDCNRI_LCMAINDCN_LCMAWARNLVL1 = 1;
    RCTAINDCNRI_LCMAINDCN_NOTUSED = 2;
    RCTAINDCNRI_LCMAINDCN_LCMAWARNLVL2 = 3;
  }
  enum SecBrkSysSt2BrkSysStType {
    SECBRKSYSST2BRKSYSST_NOTAVAILABLE_TEMPORARY = 0;
    SECBRKSYSST2BRKSYSST_NOTAVAILABLE_NOTRELEASED = 1;
    SECBRKSYSST2BRKSYSST_NOTAVAILABLE_PERMANENT = 2;
    SECBRKSYSST2BRKSYSST_NOTACTIVATED_FULLAVAILABLE = 3;
    SECBRKSYSST2BRKSYSST_ACTIVATION_PREPARATION = 4;
    SECBRKSYSST2BRKSYSST_ACTIVATION_PENDING = 5;
    SECBRKSYSST2BRKSYSST_ACTIVATION_PENDINGREDUNDANCYLOST = 6;
    SECBRKSYSST2BRKSYSST_ACTIVATION_PENDINGFAILOPERATION = 7;
    SECBRKSYSST2BRKSYSST_ACTIVATED_FULLAVAILABLE = 8;
    SECBRKSYSST2BRKSYSST_ACTIVATED_FAILOPERATION = 9;
    SECBRKSYSST2BRKSYSST_ACTIVATED_REDUNDANCYLOST = 10;
    SECBRKSYSST2BRKSYSST_DEACTIVATION_PENDING = 11;
  }
  enum StrAniReqType {
    STRANIREQ_STRANIREQ_NODISPLAY = 0;
    STRANIREQ_STRANIREQ_FORWARD = 1;
    STRANIREQ_STRANIREQ_BACKWARDS = 2;
    STRANIREQ_STRANIREQ_RESERVED = 3;
  }
  enum TiGapSetForLgtCtrlType {
    TIGAPSETFORLGTCTRL_TIGAPSETFORLGTCTRL_NONE = 0;
    TIGAPSETFORLGTCTRL_TIGAPSETFORLGTCTRL_TIMEGAP_1 = 1;
    TIGAPSETFORLGTCTRL_TIGAPSETFORLGTCTRL_TIMEGAP_2 = 2;
    TIGAPSETFORLGTCTRL_TIGAPSETFORLGTCTRL_TIMEGAP_3 = 3;
  }
  enum TrfcLiChgType {
    TRFCLICHG_TRFCLICHG_NO_REQUEST = 0;
    TRFCLICHG_TRFCLICHG_CHANGE_TO_TIMETOGO = 1;
    TRFCLICHG_TRFCLICHG_CHANGE_TO_REDLIGHT = 2;
    TRFCLICHG_TRFCLICHG_CHANGE_TO_GREENLIGHT = 3;
    TRFCLICHG_TRFCLICHG_RESERVED1 = 4;
    TRFCLICHG_TRFCLICHG_RESERVED2 = 5;
  }
  enum TrfcLiInfoType {
    TRFCLIINFO_TRFCLIINFO_EMPTY = 0;
    TRFCLIINFO_TRFCLIINFO_TIMETOGO = 1;
    TRFCLIINFO_TRFCLIINFO_LIGHTENREDCIRCLE = 2;
    TRFCLIINFO_TRFCLIINFO_LIGHTENYELLOWCIRCLE = 3;
    TRFCLIINFO_TRFCLIINFO_LIGHTENGREENCIRCLE = 4;
    TRFCLIINFO_TRFCLIINFO_LIGHTENREDLEFTARROW = 5;
    TRFCLIINFO_TRFCLIINFO_LIGHTENYELLOWLEFTARROW = 6;
    TRFCLIINFO_TRFCLIINFO_LIGHTENGREENLEFTARROW = 7;
    TRFCLIINFO_TRFCLIINFO_LIGHTENREDSTRAIGHTARROW = 8;
    TRFCLIINFO_TRFCLIINFO_LIGHTENYELLOWSTRAIGHTARROW = 9;
    TRFCLIINFO_TRFCLIINFO_LIGHTENGREENSTRAIGHTARROW = 10;
    TRFCLIINFO_TRFCLIINFO_LIGHTENREDRIGHTARROW = 11;
    TRFCLIINFO_TRFCLIINFO_LIGHTENYELLOWRIGHTARROW = 12;
    TRFCLIINFO_TRFCLIINFO_LIGHTENGREENRIGHTARROW = 13;
  }
  enum TrfcliInfoLeftType {
    TRFCLIINFOLEFT_TRFCLIINFOLEFT_EMPTY = 0;
    TRFCLIINFOLEFT_TRFCLIINFOLEFT_TIMETOGO = 1;
    TRFCLIINFOLEFT_TRFCLIINFOLEFT_LIGHTENREDCIRCLE = 2;
    TRFCLIINFOLEFT_TRFCLIINFOLEFT_LIGHTENYELLOWCIRCLE = 3;
    TRFCLIINFOLEFT_TRFCLIINFOLEFT_LIGHTENGREENCIRCLE = 4;
    TRFCLIINFOLEFT_TRFCLIINFOLEFT_LIGHTENREDLEFTARROW = 5;
    TRFCLIINFOLEFT_TRFCLIINFOLEFT_LIGHTENYELLOWLEFTARROW = 6;
    TRFCLIINFOLEFT_TRFCLIINFOLEFT_LIGHTENGREENLEFTARROW = 7;
    TRFCLIINFOLEFT_TRFCLIINFOLEFT_LIGHTENREDSTRAIGHTARROW = 8;
    TRFCLIINFOLEFT_TRFCLIINFOLEFT_LIGHTENYELLOWSTRAIGHTARROW = 9;
    TRFCLIINFOLEFT_TRFCLIINFOLEFT_LIGHTENGREENSTRAIGHTARROW = 10;
    TRFCLIINFOLEFT_TRFCLIINFOLEFT_LIGHTENREDRIGHTARROW = 11;
    TRFCLIINFOLEFT_TRFCLIINFOLEFT_LIGHTENYELLOWRIGHTARROW = 12;
    TRFCLIINFOLEFT_TRFCLIINFOLEFT_LIGHTENGREENRIGHTARROW = 13;
    TRFCLIINFOLEFT_TRFCLIINFOLEFT_UTURNREDLIGHT = 14;
    TRFCLIINFOLEFT_TRFCLIINFOLEFT_UTURNYELLOWLIGHT = 15;
    TRFCLIINFOLEFT_TRFCLIINFOLEFT_UTURNGREENLIGHT = 16;
  }
  enum TrfcliInfoRightType {
    TRFCLIINFORIGHT_TRFCLIINFORIGHT_EMPTY = 0;
    TRFCLIINFORIGHT_TRFCLIINFORIGHT_TIMETOGO = 1;
    TRFCLIINFORIGHT_TRFCLIINFORIGHT_LIGHTENREDCIRCLE = 2;
    TRFCLIINFORIGHT_TRFCLIINFORIGHT_LIGHTENYELLOWCIRCLE = 3;
    TRFCLIINFORIGHT_TRFCLIINFORIGHT_LIGHTENGREENCIRCLE = 4;
    TRFCLIINFORIGHT_TRFCLIINFORIGHT_LIGHTENREDLEFTARROW = 5;
    TRFCLIINFORIGHT_TRFCLIINFORIGHT_LIGHTENYELLOWLEFTARROW = 6;
    TRFCLIINFORIGHT_TRFCLIINFORIGHT_LIGHTENGREENLEFTARROW = 7;
    TRFCLIINFORIGHT_TRFCLIINFORIGHT_LIGHTENREDSTRAIGHTARROW = 8;
    TRFCLIINFORIGHT_TRFCLIINFORIGHT_LIGHTENYELLOWSTRAIGHTARROW = 9;
    TRFCLIINFORIGHT_TRFCLIINFORIGHT_LIGHTENGREENSTRAIGHTARROW = 10;
    TRFCLIINFORIGHT_TRFCLIINFORIGHT_LIGHTENREDRIGHTARROW = 11;
    TRFCLIINFORIGHT_TRFCLIINFORIGHT_LIGHTENYELLOWRIGHTARROW = 12;
    TRFCLIINFORIGHT_TRFCLIINFORIGHT_LIGHTENGREENRIGHTARROW = 13;
    TRFCLIINFORIGHT_TRFCLIINFORIGHT_UTURNREDLIGHT = 14;
    TRFCLIINFORIGHT_TRFCLIINFORIGHT_UTURNYELLOWLIGHT = 15;
    TRFCLIINFORIGHT_TRFCLIINFORIGHT_UTURNGREENLIGHT = 16;
  }
  // description The signal is send to HMI  , when driver press active button ,HMI should display the message :G-pilot function is not available in this driving cycle signal [] [0|31] [initial_value:0]
  optional AsyAutDrvgAvlType asy_aut_drvg_avl = 1;
  // [] [0|1] [initial_value:None]
  optional bool asy_aut_drvg_avl_ub = 2;
  // [] [0|1] [initial_value:None]
  optional bool asy_d2_d_brk_mod_req_ub = 3;
  // description D2D Function emergency brake request [] [0|3] [initial_value:0]
  optional AsyD2DBrkModReqBrkModReqType asy_d2_d_brk_mod_req_brk_mod_req = 4;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 asy_d2_d_brk_mod_req_chks = 5;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_d2_d_brk_mod_req_cntr = 6;
  // description This Signal is Lateral Offset for Truck and RoadEdge [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_lat_offst_sts = 7;
  // [] [0|1] [initial_value:None]
  optional bool asy_lat_offst_sts_ub = 8;
  // description NOA degrade message, reserved [] [0|1] [initial_value:0]
  optional bool asy_noa_degrade_msg = 9;
  // [] [0|1] [initial_value:None]
  optional bool asy_noa_degrade_msg_ub = 10;
  // description AsySteerApplyRqrd [] [0|3] [initial_value:0]
  optional AsySteerApplyRqrdType asy_steer_apply_rqrd = 11;
  // [] [0|1] [initial_value:None]
  optional bool asy_steer_apply_rqrd_ub = 12;
  // description Indicate to active brake prefill for driver. [] [0|1] [initial_value:0]
  optional bool brk_prec_actv = 13;
  // [] [0|1] [initial_value:None]
  optional bool brk_prec_actv_ub = 14;
  // [] [0|3] [initial_value:0]
  optional DoorOpenwarnLeIndcnType door_openwarn_le_indcn = 15;
  // [] [0|1] [initial_value:None]
  optional bool door_openwarn_le_indcn_ub = 16;
  // [] [0|3] [initial_value:0]
  optional DoorOpenwarnRiIndcnType door_openwarn_ri_indcn = 17;
  // [] [0|1] [initial_value:None]
  optional bool door_openwarn_ri_indcn_ub = 18;
  // description Environmental perception Obstacle for tankturn function [] [0|3] [initial_value:0]
  optional EnvirPerObsFoTankTurnType envir_per_obs_fo_tank_turn = 19;
  // [] [0|1] [initial_value:None]
  optional bool envir_per_obs_fo_tank_turn_ub = 20;
  // description Feedback to HMI for IntvAndWarnModForLaneKeepAidSts [] [0|3] [initial_value:1]
  optional IntvAndWarnModInfoStsType intv_and_warn_mod_info_sts = 21;
  // [] [0|1] [initial_value:None]
  optional bool intv_and_warn_mod_info_sts_ub = 22;
  // description Request to the driver information system to inform that left or right lane can automatically change lane. [] [0|3] [initial_value:0]
  optional LaneChgAutInfoForAsyHiWayType lane_chg_aut_info_for_asy_hi_way = 23;
  // [] [0|1] [initial_value:None]
  optional bool lane_chg_aut_info_for_asy_hi_way_ub = 24;
  // description Signals indicates if the automatic lane change is active or successful or failed. [] [0|15] [initial_value:0]
  optional LaneChgAutStsForAsyHiWayType lane_chg_aut_sts_for_asy_hi_way = 25;
  // [] [0|1] [initial_value:None]
  optional bool lane_chg_aut_sts_for_asy_hi_way_ub = 26;
  // description LCA left waning signal. [] [0|3] [initial_value:0]
  optional LcmaIndcnLeType lcma_indcn_le = 27;
  // [] [0|1] [initial_value:None]
  optional bool lcma_indcn_le_ub = 28;
  // description LCA right waning signal [] [0|3] [initial_value:0]
  optional LcmaIndcnRiType lcma_indcn_ri = 29;
  // [] [0|1] [initial_value:None]
  optional bool lcma_indcn_ri_ub = 30;
  // [] [0|1] [initial_value:None]
  optional bool mai_acc_inhit_req_ub = 31;
  // description E2E checkout [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 mai_acc_inhit_req_chks = 32;
  // description E2E checkout [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 mai_acc_inhit_req_cntr = 33;
  // description The plus signal is used to suppress the ECM response to the accelerator pedal and limit torque [] [0|1] [initial_value:0]
  optional bool mai_acc_inhit_req_mai_acc_inhit_req = 34;
  // [] [0|1] [initial_value:None]
  optional bool mem_prkg_disp_group_ub = 35;
  // description Memory parking slot display Left [] [0|3] [initial_value:0]
  optional MemPrkgDispGroupMemPrkgLeftType mem_prkg_disp_group_mem_prkg_left = 36;
  // description Memory parking slot display Right [] [0|3] [initial_value:0]
  optional MemPrkgDispGroupMemPrkgRightType mem_prkg_disp_group_mem_prkg_right = 37;
  // description It describes which state managers that are member of each resource group. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 net_adcu_actvt = 38;
  // [] [0|1] [initial_value:None]
  optional bool net_adcu_actvt_ub = 39;
  // description Single step parking remaining distance value [m] [0.0|25.5] [initial_value:255]
  optional double prkg_remain_dst_disp = 40;
  // [] [0|1] [initial_value:None]
  optional bool prkg_remain_dst_disp_ub = 41;
  // description Radar ripple shows request during parking search [] [0|1] [initial_value:0]
  optional bool rad_rip_req = 42;
  // [] [0|1] [initial_value:None]
  optional bool rad_rip_req_ub = 43;
  // [] [0|1] [initial_value:None]
  optional bool rcta_brk_req_ub = 44;
  // description RCTA brake request signal.couner [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 rcta_brk_req_chks = 45;
  // description RCTA brake request signal.checksum [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 rcta_brk_req_cntr = 46;
  // description RCTA brake request signal. [] [0|1] [initial_value:1]
  optional bool rcta_brk_req_rcta_brk_req = 47;
  // description RCTA left warning signal [] [0|3] [initial_value:0]
  optional RctaIndcnLeType rcta_indcn_le = 48;
  // [] [0|1] [initial_value:None]
  optional bool rcta_indcn_le_ub = 49;
  // description RCTA right warning signal [] [0|3] [initial_value:0]
  optional RctaIndcnRiType rcta_indcn_ri = 50;
  // [] [0|1] [initial_value:None]
  optional bool rcta_indcn_ri_ub = 51;
  // [] [0|1] [initial_value:None]
  optional bool sb_w_sync_sts_h2_ub = 52;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 sb_w_sync_sts_h2_chks = 53;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 sb_w_sync_sts_h2_cntr = 54;
  // description To indicate whether the steering wheel and road wheel is synchronized. [] [0|1] [initial_value:0]
  optional bool sb_w_sync_sts_h2_hwa_sync_sts = 55;
  // [] [0|1] [initial_value:None]
  optional bool sec_brk_sys_st2_ub = 56;
  // description brake system status [] [0|15] [initial_value:0]
  optional SecBrkSysSt2BrkSysStType sec_brk_sys_st2_brk_sys_st = 57;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 sec_brk_sys_st2_chks = 58;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 sec_brk_sys_st2_cntr = 59;
  // description Flow animation display in the process of car control [] [0|3] [initial_value:0]
  optional StrAniReqType str_ani_req = 60;
  // [] [0|1] [initial_value:None]
  optional bool str_ani_req_ub = 61;
  // [] [0|1] [initial_value:None]
  optional bool term_prkg_slot_ub = 62;
  // description Reserved [Unitless] [-256.0|255.0] [initial_value:256]
  optional double term_prkg_slot_angle_disp = 63;
  // description Point 3 X coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double term_prkg_slot_end_x1 = 64;
  // description Point 4 X coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double term_prkg_slot_end_x2 = 65;
  // description Point 3 Y coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double term_prkg_slot_end_y1 = 66;
  // description Point 4 Y coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double term_prkg_slot_end_y2 = 67;
  // description Point 1 X coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double term_prkg_slot_start_x1 = 68;
  // description Point 2 X coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double term_prkg_slot_start_x2 = 69;
  // description Point 1 Y coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double term_prkg_slot_start_y1 = 70;
  // description Point 2 Y coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double term_prkg_slot_start_y2 = 71;
  // [] [0|1] [initial_value:None]
  optional bool ter_pos_disp_ub = 72;
  // description Reserved [Unitless] [-256.0|255.0] [initial_value:256]
  optional double ter_pos_disp_angle_disp = 73;
  // description Point 3 X coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double ter_pos_disp_end_x1 = 74;
  // description Point 4 X coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double ter_pos_disp_end_x2 = 75;
  // description Point 3 Y coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double ter_pos_disp_end_y1 = 76;
  // description Point 4 Y coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double ter_pos_disp_end_y2 = 77;
  // description Point 1 X coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double ter_pos_disp_start_x1 = 78;
  // description Point 2 X coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double ter_pos_disp_start_x2 = 79;
  // description Point 1 Y coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double ter_pos_disp_start_y1 = 80;
  // description Point 2 Y coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double ter_pos_disp_start_y2 = 81;
  // description Longitudinal control time gap setting value [] [0|7] [initial_value:0]
  optional TiGapSetForLgtCtrlType ti_gap_set_for_lgt_ctrl = 82;
  // [] [0|1] [initial_value:None]
  optional bool ti_gap_set_for_lgt_ctrl_ub = 83;
  // description The traffic light  information changing status [] [0|7] [initial_value:0]
  optional TrfcLiChgType trfc_li_chg = 84;
  // [] [0|1] [initial_value:None]
  optional bool trfc_li_chg_ub = 85;
  // description To tell driver the current traffic condition, such as the front without traffic lights, traffic lights ahead, the front for a red light, for yellow light ahead, ahead for the green light. [] [0|15] [initial_value:0]
  optional TrfcLiInfoType trfc_li_info = 86;
  // [] [0|1] [initial_value:None]
  optional bool trfc_li_info_ub = 87;
  // description To tell driver the current traffic condition, such as the front without traffic lights, traffic lights ahead, the front for a red light, for yellow light ahead, ahead for the green light,and the arrow light or U-turn light [] [0|31] [initial_value:0]
  optional TrfcliInfoLeftType trfcli_info_left = 88;
  // [] [0|1] [initial_value:None]
  optional bool trfcli_info_left_ub = 89;
  // description To tell driver the current traffic condition, such as the front without traffic lights, traffic lights ahead, the front for a red light, for yellow light ahead, ahead for the green light,and the arrow light or U-turn light [] [0|31] [initial_value:0]
  optional TrfcliInfoRightType trfcli_info_right = 90;
  // [] [0|1] [initial_value:None]
  optional bool trfcli_info_right_ub = 91;
  // [] [0|1] [initial_value:None]
  optional bool asy_sv_ctrl_req_group_ub = 92;
  // description chks [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 asy_sv_ctrl_req_group_chks = 93;
  // description cntr [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_sv_ctrl_req_group_cntr = 94;
  // description Longitudinal control distance request [m] [-10.0|317.67] [initial_value:32767]
  optional double asy_sv_ctrl_req_group_dst_req = 95;
  // description Target gear request [] [0|7] [initial_value:0]
  optional AsySVCtrlReqGroupGearCtrlReqType asy_sv_ctrl_req_group_gear_ctrl_req = 96;
  // description Silky control mode request [] [0|1] [initial_value:0]
  optional bool asy_sv_ctrl_req_group_smooth_ctrl_mod = 97;
  // description Vertical control speed request [m/s] [0.0|81.91] [initial_value:0]
  optional double asy_sv_ctrl_req_group_spd_req = 98;
}

message ADCU_ZCUCANFD1_RESD_FR01_131 {
// Control Message
  // description ActvSafetyResdSig1 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig1 = 1;
  // [] [0|1] [initial_value:None]
  optional bool actv_safety_resd_sig1_ub = 2;
  // description ActvSafetyResdSig10 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig10 = 3;
  // [] [0|1] [initial_value:None]
  optional bool actv_safety_resd_sig10_ub = 4;
  // description ActvSafetyResdSig11 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig11 = 5;
  // [] [0|1] [initial_value:None]
  optional bool actv_safety_resd_sig11_ub = 6;
  // [] [0|1] [initial_value:None]
  optional bool actv_safety_resd_sig12_safety_ub = 7;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig12_safety_chks = 8;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig12_safety_cntr = 9;
  // description ActvSafetyResdSig12Safety [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig12_safety_u_int16 = 10;
  // [] [0|1] [initial_value:None]
  optional bool actv_safety_resd_sig13_safety_ub = 11;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig13_safety_chks = 12;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig13_safety_cntr = 13;
  // description ActvSafetyResdSig13Safety [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig13_safety_u_int16 = 14;
  // [] [0|1] [initial_value:None]
  optional bool actv_safety_resd_sig14_safety_ub = 15;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig14_safety_chks = 16;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig14_safety_cntr = 17;
  // description ActvSafetyResdSig14Safety [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig14_safety_u_int16 = 18;
  // [] [0|1] [initial_value:None]
  optional bool actv_safety_resd_sig15_safety_ub = 19;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig15_safety_chks = 20;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig15_safety_cntr = 21;
  // description ActvSafetyResdSig15Safety [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig15_safety_u_int16 = 22;
  // description ActvSafetyResdSig16 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig16 = 23;
  // [] [0|1] [initial_value:None]
  optional bool actv_safety_resd_sig16_ub = 24;
  // description ActvSafetyResdSig17 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig17 = 25;
  // [] [0|1] [initial_value:None]
  optional bool actv_safety_resd_sig17_ub = 26;
  // description ActvSafetyResdSig18 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig18 = 27;
  // [] [0|1] [initial_value:None]
  optional bool actv_safety_resd_sig18_ub = 28;
  // [] [0|1] [initial_value:None]
  optional bool actv_safety_resd_sig19_safety_ub = 29;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig19_safety_chks = 30;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig19_safety_cntr = 31;
  // description ActvSafetyResdSig19Safety [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig19_safety_u_int32 = 32;
  // description ActvSafetyResdSig2 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig2 = 33;
  // [] [0|1] [initial_value:None]
  optional bool actv_safety_resd_sig2_ub = 34;
  // description ActvSafetyResdSig20 [ns] [0.0|18446744073709552000.0] [initial_value:0]
  optional double actv_safety_resd_sig20 = 35;
  // [] [0|1] [initial_value:None]
  optional bool actv_safety_resd_sig20_ub = 36;
  // description ActvSafetyResdSig3 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig3 = 37;
  // [] [0|1] [initial_value:None]
  optional bool actv_safety_resd_sig3_ub = 38;
  // description ActvSafetyResdSig4 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig4 = 39;
  // [] [0|1] [initial_value:None]
  optional bool actv_safety_resd_sig4_ub = 40;
  // description ActvSafetyResdSig5 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig5 = 41;
  // [] [0|1] [initial_value:None]
  optional bool actv_safety_resd_sig5_ub = 42;
  // description ActvSafetyResdSig6 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig6 = 43;
  // [] [0|1] [initial_value:None]
  optional bool actv_safety_resd_sig6_ub = 44;
  // description ActvSafetyResdSig7 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig7 = 45;
  // [] [0|1] [initial_value:None]
  optional bool actv_safety_resd_sig7_ub = 46;
  // description ActvSafetyResdSig8 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig8 = 47;
  // [] [0|1] [initial_value:None]
  optional bool actv_safety_resd_sig8_ub = 48;
  // description ActvSafetyResdSig9 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 actv_safety_resd_sig9 = 49;
  // [] [0|1] [initial_value:None]
  optional bool actv_safety_resd_sig9_ub = 50;
}

message ADCU_TO_DHU_SEC_OC_FR01_132 {
// Control Message
  // [] [0|1] [initial_value:None]
  optional bool asy_a_lgt_req_for_cmft_ub = 1;
  // description AsyCmftLgtNegLimForJerk [m/s^3] [-30.0|30.0] [initial_value:3000]
  optional double asy_a_lgt_req_for_cmft_asy_cmft_lgt_neg_lim_for_jerk = 2;
  // description AsyCmftLgtPosLimForJerk [m/s^3] [-30.0|30.0] [initial_value:3000]
  optional double asy_a_lgt_req_for_cmft_asy_cmft_lgt_pos_lim_for_jerk = 3;
  // description max [m/s^2] [-12.0|12.0] [initial_value:1200]
  optional double asy_a_lgt_req_for_cmft_max = 4;
  // description min [m/s^2] [-12.0|12.0] [initial_value:1200]
  optional double asy_a_lgt_req_for_cmft_min = 5;
  // description Take Over requirement [] [0|1] [initial_value:0]
  optional bool asy_lgt_ctrl_take_over_req = 6;
  // [] [0|1] [initial_value:None]
  optional bool asy_lgt_ctrl_take_over_req_ub = 7;
  // description AsyStandStillReqForCmft [] [0|1] [initial_value:0]
  optional bool asy_stand_still_req_for_cmft = 8;
  // [] [0|1] [initial_value:None]
  optional bool asy_stand_still_req_for_cmft_ub = 9;
  // [] [0|1] [initial_value:None]
  optional bool sfty_decel_group_safe_ub = 10;
  // description target deceleration [m/s^2] [0.0|15.0] [initial_value:0]
  optional double sfty_decel_group_safe_asy_sfty_decel_req = 11;
  // [] [0|1] [initial_value:0]
  optional bool sfty_decel_group_safe_asy_sfty_ena_decel = 12;
  // description crc [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 sfty_decel_group_safe_chks = 13;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 sfty_decel_group_safe_cntr = 14;
}

message ZCUD_ZCUCANFD1_RESD_FR01_134 {
// Report Message
  // description ZCUDMResdSig1 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig1 = 1;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig1_ub = 2;
  // description ZCUDMResdSig10 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig10 = 3;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig10_ub = 4;
  // description ZCUDMResdSig11 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig11 = 5;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig11_ub = 6;
  // description ZCUDMResdSig12 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig12 = 7;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig12_ub = 8;
  // description ZCUDMResdSig13 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig13 = 9;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig13_ub = 10;
  // description ZCUDMResdSig14 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig14 = 11;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig14_ub = 12;
  // description ZCUDMResdSig15 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig15 = 13;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig15_ub = 14;
  // description ZCUDMResdSig16 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig16 = 15;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig16_ub = 16;
  // description ZCUDMResdSig17 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig17 = 17;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig17_ub = 18;
  // description ZCUDMResdSig18 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig18 = 19;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig18_ub = 20;
  // description ZCUDMResdSig19 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig19 = 21;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig19_ub = 22;
  // description ZCUDMResdSig2 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig2 = 23;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig2_ub = 24;
  // description ZCUDMResdSig20 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig20 = 25;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig20_ub = 26;
  // description ZCUDMResdSig21 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig21 = 27;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig21_ub = 28;
  // description ZCUDMResdSig22 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig22 = 29;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig22_ub = 30;
  // description ZCUDMResdSig23 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig23 = 31;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig23_ub = 32;
  // description ZCUDMResdSig24 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig24 = 33;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig24_ub = 34;
  // description ZCUDMResdSig25 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig25 = 35;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig25_ub = 36;
  // description ZCUDMResdSig26 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig26 = 37;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig26_ub = 38;
  // description ZCUDMResdSig27 [Unitless] [0.0|16777215.0] [initial_value:0]
  optional uint32 zcudm_resd_sig27 = 39;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig27_ub = 40;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig28_safety_ub = 41;
  // description ZCUDMResdSig28Safety [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 zcudm_resd_sig28_safety_chks = 42;
  // description ZCUDMResdSig28Safety [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 zcudm_resd_sig28_safety_cntr = 43;
  // description ZCUDMResdSig28Safety [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 zcudm_resd_sig28_safety_u_int32 = 44;
  // description ZCUDMResdSig3 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig3 = 45;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig3_ub = 46;
  // description ZCUDMResdSig4 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig4 = 47;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig4_ub = 48;
  // description ZCUDMResdSig5 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig5 = 49;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig5_ub = 50;
  // description ZCUDMResdSig6 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig6 = 51;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig6_ub = 52;
  // description ZCUDMResdSig7 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig7 = 53;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig7_ub = 54;
  // description ZCUDMResdSig8 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig8 = 55;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig8_ub = 56;
  // description ZCUDMResdSig9 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcudm_resd_sig9 = 57;
  // [] [0|1] [initial_value:None]
  optional bool zcudm_resd_sig9_ub = 58;
}

message ZCUP_ZCUCANFD1_RESD_FR01_135 {
// Report Message
  // description ZCUPResdSig1 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig1 = 1;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig1_ub = 2;
  // description ZCUPResdSig10 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig10 = 3;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig10_ub = 4;
  // description ZCUPResdSig11 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig11 = 5;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig11_ub = 6;
  // description ZCUPResdSig12 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig12 = 7;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig12_ub = 8;
  // description ZCUPResdSig13 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig13 = 9;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig13_ub = 10;
  // description ZCUPResdSig14 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig14 = 11;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig14_ub = 12;
  // description ZCUPResdSig15 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig15 = 13;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig15_ub = 14;
  // description ZCUPResdSig16 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig16 = 15;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig16_ub = 16;
  // description ZCUPResdSig17 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig17 = 17;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig17_ub = 18;
  // description ZCUPResdSig18 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig18 = 19;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig18_ub = 20;
  // description ZCUPResdSig19 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig19 = 21;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig19_ub = 22;
  // description ZCUPResdSig2 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig2 = 23;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig2_ub = 24;
  // description ZCUPResdSig20 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig20 = 25;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig20_ub = 26;
  // description ZCUPResdSig21 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig21 = 27;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig21_ub = 28;
  // description ZCUPResdSig22 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig22 = 29;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig22_ub = 30;
  // description ZCUPResdSig23 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig23 = 31;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig23_ub = 32;
  // description ZCUPResdSig24 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig24 = 33;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig24_ub = 34;
  // description ZCUPResdSig25 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig25 = 35;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig25_ub = 36;
  // description ZCUPResdSig26 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig26 = 37;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig26_ub = 38;
  // description ZCUPResdSig27 [Unitless] [0.0|16777215.0] [initial_value:0]
  optional uint32 zcup_resd_sig27 = 39;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig27_ub = 40;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig28_safety_ub = 41;
  // description ZCUPResdSig28Safety [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 zcup_resd_sig28_safety_chks = 42;
  // description ZCUPResdSig28Safety [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 zcup_resd_sig28_safety_cntr = 43;
  // description ZCUPResdSig28Safety [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 zcup_resd_sig28_safety_u_int32 = 44;
  // description ZCUPResdSig3 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig3 = 45;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig3_ub = 46;
  // description ZCUPResdSig4 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig4 = 47;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig4_ub = 48;
  // description ZCUPResdSig5 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig5 = 49;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig5_ub = 50;
  // description ZCUPResdSig6 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig6 = 51;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig6_ub = 52;
  // description ZCUPResdSig7 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig7 = 53;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig7_ub = 54;
  // description ZCUPResdSig8 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig8 = 55;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig8_ub = 56;
  // description ZCUPResdSig9 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 zcup_resd_sig9 = 57;
  // [] [0|1] [initial_value:None]
  optional bool zcup_resd_sig9_ub = 58;
}

message ZCUD_ZCUCANFD1_RESD_FR02_139 {
// Report Message
  // description Propulsion reserve signal [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 propulsion_resd_sig1 = 1;
  // [] [0|1] [initial_value:None]
  optional bool propulsion_resd_sig1_ub = 2;
  // description Propulsion reserve signal [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 propulsion_resd_sig10 = 3;
  // [] [0|1] [initial_value:None]
  optional bool propulsion_resd_sig10_ub = 4;
  // [] [0|1] [initial_value:None]
  optional bool propulsion_resd_sig11_safety_ub = 5;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 propulsion_resd_sig11_safety_chks = 6;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 propulsion_resd_sig11_safety_cntr = 7;
  // description Propulsion reserve signal [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 propulsion_resd_sig11_safety_u_int16 = 8;
  // [] [0|1] [initial_value:None]
  optional bool propulsion_resd_sig12_safety_ub = 9;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 propulsion_resd_sig12_safety_chks = 10;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 propulsion_resd_sig12_safety_cntr = 11;
  // description Propulsion reserve signal [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 propulsion_resd_sig12_safety_u_int16 = 12;
  // [] [0|1] [initial_value:None]
  optional bool propulsion_resd_sig13_safety_ub = 13;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 propulsion_resd_sig13_safety_chks = 14;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 propulsion_resd_sig13_safety_cntr = 15;
  // description Propulsion reserve signal [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 propulsion_resd_sig13_safety_u_int16 = 16;
  // [] [0|1] [initial_value:None]
  optional bool propulsion_resd_sig14_safety_ub = 17;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 propulsion_resd_sig14_safety_chks = 18;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 propulsion_resd_sig14_safety_cntr = 19;
  // description Propulsion reserve signal [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 propulsion_resd_sig14_safety_u_int16 = 20;
  // [] [0|1] [initial_value:None]
  optional bool propulsion_resd_sig15_safety_ub = 21;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 propulsion_resd_sig15_safety_chks = 22;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 propulsion_resd_sig15_safety_cntr = 23;
  // description Propulsion reserve signal [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 propulsion_resd_sig15_safety_u_int16 = 24;
  // [] [0|1] [initial_value:None]
  optional bool propulsion_resd_sig16_safety_ub = 25;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 propulsion_resd_sig16_safety_chks = 26;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 propulsion_resd_sig16_safety_cntr = 27;
  // description Propulsion reserve signal [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 propulsion_resd_sig16_safety_u_int16 = 28;
  // description Propulsion reserve signal [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 propulsion_resd_sig17 = 29;
  // [] [0|1] [initial_value:None]
  optional bool propulsion_resd_sig17_ub = 30;
  // description Propulsion reserve signal [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 propulsion_resd_sig18 = 31;
  // [] [0|1] [initial_value:None]
  optional bool propulsion_resd_sig18_ub = 32;
  // description Propulsion reserve signal [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 propulsion_resd_sig19 = 33;
  // [] [0|1] [initial_value:None]
  optional bool propulsion_resd_sig19_ub = 34;
  // description Propulsion reserve signal [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 propulsion_resd_sig2 = 35;
  // [] [0|1] [initial_value:None]
  optional bool propulsion_resd_sig2_ub = 36;
  // [] [0|1] [initial_value:None]
  optional bool propulsion_resd_sig20_safety_ub = 37;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 propulsion_resd_sig20_safety_chks = 38;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 propulsion_resd_sig20_safety_cntr = 39;
  // description Propulsion reserve signal [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 propulsion_resd_sig20_safety_u_int32 = 40;
  // description Propulsion reserve signal [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 propulsion_resd_sig3 = 41;
  // [] [0|1] [initial_value:None]
  optional bool propulsion_resd_sig3_ub = 42;
  // description Propulsion reserve signal [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 propulsion_resd_sig4 = 43;
  // [] [0|1] [initial_value:None]
  optional bool propulsion_resd_sig4_ub = 44;
  // description Propulsion reserve signal [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 propulsion_resd_sig5 = 45;
  // [] [0|1] [initial_value:None]
  optional bool propulsion_resd_sig5_ub = 46;
  // description Propulsion reserve signal [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 propulsion_resd_sig6 = 47;
  // [] [0|1] [initial_value:None]
  optional bool propulsion_resd_sig6_ub = 48;
  // description Propulsion reserve signal [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 propulsion_resd_sig7 = 49;
  // [] [0|1] [initial_value:None]
  optional bool propulsion_resd_sig7_ub = 50;
  // description Propulsion reserve signal [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 propulsion_resd_sig8 = 51;
  // [] [0|1] [initial_value:None]
  optional bool propulsion_resd_sig8_ub = 52;
  // description Propulsion reserve signal [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 propulsion_resd_sig9 = 53;
  // [] [0|1] [initial_value:None]
  optional bool propulsion_resd_sig9_ub = 54;
}

message DHUZCUDCANFD1_SEC_OC_SYNC_FR_151 {
// Report Message
  // description The master FV is kept in line with the slave FV tirp counter [Unitless] [0.0|65535.0] [initial_value:1]
  optional uint32 trip_reset_sync_msg_resetcounter = 1;
  // description The master FV is kept in line with the slave FV Reset counter [Unitless] [0.0|16777215.0] [initial_value:1]
  optional uint32 trip_reset_sync_msg_tripcounter = 2;
}

message VDCU_ZCUCANFD1_RESD_FR01_153 {
// Report Message
  enum WhlLockStatusType {
    WHLLOCKSTATUS_WHLLOCKSTATUS_INIT = 0;
    WHLLOCKSTATUS_WHLLOCKSTATUS_LOCKWHEELSUCCESS = 1;
    WHLLOCKSTATUS_WHLLOCKSTATUS_UNLOCKWHEELSUCCESS = 2;
    WHLLOCKSTATUS_WHLLOCKSTATUS_LOCKWHEELFAIL = 3;
    WHLLOCKSTATUS_WHLLOCKSTATUS_UNLOCKWHEELFAIL = 4;
    WHLLOCKSTATUS_WHLLOCKSTATUS_RESERVED1 = 5;
    WHLLOCKSTATUS_WHLLOCKSTATUS_RESERVED2 = 6;
    WHLLOCKSTATUS_WHLLOCKSTATUS_RESERVED3 = 7;
  }
  // description DPA function is availiable or not judged by TVC function. [] [0|1] [initial_value:1]
  optional bool tvc_not_avail_for_dpa = 1;
  // [] [0|1] [initial_value:None]
  optional bool tvc_not_avail_for_dpa_ub = 2;
  // [] [0|1] [initial_value:None]
  optional bool vdcu_chassis_canfd2_resd_sig1_safety_ub = 3;
  // description VDCUChassisCANFD2ResdSig1 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 vdcu_chassis_canfd2_resd_sig1_safety_chks = 4;
  // description VDCUChassisCANFD2ResdSig1 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 vdcu_chassis_canfd2_resd_sig1_safety_cntr = 5;
  // description VDCUChassisCANFD2ResdSig1 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 vdcu_chassis_canfd2_resd_sig1_safety_u_int16 = 6;
  // description VDCUChassisCANFD2ResdSig1 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 vdcu_chassis_canfd2_resd_sig1_safety_u_int4 = 7;
  // [] [0|1] [initial_value:None]
  optional bool vdcu_chassis_canfd2_resd_sig2_safety_ub = 8;
  // description VDCUChassisCANFD2ResdSig1 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 vdcu_chassis_canfd2_resd_sig2_safety_chks = 9;
  // description VDCUChassisCANFD2ResdSig1 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 vdcu_chassis_canfd2_resd_sig2_safety_cntr = 10;
  // description VDCUChassisCANFD2ResdSig1 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 vdcu_chassis_canfd2_resd_sig2_safety_u_int16 = 11;
  // description VDCUChassisCANFD2ResdSig1 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 vdcu_chassis_canfd2_resd_sig2_safety_u_int4 = 12;
  // [] [0|1] [initial_value:None]
  optional bool vdcu_chassis_canfd2_resd_sig3_safety_ub = 13;
  // description VDCUChassisCANFD2ResdSig3 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 vdcu_chassis_canfd2_resd_sig3_safety_chks = 14;
  // description VDCUChassisCANFD2ResdSig3 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 vdcu_chassis_canfd2_resd_sig3_safety_cntr = 15;
  // description VDCUChassisCANFD2ResdSig3 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 vdcu_chassis_canfd2_resd_sig3_safety_u_int16 = 16;
  // description VDCUChassisCANFD2ResdSig3 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 vdcu_chassis_canfd2_resd_sig3_safety_u_int4 = 17;
  // [] [0|1] [initial_value:None]
  optional bool vdcu_chassis_canfd2_resd_sig4_safety_ub = 18;
  // description VDCUChassisCANFD2ResdSig4 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 vdcu_chassis_canfd2_resd_sig4_safety_chks = 19;
  // description VDCUChassisCANFD2ResdSig4 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 vdcu_chassis_canfd2_resd_sig4_safety_cntr = 20;
  // description VDCUChassisCANFD2ResdSig4 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 vdcu_chassis_canfd2_resd_sig4_safety_u_int16 = 21;
  // description VDCUChassisCANFD2ResdSig4 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 vdcu_chassis_canfd2_resd_sig4_safety_u_int4 = 22;
  // [] [0|1] [initial_value:None]
  optional bool vdcu_chassis_resd_sig1_safety_ub = 23;
  // description VDCUChassisResdSig1 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 vdcu_chassis_resd_sig1_safety_chks = 24;
  // description VDCUChassisResdSig1 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 vdcu_chassis_resd_sig1_safety_cntr = 25;
  // description VDCUChassisResdSig1 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 vdcu_chassis_resd_sig1_safety_u_int16 = 26;
  // description VDCUChassisResdSig1 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 vdcu_chassis_resd_sig1_safety_u_int4 = 27;
  // [] [0|1] [initial_value:None]
  optional bool vdcu_chassis_resd_sig2_safety_ub = 28;
  // description VDCUChassisResdSig2 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 vdcu_chassis_resd_sig2_safety_chks = 29;
  // description VDCUChassisResdSig2 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 vdcu_chassis_resd_sig2_safety_cntr = 30;
  // description VDCUChassisResdSig2 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 vdcu_chassis_resd_sig2_safety_u_int16 = 31;
  // description VDCUChassisResdSig2 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 vdcu_chassis_resd_sig2_safety_u_int4 = 32;
  // [] [0|1] [initial_value:None]
  optional bool vdcu_chassis_resd_sig3_safety_ub = 33;
  // description VDCUChassisResdSig3 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 vdcu_chassis_resd_sig3_safety_chks = 34;
  // description VDCUChassisResdSig3 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 vdcu_chassis_resd_sig3_safety_cntr = 35;
  // description VDCUChassisResdSig3 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 vdcu_chassis_resd_sig3_safety_u_int16 = 36;
  // description VDCUChassisResdSig3 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 vdcu_chassis_resd_sig3_safety_u_int4 = 37;
  // [] [0|1] [initial_value:None]
  optional bool vdcu_chassis_resd_sig4_safety_ub = 38;
  // description VDCUChassisResdSig4 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 vdcu_chassis_resd_sig4_safety_chks = 39;
  // description VDCUChassisResdSig4 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 vdcu_chassis_resd_sig4_safety_cntr = 40;
  // description VDCUChassisResdSig4 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 vdcu_chassis_resd_sig4_safety_u_int16 = 41;
  // description VDCUChassisResdSig4 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 vdcu_chassis_resd_sig4_safety_u_int4 = 42;
  // [] [0|1] [initial_value:None]
  optional bool vdcu_chassis_resd_sig5_safety_ub = 43;
  // description VDCUChassisResdSig5 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 vdcu_chassis_resd_sig5_safety_chks = 44;
  // description VDCUChassisResdSig5 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 vdcu_chassis_resd_sig5_safety_cntr = 45;
  // description VDCUChassisResdSig5 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 vdcu_chassis_resd_sig5_safety_u_int16 = 46;
  // description VDCUChassisResdSig5 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 vdcu_chassis_resd_sig5_safety_u_int4 = 47;
  // description Wheel lock status for DPA function. [] [0|7] [initial_value:0]
  optional WhlLockStatusType whl_lock_status = 48;
  // [] [0|1] [initial_value:None]
  optional bool whl_lock_status_ub = 49;
}

message ADCU_ZCUDCANFD1_SYCN_REQ_FR_155 {
// Control Message
  // description SecOC signal use [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 trip_reset_sync_req_msg_asdm = 1;
}

message DHU_ZCUCANFD1_FR16_160 {
// Report Message
  enum BLEKeyBtnLockStsBtnSts2Type {
    BLEKEYBTNLOCKSTSBTNSTS2_BTNSTS2_IDLE = 0;
    BLEKEYBTNLOCKSTSBTNSTS2_BTNSTS2_SHORTPSD = 1;
    BLEKEYBTNLOCKSTSBTNSTS2_BTNSTS2_TWICEPSD = 2;
    BLEKEYBTNLOCKSTSBTNSTS2_BTNSTS2_LONGPSD = 3;
    BLEKEYBTNLOCKSTSBTNSTS2_BTNSTS2_RELEASED = 4;
  }
  enum BLEKeyBtnLockStsKeyIdType {
    BLEKEYBTNLOCKSTSKEYID_KEYID1_KEY0 = 0;
    BLEKEYBTNLOCKSTSKEYID_KEYID1_KEY1 = 1;
    BLEKEYBTNLOCKSTSKEYID_KEYID1_KEY2 = 2;
    BLEKEYBTNLOCKSTSKEYID_KEYID1_KEY3 = 3;
    BLEKEYBTNLOCKSTSKEYID_KEYID1_KEY4 = 4;
    BLEKEYBTNLOCKSTSKEYID_KEYID1_KEY5 = 5;
    BLEKEYBTNLOCKSTSKEYID_KEYID1_KEY6 = 6;
    BLEKEYBTNLOCKSTSKEYID_KEYID1_KEY7 = 7;
    BLEKEYBTNLOCKSTSKEYID_KEYID1_KEY8 = 8;
    BLEKEYBTNLOCKSTSKEYID_KEYID1_KEY9 = 9;
    BLEKEYBTNLOCKSTSKEYID_KEYID1_KEY10 = 10;
    BLEKEYBTNLOCKSTSKEYID_KEYID1_KEY11 = 11;
  }
  enum BLEKeyBtnRPAStsBtnSts2Type {
    BLEKEYBTNRPASTSBTNSTS2_BTNSTS2_IDLE = 0;
    BLEKEYBTNRPASTSBTNSTS2_BTNSTS2_SHORTPSD = 1;
    BLEKEYBTNRPASTSBTNSTS2_BTNSTS2_TWICEPSD = 2;
    BLEKEYBTNRPASTSBTNSTS2_BTNSTS2_LONGPSD = 3;
    BLEKEYBTNRPASTSBTNSTS2_BTNSTS2_RELEASED = 4;
  }
  enum BLEKeyBtnRPAStsKeyIdType {
    BLEKEYBTNRPASTSKEYID_KEYID1_KEY0 = 0;
    BLEKEYBTNRPASTSKEYID_KEYID1_KEY1 = 1;
    BLEKEYBTNRPASTSKEYID_KEYID1_KEY2 = 2;
    BLEKEYBTNRPASTSKEYID_KEYID1_KEY3 = 3;
    BLEKEYBTNRPASTSKEYID_KEYID1_KEY4 = 4;
    BLEKEYBTNRPASTSKEYID_KEYID1_KEY5 = 5;
    BLEKEYBTNRPASTSKEYID_KEYID1_KEY6 = 6;
    BLEKEYBTNRPASTSKEYID_KEYID1_KEY7 = 7;
    BLEKEYBTNRPASTSKEYID_KEYID1_KEY8 = 8;
    BLEKEYBTNRPASTSKEYID_KEYID1_KEY9 = 9;
    BLEKEYBTNRPASTSKEYID_KEYID1_KEY10 = 10;
    BLEKEYBTNRPASTSKEYID_KEYID1_KEY11 = 11;
  }
  enum BLEKeyBtnTrStsBtnSts2Type {
    BLEKEYBTNTRSTSBTNSTS2_BTNSTS2_IDLE = 0;
    BLEKEYBTNTRSTSBTNSTS2_BTNSTS2_SHORTPSD = 1;
    BLEKEYBTNTRSTSBTNSTS2_BTNSTS2_TWICEPSD = 2;
    BLEKEYBTNTRSTSBTNSTS2_BTNSTS2_LONGPSD = 3;
    BLEKEYBTNTRSTSBTNSTS2_BTNSTS2_RELEASED = 4;
  }
  enum BLEKeyBtnTrStsKeyIdType {
    BLEKEYBTNTRSTSKEYID_KEYID1_KEY0 = 0;
    BLEKEYBTNTRSTSKEYID_KEYID1_KEY1 = 1;
    BLEKEYBTNTRSTSKEYID_KEYID1_KEY2 = 2;
    BLEKEYBTNTRSTSKEYID_KEYID1_KEY3 = 3;
    BLEKEYBTNTRSTSKEYID_KEYID1_KEY4 = 4;
    BLEKEYBTNTRSTSKEYID_KEYID1_KEY5 = 5;
    BLEKEYBTNTRSTSKEYID_KEYID1_KEY6 = 6;
    BLEKEYBTNTRSTSKEYID_KEYID1_KEY7 = 7;
    BLEKEYBTNTRSTSKEYID_KEYID1_KEY8 = 8;
    BLEKEYBTNTRSTSKEYID_KEYID1_KEY9 = 9;
    BLEKEYBTNTRSTSKEYID_KEYID1_KEY10 = 10;
    BLEKEYBTNTRSTSKEYID_KEYID1_KEY11 = 11;
  }
  enum BLEKeyBtnUnlckStsBtnSts2Type {
    BLEKEYBTNUNLCKSTSBTNSTS2_BTNSTS2_IDLE = 0;
    BLEKEYBTNUNLCKSTSBTNSTS2_BTNSTS2_SHORTPSD = 1;
    BLEKEYBTNUNLCKSTSBTNSTS2_BTNSTS2_TWICEPSD = 2;
    BLEKEYBTNUNLCKSTSBTNSTS2_BTNSTS2_LONGPSD = 3;
    BLEKEYBTNUNLCKSTSBTNSTS2_BTNSTS2_RELEASED = 4;
  }
  enum BLEKeyBtnUnlckStsKeyIdType {
    BLEKEYBTNUNLCKSTSKEYID_KEYID1_KEY0 = 0;
    BLEKEYBTNUNLCKSTSKEYID_KEYID1_KEY1 = 1;
    BLEKEYBTNUNLCKSTSKEYID_KEYID1_KEY2 = 2;
    BLEKEYBTNUNLCKSTSKEYID_KEYID1_KEY3 = 3;
    BLEKEYBTNUNLCKSTSKEYID_KEYID1_KEY4 = 4;
    BLEKEYBTNUNLCKSTSKEYID_KEYID1_KEY5 = 5;
    BLEKEYBTNUNLCKSTSKEYID_KEYID1_KEY6 = 6;
    BLEKEYBTNUNLCKSTSKEYID_KEYID1_KEY7 = 7;
    BLEKEYBTNUNLCKSTSKEYID_KEYID1_KEY8 = 8;
    BLEKEYBTNUNLCKSTSKEYID_KEYID1_KEY9 = 9;
    BLEKEYBTNUNLCKSTSKEYID_KEYID1_KEY10 = 10;
    BLEKEYBTNUNLCKSTSKEYID_KEYID1_KEY11 = 11;
  }
  enum BLEKeyPosnSts0BLEKeyPosnStsDirStsType {
    BLEKEYPOSNSTS0BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_IDLE = 0;
    BLEKEYPOSNSTS0BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_FRNTFOUND = 1;
    BLEKEYPOSNSTS0BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_LEFOUND = 2;
    BLEKEYPOSNSTS0BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_RIFOUND = 3;
    BLEKEYPOSNSTS0BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_REARFOUND = 4;
  }
  enum BLEKeyPosnSts0BLEKeyPosnStsDisStsType {
    BLEKEYPOSNSTS0BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_IDLE = 0;
    BLEKEYPOSNSTS0BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_NOTKEYFOUND = 1;
    BLEKEYPOSNSTS0BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_INTERNALFOUND = 2;
    BLEKEYPOSNSTS0BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_EXTERNALWITHIN6M = 3;
    BLEKEYPOSNSTS0BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_EXTERNALEXCEED6M = 4;
  }
  enum BLEKeyPosnSts0BLEKeyPosnStsKeyIdType {
    BLEKEYPOSNSTS0BLEKEYPOSNSTSKEYID_KEYID1_KEY0 = 0;
    BLEKEYPOSNSTS0BLEKEYPOSNSTSKEYID_KEYID1_KEY1 = 1;
    BLEKEYPOSNSTS0BLEKEYPOSNSTSKEYID_KEYID1_KEY2 = 2;
    BLEKEYPOSNSTS0BLEKEYPOSNSTSKEYID_KEYID1_KEY3 = 3;
    BLEKEYPOSNSTS0BLEKEYPOSNSTSKEYID_KEYID1_KEY4 = 4;
    BLEKEYPOSNSTS0BLEKEYPOSNSTSKEYID_KEYID1_KEY5 = 5;
    BLEKEYPOSNSTS0BLEKEYPOSNSTSKEYID_KEYID1_KEY6 = 6;
    BLEKEYPOSNSTS0BLEKEYPOSNSTSKEYID_KEYID1_KEY7 = 7;
    BLEKEYPOSNSTS0BLEKEYPOSNSTSKEYID_KEYID1_KEY8 = 8;
    BLEKEYPOSNSTS0BLEKEYPOSNSTSKEYID_KEYID1_KEY9 = 9;
    BLEKEYPOSNSTS0BLEKEYPOSNSTSKEYID_KEYID1_KEY10 = 10;
    BLEKEYPOSNSTS0BLEKEYPOSNSTSKEYID_KEYID1_KEY11 = 11;
  }
  enum BLEKeyPosnSts1BLEKeyPosnStsDirStsType {
    BLEKEYPOSNSTS1BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_IDLE = 0;
    BLEKEYPOSNSTS1BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_FRNTFOUND = 1;
    BLEKEYPOSNSTS1BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_LEFOUND = 2;
    BLEKEYPOSNSTS1BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_RIFOUND = 3;
    BLEKEYPOSNSTS1BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_REARFOUND = 4;
  }
  enum BLEKeyPosnSts1BLEKeyPosnStsDisStsType {
    BLEKEYPOSNSTS1BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_IDLE = 0;
    BLEKEYPOSNSTS1BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_NOTKEYFOUND = 1;
    BLEKEYPOSNSTS1BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_INTERNALFOUND = 2;
    BLEKEYPOSNSTS1BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_EXTERNALWITHIN6M = 3;
    BLEKEYPOSNSTS1BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_EXTERNALEXCEED6M = 4;
  }
  enum BLEKeyPosnSts1BLEKeyPosnStsKeyIdType {
    BLEKEYPOSNSTS1BLEKEYPOSNSTSKEYID_KEYID1_KEY0 = 0;
    BLEKEYPOSNSTS1BLEKEYPOSNSTSKEYID_KEYID1_KEY1 = 1;
    BLEKEYPOSNSTS1BLEKEYPOSNSTSKEYID_KEYID1_KEY2 = 2;
    BLEKEYPOSNSTS1BLEKEYPOSNSTSKEYID_KEYID1_KEY3 = 3;
    BLEKEYPOSNSTS1BLEKEYPOSNSTSKEYID_KEYID1_KEY4 = 4;
    BLEKEYPOSNSTS1BLEKEYPOSNSTSKEYID_KEYID1_KEY5 = 5;
    BLEKEYPOSNSTS1BLEKEYPOSNSTSKEYID_KEYID1_KEY6 = 6;
    BLEKEYPOSNSTS1BLEKEYPOSNSTSKEYID_KEYID1_KEY7 = 7;
    BLEKEYPOSNSTS1BLEKEYPOSNSTSKEYID_KEYID1_KEY8 = 8;
    BLEKEYPOSNSTS1BLEKEYPOSNSTSKEYID_KEYID1_KEY9 = 9;
    BLEKEYPOSNSTS1BLEKEYPOSNSTSKEYID_KEYID1_KEY10 = 10;
    BLEKEYPOSNSTS1BLEKEYPOSNSTSKEYID_KEYID1_KEY11 = 11;
  }
  enum BLEKeyPosnSts2BLEKeyPosnStsDirStsType {
    BLEKEYPOSNSTS2BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_IDLE = 0;
    BLEKEYPOSNSTS2BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_FRNTFOUND = 1;
    BLEKEYPOSNSTS2BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_LEFOUND = 2;
    BLEKEYPOSNSTS2BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_RIFOUND = 3;
    BLEKEYPOSNSTS2BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_REARFOUND = 4;
  }
  enum BLEKeyPosnSts2BLEKeyPosnStsDisStsType {
    BLEKEYPOSNSTS2BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_IDLE = 0;
    BLEKEYPOSNSTS2BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_NOTKEYFOUND = 1;
    BLEKEYPOSNSTS2BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_INTERNALFOUND = 2;
    BLEKEYPOSNSTS2BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_EXTERNALWITHIN6M = 3;
    BLEKEYPOSNSTS2BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_EXTERNALEXCEED6M = 4;
  }
  enum BLEKeyPosnSts2BLEKeyPosnStsKeyIdType {
    BLEKEYPOSNSTS2BLEKEYPOSNSTSKEYID_KEYID1_KEY0 = 0;
    BLEKEYPOSNSTS2BLEKEYPOSNSTSKEYID_KEYID1_KEY1 = 1;
    BLEKEYPOSNSTS2BLEKEYPOSNSTSKEYID_KEYID1_KEY2 = 2;
    BLEKEYPOSNSTS2BLEKEYPOSNSTSKEYID_KEYID1_KEY3 = 3;
    BLEKEYPOSNSTS2BLEKEYPOSNSTSKEYID_KEYID1_KEY4 = 4;
    BLEKEYPOSNSTS2BLEKEYPOSNSTSKEYID_KEYID1_KEY5 = 5;
    BLEKEYPOSNSTS2BLEKEYPOSNSTSKEYID_KEYID1_KEY6 = 6;
    BLEKEYPOSNSTS2BLEKEYPOSNSTSKEYID_KEYID1_KEY7 = 7;
    BLEKEYPOSNSTS2BLEKEYPOSNSTSKEYID_KEYID1_KEY8 = 8;
    BLEKEYPOSNSTS2BLEKEYPOSNSTSKEYID_KEYID1_KEY9 = 9;
    BLEKEYPOSNSTS2BLEKEYPOSNSTSKEYID_KEYID1_KEY10 = 10;
    BLEKEYPOSNSTS2BLEKEYPOSNSTSKEYID_KEYID1_KEY11 = 11;
  }
  enum BLEKeyPosnSts3BLEKeyPosnStsDirStsType {
    BLEKEYPOSNSTS3BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_IDLE = 0;
    BLEKEYPOSNSTS3BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_FRNTFOUND = 1;
    BLEKEYPOSNSTS3BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_LEFOUND = 2;
    BLEKEYPOSNSTS3BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_RIFOUND = 3;
    BLEKEYPOSNSTS3BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_REARFOUND = 4;
  }
  enum BLEKeyPosnSts3BLEKeyPosnStsDisStsType {
    BLEKEYPOSNSTS3BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_IDLE = 0;
    BLEKEYPOSNSTS3BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_NOTKEYFOUND = 1;
    BLEKEYPOSNSTS3BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_INTERNALFOUND = 2;
    BLEKEYPOSNSTS3BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_EXTERNALWITHIN6M = 3;
    BLEKEYPOSNSTS3BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_EXTERNALEXCEED6M = 4;
  }
  enum BLEKeyPosnSts3BLEKeyPosnStsKeyIdType {
    BLEKEYPOSNSTS3BLEKEYPOSNSTSKEYID_KEYID1_KEY0 = 0;
    BLEKEYPOSNSTS3BLEKEYPOSNSTSKEYID_KEYID1_KEY1 = 1;
    BLEKEYPOSNSTS3BLEKEYPOSNSTSKEYID_KEYID1_KEY2 = 2;
    BLEKEYPOSNSTS3BLEKEYPOSNSTSKEYID_KEYID1_KEY3 = 3;
    BLEKEYPOSNSTS3BLEKEYPOSNSTSKEYID_KEYID1_KEY4 = 4;
    BLEKEYPOSNSTS3BLEKEYPOSNSTSKEYID_KEYID1_KEY5 = 5;
    BLEKEYPOSNSTS3BLEKEYPOSNSTSKEYID_KEYID1_KEY6 = 6;
    BLEKEYPOSNSTS3BLEKEYPOSNSTSKEYID_KEYID1_KEY7 = 7;
    BLEKEYPOSNSTS3BLEKEYPOSNSTSKEYID_KEYID1_KEY8 = 8;
    BLEKEYPOSNSTS3BLEKEYPOSNSTSKEYID_KEYID1_KEY9 = 9;
    BLEKEYPOSNSTS3BLEKEYPOSNSTSKEYID_KEYID1_KEY10 = 10;
    BLEKEYPOSNSTS3BLEKEYPOSNSTSKEYID_KEYID1_KEY11 = 11;
  }
  enum BLEKeyPosnSts4BLEKeyPosnStsDirStsType {
    BLEKEYPOSNSTS4BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_IDLE = 0;
    BLEKEYPOSNSTS4BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_FRNTFOUND = 1;
    BLEKEYPOSNSTS4BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_LEFOUND = 2;
    BLEKEYPOSNSTS4BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_RIFOUND = 3;
    BLEKEYPOSNSTS4BLEKEYPOSNSTSDIRSTS_BLEKEYPOSNSTSDIRSTS_REARFOUND = 4;
  }
  enum BLEKeyPosnSts4BLEKeyPosnStsDisStsType {
    BLEKEYPOSNSTS4BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_IDLE = 0;
    BLEKEYPOSNSTS4BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_NOTKEYFOUND = 1;
    BLEKEYPOSNSTS4BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_INTERNALFOUND = 2;
    BLEKEYPOSNSTS4BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_EXTERNALWITHIN6M = 3;
    BLEKEYPOSNSTS4BLEKEYPOSNSTSDISSTS_BLEKEYPOSNSTSDISSTS_EXTERNALEXCEED6M = 4;
  }
  enum BLEKeyPosnSts4BLEKeyPosnStsKeyIdType {
    BLEKEYPOSNSTS4BLEKEYPOSNSTSKEYID_KEYID1_KEY0 = 0;
    BLEKEYPOSNSTS4BLEKEYPOSNSTSKEYID_KEYID1_KEY1 = 1;
    BLEKEYPOSNSTS4BLEKEYPOSNSTSKEYID_KEYID1_KEY2 = 2;
    BLEKEYPOSNSTS4BLEKEYPOSNSTSKEYID_KEYID1_KEY3 = 3;
    BLEKEYPOSNSTS4BLEKEYPOSNSTSKEYID_KEYID1_KEY4 = 4;
    BLEKEYPOSNSTS4BLEKEYPOSNSTSKEYID_KEYID1_KEY5 = 5;
    BLEKEYPOSNSTS4BLEKEYPOSNSTSKEYID_KEYID1_KEY6 = 6;
    BLEKEYPOSNSTS4BLEKEYPOSNSTSKEYID_KEYID1_KEY7 = 7;
    BLEKEYPOSNSTS4BLEKEYPOSNSTSKEYID_KEYID1_KEY8 = 8;
    BLEKEYPOSNSTS4BLEKEYPOSNSTSKEYID_KEYID1_KEY9 = 9;
    BLEKEYPOSNSTS4BLEKEYPOSNSTSKEYID_KEYID1_KEY10 = 10;
    BLEKEYPOSNSTS4BLEKEYPOSNSTSKEYID_KEYID1_KEY11 = 11;
  }
  enum CtrbSwOnOffType {
    CTRBSWONOFF_CTRBSWONOFF_OFF = 0;
    CTRBSWONOFF_CTRBSWONOFF_WARNING = 1;
    CTRBSWONOFF_CTRBSWONOFF_WARNINGANDBARKE = 2;
    CTRBSWONOFF_CTRBSWONOFF_RESERVE = 3;
  }
  enum DvrErrStsType {
    DVRERRSTS_DVRERRSTS_NOERROR = 0;
    DVRERRSTS_DVRERRSTS_NOCAMERACONNECTED = 1;
    DVRERRSTS_DVRERRSTS_RECORDINGERROR = 2;
    DVRERRSTS_DVRERRSTS_ETHERNETERROR = 3;
    DVRERRSTS_DVRERRSTS_GSENSORERROR = 4;
    DVRERRSTS_DVRERRSTS_NANDFLASHREADINGERROR = 5;
    DVRERRSTS_DVRERRSTS_NANDFLASHWRITINGERROR = 6;
    DVRERRSTS_DVRERRSTS_SYSTEMCRASHORWATCHDOGTIMEOUT = 7;
    DVRERRSTS_DVRERRSTS_PASERRORHAPPENED = 8;
    DVRERRSTS_DVRERRSTS_RESERVED1 = 9;
    DVRERRSTS_DVRERRSTS_OVERHEATPROTECTIONMODE = 10;
    DVRERRSTS_DVRERRSTS_DVROCCUPIED = 11;
    DVRERRSTS_DVRERRSTS_TFCARDSLOW = 12;
    DVRERRSTS_DVRERRSTS_TFCARDFRAGMENT = 13;
    DVRERRSTS_DVRERRSTS_ABNORMALVOLT = 14;
    DVRERRSTS_DVRERRSTS_UNKNOWNERROR = 15;
  }
  enum DVRSysStsType {
    DVRSYSSTS_DVRSYSSTS_OFF = 0;
    DVRSYSSTS_DVRSYSSTS_NORMAL = 1;
    DVRSYSSTS_DVRSYSSTS_OVERHEAT = 2;
    DVRSYSSTS_DVRSYSSTS_PARKINGRECORD = 3;
    DVRSYSSTS_DVRSYSSTS_PARKINGMONITOR = 4;
    DVRSYSSTS_DVRSYSSTS_RESERVED1 = 5;
    DVRSYSSTS_DVRSYSSTS_RESERVED2 = 6;
    DVRSYSSTS_DVRSYSSTS_RESERVED3 = 7;
  }
  enum EpbsoftswtCtrlst1Type {
    EPBSOFTSWTCTRLST1_EPBSOFTSWTCTRLST_NOREQUEST = 0;
    EPBSOFTSWTCTRLST1_EPBSOFTSWTCTRLST_APPLYREQUEST = 1;
    EPBSOFTSWTCTRLST1_EPBSOFTSWTCTRLST_RELEASEREQUEST = 2;
    EPBSOFTSWTCTRLST1_EPBSOFTSWTCTRLST_FORBIDDEN = 3;
    EPBSOFTSWTCTRLST1_EPBSOFTSWTCTRLST_UNKNOWN = 4;
  }
  enum HznSplyElectcStsType {
    HZNSPLYELECTCSTS_HZNSPLYELECTCSTS1_UKWN = 0;
    HZNSPLYELECTCSTS_HZNSPLYELECTCSTS1_NOSPPRT = 1;
    HZNSPLYELECTCSTS_HZNSPLYELECTCSTS1_FAILR = 2;
    HZNSPLYELECTCSTS_HZNSPLYELECTCSTS1_SPPRT = 3;
  }
  enum LgtFusnTrfcReqType {
    LGTFUSNTRFCREQ_LGTFUSNTRFCREQ_OFF = 0;
    LGTFUSNTRFCREQ_LGTFUSNTRFCREQ_EEYESPDLIM = 1;
    LGTFUSNTRFCREQ_LGTFUSNTRFCREQ_ALLSPDLIM = 2;
    LGTFUSNTRFCREQ_LGTFUSNTRFCREQ_ERROR = 3;
  }
  enum OffsForSpdWarnSetgReqType {
    OFFSFORSPDWARNSETGREQ_OFFSFORSPDWARNSETGREQ_INACTIVE = 0;
    OFFSFORSPDWARNSETGREQ_OFFSFORSPDWARNSETGREQ_PLUS = 1;
    OFFSFORSPDWARNSETGREQ_OFFSFORSPDWARNSETGREQ_MINUS = 2;
  }
  enum OffsForSpdWarnSetgReqStsType {
    OFFSFORSPDWARNSETGREQSTS_SETGREQSTS_ZERO = 0;
    OFFSFORSPDWARNSETGREQSTS_SETGREQSTS_MINUS10KMH = 1;
    OFFSFORSPDWARNSETGREQSTS_SETGREQSTS_MINUS5KMH = 2;
    OFFSFORSPDWARNSETGREQSTS_SETGREQSTS_PLUS5KMH = 3;
    OFFSFORSPDWARNSETGREQSTS_SETGREQSTS_PLUS10KMH = 4;
    OFFSFORSPDWARNSETGREQSTS_SETGREQSTS_MINUS5MPH = 5;
    OFFSFORSPDWARNSETGREQSTS_SETGREQSTS_MINUS3MPH = 6;
    OFFSFORSPDWARNSETGREQSTS_SETGREQSTS_PLUS3MPH = 7;
    OFFSFORSPDWARNSETGREQSTS_SETGREQSTS_PLUS5MPH = 8;
    OFFSFORSPDWARNSETGREQSTS_SETGREQSTS_MINUS10PERCENTAGE = 9;
    OFFSFORSPDWARNSETGREQSTS_SETGREQSTS_MINUS5PERCENTAGE = 10;
    OFFSFORSPDWARNSETGREQSTS_SETGREQSTS_PLUS5PERCENTAGE = 11;
    OFFSFORSPDWARNSETGREQSTS_SETGREQSTS_PLUS10PERCENTAGE = 12;
    OFFSFORSPDWARNSETGREQSTS_SETGREQSTS_RESERVED1 = 13;
    OFFSFORSPDWARNSETGREQSTS_SETGREQSTS_RESERVED2 = 14;
    OFFSFORSPDWARNSETGREQSTS_SETGREQSTS_RESERVED3 = 15;
  }
  enum SpdAlrmActvForRoadSgnInfoStsType {
    SPDALRMACTVFORROADSGNINFOSTS_DY1_NOREQUEST = 0;
    SPDALRMACTVFORROADSGNINFOSTS_DY1_NOWARNING = 1;
    SPDALRMACTVFORROADSGNINFOSTS_DY1_FLASHING = 2;
    SPDALRMACTVFORROADSGNINFOSTS_DY1_FLASHINGANDAUDIO = 3;
  }
  enum VehSpdIndcdQlyType {
    VEHSPDINDCDQLY_GENQF1_UNDEFINDDATAACCUR = 0;
    VEHSPDINDCDQLY_GENQF1_TMPUNDEFDDATA = 1;
    VEHSPDINDCDQLY_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    VEHSPDINDCDQLY_GENQF1_ACCURDATA = 3;
  }
  enum VehSpdIndcdVeSpdIndcdUnitType {
    VEHSPDINDCDVESPDINDCDUNIT_VEHSPDINDCDUNIT_KMPH = 0;
    VEHSPDINDCDVESPDINDCDUNIT_VEHSPDINDCDUNIT_MPH = 1;
    VEHSPDINDCDVESPDINDCDUNIT_VEHSPDINDCDUNIT_UKWNUNIT = 2;
  }
  enum WarnTypForLaneKeepAidStsType {
    WARNTYPFORLANEKEEPAIDSTS_CHGWARNMOD_NO = 0;
    WARNTYPFORLANEKEEPAIDSTS_CHGWARNMOD_SOUND = 1;
    WARNTYPFORLANEKEEPAIDSTS_CHGWARNMOD_HAPTIC = 2;
  }
  // description integrate ACC and TSR function or not. [] [0|1] [initial_value:0]
  optional bool acc_fusn_trfc_req = 1;
  // [] [0|1] [initial_value:None]
  optional bool acc_fusn_trfc_req_ub = 2;
  // description AES Switch [] [0|1] [initial_value:0]
  optional bool asy_aut_emgy_steer_actv_sts = 3;
  // [] [0|1] [initial_value:None]
  optional bool asy_aut_emgy_steer_actv_sts_ub = 4;
  // description Release signal [] [0|1] [initial_value:0]
  optional bool asy_undertak_on_off_req = 5;
  // [] [0|1] [initial_value:None]
  optional bool asy_undertak_on_off_req_ub = 6;
  // description total traveled distance. [km] [0.0|2000000.0] [initial_value:0]
  optional double bkp_of_dst_trvld = 7;
  // [] [0|1] [initial_value:None]
  optional bool bkp_of_dst_trvld_ub = 8;
  // [] [0|1] [initial_value:None]
  optional bool ble_key_btn_lock_sts_ub = 9;
  // description BLE key fob lock button pressed status [] [0|7] [initial_value:0]
  optional BLEKeyBtnLockStsBtnSts2Type ble_key_btn_lock_sts_btn_sts2 = 10;
  // description key id [] [0|15] [initial_value:0]
  optional BLEKeyBtnLockStsKeyIdType ble_key_btn_lock_sts_key_id = 11;
  // [] [0|1] [initial_value:None]
  optional bool ble_key_btn_rpa_sts_ub = 12;
  // description BLE key fob RPA button pressed status [] [0|7] [initial_value:0]
  optional BLEKeyBtnRPAStsBtnSts2Type ble_key_btn_rpa_sts_btn_sts2 = 13;
  // description key id [] [0|15] [initial_value:0]
  optional BLEKeyBtnRPAStsKeyIdType ble_key_btn_rpa_sts_key_id = 14;
  // [] [0|1] [initial_value:None]
  optional bool ble_key_btn_tr_sts_ub = 15;
  // description BLE key fob trunk button pressed status [] [0|7] [initial_value:0]
  optional BLEKeyBtnTrStsBtnSts2Type ble_key_btn_tr_sts_btn_sts2 = 16;
  // description key id [] [0|15] [initial_value:0]
  optional BLEKeyBtnTrStsKeyIdType ble_key_btn_tr_sts_key_id = 17;
  // [] [0|1] [initial_value:None]
  optional bool ble_key_btn_unlck_sts_ub = 18;
  // description BLE key fob unlock button pressed status [] [0|7] [initial_value:0]
  optional BLEKeyBtnUnlckStsBtnSts2Type ble_key_btn_unlck_sts_btn_sts2 = 19;
  // description key id [] [0|15] [initial_value:0]
  optional BLEKeyBtnUnlckStsKeyIdType ble_key_btn_unlck_sts_key_id = 20;
  // [] [0|1] [initial_value:None]
  optional bool ble_key_posn_sts0_ub = 21;
  // description key direction status [] [0|15] [initial_value:0]
  optional BLEKeyPosnSts0BLEKeyPosnStsDirStsType ble_key_posn_sts0_ble_key_posn_sts_dir_sts = 22;
  // description key distance status [] [0|7] [initial_value:0]
  optional BLEKeyPosnSts0BLEKeyPosnStsDisStsType ble_key_posn_sts0_ble_key_posn_sts_dis_sts = 23;
  // description key id [] [0|15] [initial_value:0]
  optional BLEKeyPosnSts0BLEKeyPosnStsKeyIdType ble_key_posn_sts0_ble_key_posn_sts_key_id = 24;
  // [] [0|1] [initial_value:None]
  optional bool ble_key_posn_sts1_ub = 25;
  // description key direction status [] [0|15] [initial_value:0]
  optional BLEKeyPosnSts1BLEKeyPosnStsDirStsType ble_key_posn_sts1_ble_key_posn_sts_dir_sts = 26;
  // description key distance status [] [0|7] [initial_value:0]
  optional BLEKeyPosnSts1BLEKeyPosnStsDisStsType ble_key_posn_sts1_ble_key_posn_sts_dis_sts = 27;
  // description key id [] [0|15] [initial_value:0]
  optional BLEKeyPosnSts1BLEKeyPosnStsKeyIdType ble_key_posn_sts1_ble_key_posn_sts_key_id = 28;
  // [] [0|1] [initial_value:None]
  optional bool ble_key_posn_sts2_ub = 29;
  // description key direction status [] [0|15] [initial_value:0]
  optional BLEKeyPosnSts2BLEKeyPosnStsDirStsType ble_key_posn_sts2_ble_key_posn_sts_dir_sts = 30;
  // description key distance status [] [0|7] [initial_value:0]
  optional BLEKeyPosnSts2BLEKeyPosnStsDisStsType ble_key_posn_sts2_ble_key_posn_sts_dis_sts = 31;
  // description key id [] [0|15] [initial_value:0]
  optional BLEKeyPosnSts2BLEKeyPosnStsKeyIdType ble_key_posn_sts2_ble_key_posn_sts_key_id = 32;
  // [] [0|1] [initial_value:None]
  optional bool ble_key_posn_sts3_ub = 33;
  // description key direction status [] [0|15] [initial_value:0]
  optional BLEKeyPosnSts3BLEKeyPosnStsDirStsType ble_key_posn_sts3_ble_key_posn_sts_dir_sts = 34;
  // description key distance status [] [0|7] [initial_value:0]
  optional BLEKeyPosnSts3BLEKeyPosnStsDisStsType ble_key_posn_sts3_ble_key_posn_sts_dis_sts = 35;
  // description key id [] [0|15] [initial_value:0]
  optional BLEKeyPosnSts3BLEKeyPosnStsKeyIdType ble_key_posn_sts3_ble_key_posn_sts_key_id = 36;
  // [] [0|1] [initial_value:None]
  optional bool ble_key_posn_sts4_ub = 37;
  // description key direction status [] [0|15] [initial_value:0]
  optional BLEKeyPosnSts4BLEKeyPosnStsDirStsType ble_key_posn_sts4_ble_key_posn_sts_dir_sts = 38;
  // description key distance status [] [0|7] [initial_value:0]
  optional BLEKeyPosnSts4BLEKeyPosnStsDisStsType ble_key_posn_sts4_ble_key_posn_sts_dis_sts = 39;
  // description key id [] [0|15] [initial_value:0]
  optional BLEKeyPosnSts4BLEKeyPosnStsKeyIdType ble_key_posn_sts4_ble_key_posn_sts_key_id = 40;
  // description the request to choose LCA audio function by SW switch in IHU. [] [0|1] [initial_value:0]
  optional bool bs_daudio_on_off = 41;
  // [] [0|1] [initial_value:None]
  optional bool bs_daudio_on_off_ub = 42;
  // description LCA function on/off switch. [] [0|1] [initial_value:0]
  optional bool bsd_sw_on_off = 43;
  // [] [0|1] [initial_value:None]
  optional bool bsd_sw_on_off_ub = 44;
  // description RCTA function on/off request. [] [0|3] [initial_value:0]
  optional CtrbSwOnOffType ctrb_sw_on_off = 45;
  // [] [0|1] [initial_value:None]
  optional bool ctrb_sw_on_off_ub = 46;
  // description HznSplyElectcSts [] [0|3] [initial_value:0]
  optional HznSplyElectcStsType hzn_sply_electc_sts = 47;
  // [] [0|1] [initial_value:None]
  optional bool hzn_sply_electc_sts_ub = 48;
  // description the request to enable/disable LKA function by SW switch in IHU. [] [0|1] [initial_value:0]
  optional bool lane_keep_aid_actv_sts = 49;
  // [] [0|1] [initial_value:None]
  optional bool lane_keep_aid_actv_sts_ub = 50;
  // description Release signal [] [0|3] [initial_value:0]
  optional LgtFusnTrfcReqType lgt_fusn_trfc_req = 51;
  // [] [0|1] [initial_value:None]
  optional bool lgt_fusn_trfc_req_ub = 52;
  // description Navigation information status [] [0|1] [initial_value:0]
  optional bool nav_info_sts = 53;
  // [] [0|1] [initial_value:None]
  optional bool nav_info_sts_ub = 54;
  // description this port is used to control TSI [] [0|7] [initial_value:0]
  optional OffsForSpdWarnSetgReqType offs_for_spd_warn_setg_req = 55;
  // [] [0|1] [initial_value:None]
  optional bool offs_for_spd_warn_setg_req_ub = 56;
  // description OffsForSpdWarnSetgReqSts [] [0|15] [initial_value:0]
  optional OffsForSpdWarnSetgReqStsType offs_for_spd_warn_setg_req_sts = 57;
  // [] [0|1] [initial_value:None]
  optional bool offs_for_spd_warn_setg_req_sts_ub = 58;
  // [] [0|1] [initial_value:None]
  optional bool posn_from_satlt_ub = 59;
  // description Counter  [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 posn_from_satlt_cntr = 60;
  // description Altitide from mean sea level [m] [-100.0|6000.0] [initial_value:1000]
  optional double posn_from_satlt_posn_alti = 61;
  // description Heading from true north [Deg] [0.0|359.99] [initial_value:0]
  optional double posn_from_satlt_posn_dir = 62;
  // description Latitude [Deg] [-90.000072|90.000072] [initial_value:323999740]
  optional double posn_from_satlt_posn_lat = 63;
  // description Longitude [Deg] [-180.000144|180.000144] [initial_value:647999481]
  optional double posn_from_satlt_posn_lgt = 64;
  // description Speed [m/s] [0.0|100.0] [initial_value:0]
  optional double posn_from_satlt_posn_spd = 65;
  // description Horizontal velocity [m/s] [0.0|100.0] [initial_value:0]
  optional double posn_from_satlt_posn_v_hozl = 66;
  // description Vertical velocity [m/s] [-100.0|100.0] [initial_value:0]
  optional double posn_from_satlt_posn_v_vert = 67;
  // description in vehicle global time minutes [Mins] [0.0|59.0] [initial_value:0]
  optional double posn_from_satlt_ti_for_mins = 68;
  // description milliseconds [Unitless] [0.0|1023.0] [initial_value:0]
  optional uint32 posn_from_satlt_ti_for_msec = 69;
  // description in vehicle global time seconds [s] [0.0|59.0] [initial_value:0]
  optional double posn_from_satlt_ti_for_sec = 70;
  // description UTC day [Days] [1.0|31.0] [initial_value:1]
  optional uint32 posn_from_satlt_utc_for_day = 71;
  // description UTC hour [hours] [0.0|23.0] [initial_value:0]
  optional double posn_from_satlt_utc_for_hr = 72;
  // description UTC minute [Mins] [0.0|59.0] [initial_value:0]
  optional double posn_from_satlt_utc_for_mins = 73;
  // description UTC month [Month] [1.0|12.0] [initial_value:1]
  optional double posn_from_satlt_utc_for_mth = 74;
  // description UTC second [s] [0.0|59.0] [initial_value:0]
  optional double posn_from_satlt_utc_for_sec = 75;
  // description UTC year [Year] [0.0|99.0] [initial_value:0]
  optional double posn_from_satlt_utc_for_yr = 76;
  // [] [0|1] [initial_value:None]
  optional bool ramp_info_ub = 77;
  // description Distance to front ramp [m] [0.0|1000.0] [initial_value:0]
  optional double ramp_info_dst_to_ramp = 78;
  // description Whether enter the ramp [] [0|1] [initial_value:0]
  optional bool ramp_info_enter_ramp = 79;
  // description the request to enable/disable RCW function by SW switch in IHU. [] [0|1] [initial_value:0]
  optional bool rcw_sw_on_off = 80;
  // [] [0|1] [initial_value:None]
  optional bool rcw_sw_on_off_ub = 81;
  // description the request to enable/disable TSR misc warning by SW switch in IHU. [] [0|1] [initial_value:0]
  optional bool road_misc_sgn_info_for_road_sgn_info_sts = 82;
  // [] [0|1] [initial_value:None]
  optional bool road_misc_sgn_info_for_road_sgn_info_sts_ub = 83;
  // description the request to enable/disable TSR function by SW switch in IHU [] [0|1] [initial_value:0]
  optional bool road_sgn_info_actv_sts = 84;
  // [] [0|1] [initial_value:None]
  optional bool road_sgn_info_actv_sts_ub = 85;
  // description the request to enable/disable TSR speed warning function( notification ) by SW switch in IHU. [] [0|3] [initial_value:0]
  optional SpdAlrmActvForRoadSgnInfoStsType spd_alrm_actv_for_road_sgn_info_sts = 86;
  // [] [0|1] [initial_value:None]
  optional bool spd_alrm_actv_for_road_sgn_info_sts_ub = 87;
  // description the request to enable/disable TLA function by SW switch in IHU. [] [0|1] [initial_value:0]
  optional bool trfc_li_actv_sts = 88;
  // [] [0|1] [initial_value:None]
  optional bool trfc_li_actv_sts_ub = 89;
  // description the request to enable/disable TLB by switch in DHU [] [0|1] [initial_value:1]
  optional bool trfc_li_brk_actv_req = 90;
  // [] [0|1] [initial_value:None]
  optional bool trfc_li_brk_actv_req_ub = 91;
  // description the request to enable/disable TLA warning function by SW switch in IHU. [] [0|1] [initial_value:0]
  optional bool trfc_li_warn_typ = 92;
  // [] [0|1] [initial_value:None]
  optional bool trfc_li_warn_typ_ub = 93;
  // [] [0|1] [initial_value:None]
  optional bool veh_spd_indcd_ub = 94;
  // description Indicated vehicle speed QF info. [] [0|3] [initial_value:0]
  optional VehSpdIndcdQlyType veh_spd_indcd_qly = 95;
  // [] [0|1] [initial_value:None]
  optional bool veh_spd_indcd_qly_ub = 96;
  // description Vehicle speed [Unitless] [0.0|511.0] [initial_value:0]
  optional uint32 veh_spd_indcd_veh_spd_indcd = 97;
  // description Unit for vehicle speed [] [0|3] [initial_value:0]
  optional VehSpdIndcdVeSpdIndcdUnitType veh_spd_indcd_ve_spd_indcd_unit = 98;
  // description the request to choose LKA warning type by SW switch in IHU: [] [0|3] [initial_value:0]
  optional WarnTypForLaneKeepAidStsType warn_typ_for_lane_keep_aid_sts = 99;
  // [] [0|1] [initial_value:None]
  optional bool warn_typ_for_lane_keep_aid_sts_ub = 100;
  // description The other error code of DVR [] [0|15] [initial_value:0]
  optional DvrErrStsType dvr_err_sts = 101;
  // [] [0|1] [initial_value:None]
  optional bool dvr_err_sts_ub = 102;
  // description The working status of DVR [] [0|7] [initial_value:0]
  optional DVRSysStsType dvr_sys_sts = 103;
  // [] [0|1] [initial_value:None]
  optional bool dvr_sys_sts_ub = 104;
  // description Epb Soft Switch Control Standby signal [] [0|7] [initial_value:0]
  optional EpbsoftswtCtrlst1Type epbsoftswt_ctrlst1 = 105;
  // [] [0|1] [initial_value:None]
  optional bool epbsoftswt_ctrlst1_ub = 106;
}

message DHU_ZCUCANFD1_FR04_175 {
// Report Message
  enum CrossInfoDirOfNavRutType {
    CROSSINFODIROFNAVRUT_DIROFNAVROUT_IDLE = 0;
    CROSSINFODIROFNAVRUT_DIROFNAVROUT_TURNLE = 1;
    CROSSINFODIROFNAVRUT_DIROFNAVROUT_TURNRI = 2;
    CROSSINFODIROFNAVRUT_DIROFNAVROUT_LEAHD = 3;
    CROSSINFODIROFNAVRUT_DIROFNAVROUT_RIAHD = 4;
    CROSSINFODIROFNAVRUT_DIROFNAVROUT_SHARPLE = 5;
    CROSSINFODIROFNAVRUT_DIROFNAVROUT_SHARPRI = 6;
    CROSSINFODIROFNAVRUT_DIROFNAVROUT_LEUTURN = 7;
    CROSSINFODIROFNAVRUT_DIROFNAVROUT_RIUTURN = 8;
    CROSSINFODIROFNAVRUT_DIROFNAVROUT_STRAIGHT = 9;
  }
  enum DIMStsDistbnType {
    DIMSTSDISTBN_DIMSTSDISTBN_DIM_STATUS_OK = 0;
    DIMSTSDISTBN_DIMSTSDISTBN_DIM_FAULT_CAUSE_BY_UVOROV = 1;
    DIMSTSDISTBN_DIMSTSDISTBN_DIM_FAULT_MEMORY_ERROR = 2;
    DIMSTSDISTBN_DIMSTSDISTBN_DIM_LCD_ERROR = 3;
    DIMSTSDISTBN_DIMSTSDISTBN_RESERVED1 = 4;
    DIMSTSDISTBN_DIMSTSDISTBN_RESERVED2 = 5;
    DIMSTSDISTBN_DIMSTSDISTBN_RESERVED3 = 6;
    DIMSTSDISTBN_DIMSTSDISTBN_RESERVED4 = 7;
  }
  enum HmiDrvrSodReqChgType {
    HMIDRVRSODREQCHG_REQCHG1_NO = 0;
    HMIDRVRSODREQCHG_REQCHG1_LEFTLANECHG = 1;
    HMIDRVRSODREQCHG_REQCHG1_RIGHTLANECHG = 2;
  }
  enum LaneTypLane1TypType {
    LANETYPLANE1TYP_LANETYP_IDLE = 0;
    LANETYPLANE1TYP_LANETYP_STRAIGHT = 1;
    LANETYPLANE1TYP_LANETYP_TURNLE = 2;
    LANETYPLANE1TYP_LANETYP_STRAIGHTANDTURNLE = 3;
    LANETYPLANE1TYP_LANETYP_TURNRI = 4;
    LANETYPLANE1TYP_LANETYP_STRAIGHTANDTURNRI = 5;
    LANETYPLANE1TYP_LANETYP_LEUTURN = 6;
    LANETYPLANE1TYP_LANETYP_TURNLEANDTURNRI = 7;
    LANETYPLANE1TYP_LANETYP_STRAIGHTANDTURNLEANDTURNRI = 8;
    LANETYPLANE1TYP_LANETYP_RIUTURN = 9;
    LANETYPLANE1TYP_LANETYP_STRAIGHTANDLEUTURN = 10;
    LANETYPLANE1TYP_LANETYP_STRAIGHTANDRIUTURN = 11;
    LANETYPLANE1TYP_LANETYP_TURNLEANDLEUTURN = 12;
    LANETYPLANE1TYP_LANETYP_TURNRIANDRIUTURN = 13;
    LANETYPLANE1TYP_LANETYP_RESERVED1 = 14;
    LANETYPLANE1TYP_LANETYP_RESERVED2 = 15;
  }
  enum LaneTypLane2TypType {
    LANETYPLANE2TYP_LANETYP_IDLE = 0;
    LANETYPLANE2TYP_LANETYP_STRAIGHT = 1;
    LANETYPLANE2TYP_LANETYP_TURNLE = 2;
    LANETYPLANE2TYP_LANETYP_STRAIGHTANDTURNLE = 3;
    LANETYPLANE2TYP_LANETYP_TURNRI = 4;
    LANETYPLANE2TYP_LANETYP_STRAIGHTANDTURNRI = 5;
    LANETYPLANE2TYP_LANETYP_LEUTURN = 6;
    LANETYPLANE2TYP_LANETYP_TURNLEANDTURNRI = 7;
    LANETYPLANE2TYP_LANETYP_STRAIGHTANDTURNLEANDTURNRI = 8;
    LANETYPLANE2TYP_LANETYP_RIUTURN = 9;
    LANETYPLANE2TYP_LANETYP_STRAIGHTANDLEUTURN = 10;
    LANETYPLANE2TYP_LANETYP_STRAIGHTANDRIUTURN = 11;
    LANETYPLANE2TYP_LANETYP_TURNLEANDLEUTURN = 12;
    LANETYPLANE2TYP_LANETYP_TURNRIANDRIUTURN = 13;
    LANETYPLANE2TYP_LANETYP_RESERVED1 = 14;
    LANETYPLANE2TYP_LANETYP_RESERVED2 = 15;
  }
  enum LaneTypLane3TypType {
    LANETYPLANE3TYP_LANETYP_IDLE = 0;
    LANETYPLANE3TYP_LANETYP_STRAIGHT = 1;
    LANETYPLANE3TYP_LANETYP_TURNLE = 2;
    LANETYPLANE3TYP_LANETYP_STRAIGHTANDTURNLE = 3;
    LANETYPLANE3TYP_LANETYP_TURNRI = 4;
    LANETYPLANE3TYP_LANETYP_STRAIGHTANDTURNRI = 5;
    LANETYPLANE3TYP_LANETYP_LEUTURN = 6;
    LANETYPLANE3TYP_LANETYP_TURNLEANDTURNRI = 7;
    LANETYPLANE3TYP_LANETYP_STRAIGHTANDTURNLEANDTURNRI = 8;
    LANETYPLANE3TYP_LANETYP_RIUTURN = 9;
    LANETYPLANE3TYP_LANETYP_STRAIGHTANDLEUTURN = 10;
    LANETYPLANE3TYP_LANETYP_STRAIGHTANDRIUTURN = 11;
    LANETYPLANE3TYP_LANETYP_TURNLEANDLEUTURN = 12;
    LANETYPLANE3TYP_LANETYP_TURNRIANDRIUTURN = 13;
    LANETYPLANE3TYP_LANETYP_RESERVED1 = 14;
    LANETYPLANE3TYP_LANETYP_RESERVED2 = 15;
  }
  enum LaneTypLane4TypType {
    LANETYPLANE4TYP_LANETYP_IDLE = 0;
    LANETYPLANE4TYP_LANETYP_STRAIGHT = 1;
    LANETYPLANE4TYP_LANETYP_TURNLE = 2;
    LANETYPLANE4TYP_LANETYP_STRAIGHTANDTURNLE = 3;
    LANETYPLANE4TYP_LANETYP_TURNRI = 4;
    LANETYPLANE4TYP_LANETYP_STRAIGHTANDTURNRI = 5;
    LANETYPLANE4TYP_LANETYP_LEUTURN = 6;
    LANETYPLANE4TYP_LANETYP_TURNLEANDTURNRI = 7;
    LANETYPLANE4TYP_LANETYP_STRAIGHTANDTURNLEANDTURNRI = 8;
    LANETYPLANE4TYP_LANETYP_RIUTURN = 9;
    LANETYPLANE4TYP_LANETYP_STRAIGHTANDLEUTURN = 10;
    LANETYPLANE4TYP_LANETYP_STRAIGHTANDRIUTURN = 11;
    LANETYPLANE4TYP_LANETYP_TURNLEANDLEUTURN = 12;
    LANETYPLANE4TYP_LANETYP_TURNRIANDRIUTURN = 13;
    LANETYPLANE4TYP_LANETYP_RESERVED1 = 14;
    LANETYPLANE4TYP_LANETYP_RESERVED2 = 15;
  }
  enum LaneTypLane5TypType {
    LANETYPLANE5TYP_LANETYP_IDLE = 0;
    LANETYPLANE5TYP_LANETYP_STRAIGHT = 1;
    LANETYPLANE5TYP_LANETYP_TURNLE = 2;
    LANETYPLANE5TYP_LANETYP_STRAIGHTANDTURNLE = 3;
    LANETYPLANE5TYP_LANETYP_TURNRI = 4;
    LANETYPLANE5TYP_LANETYP_STRAIGHTANDTURNRI = 5;
    LANETYPLANE5TYP_LANETYP_LEUTURN = 6;
    LANETYPLANE5TYP_LANETYP_TURNLEANDTURNRI = 7;
    LANETYPLANE5TYP_LANETYP_STRAIGHTANDTURNLEANDTURNRI = 8;
    LANETYPLANE5TYP_LANETYP_RIUTURN = 9;
    LANETYPLANE5TYP_LANETYP_STRAIGHTANDLEUTURN = 10;
    LANETYPLANE5TYP_LANETYP_STRAIGHTANDRIUTURN = 11;
    LANETYPLANE5TYP_LANETYP_TURNLEANDLEUTURN = 12;
    LANETYPLANE5TYP_LANETYP_TURNRIANDRIUTURN = 13;
    LANETYPLANE5TYP_LANETYP_RESERVED1 = 14;
    LANETYPLANE5TYP_LANETYP_RESERVED2 = 15;
  }
  enum LaneTypLane6TypType {
    LANETYPLANE6TYP_LANETYP_IDLE = 0;
    LANETYPLANE6TYP_LANETYP_STRAIGHT = 1;
    LANETYPLANE6TYP_LANETYP_TURNLE = 2;
    LANETYPLANE6TYP_LANETYP_STRAIGHTANDTURNLE = 3;
    LANETYPLANE6TYP_LANETYP_TURNRI = 4;
    LANETYPLANE6TYP_LANETYP_STRAIGHTANDTURNRI = 5;
    LANETYPLANE6TYP_LANETYP_LEUTURN = 6;
    LANETYPLANE6TYP_LANETYP_TURNLEANDTURNRI = 7;
    LANETYPLANE6TYP_LANETYP_STRAIGHTANDTURNLEANDTURNRI = 8;
    LANETYPLANE6TYP_LANETYP_RIUTURN = 9;
    LANETYPLANE6TYP_LANETYP_STRAIGHTANDLEUTURN = 10;
    LANETYPLANE6TYP_LANETYP_STRAIGHTANDRIUTURN = 11;
    LANETYPLANE6TYP_LANETYP_TURNLEANDLEUTURN = 12;
    LANETYPLANE6TYP_LANETYP_TURNRIANDRIUTURN = 13;
    LANETYPLANE6TYP_LANETYP_RESERVED1 = 14;
    LANETYPLANE6TYP_LANETYP_RESERVED2 = 15;
  }
  enum LaneTypLane7TypType {
    LANETYPLANE7TYP_LANETYP_IDLE = 0;
    LANETYPLANE7TYP_LANETYP_STRAIGHT = 1;
    LANETYPLANE7TYP_LANETYP_TURNLE = 2;
    LANETYPLANE7TYP_LANETYP_STRAIGHTANDTURNLE = 3;
    LANETYPLANE7TYP_LANETYP_TURNRI = 4;
    LANETYPLANE7TYP_LANETYP_STRAIGHTANDTURNRI = 5;
    LANETYPLANE7TYP_LANETYP_LEUTURN = 6;
    LANETYPLANE7TYP_LANETYP_TURNLEANDTURNRI = 7;
    LANETYPLANE7TYP_LANETYP_STRAIGHTANDTURNLEANDTURNRI = 8;
    LANETYPLANE7TYP_LANETYP_RIUTURN = 9;
    LANETYPLANE7TYP_LANETYP_STRAIGHTANDLEUTURN = 10;
    LANETYPLANE7TYP_LANETYP_STRAIGHTANDRIUTURN = 11;
    LANETYPLANE7TYP_LANETYP_TURNLEANDLEUTURN = 12;
    LANETYPLANE7TYP_LANETYP_TURNRIANDRIUTURN = 13;
    LANETYPLANE7TYP_LANETYP_RESERVED1 = 14;
    LANETYPLANE7TYP_LANETYP_RESERVED2 = 15;
  }
  enum LaneTypLane8TypType {
    LANETYPLANE8TYP_LANETYP_IDLE = 0;
    LANETYPLANE8TYP_LANETYP_STRAIGHT = 1;
    LANETYPLANE8TYP_LANETYP_TURNLE = 2;
    LANETYPLANE8TYP_LANETYP_STRAIGHTANDTURNLE = 3;
    LANETYPLANE8TYP_LANETYP_TURNRI = 4;
    LANETYPLANE8TYP_LANETYP_STRAIGHTANDTURNRI = 5;
    LANETYPLANE8TYP_LANETYP_LEUTURN = 6;
    LANETYPLANE8TYP_LANETYP_TURNLEANDTURNRI = 7;
    LANETYPLANE8TYP_LANETYP_STRAIGHTANDTURNLEANDTURNRI = 8;
    LANETYPLANE8TYP_LANETYP_RIUTURN = 9;
    LANETYPLANE8TYP_LANETYP_STRAIGHTANDLEUTURN = 10;
    LANETYPLANE8TYP_LANETYP_STRAIGHTANDRIUTURN = 11;
    LANETYPLANE8TYP_LANETYP_TURNLEANDLEUTURN = 12;
    LANETYPLANE8TYP_LANETYP_TURNRIANDRIUTURN = 13;
    LANETYPLANE8TYP_LANETYP_RESERVED1 = 14;
    LANETYPLANE8TYP_LANETYP_RESERVED2 = 15;
  }
  enum MobDevRPAReq1RPAOutModeSubTType {
    MOBDEVRPAREQ1RPAOUTMODESUBT_RPAOUTMODESUBT_IDLE = 0;
    MOBDEVRPAREQ1RPAOUTMODESUBT_RPAOUTMODESUBT_PRLRIOUT = 1;
    MOBDEVRPAREQ1RPAOUTMODESUBT_RPAOUTMODESUBT_RRLLEOUT = 2;
    MOBDEVRPAREQ1RPAOUTMODESUBT_RPAOUTMODESUBT_HEADPRPNDRIOUT = 3;
    MOBDEVRPAREQ1RPAOUTMODESUBT_RPAOUTMODESUBT_HEADPRPNDLEOUT = 4;
    MOBDEVRPAREQ1RPAOUTMODESUBT_RPAOUTMODESUBT_TAILPRPNDRIOUT = 5;
    MOBDEVRPAREQ1RPAOUTMODESUBT_RPAOUTMODESUBT_TAILPRPNDLEOUT = 6;
    MOBDEVRPAREQ1RPAOUTMODESUBT_RPAOUTMODESUBT_RESD1 = 7;
    MOBDEVRPAREQ1RPAOUTMODESUBT_RPAOUTMODESUBT_RESD2 = 8;
  }
  enum MobDevRPAReq1RPAReqType {
    MOBDEVRPAREQ1RPAREQ_RPAREQ_IDLE = 0;
    MOBDEVRPAREQ1RPAREQ_RPAREQ_START = 1;
    MOBDEVRPAREQ1RPAREQ_RPAREQ_STOP = 2;
    MOBDEVRPAREQ1RPAREQ_RPAREQ_OUTMODE = 3;
    MOBDEVRPAREQ1RPAREQ_RPAREQ_UNDO = 4;
    MOBDEVRPAREQ1RPAREQ_RPAREQ_START_SEARCHING = 5;
    MOBDEVRPAREQ1RPAREQ_RPAREQ_START_PARKING_IN = 6;
    MOBDEVRPAREQ1RPAREQ_RPAREQ_START_PARKING_OUT = 7;
    MOBDEVRPAREQ1RPAREQ_RPAREQ_PAUSE = 8;
    MOBDEVRPAREQ1RPAREQ_RPAREQ_CONTINUE = 9;
    MOBDEVRPAREQ1RPAREQ_RPAREQ_RESERVED = 10;
    MOBDEVRPAREQ1RPAREQ_RPAREQ_RPA_PARK_OUT_REQ = 11;
    MOBDEVRPAREQ1RPAREQ_RPAREQ_RETURN_TO_PREVIOUS_MENU = 12;
    MOBDEVRPAREQ1RPAREQ_RPAREQ_CLICKREMOTEPARKINGINBUTTON = 13;
    MOBDEVRPAREQ1RPAREQ_RPAREQ_REMPARKOUTCRSSWTON = 14;
    MOBDEVRPAREQ1RPAREQ_RPAREQ_REMPARKOUTCRSSWTOFF = 15;
  }
  enum MobDevRPAReq1RSPACtrlType {
    MOBDEVRPAREQ1RSPACTRL_RSPACTRL_IDLE = 0;
    MOBDEVRPAREQ1RSPACTRL_RSPACTRL_FUNCTION_ON = 1;
    MOBDEVRPAREQ1RSPACTRL_RSPACTRL_BACKWARD = 2;
    MOBDEVRPAREQ1RSPACTRL_RSPACTRL_FORWARD = 3;
    MOBDEVRPAREQ1RSPACTRL_RSPACTRL_RELEASE_BUTTON = 4;
    MOBDEVRPAREQ1RSPACTRL_RSPACTRL_EXIT_FUNCTION = 5;
    MOBDEVRPAREQ1RSPACTRL_RSPACTRL_RSPA_COMPLETE = 6;
  }
  enum OccupyMonStsDrvrStsType {
    OCCUPYMONSTSDRVRSTS_OCCPTPRESST1_UNDEFD1 = 0;
    OCCUPYMONSTSDRVRSTS_OCCPTPRESST1_OCCPTNOTPRSNT = 1;
    OCCUPYMONSTSDRVRSTS_OCCPTPRESST1_OCCPTPRSNT = 2;
    OCCUPYMONSTSDRVRSTS_OCCPTPRESST1_UNDEFD2 = 3;
  }
  enum OccupyMonStsPassStsType {
    OCCUPYMONSTSPASSSTS_OCCPTPRESST1_UNDEFD1 = 0;
    OCCUPYMONSTSPASSSTS_OCCPTPRESST1_OCCPTNOTPRSNT = 1;
    OCCUPYMONSTSPASSSTS_OCCPTPRESST1_OCCPTPRSNT = 2;
    OCCUPYMONSTSPASSSTS_OCCPTPRESST1_UNDEFD2 = 3;
  }
  enum OccupyMonStsSeccLeStsType {
    OCCUPYMONSTSSECCLESTS_OCCPTPRESST1_UNDEFD1 = 0;
    OCCUPYMONSTSSECCLESTS_OCCPTPRESST1_OCCPTNOTPRSNT = 1;
    OCCUPYMONSTSSECCLESTS_OCCPTPRESST1_OCCPTPRSNT = 2;
    OCCUPYMONSTSSECCLESTS_OCCPTPRESST1_UNDEFD2 = 3;
  }
  enum OccupyMonStsSecMidStsType {
    OCCUPYMONSTSSECMIDSTS_OCCPTPRESST1_UNDEFD1 = 0;
    OCCUPYMONSTSSECMIDSTS_OCCPTPRESST1_OCCPTNOTPRSNT = 1;
    OCCUPYMONSTSSECMIDSTS_OCCPTPRESST1_OCCPTPRSNT = 2;
    OCCUPYMONSTSSECMIDSTS_OCCPTPRESST1_UNDEFD2 = 3;
  }
  enum OccupyMonStsSecRiStsType {
    OCCUPYMONSTSSECRISTS_OCCPTPRESST1_UNDEFD1 = 0;
    OCCUPYMONSTSSECRISTS_OCCPTPRESST1_OCCPTNOTPRSNT = 1;
    OCCUPYMONSTSSECRISTS_OCCPTPRESST1_OCCPTPRSNT = 2;
    OCCUPYMONSTSSECRISTS_OCCPTPRESST1_UNDEFD2 = 3;
  }
  enum OccupyMonStsThrdLeStsType {
    OCCUPYMONSTSTHRDLESTS_OCCPTPRESST1_UNDEFD1 = 0;
    OCCUPYMONSTSTHRDLESTS_OCCPTPRESST1_OCCPTNOTPRSNT = 1;
    OCCUPYMONSTSTHRDLESTS_OCCPTPRESST1_OCCPTPRSNT = 2;
    OCCUPYMONSTSTHRDLESTS_OCCPTPRESST1_UNDEFD2 = 3;
  }
  enum OccupyMonStsThrdMidStsType {
    OCCUPYMONSTSTHRDMIDSTS_OCCPTPRESST1_UNDEFD1 = 0;
    OCCUPYMONSTSTHRDMIDSTS_OCCPTPRESST1_OCCPTNOTPRSNT = 1;
    OCCUPYMONSTSTHRDMIDSTS_OCCPTPRESST1_OCCPTPRSNT = 2;
    OCCUPYMONSTSTHRDMIDSTS_OCCPTPRESST1_UNDEFD2 = 3;
  }
  enum OccupyMonStsThrdRiStsType {
    OCCUPYMONSTSTHRDRISTS_OCCPTPRESST1_UNDEFD1 = 0;
    OCCUPYMONSTSTHRDRISTS_OCCPTPRESST1_OCCPTNOTPRSNT = 1;
    OCCUPYMONSTSTHRDRISTS_OCCPTPRESST1_OCCPTPRSNT = 2;
    OCCUPYMONSTSTHRDRISTS_OCCPTPRESST1_UNDEFD2 = 3;
  }
  enum PlannedPahDeType {
    PLANNEDPAHDE_NOYESCRIT1_NOTVLD1 = 0;
    PLANNEDPAHDE_NOYESCRIT1_NO = 1;
    PLANNEDPAHDE_NOYESCRIT1_YES = 2;
    PLANNEDPAHDE_NOYESCRIT1_NOTVLD2 = 3;
  }
  enum ScreemOperType {
    SCREEMOPER_SCREEMOPER_NOOPERATION = 0;
    SCREEMOPER_SCREEMOPER_CLICK = 1;
    SCREEMOPER_SCREEMOPER_SLIDING = 2;
    SCREEMOPER_SCREEMOPER_RESERVED = 3;
  }
  enum VoiceBrstModType {
    VOICEBRSTMOD_VOICEBRSTMOD_NOREQ = 0;
    VOICEBRSTMOD_VOICEBRSTMOD_DETAIL_MOD = 1;
    VOICEBRSTMOD_VOICEBRSTMOD_STREAMLINE_MOD = 2;
    VOICEBRSTMOD_VOICEBRSTMOD_SILENT_MOD = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool cross_info_ub = 1;
  // description Direction of the navigation route at the next cross [] [0|15] [initial_value:0]
  optional CrossInfoDirOfNavRutType cross_info_dir_of_nav_rut = 2;
  // description Distance to next cross [m] [0.0|511.0] [initial_value:511]
  optional uint32 cross_info_dst_to_cros = 3;
  // description Is there traffic light at the next cross [] [0|1] [initial_value:0]
  optional bool cross_info_trfc_li = 4;
  // description RCTA function on/off request. [] [0|1] [initial_value:0]
  optional bool ctra_sw_on_off = 5;
  // [] [0|1] [initial_value:None]
  optional bool ctra_sw_on_off_ub = 6;
  // [] [0|1] [initial_value:None]
  optional bool cust_prk_slot_posn_ub = 7;
  // description Customize the angle of the parking box [Unitless] [-256.0|255.0] [initial_value:256]
  optional double cust_prk_slot_posn_angle_disp = 8;
  // description Point 3 X coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double cust_prk_slot_posn_end_x1 = 9;
  // description Point 4 X coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double cust_prk_slot_posn_end_x2 = 10;
  // description Point 3 Y coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double cust_prk_slot_posn_end_y1 = 11;
  // description Point 4 Y coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double cust_prk_slot_posn_end_y2 = 12;
  // description Point 1 X coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double cust_prk_slot_posn_start_x1 = 13;
  // description Point 2 X coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double cust_prk_slot_posn_start_x2 = 14;
  // description Point 1 Y coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double cust_prk_slot_posn_start_y1 = 15;
  // description Point 2 Y coordinates [Unitless] [-1024.0|1023.0] [initial_value:1024]
  optional double cust_prk_slot_posn_start_y2 = 16;
  // description DIM error status distribution. [] [0|7] [initial_value:0]
  optional DIMStsDistbnType dim_sts_distbn = 17;
  // [] [0|1] [initial_value:None]
  optional bool dim_sts_distbn_ub = 18;
  // description DOW function on/off request. [] [0|1] [initial_value:0]
  optional bool dow_sw_on_off = 19;
  // [] [0|1] [initial_value:None]
  optional bool dow_sw_on_off_ub = 20;
  // [] [0|1] [initial_value:None]
  optional bool drvr_acc_fct_deactvn_req_ub = 21;
  // description this port is used to tell the status of HMI subsystem to ADAS subsystem [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 drvr_acc_fct_deactvn_req_chks = 22;
  // description this port is used to tell the status of HMI subsystem to ADAS subsystem [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 drvr_acc_fct_deactvn_req_cntr = 23;
  // description this port is used to tell the status of HMI subsystem to ADAS subsystem [] [0|1] [initial_value:0]
  optional bool drvr_acc_fct_deactvn_req_sts = 24;
  // description the request to enable/disable HWA function by SW switch in IHU. [] [0|1] [initial_value:0]
  optional bool drvr_lane_chg_aut_actv_sts = 25;
  // [] [0|1] [initial_value:None]
  optional bool drvr_lane_chg_aut_actv_sts_ub = 26;
  // description Driver voice activated lane change request [] [0|3] [initial_value:0]
  optional HmiDrvrSodReqChgType hmi_drvr_sod_req_chg = 27;
  // [] [0|1] [initial_value:None]
  optional bool hmi_drvr_sod_req_chg_ub = 28;
  // description Voice activated lane change switch settings [] [0|1] [initial_value:0]
  optional bool hmi_sod_lan_chg_switch = 29;
  // [] [0|1] [initial_value:None]
  optional bool hmi_sod_lan_chg_switch_ub = 30;
  // [] [0|1] [initial_value:None]
  optional bool lane_typ_ub = 31;
  // description lane1 type at the next cross [] [0|15] [initial_value:0]
  optional LaneTypLane1TypType lane_typ_lane1_typ = 32;
  // description lane2 type at the next cross [] [0|15] [initial_value:0]
  optional LaneTypLane2TypType lane_typ_lane2_typ = 33;
  // description lane3 type at the next cross [] [0|15] [initial_value:0]
  optional LaneTypLane3TypType lane_typ_lane3_typ = 34;
  // description lane4 type at the next cross [] [0|15] [initial_value:0]
  optional LaneTypLane4TypType lane_typ_lane4_typ = 35;
  // description lane5 type at the next cross [] [0|15] [initial_value:0]
  optional LaneTypLane5TypType lane_typ_lane5_typ = 36;
  // description lane6 type at the next cross [] [0|15] [initial_value:0]
  optional LaneTypLane6TypType lane_typ_lane6_typ = 37;
  // description lane7 type at the next cross [] [0|15] [initial_value:0]
  optional LaneTypLane7TypType lane_typ_lane7_typ = 38;
  // description lane8 type at the next cross [] [0|15] [initial_value:0]
  optional LaneTypLane8TypType lane_typ_lane8_typ = 39;
  // [] [0|1] [initial_value:None]
  optional bool mac_ub = 40;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 mac_chks = 41;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 mac_cntr = 42;
  // description data [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ma_cdata0 = 43;
  // description data [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ma_cdata1 = 44;
  // description data [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ma_cdata2 = 45;
  // description data [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ma_cdata3 = 46;
  // description data [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ma_cdata4 = 47;
  // description data [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ma_cdata5 = 48;
  // [] [0|1] [initial_value:None]
  optional bool mob_dev_rpa_req1_ub = 49;
  // description Checksum calculation for E2E [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 mob_dev_rpa_req1_chks = 50;
  // description E2E counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 mob_dev_rpa_req1_cntr = 51;
  // description mobile device status [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 mob_dev_rpa_req1_mob_dev_sts = 52;
  // description RPA Out Mode Direction [] [0|15] [initial_value:0]
  optional MobDevRPAReq1RPAOutModeSubTType mob_dev_rpa_req1_rpa_out_mode_sub_t = 53;
  // description RPA control [] [0|15] [initial_value:0]
  optional MobDevRPAReq1RPAReqType mob_dev_rpa_req1_rpa_req = 54;
  // description RSPA control [] [0|7] [initial_value:0]
  optional MobDevRPAReq1RSPACtrlType mob_dev_rpa_req1_rspa_ctrl = 55;
  // [] [0|1] [initial_value:None]
  optional bool occupy_mon_sts_ub = 56;
  // description Driver occupied status by camera monitor [] [0|3] [initial_value:0]
  optional OccupyMonStsDrvrStsType occupy_mon_sts_drvr_sts = 57;
  // description Passenger occupied status by camera monitor [] [0|3] [initial_value:0]
  optional OccupyMonStsPassStsType occupy_mon_sts_pass_sts = 58;
  // description Second row left side occupied status by camera monitor [] [0|3] [initial_value:0]
  optional OccupyMonStsSeccLeStsType occupy_mon_sts_secc_le_sts = 59;
  // description Second row middle side occupied status by camera monitor [] [0|3] [initial_value:0]
  optional OccupyMonStsSecMidStsType occupy_mon_sts_sec_mid_sts = 60;
  // description Second row right side occupied status by camera monitor [] [0|3] [initial_value:0]
  optional OccupyMonStsSecRiStsType occupy_mon_sts_sec_ri_sts = 61;
  // description Third row left side occupied status by camera monitor [] [0|3] [initial_value:0]
  optional OccupyMonStsThrdLeStsType occupy_mon_sts_thrd_le_sts = 62;
  // description Third row middle side occupied status by camera monitor [] [0|3] [initial_value:0]
  optional OccupyMonStsThrdMidStsType occupy_mon_sts_thrd_mid_sts = 63;
  // description Third row right side occupied status by camera monitor [] [0|3] [initial_value:0]
  optional OccupyMonStsThrdRiStsType occupy_mon_sts_thrd_ri_sts = 64;
  // description whether vehicle is driving in the planned path [] [0|3] [initial_value:0]
  optional PlannedPahDeType planned_pah_de = 65;
  // [] [0|1] [initial_value:None]
  optional bool planned_pah_de_ub = 66;
  // description The Telematics subsystem receives the selected route ID signal from the mobile APP and forwards it to the ASM subsystem. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 route_id = 67;
  // [] [0|1] [initial_value:None]
  optional bool route_id_ub = 68;
  // description The signal indicating whether the user is operating on the custom parking box and rotation button. [] [0|3] [initial_value:0]
  optional ScreemOperType screem_oper = 69;
  // [] [0|1] [initial_value:None]
  optional bool screem_oper_ub = 70;
  // description Speed limited information from navigation map engine [Km/h] [-1.0|254.0] [initial_value:0]
  optional double spd_cam_from_nav_map = 71;
  // [] [0|1] [initial_value:None]
  optional bool spd_cam_from_nav_map_ub = 72;
  // description Speed limit of current road [Km/h] [-1.0|254.0] [initial_value:0]
  optional double spd_lim_of_road = 73;
  // [] [0|1] [initial_value:None]
  optional bool spd_lim_of_road_ub = 74;
  // description Telematics forwards the cut out APP (/ lock screen/cut out app/system-level popup (incoming call)) and low battery signal sent by the mobile app [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 telephone_sts = 75;
  // [] [0|1] [initial_value:None]
  optional bool telephone_sts_ub = 76;
  // [] [0|1] [initial_value:None]
  optional bool veh_cfg_prm_ub = 77;
  // description signal block counter. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_blk_id_byte_posn1 = 78;
  // description  (BlockID-1)*7 + 1.  [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ccp_byte_posn2 = 79;
  // description  (BlockID-1)*7 + 2.  [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ccp_byte_posn3 = 80;
  // description  (BlockID-1)*7 + 3.  [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ccp_byte_posn4 = 81;
  // description  (BlockID-1)*7 + 4.  [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ccp_byte_posn5 = 82;
  // description  (BlockID-1)*7 + 5.  [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ccp_byte_posn6 = 83;
  // description  (BlockID-1)*7 + 6.  [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ccp_byte_posn7 = 84;
  // description  (BlockID-1)*7 + 7.  [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ccp_byte_posn8 = 85;
  // description Voice broadcast mode setting [] [0|7] [initial_value:0]
  optional VoiceBrstModType voice_brst_mod = 86;
  // [] [0|1] [initial_value:None]
  optional bool voice_brst_mod_ub = 87;
}

message BCM_ZCUCANFD1_FR06_180 {
// Report Message
  enum BrkPedlTrvlQfType {
    BRKPEDLTRVLQF_GENQF1_UNDEFINDDATAACCUR = 0;
    BRKPEDLTRVLQF_GENQF1_TMPUNDEFDDATA = 1;
    BRKPEDLTRVLQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    BRKPEDLTRVLQF_GENQF1_ACCURDATA = 3;
  }
  enum BrkPedlTrvlStQfType {
    BRKPEDLTRVLSTQF_GENQF1_UNDEFINDDATAACCUR = 0;
    BRKPEDLTRVLSTQF_GENQF1_TMPUNDEFDDATA = 1;
    BRKPEDLTRVLSTQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    BRKPEDLTRVLSTQF_GENQF1_ACCURDATA = 3;
  }
  enum BrkSysCylPMstActQfType {
    BRKSYSCYLPMSTACTQF_GENQF1_UNDEFINDDATAACCUR = 0;
    BRKSYSCYLPMSTACTQF_GENQF1_TMPUNDEFDDATA = 1;
    BRKSYSCYLPMSTACTQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    BRKSYSCYLPMSTACTQF_GENQF1_ACCURDATA = 3;
  }
  enum BrkSysCylPMstVirtQfType {
    BRKSYSCYLPMSTVIRTQF_GENQF1_UNDEFINDDATAACCUR = 0;
    BRKSYSCYLPMSTVIRTQF_GENQF1_TMPUNDEFDDATA = 1;
    BRKSYSCYLPMSTVIRTQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    BRKSYSCYLPMSTVIRTQF_GENQF1_ACCURDATA = 3;
  }
  enum EpbStsEpbStsType {
    EPBSTSEPBSTS_EPBSTS_RESD0 = 0;
    EPBSTSEPBSTS_EPBSTS_RESD1 = 1;
    EPBSTSEPBSTS_EPBSTS_RESD2 = 2;
    EPBSTSEPBSTS_EPBSTS_ALLAPPLD = 3;
    EPBSTSEPBSTS_EPBSTS_RESD4 = 4;
    EPBSTSEPBSTS_EPBSTS_ALLINTRAN = 5;
    EPBSTSEPBSTS_EPBSTS_BRKGDYNBYACTR = 6;
    EPBSTSEPBSTS_EPBSTS_RESD7 = 7;
    EPBSTSEPBSTS_EPBSTS_RESD8 = 8;
    EPBSTSEPBSTS_EPBSTS_ACTRALLRELD = 9;
    EPBSTSEPBSTS_EPBSTS_BRKGDYNDEGRADED = 10;
    EPBSTSEPBSTS_EPBSTS_RESD11 = 11;
    EPBSTSEPBSTS_EPBSTS_BRKGDYN = 12;
    EPBSTSEPBSTS_EPBSTS_RESD13 = 13;
    EPBSTSEPBSTS_EPBSTS_RESD14 = 14;
    EPBSTSEPBSTS_EPBSTS_ERR = 15;
  }
  enum EscCtrlIndcnType {
    ESCCTRLINDCN_DEVSTS1_ON = 0;
    ESCCTRLINDCN_DEVSTS1_OFF = 1;
    ESCCTRLINDCN_DEVSTS1_FLT = 2;
  }
  enum EscStEscStType {
    ESCSTESCST_ESCST1_ININ = 0;
    ESCSTESCST_ESCST1_OK = 1;
    ESCSTESCST_ESCST1_TMPERR = 2;
    ESCSTESCST_ESCST1_PRMNTERR = 3;
    ESCSTESCST_ESCST1_USROFF = 4;
  }
  enum RoadInclnQlyType {
    ROADINCLNQLY_QLY2_FLT = 0;
    ROADINCLNQLY_QLY2_NOINFO = 1;
    ROADINCLNQLY_QLY2_VLD = 2;
  }
  // description Latest active acceleration request downstream comfort rate limiter located in actuator node. [m/s^2] [-5.12|5.11] [initial_value:0]
  optional double asy_a_lgt_actv_aft_lim = 1;
  // [] [0|1] [initial_value:None]
  optional bool asy_a_lgt_actv_aft_lim_ub = 2;
  // [] [0|1] [initial_value:None]
  optional bool brk_pedl_trvl_ub = 3;
  // description Information about driver brake request derived from the travel sensor in the brake booster. Actual value for the output rod [mm] [-5.0|47.0] [initial_value:500]
  optional double brk_pedl_trvl_act = 4;
  // description Information about driver brake request derived from the travel sensor in the brake booster. Checksum [Unitless] [0.0|255.0] [initial_value:255]
  optional uint32 brk_pedl_trvl_chks = 5;
  // description Information about driver brake request derived from the travel sensor in the brake booster. Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 brk_pedl_trvl_cntr = 6;
  // description Information about driver brake request derived from the travel sensor in the brake booster. Travel sensor quality factor [] [0|3] [initial_value:1]
  optional BrkPedlTrvlQfType brk_pedl_trvl_qf = 7;
  // description Information about driver brake request derived from the travel sensor in the brake booster. Brake pedal applied information [] [0|1] [initial_value:0]
  optional bool brk_pedl_trvl_st = 8;
  // description Information about driver brake request derived from the travel sensor in the brake booster. Brake pedal applied information quality factor [] [0|3] [initial_value:1]
  optional BrkPedlTrvlStQfType brk_pedl_trvl_st_qf = 9;
  // description Information about driver brake request derived from the travel sensor in the brake booster. Target value for the output rod [mm] [-5.0|47.0] [initial_value:500]
  optional double brk_pedl_trvl_tar = 10;
  // [] [0|1] [initial_value:None]
  optional bool brk_sys_cyl_p_mst_ub = 11;
  // description Brake system master cylinder pressure information Actual pressure, raw value [bar] [-30.0|276.59999999999997] [initial_value:100]
  optional double brk_sys_cyl_p_mst_act = 12;
  // description Brake system master cylinder pressure information Actual pressure quality factor [] [0|3] [initial_value:1]
  optional BrkSysCylPMstActQfType brk_sys_cyl_p_mst_act_qf = 13;
  // description Brake system master cylinder pressure information Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 brk_sys_cyl_p_mst_chks = 14;
  // description Brake system master cylinder pressure information Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 brk_sys_cyl_p_mst_cntr = 15;
  // description Brake system master cylinder pressure information Target pressure [bar] [0.0|250.0] [initial_value:0]
  optional double brk_sys_cyl_p_mst_tar = 16;
  // description Brake system master cylinder pressure information Virtual pressure [bar] [0.0|250.0] [initial_value:0]
  optional double brk_sys_cyl_p_mst_virt = 17;
  // description Brake system master cylinder pressure information Virtual pressure quality factor [] [0|3] [initial_value:1]
  optional BrkSysCylPMstVirtQfType brk_sys_cyl_p_mst_virt_qf = 18;
  // [] [0|1] [initial_value:None]
  optional bool drvr_decel_req_ub = 19;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 drvr_decel_req_chks = 20;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 drvr_decel_req_cntr = 21;
  // description Driver deacceleration request [m/s^2] [-12.8|12.700000000000001] [initial_value:0]
  optional double drvr_decel_req_float8 = 22;
  // [] [0|1] [initial_value:None]
  optional bool epb_sts_ub = 23;
  // description Electrical Park Brake system status information Status for the rear wheel park actuator [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 epb_sts_chks = 24;
  // description Electrical Park Brake system status information Counter for EPB status [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 epb_sts_cntr = 25;
  // description Electrical Park Brake system status information Status for the rear wheel park actuator [] [0|15] [initial_value:0]
  optional EpbStsEpbStsType epb_sts_epb_sts = 26;
  // description Indicates that an Electronic stability control (ESC) controller is active [] [0|3] [initial_value:1]
  optional EscCtrlIndcnType esc_ctrl_indcn = 27;
  // [] [0|1] [initial_value:None]
  optional bool esc_ctrl_indcn_ub = 28;
  // [] [0|1] [initial_value:None]
  optional bool esc_st_ub = 29;
  // description Information on activation/ deactivation of Electronic Stability Control (ESC) Checksum for Esc state [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 esc_st_chks = 30;
  // description Information on activation/ deactivation of Electronic Stability Control (ESC) Counter for Esc state [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 esc_st_cntr = 31;
  // description Information on activation/ deactivation of Electronic Stability Control (ESC) Esc state information for Esc ON, Esc OFF or Esc Sport [] [0|7] [initial_value:1]
  optional EscStEscStType esc_st_esc_st = 32;
  // [] [0|1] [initial_value:None]
  optional bool road_incln_ub = 33;
  // description Road inclination information. The road inclination is negative when the vehicle is facing uphill and positive when the vehicle is facing downhill. Quality information for road inclination [] [0|3] [initial_value:1]
  optional RoadInclnQlyType road_incln_qly = 34;
  // description Road inclination information. The road inclination is negative when the vehicle is facing uphill and positive when the vehicle is facing downhill. [rad] [-0.9999833060000001|0.9999833060000001] [initial_value:0]
  optional double road_incln_road_incln = 35;
}

message DHU_ZCUCANFD1_RESD_FR01_181 {
// Report Message
  // [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 dhu_resd_sig1 = 1;
  // [] [0|1] [initial_value:None]
  optional bool dhu_resd_sig1_ub = 2;
  // description ReserveSignal on CANFD1 from DHU send to ADCU、ZCUD/ZCUP、BCM [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 dhu_resd_sig10 = 3;
  // [] [0|1] [initial_value:None]
  optional bool dhu_resd_sig10_ub = 4;
  // description ReserveSignal on CANFD1 from DHU send to ADCU、ZCUD/ZCUP、BCM [ns] [0.0|18446744073709552000.0] [initial_value:0]
  optional double dhu_resd_sig11 = 5;
  // [] [0|1] [initial_value:None]
  optional bool dhu_resd_sig11_ub = 6;
  // [ns] [0.0|18446744073709552000.0] [initial_value:0]
  optional double dhu_resd_sig12 = 7;
  // [] [0|1] [initial_value:None]
  optional bool dhu_resd_sig12_ub = 8;
  // description ReserveSignal on CANFD1 from DHU send to ADCU、ZCUD/ZCUP、BCM [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 dhu_resd_sig13 = 9;
  // [] [0|1] [initial_value:None]
  optional bool dhu_resd_sig13_ub = 10;
  // [] [0|1] [initial_value:None]
  optional bool dhu_resd_sig14_safety_ub = 11;
  // description ReserveSignal on CANFD1 from DHU send to ADCU、ZCUD/ZCUP、BCM [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 dhu_resd_sig14_safety_chks = 12;
  // description ReserveSignal on CANFD1 from DHU send to ADCU、ZCUD/ZCUP、BCM [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 dhu_resd_sig14_safety_cntr = 13;
  // description ReserveSignal on CANFD1 from DHU send to ADCU、ZCUD/ZCUP、BCM [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 dhu_resd_sig14_safety_u_int32 = 14;
  // description ReserveSignal on CANFD1 from DHU send to ADCU、ZCUD/ZCUP、BCM [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 dhu_resd_sig2 = 15;
  // [] [0|1] [initial_value:None]
  optional bool dhu_resd_sig2_ub = 16;
  // description ReserveSignal on CANFD1 from DHU send to ADCU、ZCUD/ZCUP、BCM [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 dhu_resd_sig3 = 17;
  // [] [0|1] [initial_value:None]
  optional bool dhu_resd_sig3_ub = 18;
  // description ReserveSignal on CANFD1 from DHU send to ADCU、ZCUD/ZCUP、BCM [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 dhu_resd_sig4 = 19;
  // [] [0|1] [initial_value:None]
  optional bool dhu_resd_sig4_ub = 20;
  // [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 dhu_resd_sig5 = 21;
  // [] [0|1] [initial_value:None]
  optional bool dhu_resd_sig5_ub = 22;
  // [ns] [0.0|18446744073709552000.0] [initial_value:0]
  optional double dhu_resd_sig6 = 23;
  // [] [0|1] [initial_value:None]
  optional bool dhu_resd_sig6_ub = 24;
  // [ns] [0.0|18446744073709552000.0] [initial_value:0]
  optional double dhu_resd_sig7 = 25;
  // [] [0|1] [initial_value:None]
  optional bool dhu_resd_sig7_ub = 26;
  // [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 dhu_resd_sig8 = 27;
  // [] [0|1] [initial_value:None]
  optional bool dhu_resd_sig8_ub = 28;
  // [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 dhu_resd_sig9 = 29;
  // [] [0|1] [initial_value:None]
  optional bool dhu_resd_sig9_ub = 30;
}

message DHU_ZCUCANFD1_RESD_FR02_185 {
// Report Message
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 tcam_resd_sig1 = 1;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig1_ub = 2;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 tcam_resd_sig10 = 3;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig10_ub = 4;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 tcam_resd_sig11 = 5;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig11_ub = 6;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 tcam_resd_sig12 = 7;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig12_ub = 8;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 tcam_resd_sig13 = 9;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig13_ub = 10;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 tcam_resd_sig14 = 11;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig14_ub = 12;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 tcam_resd_sig15 = 13;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig15_ub = 14;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 tcam_resd_sig16 = 15;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig16_ub = 16;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 tcam_resd_sig17 = 17;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig17_ub = 18;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 tcam_resd_sig18 = 19;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig18_ub = 20;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 tcam_resd_sig19 = 21;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig19_ub = 22;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 tcam_resd_sig2 = 23;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig2_ub = 24;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 tcam_resd_sig20 = 25;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig20_ub = 26;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 tcam_resd_sig21 = 27;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig21_ub = 28;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 tcam_resd_sig22 = 29;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig22_ub = 30;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 tcam_resd_sig23 = 31;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig23_ub = 32;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 tcam_resd_sig3 = 33;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig3_ub = 34;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 tcam_resd_sig4 = 35;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig4_ub = 36;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 tcam_resd_sig5 = 37;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig5_ub = 38;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 tcam_resd_sig6 = 39;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig6_ub = 40;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 tcam_resd_sig7 = 41;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig7_ub = 42;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 tcam_resd_sig8 = 43;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig8_ub = 44;
  // description ReserveSignal on CANFD from TCAM send to DHU、BCM、ADCU、ZCUD、ZCUP [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 tcam_resd_sig9 = 45;
  // [] [0|1] [initial_value:None]
  optional bool tcam_resd_sig9_ub = 46;
}

message ADCU_ZCUCANFD1_FR13_190 {
// Control Message
  enum AsyD2DCrsDimIndcrType {
    ASYD2DCRSDIMINDCR_ASYD2DCRSDIMINDCR_DEFAULT = 0;
    ASYD2DCRSDIMINDCR_ASYD2DCRSDIMINDCR_ICCPASSIVE = 1;
    ASYD2DCRSDIMINDCR_ASYD2DCRSDIMINDCR_ICCSTANDBY = 2;
    ASYD2DCRSDIMINDCR_ASYD2DCRSDIMINDCR_ICCACTIVE = 3;
    ASYD2DCRSDIMINDCR_ASYD2DCRSDIMINDCR_NOASTANDBY = 4;
    ASYD2DCRSDIMINDCR_ASYD2DCRSDIMINDCR_NOAACTIVE = 5;
    ASYD2DCRSDIMINDCR_ASYD2DCRSDIMINDCR_D2DLATACTIVEN = 6;
    ASYD2DCRSDIMINDCR_ASYD2DCRSDIMINDCR_D2DLATACTIVEP = 7;
    ASYD2DCRSDIMINDCR_ASYD2DCRSDIMINDCR_RESERVED = 8;
  }
  enum ExtrLiDispReqType {
    EXTRLIDISPREQ_EXTRLIDISPREQ_IDLE = 0;
    EXTRLIDISPREQ_EXTRLIDISPREQ_VOICEPARKINGSUSPEND = 1;
    EXTRLIDISPREQ_EXTRLIDISPREQ_VOICEPARKINGCOMPLETE = 2;
    EXTRLIDISPREQ_EXTRLIDISPREQ_VOICEPARKINGAVAILABLE = 3;
    EXTRLIDISPREQ_EXTRLIDISPREQ_VOICEPARKINGACTIVATION = 4;
    EXTRLIDISPREQ_EXTRLIDISPREQ_VOICEPARKINGRUNNING = 5;
    EXTRLIDISPREQ_EXTRLIDISPREQ_HPAMAXACTIVE = 6;
    EXTRLIDISPREQ_EXTRLIDISPREQ_HPAMAXGOINGUPHILL = 7;
    EXTRLIDISPREQ_EXTRLIDISPREQ_HPAMAXGOINGDOWNHILL = 8;
    EXTRLIDISPREQ_EXTRLIDISPREQ_HPAMAXTURNLEFT = 9;
    EXTRLIDISPREQ_EXTRLIDISPREQ_HPAMAXTURNRIGHT = 10;
    EXTRLIDISPREQ_EXTRLIDISPREQ_HPAMAXTHROUGHTHEGATE = 11;
    EXTRLIDISPREQ_EXTRLIDISPREQ_HPAMAXPASSINGTHROUGHOBSTACLES = 12;
    EXTRLIDISPREQ_EXTRLIDISPREQ_HPAMAXYIELDTOPEDESTRIANS = 13;
    EXTRLIDISPREQ_EXTRLIDISPREQ_HPAMAXREVERSETHEVEHICLE = 14;
    EXTRLIDISPREQ_EXTRLIDISPREQ_HPAMAXRUNNING = 15;
    EXTRLIDISPREQ_EXTRLIDISPREQ_HPAMAXPARKIN = 16;
    EXTRLIDISPREQ_EXTRLIDISPREQ_HPAMAXPARKOUT = 17;
    EXTRLIDISPREQ_EXTRLIDISPREQ_HPAMAXCOMPLETE = 18;
    EXTRLIDISPREQ_EXTRLIDISPREQ_HPAMAXSUSPEND = 19;
    EXTRLIDISPREQ_EXTRLIDISPREQ_RESERVED = 20;
  }
  enum FrntAndRePrkgInBtnStsType {
    FRNTANDREPRKGINBTNSTS_PRKGINBTNSTS_NODISPLAY = 0;
    FRNTANDREPRKGINBTNSTS_PRKGINBTNSTS_DISPLAYFRONT = 1;
    FRNTANDREPRKGINBTNSTS_PRKGINBTNSTS_DISPLAYREAR = 2;
    FRNTANDREPRKGINBTNSTS_PRKGINBTNSTS_RESERVED = 3;
  }
  enum PreCrashFrontDataObjectClassType {
    PRECRASHFRONTDATAOBJECTCLASS_OBJECTCLASS_UNKNOWN = 0;
    PRECRASHFRONTDATAOBJECTCLASS_OBJECTCLASS_CAR = 1;
    PRECRASHFRONTDATAOBJECTCLASS_OBJECTCLASS_TRUCK = 2;
    PRECRASHFRONTDATAOBJECTCLASS_OBJECTCLASS_PEDESTRIAN = 3;
    PRECRASHFRONTDATAOBJECTCLASS_OBJECTCLASS_SENSORERROR = 6;
  }
  enum PrkgCaliBtnStsType {
    PRKGCALIBTNSTS_ACTVNAVL4_IDLE = 0;
    PRKGCALIBTNSTS_ACTVNAVL4_ACTVN = 1;
    PRKGCALIBTNSTS_ACTVNAVL4_DEACTVN = 2;
    PRKGCALIBTNSTS_ACTVNAVL4_RECOMMAND = 3;
  }
  enum TrafficSignForADB1AdbDetdQlyType {
    TRAFFICSIGNFORADB1ADBDETDQLY_CLASSNQLY_LOW = 0;
    TRAFFICSIGNFORADB1ADBDETDQLY_CLASSNQLY_MEDIUM = 1;
    TRAFFICSIGNFORADB1ADBDETDQLY_CLASSNQLY_HIGH = 2;
  }
  enum TrafficSignForADB2AdbDetdQlyType {
    TRAFFICSIGNFORADB2ADBDETDQLY_CLASSNQLY_LOW = 0;
    TRAFFICSIGNFORADB2ADBDETDQLY_CLASSNQLY_MEDIUM = 1;
    TRAFFICSIGNFORADB2ADBDETDQLY_CLASSNQLY_HIGH = 2;
  }
  enum TrfcLiBrkStsType {
    TRFCLIBRKSTS_STATEMACHINE_OFF = 0;
    TRFCLIBRKSTS_STATEMACHINE_PASSIVE = 1;
    TRFCLIBRKSTS_STATEMACHINE_ACTIVE = 2;
    TRFCLIBRKSTS_STATEMACHINE_WARNING = 3;
    TRFCLIBRKSTS_STATEMACHINE_BRAKING = 4;
    TRFCLIBRKSTS_STATEMACHINE_TEMPORARYERROR = 5;
    TRFCLIBRKSTS_STATEMACHINE_PERMANENTERROR = 6;
    TRFCLIBRKSTS_STATEMACHINE_RESERVED = 7;
  }
  enum VehObjforAHBAdbClassnType {
    VEHOBJFORAHBADBCLASSN_ADBCLASSN_NOVEHICLE = 0;
    VEHOBJFORAHBADBCLASSN_ADBCLASSN_CAR = 1;
    VEHOBJFORAHBADBCLASSN_ADBCLASSN_TRUCK = 2;
    VEHOBJFORAHBADBCLASSN_ADBCLASSN_BUS = 3;
    VEHOBJFORAHBADBCLASSN_ADBCLASSN_BIKEORMOTORBIKE = 4;
    VEHOBJFORAHBADBCLASSN_ADBCLASSN_PEDESTRAIN = 5;
    VEHOBJFORAHBADBCLASSN_ADBCLASSN_MIXED = 6;
    VEHOBJFORAHBADBCLASSN_ADBCLASSN_UNKNOWN = 7;
  }
  enum VehObjforAHBAdbClassnQlyType {
    VEHOBJFORAHBADBCLASSNQLY_CLASSNQLY_LOW = 0;
    VEHOBJFORAHBADBCLASSNQLY_CLASSNQLY_MEDIUM = 1;
    VEHOBJFORAHBADBCLASSNQLY_CLASSNQLY_HIGH = 2;
  }
  enum VehObjforAHBAdbDetdQlyType {
    VEHOBJFORAHBADBDETDQLY_CLASSNQLY_LOW = 0;
    VEHOBJFORAHBADBDETDQLY_CLASSNQLY_MEDIUM = 1;
    VEHOBJFORAHBADBDETDQLY_CLASSNQLY_HIGH = 2;
  }
  enum VehObjforAHBAdbObjDirType {
    VEHOBJFORAHBADBOBJDIR_ADBOBJDIR_IDLE = 0;
    VEHOBJFORAHBADBOBJDIR_ADBOBJDIR_ONCOMING = 1;
    VEHOBJFORAHBADBOBJDIR_ADBOBJDIR_PRECEDING = 2;
    VEHOBJFORAHBADBOBJDIR_ADBOBJDIR_OTHERS = 3;
  }
  enum VehRemPrkgStsType {
    VEHREMPRKGSTS_VEHREMPRKGSTS_OFF = 0;
    VEHREMPRKGSTS_VEHREMPRKGSTS_PARKINGINSTANDBY = 1;
    VEHREMPRKGSTS_VEHREMPRKGSTS_PARKINGOUTSTANDBY = 2;
    VEHREMPRKGSTS_VEHREMPRKGSTS_PREACTIVE = 3;
    VEHREMPRKGSTS_VEHREMPRKGSTS_ACTIVE = 4;
    VEHREMPRKGSTS_VEHREMPRKGSTS_PARKPROCESSACTIVE = 5;
    VEHREMPRKGSTS_VEHREMPRKGSTS_PARKINCOMPLETED = 6;
    VEHREMPRKGSTS_VEHREMPRKGSTS_PARKOUTCOMPLETED = 7;
    VEHREMPRKGSTS_VEHREMPRKGSTS_SUSPEND = 8;
    VEHREMPRKGSTS_VEHREMPRKGSTS_ABORT = 9;
    VEHREMPRKGSTS_VEHREMPRKGSTS_RPAPARKCOMPLETED = 10;
    VEHREMPRKGSTS_VEHREMPRKGSTS_QUIT = 11;
    VEHREMPRKGSTS_VEHREMPRKGSTS_FAILURE = 12;
    VEHREMPRKGSTS_VEHREMPRKGSTS_CANCEL = 13;
    VEHREMPRKGSTS_VEHREMPRKGSTS_RESERVED1 = 14;
    VEHREMPRKGSTS_VEHREMPRKGSTS_RESERVED2 = 15;
  }
  // description The quick switch of auto lane change function. [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_aut_lane_chg_swt_sts = 1;
  // [] [0|1] [initial_value:None]
  optional bool asy_aut_lane_chg_swt_sts_ub = 2;
  // description Signal indicating the style status of the CNOA Auto Lane Change function. [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_cnoa_auto_lane_chg_style = 3;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_auto_lane_chg_style_ub = 4;
  // description Notification warning for the reason of CNOA Cruise function cannot be active. [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_actv_faild_msg = 5;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_actv_faild_msg_ub = 6;
  // description Warning driver when the CNOA Cruise function active or inactive. [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_actv_msg = 7;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_actv_msg_ub = 8;
  // description Notification warning of CNOA Cruise function Cross the intersections. [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_cross_intsec_msg = 9;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_cross_intsec_msg_ub = 10;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_deactvd_msg_ub = 11;
  // description Notification warning of CNOA Cruise function unable to active.  [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_deactvd_msg_asy_cnoa_crs_deactvd_msg = 12;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_deactvd_msg_chks = 13;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_deactvd_msg_cntr = 14;
  // description Notification warning for finishing CNOA Cruise function. [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_finshd_msg = 15;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_finshd_msg_ub = 16;
  // description Notification warning of Individual Time Gap for CNOA Learning function. [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_ind_ti_gap_msg = 17;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_ind_ti_gap_msg_ub = 18;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_lan_chg_msg_ub = 19;
  // description Notification warning of CNOA Lane Change function status.  [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_lan_chg_msg_asy_cnoa_crs_lan_chg_msg = 20;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_lan_chg_msg_chks = 21;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_lan_chg_msg_cntr = 22;
  // description CNOA Cruise Off ODD Distance [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_off_odd_distan = 23;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_off_odd_distan_ub = 24;
  // description This Signal is CNOA Offset notification dispaly for Car, Truck, RoadEdge and so on. [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_offs_msg = 25;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_offs_msg_ub = 26;
  // description Notification remind warning in CNOA state. [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_rmn_msg = 27;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_rmn_msg_ub = 28;
  // description CNOA Cruise Status [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_sts = 29;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_sts_ub = 30;
  // description Notification warning for CNOA Cruise function status on CSD. [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_sts_csd_msg = 31;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_sts_csd_msg_ub = 32;
  // description Signal indicating the status of the CNOA cruise function. [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_swt_on_off = 33;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_swt_on_off_ub = 34;
  // description Signal indicating the status of the CNOA Cruise function. [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_swt_sts = 35;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_swt_sts_ub = 36;
  // description Notification remind warning in CNOA state for Main Page Download error. [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_cnoa_data_download_faild_msg = 37;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_data_download_faild_msg_ub = 38;
  // description CNOA Game Fail Type [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_cnoa_game_fail_type = 39;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_game_fail_type_ub = 40;
  // description GameReason [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_cnoa_game_reason = 41;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_game_reason_ub = 42;
  // description Cnoa Learning prompt Message [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_cnoa_lrng_prmpt_msg = 43;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lrng_prmpt_msg_ub = 44;
  // description Signal indicating the status of the CNOA Learning Route function. [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_cno_alrng_swt_on_off = 45;
  // [] [0|1] [initial_value:None]
  optional bool asy_cno_alrng_swt_on_off_ub = 46;
  // description Signal indicating the status of the CNOA Lrarning Route function. [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_cnoa_lrng_swt_sts = 47;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lrng_swt_sts_ub = 48;
  // description Signal indicating the status of the CNOA Voice request Lane Change function. [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_cnoa_sod_lane_chg_swt = 49;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_sod_lane_chg_swt_ub = 50;
  // description Notification warning for take over in CNOA state [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_cnoa_takeover_warn_msg = 51;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_takeover_warn_msg_ub = 52;
  // description CNOA Turn Fail Type [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_cnoa_turn_fail_type = 53;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_turn_fail_type_ub = 54;
  // description CNOA Turn Status [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_cnoa_turn_sts = 55;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_turn_sts_ub = 56;
  // description Icon category [] [0|15] [initial_value:0]
  optional AsyD2DCrsDimIndcrType asy_d2_d_crs_dim_indcr = 57;
  // [] [0|1] [initial_value:None]
  optional bool asy_d2_d_crs_dim_indcr_ub = 58;
  // description The switch status of auto lane change to fast lane. [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_fast_lane_swt_sts = 59;
  // [] [0|1] [initial_value:None]
  optional bool asy_fast_lane_swt_sts_ub = 60;
  // description The request of  high and low beams automatic illumination for NOA function. [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_high_beam_flash_warn_rqrd = 61;
  // [] [0|1] [initial_value:None]
  optional bool asy_high_beam_flash_warn_rqrd_ub = 62;
  // description Notification reminder when the function of NOA is available. [] [0|1] [initial_value:0]
  optional bool asy_noa_avl_rmn = 63;
  // [] [0|1] [initial_value:None]
  optional bool asy_noa_avl_rmn_ub = 64;
  // description Notification warning for the reason of NOA cannot be active [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_noa_deactvd_reasn_mesg = 65;
  // [] [0|1] [initial_value:None]
  optional bool asy_noa_deactvd_reasn_mesg_ub = 66;
  // description Notification remind warning in NOA state [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_noa_remind_mesg = 67;
  // [] [0|1] [initial_value:None]
  optional bool asy_noa_remind_mesg_ub = 68;
  // description Notification warning for take over in NOA state [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_noa_takeover_mesg = 69;
  // [] [0|1] [initial_value:None]
  optional bool asy_noa_takeover_mesg_ub = 70;
  // description The target set speed offset of NOA function. [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_noa_tar_spd_offs = 71;
  // [] [0|1] [initial_value:None]
  optional bool asy_noa_tar_spd_offs_ub = 72;
  // description DIM notification display [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_trfc_li_warn = 73;
  // [] [0|1] [initial_value:None]
  optional bool asy_trfc_li_warn_ub = 74;
  // description Exterior light display request [] [0|31] [initial_value:0]
  optional ExtrLiDispReqType extr_li_disp_req = 75;
  // [] [0|1] [initial_value:None]
  optional bool extr_li_disp_req_ub = 76;
  // description Front and rear parking switch button state [] [0|3] [initial_value:0]
  optional FrntAndRePrkgInBtnStsType frnt_and_re_prkg_in_btn_sts = 77;
  // [] [0|1] [initial_value:None]
  optional bool frnt_and_re_prkg_in_btn_sts_ub = 78;
  // description predicted Object Overlap, i.e. the portion of the ego vehicle covered by the collision object, is between 25% and 100%. [%] [-100.0|100.0] [initial_value:100]
  optional double overlap = 79;
  // [] [0|1] [initial_value:None]
  optional bool overlap_ub = 80;
  // [] [0|1] [initial_value:None]
  optional bool pre_crash_front_data_ub = 81;
  // description crc [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 pre_crash_front_data_chks = 82;
  // description collision relative velocity [m/s] [0.0|42.585] [initial_value:0]
  optional double pre_crash_front_data_closing_velocity = 83;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 pre_crash_front_data_cntr = 84;
  // description object type [] [0|7] [initial_value:0]
  optional PreCrashFrontDataObjectClassType pre_crash_front_data_object_class = 85;
  // description overlap [%] [-100.0|100.0] [initial_value:100]
  optional double pre_crash_front_data_over_lap = 86;
  // description time to impact [s] [0.0|1.02] [initial_value:250]
  optional double pre_crash_front_data_time_to_impact = 87;
  // description Customize the parking calibration button status signal [] [0|3] [initial_value:0]
  optional PrkgCaliBtnStsType prkg_cali_btn_sts = 88;
  // [] [0|1] [initial_value:None]
  optional bool prkg_cali_btn_sts_ub = 89;
  // [] [0|1] [initial_value:None]
  optional bool steer_tq_addl_for_ema_ub = 90;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 steer_tq_addl_for_ema_chks = 91;
  // description Live counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 steer_tq_addl_for_ema_cntr = 92;
  // description when EMA function triggered, ASDM should send this signal to PSCM and archive a torque overlay (0.5nm TBD)which can help the driver to maneuver the evasive intervention. [NewtonMeter] [-30.0|30.0] [initial_value:0]
  optional double steer_tq_addl_for_ema_steer_tq_addl_for_ema = 93;
  // description This signal is used to ask the engine to stop. [] [0|1] [initial_value:0]
  optional bool stop_req_of_lgt_ctrl_for_prpsn = 94;
  // [] [0|1] [initial_value:None]
  optional bool stop_req_of_lgt_ctrl_for_prpsn_ub = 95;
  // description This signal is used to ask the engine to start. [] [0|1] [initial_value:0]
  optional bool strt_req_of_lgt_ctrl_for_prpsn = 96;
  // [] [0|1] [initial_value:None]
  optional bool strt_req_of_lgt_ctrl_for_prpsn_ub = 97;
  // [] [0|1] [initial_value:None]
  optional bool traffic_sign_for_adb1_ub = 98;
  // description refer to VehObjforADB1 [m] [0.0|819.0] [initial_value:0]
  optional double traffic_sign_for_adb1_adb_abs_dist = 99;
  // description refer to VehObjforADB1 [] [0|3] [initial_value:0]
  optional TrafficSignForADB1AdbDetdQlyType traffic_sign_for_adb1_adb_detd_qly = 100;
  // description refer to VehObjforADB1 [Deg] [-40.0|40.0] [initial_value:800]
  optional double traffic_sign_for_adb1_adb_hozl_ag_le = 101;
  // description refer to VehObjforADB1 [Deg] [-40.0|40.0] [initial_value:800]
  optional double traffic_sign_for_adb1_adb_hozl_ag_ri = 102;
  // description refer to VehObjforADB1 [] [0|1] [initial_value:0]
  optional bool traffic_sign_for_adb1_adb_trk_info = 103;
  // description angle between ego vehicle camera and the bottom of object  [Deg] [-3.0|22.55] [initial_value:60]
  optional double traffic_sign_for_adb1_adb_vert_ag_bot = 104;
  // description angle between ego vehicle camera and the top of object  [Deg] [-3.0|22.55] [initial_value:60]
  optional double traffic_sign_for_adb1_adb_vert_ag_top = 105;
  // [] [0|1] [initial_value:None]
  optional bool traffic_sign_for_adb2_ub = 106;
  // description refer to VehObjforADB1 [m] [0.0|819.0] [initial_value:0]
  optional double traffic_sign_for_adb2_adb_abs_dist = 107;
  // description refer to VehObjforADB1 [] [0|3] [initial_value:0]
  optional TrafficSignForADB2AdbDetdQlyType traffic_sign_for_adb2_adb_detd_qly = 108;
  // description refer to VehObjforADB1 [Deg] [-40.0|40.0] [initial_value:800]
  optional double traffic_sign_for_adb2_adb_hozl_ag_le = 109;
  // description refer to VehObjforADB1 [Deg] [-40.0|40.0] [initial_value:800]
  optional double traffic_sign_for_adb2_adb_hozl_ag_ri = 110;
  // description refer to VehObjforADB1 [] [0|1] [initial_value:0]
  optional bool traffic_sign_for_adb2_adb_trk_info = 111;
  // description angle between ego vehicle camera and the bottom of object  [Deg] [-3.0|22.55] [initial_value:60]
  optional double traffic_sign_for_adb2_adb_vert_ag_bot = 112;
  // description angle between ego vehicle camera and the top of object  [Deg] [-3.0|22.55] [initial_value:60]
  optional double traffic_sign_for_adb2_adb_vert_ag_top = 113;
  // description Indicates the TLB function status..  [] [0|7] [initial_value:0]
  optional TrfcLiBrkStsType trfc_li_brk_sts = 114;
  // [] [0|1] [initial_value:None]
  optional bool trfc_li_brk_sts_ub = 115;
  // description Traffic lights with countdown timer [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 trfc_li_cot_dwn = 116;
  // [] [0|1] [initial_value:None]
  optional bool trfc_li_cot_dwn_ub = 117;
  // [] [0|1] [initial_value:None]
  optional bool veh_objfor_ahb_ub = 118;
  // description refer to VehObjforADB1 [m] [0.0|1000.0] [initial_value:0]
  optional double veh_objfor_ahb_adb_abs_dist = 119;
  // description refer to VehObjforADB1 [] [0|7] [initial_value:0]
  optional VehObjforAHBAdbClassnType veh_objfor_ahb_adb_classn = 120;
  // description refer to VehObjforADB1 [] [0|3] [initial_value:0]
  optional VehObjforAHBAdbClassnQlyType veh_objfor_ahb_adb_classn_qly = 121;
  // description refer to VehObjforADB1 [] [0|3] [initial_value:0]
  optional VehObjforAHBAdbDetdQlyType veh_objfor_ahb_adb_detd_qly = 122;
  // description refer to VehObjforADB1 [Deg] [-40.0|40.0] [initial_value:800]
  optional double veh_objfor_ahb_adb_hozl_ag = 123;
  // description refer to VehObjforADB1 [] [0|3] [initial_value:0]
  optional VehObjforAHBAdbObjDirType veh_objfor_ahb_adb_obj_dir = 124;
  // description refer to VehObjforADB1 [DegPerSec] [-144.0|144.0] [initial_value:2880]
  optional double veh_objfor_ahb_adb_obj_hozl_ag_spd = 125;
  // description refer to VehObjforADB1 [DegPerSec] [-144.0|144.0] [initial_value:720]
  optional double veh_objfor_ahb_adb_obj_vert_ag_spd = 126;
  // description refer to VehObjforADB1 [] [0|1] [initial_value:0]
  optional bool veh_objfor_ahb_adb_trk_info = 127;
  // description refer to VehObjforADB1 [Deg] [-15.0|15.0] [initial_value:75]
  optional double veh_objfor_ahb_adb_vert_ag = 128;
  // description RPA plus function state [] [0|15] [initial_value:0]
  optional VehRemPrkgStsType veh_rem_prkg_sts = 129;
  // [] [0|1] [initial_value:None]
  optional bool veh_rem_prkg_sts_ub = 130;
  // description ELKA warning request to inform the driver. [] [0|1] [initial_value:0]
  optional bool warn_for_asy_emgy_lane_keep_aid = 131;
  // [] [0|1] [initial_value:None]
  optional bool warn_for_asy_emgy_lane_keep_aid_ub = 132;
}

message BCM_ZCUCANFD1_FR15_192 {
// Report Message
  enum AsyLatCtrlModReqGroupCfmdLatCtrlModType {
    ASYLATCTRLMODREQGROUPCFMDLATCTRLMOD_LATCTRLMOD5_NOREQ = 0;
    ASYLATCTRLMODREQGROUPCFMDLATCTRLMOD_LATCTRLMOD5_HIGHWAYASSIST = 1;
    ASYLATCTRLMODREQGROUPCFMDLATCTRLMOD_LATCTRLMOD5_EMGYLANEKEEPAIDFOROBJRE = 2;
    ASYLATCTRLMODREQGROUPCFMDLATCTRLMOD_LATCTRLMOD5_EMGYLANEKEEPAIDFORSTAT = 3;
    ASYLATCTRLMODREQGROUPCFMDLATCTRLMOD_LATCTRLMOD5_SFTYLANEKEEPAID = 4;
    ASYLATCTRLMODREQGROUPCFMDLATCTRLMOD_LATCTRLMOD5_STEERASSC = 5;
    ASYLATCTRLMODREQGROUPCFMDLATCTRLMOD_LATCTRLMOD5_DSROVERSTEER = 6;
    ASYLATCTRLMODREQGROUPCFMDLATCTRLMOD_LATCTRLMOD5_DSRMUESPLIT = 7;
    ASYLATCTRLMODREQGROUPCFMDLATCTRLMOD_LATCTRLMOD5_DSRTRLRSTABY = 8;
    ASYLATCTRLMODREQGROUPCFMDLATCTRLMOD_LATCTRLMOD5_EMGYMANVASSI = 9;
    ASYLATCTRLMODREQGROUPCFMDLATCTRLMOD_LATCTRLMOD5_RESERVED1 = 10;
    ASYLATCTRLMODREQGROUPCFMDLATCTRLMOD_LATCTRLMOD5_E2E = 11;
    ASYLATCTRLMODREQGROUPCFMDLATCTRLMOD_LATCTRLMOD5_SHWA = 12;
    ASYLATCTRLMODREQGROUPCFMDLATCTRLMOD_LATCTRLMOD5_APA = 13;
    ASYLATCTRLMODREQGROUPCFMDLATCTRLMOD_LATCTRLMOD5_RPA = 14;
    ASYLATCTRLMODREQGROUPCFMDLATCTRLMOD_LATCTRLMOD5_HPA = 15;
  }
  enum PrkLatLgtFailrPrkLatLgtFailrType {
    PRKLATLGTFAILRPRKLATLGTFAILR_PRKLATLGTFAIL_NOFAILURE = 0;
    PRKLATLGTFAILRPRKLATLGTFAILR_PRKLATLGTFAIL_STEERINGFAILURE = 1;
    PRKLATLGTFAILRPRKLATLGTFAILR_PRKLATLGTFAIL_BRAKEFAILURE = 2;
    PRKLATLGTFAILRPRKLATLGTFAILR_PRKLATLGTFAIL_PROPULSIONFAILURE = 3;
    PRKLATLGTFAILRPRKLATLGTFAILR_PRKLATLGTFAIL_RBUFAILURE = 4;
    PRKLATLGTFAILRPRKLATLGTFAILR_PRKLATLGTFAIL_COMMUNICATIONFAILURE = 5;
    PRKLATLGTFAILRPRKLATLGTFAILR_PRKLATLGTFAIL_VDSWINTERNALFAILURE = 6;
    PRKLATLGTFAILRPRKLATLGTFAILR_PRKLATLGTFAIL_RWSFAILURE = 7;
  }
  enum StandStillMgrStsForHld1Type {
    STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLDVAL0 = 0;
    STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLDVAL1 = 1;
    STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLDVAL2 = 2;
    STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLDVAL3 = 3;
    STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLDVAL4 = 4;
    STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLDVAL5 = 5;
    STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLDVAL6 = 6;
    STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLD1_STANDSTILLMGRSTSFORHLDVAL7 = 7;
  }
  enum VehMNomTrlrMType {
    VEHMNOMTRLRM_TRLRM_LVL0 = 0;
    VEHMNOMTRLRM_TRLRM_LVL1 = 1;
    VEHMNOMTRLRM_TRLRM_LVL2 = 2;
    VEHMNOMTRLRM_TRLRM_LVL3 = 3;
  }
  enum VehMNomVehMQlyType {
    VEHMNOMVEHMQLY_QLY2_FLT = 0;
    VEHMNOMVEHMQLY_QLY2_NOINFO = 1;
    VEHMNOMVEHMQLY_QLY2_VLD = 2;
  }
  enum VehVLatQfType {
    VEHVLATQF_GENQF1_UNDEFINDDATAACCUR = 0;
    VEHVLATQF_GENQF1_TMPUNDEFDDATA = 1;
    VEHVLATQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    VEHVLATQF_GENQF1_ACCURDATA = 3;
  }
  enum VehVLgtQfType {
    VEHVLGTQF_GENQF1_UNDEFINDDATAACCUR = 0;
    VEHVLGTQF_GENQF1_TMPUNDEFDDATA = 1;
    VEHVLGTQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    VEHVLGTQF_GENQF1_ACCURDATA = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool asy_lat_ctrl_mod_req_group_cfmd_ub = 1;
  // description Lateral Control Mode Confirmed Chks [Unitless] [0.0|255.0] [initial_value:255]
  optional uint32 asy_lat_ctrl_mod_req_group_cfmd_chks = 2;
  // description Lateral Control Mode Confirmed Cntr [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_lat_ctrl_mod_req_group_cfmd_cntr = 3;
  // description Lateral Control Mode Confirmed [] [0|15] [initial_value:0]
  optional AsyLatCtrlModReqGroupCfmdLatCtrlModType asy_lat_ctrl_mod_req_group_cfmd_lat_ctrl_mod = 4;
  // [] [0|1] [initial_value:None]
  optional bool bcm_chassis_canfd2_resd_sig1_safety_ub = 5;
  // description BCMChassisCANFD2ResdSig1 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 bcm_chassis_canfd2_resd_sig1_safety_chks = 6;
  // description BCMChassisCANFD2ResdSig1 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 bcm_chassis_canfd2_resd_sig1_safety_cntr = 7;
  // description BCMChassisCANFD2ResdSig1 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 bcm_chassis_canfd2_resd_sig1_safety_u_int16 = 8;
  // description BCMChassisCANFD2ResdSig1 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 bcm_chassis_canfd2_resd_sig1_safety_u_int4 = 9;
  // [] [0|1] [initial_value:None]
  optional bool bcm_chassis_canfd2_resd_sig2_safety_ub = 10;
  // description BCMChassisCANFD2ResdSig2 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 bcm_chassis_canfd2_resd_sig2_safety_chks = 11;
  // description BCMChassisCANFD2ResdSig2 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 bcm_chassis_canfd2_resd_sig2_safety_cntr = 12;
  // description BCMChassisCANFD2ResdSig2 [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 bcm_chassis_canfd2_resd_sig2_safety_u_int16 = 13;
  // description BCMChassisCANFD2ResdSig2 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 bcm_chassis_canfd2_resd_sig2_safety_u_int4 = 14;
  // [] [0|1] [initial_value:None]
  optional bool prk_lat_lgt_failr_ub = 15;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 prk_lat_lgt_failr_chks = 16;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 prk_lat_lgt_failr_cntr = 17;
  // description Failure mode [] [0|7] [initial_value:0]
  optional PrkLatLgtFailrPrkLatLgtFailrType prk_lat_lgt_failr_prk_lat_lgt_failr = 18;
  // [] [0|1] [initial_value:None]
  optional bool stand_still_mgr_sts_for_hld_ub = 19;
  // description Brake systen hold status [] [0|7] [initial_value:0]
  optional StandStillMgrStsForHld1Type stand_still_mgr_sts_for_hld1 = 20;
  // description chks [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 stand_still_mgr_sts_for_hld_chks = 21;
  // description cntr [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 stand_still_mgr_sts_for_hld_cntr = 22;
  // [] [0|1] [initial_value:None]
  optional bool veh_m_nom_ub = 23;
  // description Estimated vehicle mass including trailer. Estimated trailer mass [] [0|3] [initial_value:0]
  optional VehMNomTrlrMType veh_m_nom_trlr_m = 24;
  // description Estimated vehicle mass including trailer. Vehicle mass including trailer mass (if connected). [kg] [0.0|10000.0] [initial_value:0]
  optional double veh_m_nom_veh_m = 25;
  // description Estimated vehicle mass including trailer. Quality for vehicle mass information [] [0|3] [initial_value:1]
  optional VehMNomVehMQlyType veh_m_nom_veh_m_qly = 26;
  // [] [0|1] [initial_value:None]
  optional bool veh_v_ub = 27;
  // description Vehicle lateral and longitudinal velocity. Vehicle lateral velocity [m/s] [-29.997007551|30.00091392] [initial_value:0]
  optional double veh_v_lat = 28;
  // description Vehicle lateral and longitudinal velocity. Vehicle lateral velocity QF [] [0|3] [initial_value:1]
  optional VehVLatQfType veh_v_lat_qf = 29;
  // description Vehicle lateral and longitudinal velocity. Vehicle longitudinal velocity [m/s] [-127.99776000000001|128.00167000000002] [initial_value:0]
  optional double veh_v_lgt = 30;
  // description Vehicle lateral and longitudinal velocity. Vehicle longitudinal velocity QF [] [0|3] [initial_value:1]
  optional VehVLgtQfType veh_v_lgt_qf = 31;
}

message ADCU_ZCUCANFD1_FR04_1A0 {
// Control Message
  enum AD4RWSInhibReqAD4RWSInhibReqType {
    AD4RWSINHIBREQAD4RWSINHIBREQ_STEERREINHIBREQ_DEFAULT = 0;
    AD4RWSINHIBREQAD4RWSINHIBREQ_STEERREINHIBREQ_REQSUPPRESSION = 1;
    AD4RWSINHIBREQAD4RWSINHIBREQ_STEERREINHIBREQ_REQRELEASESUPPRESSION = 2;
    AD4RWSINHIBREQAD4RWSINHIBREQ_STEERREINHIBREQ_RESERVED = 3;
  }
  enum ADThemeDispType {
    ADTHEMEDISP_THEMEDISP_NOREQUEST = 0;
    ADTHEMEDISP_THEMEDISP_GP_ADAS = 1;
    ADTHEMEDISP_THEMEDISP_GP_AD = 2;
  }
  enum AsyALgtCtrlMod1Type {
    ASYALGTCTRLMOD1_ASYALGTCTRLMOD_NOREQ = 0;
    ASYALGTCTRLMOD1_ASYALGTCTRLMOD_PEB = 10;
    ASYALGTCTRLMOD1_ASYALGTCTRLMOD_APA = 11;
    ASYALGTCTRLMOD1_ASYALGTCTRLMOD_RPA = 12;
    ASYALGTCTRLMOD1_ASYALGTCTRLMOD_HPA = 13;
  }
  enum AsyALgtStsAsyALgtStsType {
    ASYALGTSTSASYALGTSTS_ASYALGTSTS_RESERVED1 = 0;
    ASYALGTSTSASYALGTSTS_ASYALGTSTS_ACCSTS1_STANDBY = 1;
    ASYALGTSTSASYALGTSTS_ASYALGTSTS_ACCSTS1_ACTIVE = 2;
    ASYALGTSTSASYALGTSTS_ASYALGTSTS_RESERVED2 = 3;
    ASYALGTSTSASYALGTSTS_ASYALGTSTS_ACCSTS1_OVERRIDE = 4;
    ASYALGTSTSASYALGTSTS_ASYALGTSTS_ACCSTS1_STANDACTIVE = 5;
    ASYALGTSTSASYALGTSTS_ASYALGTSTS_ACCSTS1_STANDWAIT = 6;
    ASYALGTSTSASYALGTSTS_ASYALGTSTS_ACCSTS1_TEMPORARYFAILURE = 7;
    ASYALGTSTSASYALGTSTS_ASYALGTSTS_ACCSTS1_PERMANENTFAILURE = 8;
    ASYALGTSTSASYALGTSTS_ASYALGTSTS_RESERVED3 = 9;
  }
  enum AsyLatCtrlModReqGroupAsyLatCtrlModReqType {
    ASYLATCTRLMODREQGROUPASYLATCTRLMODREQ_LATCTRLMOD5_NOREQ = 0;
    ASYLATCTRLMODREQGROUPASYLATCTRLMODREQ_LATCTRLMOD5_HIGHWAYASSIST = 1;
    ASYLATCTRLMODREQGROUPASYLATCTRLMODREQ_LATCTRLMOD5_EMGYLANEKEEPAIDFOROBJRE = 2;
    ASYLATCTRLMODREQGROUPASYLATCTRLMODREQ_LATCTRLMOD5_EMGYLANEKEEPAIDFORSTAT = 3;
    ASYLATCTRLMODREQGROUPASYLATCTRLMODREQ_LATCTRLMOD5_SFTYLANEKEEPAID = 4;
    ASYLATCTRLMODREQGROUPASYLATCTRLMODREQ_LATCTRLMOD5_STEERASSC = 5;
    ASYLATCTRLMODREQGROUPASYLATCTRLMODREQ_LATCTRLMOD5_DSROVERSTEER = 6;
    ASYLATCTRLMODREQGROUPASYLATCTRLMODREQ_LATCTRLMOD5_DSRMUESPLIT = 7;
    ASYLATCTRLMODREQGROUPASYLATCTRLMODREQ_LATCTRLMOD5_DSRTRLRSTABY = 8;
    ASYLATCTRLMODREQGROUPASYLATCTRLMODREQ_LATCTRLMOD5_EMGYMANVASSI = 9;
    ASYLATCTRLMODREQGROUPASYLATCTRLMODREQ_LATCTRLMOD5_RESERVED1 = 10;
    ASYLATCTRLMODREQGROUPASYLATCTRLMODREQ_LATCTRLMOD5_E2E = 11;
    ASYLATCTRLMODREQGROUPASYLATCTRLMODREQ_LATCTRLMOD5_SHWA = 12;
    ASYLATCTRLMODREQGROUPASYLATCTRLMODREQ_LATCTRLMOD5_APA = 13;
    ASYLATCTRLMODREQGROUPASYLATCTRLMODREQ_LATCTRLMOD5_RPA = 14;
    ASYLATCTRLMODREQGROUPASYLATCTRLMODREQ_LATCTRLMOD5_HPA = 15;
  }
  enum BrkHptcWarnReqForAutDrvBrkHptcWarnReqForAutDrvType {
    BRKHPTCWARNREQFORAUTDRVBRKHPTCWARNREQFORAUTDRV_CLLSNTHREAT1_UKWN = 0;
    BRKHPTCWARNREQFORAUTDRVBRKHPTCWARNREQFORAUTDRV_CLLSNTHREAT1_THREATLO = 1;
    BRKHPTCWARNREQFORAUTDRVBRKHPTCWARNREQFORAUTDRV_CLLSNTHREAT1_THREATMED = 2;
    BRKHPTCWARNREQFORAUTDRVBRKHPTCWARNREQFORAUTDRV_CLLSNTHREAT1_THREATHI = 3;
  }
  enum CllsnThreatType {
    CLLSNTHREAT_CLLSNTHREAT1_UKWN = 0;
    CLLSNTHREAT_CLLSNTHREAT1_THREATLO = 1;
    CLLSNTHREAT_CLLSNTHREAT1_THREATMED = 2;
    CLLSNTHREAT_CLLSNTHREAT1_THREATHI = 3;
  }
  enum CnclWarnForAutDrvType {
    CNCLWARNFORAUTDRV_LVLWARN2_NOWARN = 0;
    CNCLWARNFORAUTDRV_LVLWARN2_LVL1 = 1;
    CNCLWARNFORAUTDRV_LVLWARN2_LVL2 = 2;
    CNCLWARNFORAUTDRV_LVLWARN2_LVL3 = 3;
  }
  enum DispTSIInfoForLgtCtrlType {
    DISPTSIINFOFORLGTCTRL_DISPTSRINFOFORLGTCTRL_NODISPLAY = 0;
    DISPTSIINFOFORLGTCTRL_DISPTSRINFOFORLGTCTRL_YES = 1;
    DISPTSIINFOFORLGTCTRL_DISPTSRINFOFORLGTCTRL_NO = 2;
  }
  enum FctaIndcnLeType {
    FCTAINDCNLE_LCMAINDCN_NOLCMAWARN = 0;
    FCTAINDCNLE_LCMAINDCN_LCMAWARNLVL1 = 1;
    FCTAINDCNLE_LCMAINDCN_NOTUSED = 2;
    FCTAINDCNLE_LCMAINDCN_LCMAWARNLVL2 = 3;
  }
  enum FctaIndcnRiType {
    FCTAINDCNRI_LCMAINDCN_NOLCMAWARN = 0;
    FCTAINDCNRI_LCMAINDCN_LCMAWARNLVL1 = 1;
    FCTAINDCNRI_LCMAINDCN_NOTUSED = 2;
    FCTAINDCNRI_LCMAINDCN_LCMAWARNLVL2 = 3;
  }
  enum ObjFrnt1ColorOfObjFrnt1Type {
    OBJFRNT1COLOROFOBJFRNT1_ASYLINELECOLOR_GREY = 0;
    OBJFRNT1COLOROFOBJFRNT1_ASYLINELECOLOR_WHITE = 1;
    OBJFRNT1COLOROFOBJFRNT1_ASYLINELECOLOR_BLUE = 2;
    OBJFRNT1COLOROFOBJFRNT1_ASYLINELECOLOR_RED = 3;
    OBJFRNT1COLOROFOBJFRNT1_ASYLINELECOLOR_YELLOW = 4;
  }
  enum ObjFrnt1HdDirOfObjFrnt1Type {
    OBJFRNT1HDDIROFOBJFRNT1_STRAIGHT = 0;
    OBJFRNT1HDDIROFOBJFRNT1_LEFT_LEAN = 1;
    OBJFRNT1HDDIROFOBJFRNT1_RIGHT_LEAN = 2;
  }
  enum ObjFrnt1TypOfObjFrnt1Type {
    OBJFRNT1TYPOFOBJFRNT1_TYPOFOBJFRNT1_NODISPLAY = 0;
    OBJFRNT1TYPOFOBJFRNT1_TYPOFOBJFRNT1_CAR = 1;
    OBJFRNT1TYPOFOBJFRNT1_TYPOFOBJFRNT1_PEDESTRIAN = 2;
    OBJFRNT1TYPOFOBJFRNT1_TYPOFOBJFRNT1_BIKECYCLE = 3;
    OBJFRNT1TYPOFOBJFRNT1_TYPOFOBJFRNT1_ANIMAL = 4;
    OBJFRNT1TYPOFOBJFRNT1_TYPOFOBJFRNT1_MOTOCYCLE = 5;
    OBJFRNT1TYPOFOBJFRNT1_TYPOFOBJFRNT1_BUS = 6;
    OBJFRNT1TYPOFOBJFRNT1_TYPOFOBJFRNT1_TRUCK = 7;
  }
  enum ObjFrnt2ColorOfObjFrnt2Type {
    OBJFRNT2COLOROFOBJFRNT2_ASYLINELECOLOR_GREY = 0;
    OBJFRNT2COLOROFOBJFRNT2_ASYLINELECOLOR_WHITE = 1;
    OBJFRNT2COLOROFOBJFRNT2_ASYLINELECOLOR_BLUE = 2;
    OBJFRNT2COLOROFOBJFRNT2_ASYLINELECOLOR_RED = 3;
    OBJFRNT2COLOROFOBJFRNT2_ASYLINELECOLOR_YELLOW = 4;
  }
  enum ObjFrnt2HdDirOfObjFrnt2Type {
    OBJFRNT2HDDIROFOBJFRNT2_STRAIGHT = 0;
    OBJFRNT2HDDIROFOBJFRNT2_LEFT_LEAN = 1;
    OBJFRNT2HDDIROFOBJFRNT2_RIGHT_LEAN = 2;
  }
  enum ObjFrnt2TypOfObjFrnt2Type {
    OBJFRNT2TYPOFOBJFRNT2_TYPOFOBJFRNT1_NODISPLAY = 0;
    OBJFRNT2TYPOFOBJFRNT2_TYPOFOBJFRNT1_CAR = 1;
    OBJFRNT2TYPOFOBJFRNT2_TYPOFOBJFRNT1_PEDESTRIAN = 2;
    OBJFRNT2TYPOFOBJFRNT2_TYPOFOBJFRNT1_BIKECYCLE = 3;
    OBJFRNT2TYPOFOBJFRNT2_TYPOFOBJFRNT1_ANIMAL = 4;
    OBJFRNT2TYPOFOBJFRNT2_TYPOFOBJFRNT1_MOTOCYCLE = 5;
    OBJFRNT2TYPOFOBJFRNT2_TYPOFOBJFRNT1_BUS = 6;
    OBJFRNT2TYPOFOBJFRNT2_TYPOFOBJFRNT1_TRUCK = 7;
  }
  enum ObjFrntLeColorOfObjFrntLeType {
    OBJFRNTLECOLOROFOBJFRNTLE_ASYLINELECOLOR_GREY = 0;
    OBJFRNTLECOLOROFOBJFRNTLE_ASYLINELECOLOR_WHITE = 1;
    OBJFRNTLECOLOROFOBJFRNTLE_ASYLINELECOLOR_BLUE = 2;
    OBJFRNTLECOLOROFOBJFRNTLE_ASYLINELECOLOR_RED = 3;
    OBJFRNTLECOLOROFOBJFRNTLE_ASYLINELECOLOR_YELLOW = 4;
  }
  enum ObjFrntLeHdDirOfObjFrntLeType {
    OBJFRNTLEHDDIROFOBJFRNTLE_STRAIGHT = 0;
    OBJFRNTLEHDDIROFOBJFRNTLE_LEFT_LEAN = 1;
    OBJFRNTLEHDDIROFOBJFRNTLE_RIGHT_LEAN = 2;
  }
  enum ObjFrntLeTypOfObjFrntLeType {
    OBJFRNTLETYPOFOBJFRNTLE_TYPOFOBJFRNT1_NODISPLAY = 0;
    OBJFRNTLETYPOFOBJFRNTLE_TYPOFOBJFRNT1_CAR = 1;
    OBJFRNTLETYPOFOBJFRNTLE_TYPOFOBJFRNT1_PEDESTRIAN = 2;
    OBJFRNTLETYPOFOBJFRNTLE_TYPOFOBJFRNT1_BIKECYCLE = 3;
    OBJFRNTLETYPOFOBJFRNTLE_TYPOFOBJFRNT1_ANIMAL = 4;
    OBJFRNTLETYPOFOBJFRNTLE_TYPOFOBJFRNT1_MOTOCYCLE = 5;
    OBJFRNTLETYPOFOBJFRNTLE_TYPOFOBJFRNT1_BUS = 6;
    OBJFRNTLETYPOFOBJFRNTLE_TYPOFOBJFRNT1_TRUCK = 7;
  }
  enum ObjFrntRiColorOfObjFrntRiType {
    OBJFRNTRICOLOROFOBJFRNTRI_ASYLINELECOLOR_GREY = 0;
    OBJFRNTRICOLOROFOBJFRNTRI_ASYLINELECOLOR_WHITE = 1;
    OBJFRNTRICOLOROFOBJFRNTRI_ASYLINELECOLOR_BLUE = 2;
    OBJFRNTRICOLOROFOBJFRNTRI_ASYLINELECOLOR_RED = 3;
    OBJFRNTRICOLOROFOBJFRNTRI_ASYLINELECOLOR_YELLOW = 4;
  }
  enum ObjFrntRiHdDirOfObjFrntRiType {
    OBJFRNTRIHDDIROFOBJFRNTRI_STRAIGHT = 0;
    OBJFRNTRIHDDIROFOBJFRNTRI_LEFT_LEAN = 1;
    OBJFRNTRIHDDIROFOBJFRNTRI_RIGHT_LEAN = 2;
  }
  enum ObjFrntRiTypOfObjFrntRiType {
    OBJFRNTRITYPOFOBJFRNTRI_TYPOFOBJFRNT1_NODISPLAY = 0;
    OBJFRNTRITYPOFOBJFRNTRI_TYPOFOBJFRNT1_CAR = 1;
    OBJFRNTRITYPOFOBJFRNTRI_TYPOFOBJFRNT1_PEDESTRIAN = 2;
    OBJFRNTRITYPOFOBJFRNTRI_TYPOFOBJFRNT1_BIKECYCLE = 3;
    OBJFRNTRITYPOFOBJFRNTRI_TYPOFOBJFRNT1_ANIMAL = 4;
    OBJFRNTRITYPOFOBJFRNTRI_TYPOFOBJFRNT1_MOTOCYCLE = 5;
    OBJFRNTRITYPOFOBJFRNTRI_TYPOFOBJFRNT1_BUS = 6;
    OBJFRNTRITYPOFOBJFRNTRI_TYPOFOBJFRNT1_TRUCK = 7;
  }
  // [] [0|1] [initial_value:None]
  optional bool ad4_rws_inhib_req_ub = 1;
  // [] [0|3] [initial_value:0]
  optional AD4RWSInhibReqAD4RWSInhibReqType ad4_rws_inhib_req_ad4_rws_inhib_req = 2;
  // description check sum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_rws_inhib_req_chks = 3;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_rws_inhib_req_cntr = 4;
  // description DIM theme display, depending on current autonomous driving level [] [0|3] [initial_value:0]
  optional ADThemeDispType ad_theme_disp = 5;
  // [] [0|1] [initial_value:None]
  optional bool ad_theme_disp_ub = 6;
  // [] [0|1] [initial_value:None]
  optional bool asy_a_lgt_ctrl_mod_ub = 7;
  // description longitudinal control mode signal [] [0|15] [initial_value:0]
  optional AsyALgtCtrlMod1Type asy_a_lgt_ctrl_mod1 = 8;
  // description counter [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 asy_a_lgt_ctrl_mod_chks = 9;
  // description checksum [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_a_lgt_ctrl_mod_cntr = 10;
  // [] [0|1] [initial_value:None]
  optional bool asy_a_lgt_sts_ub = 11;
  // description The signal indicates the status of the longitudinal control; off, passive, standby, active etc. [] [0|15] [initial_value:0]
  optional AsyALgtStsAsyALgtStsType asy_a_lgt_sts_asy_a_lgt_sts = 12;
  // [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 asy_a_lgt_sts_chks = 13;
  // description counter for E2E [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_a_lgt_sts_cntr = 14;
  // description This Signal is CNOA Offset animation dispaly for Car, Truck, RoadEdge and so on. [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_lat_offs_anima_sts = 15;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_lat_offs_anima_sts_ub = 16;
  // [] [0|1] [initial_value:None]
  optional bool asy_lat_ctrl_mod_req_group_ub = 17;
  // description lateral control mode signal [] [0|15] [initial_value:0]
  optional AsyLatCtrlModReqGroupAsyLatCtrlModReqType asy_lat_ctrl_mod_req_group_asy_lat_ctrl_mod_req = 18;
  // description counter [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 asy_lat_ctrl_mod_req_group_chks = 19;
  // description checksum [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_lat_ctrl_mod_req_group_cntr = 20;
  // [] [0|1] [initial_value:None]
  optional bool asy_sfty_ena_decel_by_dbs_ub = 21;
  // description Indicate the DBS function activation [] [0|1] [initial_value:0]
  optional bool asy_sfty_ena_decel_by_dbs_asy_sfty_ena_decel_by_dbs = 22;
  // description CRC [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 asy_sfty_ena_decel_by_dbs_chks = 23;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_sfty_ena_decel_by_dbs_cntr = 24;
  // [] [0|1] [initial_value:None]
  optional bool brk_hptc_warn_req_for_aut_drv_ub = 25;
  // description To indicate the relative subsystem to excute a haptic warning (short brake) for driver. [] [0|3] [initial_value:0]
  optional BrkHptcWarnReqForAutDrvBrkHptcWarnReqForAutDrvType brk_hptc_warn_req_for_aut_drv_brk_hptc_warn_req_for_aut_drv = 26;
  // description crc [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 brk_hptc_warn_req_for_aut_drv_chks = 27;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 brk_hptc_warn_req_for_aut_drv_cntr = 28;
  // description Indicate the danger level for subsystem. [] [0|3] [initial_value:0]
  optional CllsnThreatType cllsn_threat = 29;
  // [] [0|1] [initial_value:None]
  optional bool cllsn_threat_ub = 30;
  // description ASDM sends a signal when GPilot function exits [] [0|3] [initial_value:0]
  optional CnclWarnForAutDrvType cncl_warn_for_aut_drv = 31;
  // [] [0|1] [initial_value:None]
  optional bool cncl_warn_for_aut_drv_ub = 32;
  // description Indicates the current setting speed value for longitudinal control. [m/s] [0.0|125.0] [initial_value:0]
  optional double disp_spd_set_for_lgt_ctrl = 33;
  // [] [0|1] [initial_value:None]
  optional bool disp_spd_set_for_lgt_ctrl_ub = 34;
  // description To show the type of Setting speed, for example, Driver setting speed or TSI speed [] [0|3] [initial_value:0]
  optional DispTSIInfoForLgtCtrlType disp_tsi_info_for_lgt_ctrl = 35;
  // [] [0|1] [initial_value:None]
  optional bool disp_tsi_info_for_lgt_ctrl_ub = 36;
  // description Indicates the driving-off requirement of longitudinal control [] [0|1] [initial_value:0]
  optional bool drv_off_req_for_lgt_ctrl = 37;
  // [] [0|1] [initial_value:None]
  optional bool drv_off_req_for_lgt_ctrl_ub = 38;
  // description Indicates if a left FCTA warning shall be shown to the driver or not. [] [0|3] [initial_value:0]
  optional FctaIndcnLeType fcta_indcn_le = 39;
  // [] [0|1] [initial_value:None]
  optional bool fcta_indcn_le_ub = 40;
  // description Indicates if a right FCTA warning shall be shown to the driver or not. [] [0|3] [initial_value:0]
  optional FctaIndcnRiType fcta_indcn_ri = 41;
  // [] [0|1] [initial_value:None]
  optional bool fcta_indcn_ri_ub = 42;
  // description To indicate whether there is non-traversable road edge on the left side of ego lane [] [0|1] [initial_value:0]
  optional bool non_trvrsble_road_edge_on_left = 43;
  // [] [0|1] [initial_value:None]
  optional bool non_trvrsble_road_edge_on_left_ub = 44;
  // description To indicate whether there is non-traversable road edge on the right side of ego lane [] [0|1] [initial_value:0]
  optional bool non_trvrsble_road_edge_on_right = 45;
  // [] [0|1] [initial_value:None]
  optional bool non_trvrsble_road_edge_on_right_ub = 46;
  // [] [0|1] [initial_value:None]
  optional bool obj_frnt1_ub = 47;
  // description the information of Front object 1 [] [0|15] [initial_value:0]
  optional ObjFrnt1ColorOfObjFrnt1Type obj_frnt1_color_of_obj_frnt1 = 48;
  // description the information of Front object 1 [m] [-12.7|12.700000000000003] [initial_value:127]
  optional double obj_frnt1_dst_lat_of_obj_frnt1 = 49;
  // description the information of Front object 1 [m] [-30.0|225.0] [initial_value:30]
  optional double obj_frnt1_dst_lgt_of_obj_frnt1 = 50;
  // description the information of Front object 1 [] [0|7] [initial_value:0]
  optional ObjFrnt1HdDirOfObjFrnt1Type obj_frnt1_hd_dir_of_obj_frnt1 = 51;
  // description the information of Front object 1 [] [0|15] [initial_value:0]
  optional ObjFrnt1TypOfObjFrnt1Type obj_frnt1_typ_of_obj_frnt1 = 52;
  // [] [0|1] [initial_value:None]
  optional bool obj_frnt2_ub = 53;
  // description the information of Front object 2 [] [0|15] [initial_value:0]
  optional ObjFrnt2ColorOfObjFrnt2Type obj_frnt2_color_of_obj_frnt2 = 54;
  // description the information of Front object 2 [m] [-12.7|12.700000000000003] [initial_value:127]
  optional double obj_frnt2_dst_lat_of_obj_frnt2 = 55;
  // description the information of Front object 2 [m] [-30.0|225.0] [initial_value:30]
  optional double obj_frnt2_dst_lgt_of_obj_frnt2 = 56;
  // description the information of Front object 2 [] [0|7] [initial_value:0]
  optional ObjFrnt2HdDirOfObjFrnt2Type obj_frnt2_hd_dir_of_obj_frnt2 = 57;
  // description the information of Front object 2 [] [0|15] [initial_value:0]
  optional ObjFrnt2TypOfObjFrnt2Type obj_frnt2_typ_of_obj_frnt2 = 58;
  // [] [0|1] [initial_value:None]
  optional bool obj_frnt_le_ub = 59;
  // description the information of Front left object [] [0|15] [initial_value:0]
  optional ObjFrntLeColorOfObjFrntLeType obj_frnt_le_color_of_obj_frnt_le = 60;
  // description the information of Front left object [m] [-12.7|12.700000000000003] [initial_value:127]
  optional double obj_frnt_le_dst_lat_of_obj_frnt_le = 61;
  // description the information of Front left object [m] [-30.0|225.0] [initial_value:30]
  optional double obj_frnt_le_dst_lgt_of_obj_frnt_le = 62;
  // description the information of Front left object [] [0|7] [initial_value:0]
  optional ObjFrntLeHdDirOfObjFrntLeType obj_frnt_le_hd_dir_of_obj_frnt_le = 63;
  // description the information of Front left object [] [0|15] [initial_value:0]
  optional ObjFrntLeTypOfObjFrntLeType obj_frnt_le_typ_of_obj_frnt_le = 64;
  // [] [0|1] [initial_value:None]
  optional bool obj_frnt_ri_ub = 65;
  // description the information of Front left object [] [0|15] [initial_value:0]
  optional ObjFrntRiColorOfObjFrntRiType obj_frnt_ri_color_of_obj_frnt_ri = 66;
  // description the information of Front left object [m] [-12.7|12.700000000000003] [initial_value:127]
  optional double obj_frnt_ri_dst_lat_of_obj_frnt_ri = 67;
  // description the information of Front left object [m] [-30.0|225.0] [initial_value:30]
  optional double obj_frnt_ri_dst_lgt_of_obj_frnt_ri = 68;
  // description the information of Front left object [] [0|7] [initial_value:0]
  optional ObjFrntRiHdDirOfObjFrntRiType obj_frnt_ri_hd_dir_of_obj_frnt_ri = 69;
  // description the information of Front left object [] [0|15] [initial_value:0]
  optional ObjFrntRiTypOfObjFrntRiType obj_frnt_ri_typ_of_obj_frnt_ri = 70;
  // [] [0|1] [initial_value:None]
  optional bool rcwm_brk_req_ub = 71;
  // description Brake request from RCW to brake controller.couner [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 rcwm_brk_req_chks = 72;
  // description Brake request from RCW to brake controller.checksum [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 rcwm_brk_req_cntr = 73;
  // description Brake request from RCW to brake controller. [] [0|1] [initial_value:0]
  optional bool rcwm_brk_req_rcwm_brk_req = 74;
}

message ADCU_ZCUCANFD1_FR10_1B5 {
// Control Message
  enum AD4TurnIndicReqReqType {
    AD4TURNINDICREQREQ_AD4TURNINDIC_NOREQUEST = 0;
    AD4TURNINDICREQREQ_AD4TURNINDIC_TURNOFF = 1;
    AD4TURNINDICREQREQ_AD4TURNINDIC_TURNLEFT = 2;
    AD4TURNINDICREQREQ_AD4TURNINDIC_TURNRIGHT = 3;
  }
  enum AD4UnavlStsForE2EType {
    AD4UNAVLSTSFORE2E_AD4UNAVLSTSFORE2E_AVAILABLE = 0;
    AD4UNAVLSTSFORE2E_AD4UNAVLSTSFORE2E_TRAILERMODE = 1;
    AD4UNAVLSTSFORE2E_AD4UNAVLSTSFORE2E_DRVRBLTNOTOK = 2;
    AD4UNAVLSTSFORE2E_AD4UNAVLSTSFORE2E_REMIRRORFOLD = 3;
    AD4UNAVLSTSFORE2E_AD4UNAVLSTSFORE2E_TRUNKOPEN = 4;
    AD4UNAVLSTSFORE2E_AD4UNAVLSTSFORE2E_HOODOPEN = 5;
    AD4UNAVLSTSFORE2E_AD4UNAVLSTSFORE2E_DOORSOPEN = 6;
    AD4UNAVLSTSFORE2E_AD4UNAVLSTSFORE2E_GEARR = 7;
    AD4UNAVLSTSFORE2E_AD4UNAVLSTSFORE2E_CHANGETOACC = 8;
    AD4UNAVLSTSFORE2E_AD4UNAVLSTSFORE2E_NODESTINATION = 9;
    AD4UNAVLSTSFORE2E_AD4UNAVLSTSFORE2E_NOTINODD = 10;
    AD4UNAVLSTSFORE2E_AD4UNAVLSTSFORE2E_OTHERREASON = 11;
  }
  enum AD4WarnStsForE2EType {
    AD4WARNSTSFORE2E_AD4WARNINFO_NOREQ = 0;
    AD4WARNSTSFORE2E_AD4WARNINFO_FUNCTIONCNLANDTAKEOVER = 1;
    AD4WARNSTSFORE2E_AD4WARNINFO_LATTEMPORARY = 2;
    AD4WARNSTSFORE2E_AD4WARNINFO_NAVIGATIONBEFINISH = 3;
    AD4WARNSTSFORE2E_AD4WARNINFO_ROADCOMPLEX = 4;
    AD4WARNSTSFORE2E_AD4WARNINFO_TAKEOVERANDEYEON1 = 5;
    AD4WARNSTSFORE2E_AD4WARNINFO_TAKEOVERANDEYEON2 = 6;
    AD4WARNSTSFORE2E_AD4WARNINFO_RESERVED = 7;
  }
  enum AD4WinOpenReqType {
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_POSNUKWN = 0;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_CLSFULL = 1;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN4 = 2;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN8 = 3;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN12 = 4;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN16 = 5;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN20 = 6;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN24 = 7;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN28 = 8;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN32 = 9;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN36 = 10;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN40 = 11;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN44 = 12;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN48 = 13;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN52 = 14;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN56 = 15;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN60 = 16;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN64 = 17;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN68 = 18;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN72 = 19;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN76 = 20;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN80 = 21;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN84 = 22;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN88 = 23;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN92 = 24;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_PERCOPEN96 = 25;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_OPENFULL = 26;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_RESD1 = 27;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_RESD2 = 28;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_RESD3 = 29;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_RESD4 = 30;
    AD4WINOPENREQ_WINANDROOFANDCURTPOSNTYP_MOVG = 31;
  }
  enum FrntSideLidarLeSts0Type {
    FRNTSIDELIDARLESTS0_RSDSMSTST_CFG = 0;
    FRNTSIDELIDARLESTS0_RSDSMSTST_STRTUP = 1;
    FRNTSIDELIDARLESTS0_RSDSMSTST_RUNNG = 2;
    FRNTSIDELIDARLESTS0_RSDSMSTST_BLKD = 3;
    FRNTSIDELIDARLESTS0_RSDSMSTST_FAULTY = 4;
    FRNTSIDELIDARLESTS0_RSDSMSTST_SHUTDOWN = 5;
    FRNTSIDELIDARLESTS0_RSDSMSTST_HOT = 6;
    FRNTSIDELIDARLESTS0_RSDSMSTST_CAL = 7;
  }
  enum FrntSideLidarRiSts0Type {
    FRNTSIDELIDARRISTS0_RSDSMSTST_CFG = 0;
    FRNTSIDELIDARRISTS0_RSDSMSTST_STRTUP = 1;
    FRNTSIDELIDARRISTS0_RSDSMSTST_RUNNG = 2;
    FRNTSIDELIDARRISTS0_RSDSMSTST_BLKD = 3;
    FRNTSIDELIDARRISTS0_RSDSMSTST_FAULTY = 4;
    FRNTSIDELIDARRISTS0_RSDSMSTST_SHUTDOWN = 5;
    FRNTSIDELIDARRISTS0_RSDSMSTST_HOT = 6;
    FRNTSIDELIDARRISTS0_RSDSMSTST_CAL = 7;
  }
  enum HmiMovgObj10ColorOfHmiMovgObjType {
    HMIMOVGOBJ10COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_GREY = 0;
    HMIMOVGOBJ10COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WHITEAACTIVENOTMAINOBJCOLOR = 1;
    HMIMOVGOBJ10COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_ACTIVEMAINOBJCOLOR = 2;
    HMIMOVGOBJ10COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLOR = 3;
    HMIMOVGOBJ10COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV1COLOR = 4;
    HMIMOVGOBJ10COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_TRANSPARENTCOLOR = 5;
    HMIMOVGOBJ10COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORLEFT = 6;
    HMIMOVGOBJ10COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORRIGHT = 7;
  }
  enum HmiMovgObj10HmiMovgObjTypType {
    HMIMOVGOBJ10HMIMOVGOBJTYP_HMIMOVGOBJTYP1_NODISPLAY = 0;
    HMIMOVGOBJ10HMIMOVGOBJTYP_HMIMOVGOBJTYP1_CAR = 1;
    HMIMOVGOBJ10HMIMOVGOBJTYP_HMIMOVGOBJTYP1_PEDESTRIAN = 2;
    HMIMOVGOBJ10HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BIKECYCLE = 3;
    HMIMOVGOBJ10HMIMOVGOBJTYP_HMIMOVGOBJTYP1_ANIMAL = 4;
    HMIMOVGOBJ10HMIMOVGOBJTYP_HMIMOVGOBJTYP1_MOTOCYCLE = 5;
    HMIMOVGOBJ10HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BUS = 6;
    HMIMOVGOBJ10HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TRUCK = 7;
    HMIMOVGOBJ10HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RICKSHAW = 8;
    HMIMOVGOBJ10HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TANKER = 9;
    HMIMOVGOBJ10HMIMOVGOBJTYP_HMIMOVGOBJTYP1_OPENBACKTRUCK = 10;
    HMIMOVGOBJ10HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED1 = 11;
    HMIMOVGOBJ10HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED2 = 12;
    HMIMOVGOBJ10HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED3 = 13;
    HMIMOVGOBJ10HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED4 = 14;
    HMIMOVGOBJ10HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED5 = 15;
  }
  enum HmiMovgObj11ColorOfHmiMovgObjType {
    HMIMOVGOBJ11COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_GREY = 0;
    HMIMOVGOBJ11COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WHITEAACTIVENOTMAINOBJCOLOR = 1;
    HMIMOVGOBJ11COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_ACTIVEMAINOBJCOLOR = 2;
    HMIMOVGOBJ11COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLOR = 3;
    HMIMOVGOBJ11COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV1COLOR = 4;
    HMIMOVGOBJ11COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_TRANSPARENTCOLOR = 5;
    HMIMOVGOBJ11COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORLEFT = 6;
    HMIMOVGOBJ11COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORRIGHT = 7;
  }
  enum HmiMovgObj11HmiMovgObjTypType {
    HMIMOVGOBJ11HMIMOVGOBJTYP_HMIMOVGOBJTYP1_NODISPLAY = 0;
    HMIMOVGOBJ11HMIMOVGOBJTYP_HMIMOVGOBJTYP1_CAR = 1;
    HMIMOVGOBJ11HMIMOVGOBJTYP_HMIMOVGOBJTYP1_PEDESTRIAN = 2;
    HMIMOVGOBJ11HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BIKECYCLE = 3;
    HMIMOVGOBJ11HMIMOVGOBJTYP_HMIMOVGOBJTYP1_ANIMAL = 4;
    HMIMOVGOBJ11HMIMOVGOBJTYP_HMIMOVGOBJTYP1_MOTOCYCLE = 5;
    HMIMOVGOBJ11HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BUS = 6;
    HMIMOVGOBJ11HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TRUCK = 7;
    HMIMOVGOBJ11HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RICKSHAW = 8;
    HMIMOVGOBJ11HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TANKER = 9;
    HMIMOVGOBJ11HMIMOVGOBJTYP_HMIMOVGOBJTYP1_OPENBACKTRUCK = 10;
    HMIMOVGOBJ11HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED1 = 11;
    HMIMOVGOBJ11HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED2 = 12;
    HMIMOVGOBJ11HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED3 = 13;
    HMIMOVGOBJ11HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED4 = 14;
    HMIMOVGOBJ11HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED5 = 15;
  }
  enum HmiMovgObj1ColorOfHmiMovgObjType {
    HMIMOVGOBJ1COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_GREY = 0;
    HMIMOVGOBJ1COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WHITEAACTIVENOTMAINOBJCOLOR = 1;
    HMIMOVGOBJ1COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_ACTIVEMAINOBJCOLOR = 2;
    HMIMOVGOBJ1COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLOR = 3;
    HMIMOVGOBJ1COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV1COLOR = 4;
    HMIMOVGOBJ1COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_TRANSPARENTCOLOR = 5;
    HMIMOVGOBJ1COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORLEFT = 6;
    HMIMOVGOBJ1COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORRIGHT = 7;
  }
  enum HmiMovgObj1HmiMovgObjTypType {
    HMIMOVGOBJ1HMIMOVGOBJTYP_HMIMOVGOBJTYP1_NODISPLAY = 0;
    HMIMOVGOBJ1HMIMOVGOBJTYP_HMIMOVGOBJTYP1_CAR = 1;
    HMIMOVGOBJ1HMIMOVGOBJTYP_HMIMOVGOBJTYP1_PEDESTRIAN = 2;
    HMIMOVGOBJ1HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BIKECYCLE = 3;
    HMIMOVGOBJ1HMIMOVGOBJTYP_HMIMOVGOBJTYP1_ANIMAL = 4;
    HMIMOVGOBJ1HMIMOVGOBJTYP_HMIMOVGOBJTYP1_MOTOCYCLE = 5;
    HMIMOVGOBJ1HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BUS = 6;
    HMIMOVGOBJ1HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TRUCK = 7;
    HMIMOVGOBJ1HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RICKSHAW = 8;
    HMIMOVGOBJ1HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TANKER = 9;
    HMIMOVGOBJ1HMIMOVGOBJTYP_HMIMOVGOBJTYP1_OPENBACKTRUCK = 10;
    HMIMOVGOBJ1HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED1 = 11;
    HMIMOVGOBJ1HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED2 = 12;
    HMIMOVGOBJ1HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED3 = 13;
    HMIMOVGOBJ1HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED4 = 14;
    HMIMOVGOBJ1HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED5 = 15;
  }
  enum HmiMovgObj2ColorOfHmiMovgObjType {
    HMIMOVGOBJ2COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_GREY = 0;
    HMIMOVGOBJ2COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WHITEAACTIVENOTMAINOBJCOLOR = 1;
    HMIMOVGOBJ2COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_ACTIVEMAINOBJCOLOR = 2;
    HMIMOVGOBJ2COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLOR = 3;
    HMIMOVGOBJ2COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV1COLOR = 4;
    HMIMOVGOBJ2COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_TRANSPARENTCOLOR = 5;
    HMIMOVGOBJ2COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORLEFT = 6;
    HMIMOVGOBJ2COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORRIGHT = 7;
  }
  enum HmiMovgObj2HmiMovgObjTypType {
    HMIMOVGOBJ2HMIMOVGOBJTYP_HMIMOVGOBJTYP1_NODISPLAY = 0;
    HMIMOVGOBJ2HMIMOVGOBJTYP_HMIMOVGOBJTYP1_CAR = 1;
    HMIMOVGOBJ2HMIMOVGOBJTYP_HMIMOVGOBJTYP1_PEDESTRIAN = 2;
    HMIMOVGOBJ2HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BIKECYCLE = 3;
    HMIMOVGOBJ2HMIMOVGOBJTYP_HMIMOVGOBJTYP1_ANIMAL = 4;
    HMIMOVGOBJ2HMIMOVGOBJTYP_HMIMOVGOBJTYP1_MOTOCYCLE = 5;
    HMIMOVGOBJ2HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BUS = 6;
    HMIMOVGOBJ2HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TRUCK = 7;
    HMIMOVGOBJ2HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RICKSHAW = 8;
    HMIMOVGOBJ2HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TANKER = 9;
    HMIMOVGOBJ2HMIMOVGOBJTYP_HMIMOVGOBJTYP1_OPENBACKTRUCK = 10;
    HMIMOVGOBJ2HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED1 = 11;
    HMIMOVGOBJ2HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED2 = 12;
    HMIMOVGOBJ2HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED3 = 13;
    HMIMOVGOBJ2HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED4 = 14;
    HMIMOVGOBJ2HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED5 = 15;
  }
  enum HmiMovgObj3ColorOfHmiMovgObjType {
    HMIMOVGOBJ3COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_GREY = 0;
    HMIMOVGOBJ3COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WHITEAACTIVENOTMAINOBJCOLOR = 1;
    HMIMOVGOBJ3COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_ACTIVEMAINOBJCOLOR = 2;
    HMIMOVGOBJ3COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLOR = 3;
    HMIMOVGOBJ3COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV1COLOR = 4;
    HMIMOVGOBJ3COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_TRANSPARENTCOLOR = 5;
    HMIMOVGOBJ3COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORLEFT = 6;
    HMIMOVGOBJ3COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORRIGHT = 7;
  }
  enum HmiMovgObj3HmiMovgObjTypType {
    HMIMOVGOBJ3HMIMOVGOBJTYP_HMIMOVGOBJTYP1_NODISPLAY = 0;
    HMIMOVGOBJ3HMIMOVGOBJTYP_HMIMOVGOBJTYP1_CAR = 1;
    HMIMOVGOBJ3HMIMOVGOBJTYP_HMIMOVGOBJTYP1_PEDESTRIAN = 2;
    HMIMOVGOBJ3HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BIKECYCLE = 3;
    HMIMOVGOBJ3HMIMOVGOBJTYP_HMIMOVGOBJTYP1_ANIMAL = 4;
    HMIMOVGOBJ3HMIMOVGOBJTYP_HMIMOVGOBJTYP1_MOTOCYCLE = 5;
    HMIMOVGOBJ3HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BUS = 6;
    HMIMOVGOBJ3HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TRUCK = 7;
    HMIMOVGOBJ3HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RICKSHAW = 8;
    HMIMOVGOBJ3HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TANKER = 9;
    HMIMOVGOBJ3HMIMOVGOBJTYP_HMIMOVGOBJTYP1_OPENBACKTRUCK = 10;
    HMIMOVGOBJ3HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED1 = 11;
    HMIMOVGOBJ3HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED2 = 12;
    HMIMOVGOBJ3HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED3 = 13;
    HMIMOVGOBJ3HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED4 = 14;
    HMIMOVGOBJ3HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED5 = 15;
  }
  enum HmiMovgObj4ColorOfHmiMovgObjType {
    HMIMOVGOBJ4COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_GREY = 0;
    HMIMOVGOBJ4COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WHITEAACTIVENOTMAINOBJCOLOR = 1;
    HMIMOVGOBJ4COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_ACTIVEMAINOBJCOLOR = 2;
    HMIMOVGOBJ4COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLOR = 3;
    HMIMOVGOBJ4COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV1COLOR = 4;
    HMIMOVGOBJ4COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_TRANSPARENTCOLOR = 5;
    HMIMOVGOBJ4COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORLEFT = 6;
    HMIMOVGOBJ4COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORRIGHT = 7;
  }
  enum HmiMovgObj4HmiMovgObjTypType {
    HMIMOVGOBJ4HMIMOVGOBJTYP_HMIMOVGOBJTYP1_NODISPLAY = 0;
    HMIMOVGOBJ4HMIMOVGOBJTYP_HMIMOVGOBJTYP1_CAR = 1;
    HMIMOVGOBJ4HMIMOVGOBJTYP_HMIMOVGOBJTYP1_PEDESTRIAN = 2;
    HMIMOVGOBJ4HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BIKECYCLE = 3;
    HMIMOVGOBJ4HMIMOVGOBJTYP_HMIMOVGOBJTYP1_ANIMAL = 4;
    HMIMOVGOBJ4HMIMOVGOBJTYP_HMIMOVGOBJTYP1_MOTOCYCLE = 5;
    HMIMOVGOBJ4HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BUS = 6;
    HMIMOVGOBJ4HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TRUCK = 7;
    HMIMOVGOBJ4HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RICKSHAW = 8;
    HMIMOVGOBJ4HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TANKER = 9;
    HMIMOVGOBJ4HMIMOVGOBJTYP_HMIMOVGOBJTYP1_OPENBACKTRUCK = 10;
    HMIMOVGOBJ4HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED1 = 11;
    HMIMOVGOBJ4HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED2 = 12;
    HMIMOVGOBJ4HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED3 = 13;
    HMIMOVGOBJ4HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED4 = 14;
    HMIMOVGOBJ4HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED5 = 15;
  }
  enum HmiMovgObj5ColorOfHmiMovgObjType {
    HMIMOVGOBJ5COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_GREY = 0;
    HMIMOVGOBJ5COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WHITEAACTIVENOTMAINOBJCOLOR = 1;
    HMIMOVGOBJ5COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_ACTIVEMAINOBJCOLOR = 2;
    HMIMOVGOBJ5COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLOR = 3;
    HMIMOVGOBJ5COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV1COLOR = 4;
    HMIMOVGOBJ5COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_TRANSPARENTCOLOR = 5;
    HMIMOVGOBJ5COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORLEFT = 6;
    HMIMOVGOBJ5COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORRIGHT = 7;
  }
  enum HmiMovgObj5HmiMovgObjTypType {
    HMIMOVGOBJ5HMIMOVGOBJTYP_HMIMOVGOBJTYP1_NODISPLAY = 0;
    HMIMOVGOBJ5HMIMOVGOBJTYP_HMIMOVGOBJTYP1_CAR = 1;
    HMIMOVGOBJ5HMIMOVGOBJTYP_HMIMOVGOBJTYP1_PEDESTRIAN = 2;
    HMIMOVGOBJ5HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BIKECYCLE = 3;
    HMIMOVGOBJ5HMIMOVGOBJTYP_HMIMOVGOBJTYP1_ANIMAL = 4;
    HMIMOVGOBJ5HMIMOVGOBJTYP_HMIMOVGOBJTYP1_MOTOCYCLE = 5;
    HMIMOVGOBJ5HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BUS = 6;
    HMIMOVGOBJ5HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TRUCK = 7;
    HMIMOVGOBJ5HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RICKSHAW = 8;
    HMIMOVGOBJ5HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TANKER = 9;
    HMIMOVGOBJ5HMIMOVGOBJTYP_HMIMOVGOBJTYP1_OPENBACKTRUCK = 10;
    HMIMOVGOBJ5HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED1 = 11;
    HMIMOVGOBJ5HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED2 = 12;
    HMIMOVGOBJ5HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED3 = 13;
    HMIMOVGOBJ5HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED4 = 14;
    HMIMOVGOBJ5HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED5 = 15;
  }
  enum HmiMovgObj6ColorOfHmiMovgObjType {
    HMIMOVGOBJ6COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_GREY = 0;
    HMIMOVGOBJ6COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WHITEAACTIVENOTMAINOBJCOLOR = 1;
    HMIMOVGOBJ6COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_ACTIVEMAINOBJCOLOR = 2;
    HMIMOVGOBJ6COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLOR = 3;
    HMIMOVGOBJ6COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV1COLOR = 4;
    HMIMOVGOBJ6COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_TRANSPARENTCOLOR = 5;
    HMIMOVGOBJ6COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORLEFT = 6;
    HMIMOVGOBJ6COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORRIGHT = 7;
  }
  enum HmiMovgObj6HmiMovgObjTypType {
    HMIMOVGOBJ6HMIMOVGOBJTYP_HMIMOVGOBJTYP1_NODISPLAY = 0;
    HMIMOVGOBJ6HMIMOVGOBJTYP_HMIMOVGOBJTYP1_CAR = 1;
    HMIMOVGOBJ6HMIMOVGOBJTYP_HMIMOVGOBJTYP1_PEDESTRIAN = 2;
    HMIMOVGOBJ6HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BIKECYCLE = 3;
    HMIMOVGOBJ6HMIMOVGOBJTYP_HMIMOVGOBJTYP1_ANIMAL = 4;
    HMIMOVGOBJ6HMIMOVGOBJTYP_HMIMOVGOBJTYP1_MOTOCYCLE = 5;
    HMIMOVGOBJ6HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BUS = 6;
    HMIMOVGOBJ6HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TRUCK = 7;
    HMIMOVGOBJ6HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RICKSHAW = 8;
    HMIMOVGOBJ6HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TANKER = 9;
    HMIMOVGOBJ6HMIMOVGOBJTYP_HMIMOVGOBJTYP1_OPENBACKTRUCK = 10;
    HMIMOVGOBJ6HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED1 = 11;
    HMIMOVGOBJ6HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED2 = 12;
    HMIMOVGOBJ6HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED3 = 13;
    HMIMOVGOBJ6HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED4 = 14;
    HMIMOVGOBJ6HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED5 = 15;
  }
  enum HmiMovgObj7ColorOfHmiMovgObjType {
    HMIMOVGOBJ7COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_GREY = 0;
    HMIMOVGOBJ7COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WHITEAACTIVENOTMAINOBJCOLOR = 1;
    HMIMOVGOBJ7COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_ACTIVEMAINOBJCOLOR = 2;
    HMIMOVGOBJ7COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLOR = 3;
    HMIMOVGOBJ7COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV1COLOR = 4;
    HMIMOVGOBJ7COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_TRANSPARENTCOLOR = 5;
    HMIMOVGOBJ7COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORLEFT = 6;
    HMIMOVGOBJ7COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORRIGHT = 7;
  }
  enum HmiMovgObj7HmiMovgObjTypType {
    HMIMOVGOBJ7HMIMOVGOBJTYP_HMIMOVGOBJTYP1_NODISPLAY = 0;
    HMIMOVGOBJ7HMIMOVGOBJTYP_HMIMOVGOBJTYP1_CAR = 1;
    HMIMOVGOBJ7HMIMOVGOBJTYP_HMIMOVGOBJTYP1_PEDESTRIAN = 2;
    HMIMOVGOBJ7HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BIKECYCLE = 3;
    HMIMOVGOBJ7HMIMOVGOBJTYP_HMIMOVGOBJTYP1_ANIMAL = 4;
    HMIMOVGOBJ7HMIMOVGOBJTYP_HMIMOVGOBJTYP1_MOTOCYCLE = 5;
    HMIMOVGOBJ7HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BUS = 6;
    HMIMOVGOBJ7HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TRUCK = 7;
    HMIMOVGOBJ7HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RICKSHAW = 8;
    HMIMOVGOBJ7HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TANKER = 9;
    HMIMOVGOBJ7HMIMOVGOBJTYP_HMIMOVGOBJTYP1_OPENBACKTRUCK = 10;
    HMIMOVGOBJ7HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED1 = 11;
    HMIMOVGOBJ7HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED2 = 12;
    HMIMOVGOBJ7HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED3 = 13;
    HMIMOVGOBJ7HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED4 = 14;
    HMIMOVGOBJ7HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED5 = 15;
  }
  enum HmiMovgObj8ColorOfHmiMovgObjType {
    HMIMOVGOBJ8COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_GREY = 0;
    HMIMOVGOBJ8COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WHITEAACTIVENOTMAINOBJCOLOR = 1;
    HMIMOVGOBJ8COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_ACTIVEMAINOBJCOLOR = 2;
    HMIMOVGOBJ8COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLOR = 3;
    HMIMOVGOBJ8COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV1COLOR = 4;
    HMIMOVGOBJ8COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_TRANSPARENTCOLOR = 5;
    HMIMOVGOBJ8COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORLEFT = 6;
    HMIMOVGOBJ8COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORRIGHT = 7;
  }
  enum HmiMovgObj8HmiMovgObjTypType {
    HMIMOVGOBJ8HMIMOVGOBJTYP_HMIMOVGOBJTYP1_NODISPLAY = 0;
    HMIMOVGOBJ8HMIMOVGOBJTYP_HMIMOVGOBJTYP1_CAR = 1;
    HMIMOVGOBJ8HMIMOVGOBJTYP_HMIMOVGOBJTYP1_PEDESTRIAN = 2;
    HMIMOVGOBJ8HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BIKECYCLE = 3;
    HMIMOVGOBJ8HMIMOVGOBJTYP_HMIMOVGOBJTYP1_ANIMAL = 4;
    HMIMOVGOBJ8HMIMOVGOBJTYP_HMIMOVGOBJTYP1_MOTOCYCLE = 5;
    HMIMOVGOBJ8HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BUS = 6;
    HMIMOVGOBJ8HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TRUCK = 7;
    HMIMOVGOBJ8HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RICKSHAW = 8;
    HMIMOVGOBJ8HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TANKER = 9;
    HMIMOVGOBJ8HMIMOVGOBJTYP_HMIMOVGOBJTYP1_OPENBACKTRUCK = 10;
    HMIMOVGOBJ8HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED1 = 11;
    HMIMOVGOBJ8HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED2 = 12;
    HMIMOVGOBJ8HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED3 = 13;
    HMIMOVGOBJ8HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED4 = 14;
    HMIMOVGOBJ8HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED5 = 15;
  }
  enum HmiMovgObj9ColorOfHmiMovgObjType {
    HMIMOVGOBJ9COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_GREY = 0;
    HMIMOVGOBJ9COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WHITEAACTIVENOTMAINOBJCOLOR = 1;
    HMIMOVGOBJ9COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_ACTIVEMAINOBJCOLOR = 2;
    HMIMOVGOBJ9COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLOR = 3;
    HMIMOVGOBJ9COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV1COLOR = 4;
    HMIMOVGOBJ9COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_TRANSPARENTCOLOR = 5;
    HMIMOVGOBJ9COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORLEFT = 6;
    HMIMOVGOBJ9COLOROFHMIMOVGOBJ_COLOROFHMIMOVGOBJ1_WARNINGLV2COLORRIGHT = 7;
  }
  enum HmiMovgObj9HmiMovgObjTypType {
    HMIMOVGOBJ9HMIMOVGOBJTYP_HMIMOVGOBJTYP1_NODISPLAY = 0;
    HMIMOVGOBJ9HMIMOVGOBJTYP_HMIMOVGOBJTYP1_CAR = 1;
    HMIMOVGOBJ9HMIMOVGOBJTYP_HMIMOVGOBJTYP1_PEDESTRIAN = 2;
    HMIMOVGOBJ9HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BIKECYCLE = 3;
    HMIMOVGOBJ9HMIMOVGOBJTYP_HMIMOVGOBJTYP1_ANIMAL = 4;
    HMIMOVGOBJ9HMIMOVGOBJTYP_HMIMOVGOBJTYP1_MOTOCYCLE = 5;
    HMIMOVGOBJ9HMIMOVGOBJTYP_HMIMOVGOBJTYP1_BUS = 6;
    HMIMOVGOBJ9HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TRUCK = 7;
    HMIMOVGOBJ9HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RICKSHAW = 8;
    HMIMOVGOBJ9HMIMOVGOBJTYP_HMIMOVGOBJTYP1_TANKER = 9;
    HMIMOVGOBJ9HMIMOVGOBJTYP_HMIMOVGOBJTYP1_OPENBACKTRUCK = 10;
    HMIMOVGOBJ9HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED1 = 11;
    HMIMOVGOBJ9HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED2 = 12;
    HMIMOVGOBJ9HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED3 = 13;
    HMIMOVGOBJ9HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED4 = 14;
    HMIMOVGOBJ9HMIMOVGOBJTYP_HMIMOVGOBJTYP1_RESERVED5 = 15;
  }
  enum HmiNOPCofmOfLanChagType {
    HMINOPCOFMOFLANCHAG_YESNORES_RESD1 = 0;
    HMINOPCOFMOFLANCHAG_YESNORES_YES = 1;
    HMINOPCOFMOFLANCHAG_YESNORES_NO = 2;
    HMINOPCOFMOFLANCHAG_YESNORES_RESD2 = 3;
  }
  enum HmiReCamSts0Type {
    HMIRECAMSTS0_HMISNSRSTS_CFG = 0;
    HMIRECAMSTS0_HMISNSRSTS_STRTUP = 1;
    HMIRECAMSTS0_HMISNSRSTS_RUNNG = 2;
    HMIRECAMSTS0_HMISNSRSTS_BLKD = 3;
    HMIRECAMSTS0_HMISNSRSTS_FAULTY = 4;
    HMIRECAMSTS0_HMISNSRSTS_SHUTDOWN = 5;
    HMIRECAMSTS0_HMISNSRSTS_HOT = 6;
    HMIRECAMSTS0_HMISNSRSTS_CAL = 7;
    HMIRECAMSTS0_HMISNSRSTS_AUTCALPROC = 8;
    HMIRECAMSTS0_HMISNSRSTS_AUTCALFISH = 9;
    HMIRECAMSTS0_HMISNSRSTS_AUTCALFAIL = 10;
  }
  enum ReLidarSts0Type {
    RELIDARSTS0_RSDSMSTST_CFG = 0;
    RELIDARSTS0_RSDSMSTST_STRTUP = 1;
    RELIDARSTS0_RSDSMSTST_RUNNG = 2;
    RELIDARSTS0_RSDSMSTST_BLKD = 3;
    RELIDARSTS0_RSDSMSTST_FAULTY = 4;
    RELIDARSTS0_RSDSMSTST_SHUTDOWN = 5;
    RELIDARSTS0_RSDSMSTST_HOT = 6;
    RELIDARSTS0_RSDSMSTST_CAL = 7;
  }
  enum ReSideLidarLeSts0Type {
    RESIDELIDARLESTS0_RSDSMSTST_CFG = 0;
    RESIDELIDARLESTS0_RSDSMSTST_STRTUP = 1;
    RESIDELIDARLESTS0_RSDSMSTST_RUNNG = 2;
    RESIDELIDARLESTS0_RSDSMSTST_BLKD = 3;
    RESIDELIDARLESTS0_RSDSMSTST_FAULTY = 4;
    RESIDELIDARLESTS0_RSDSMSTST_SHUTDOWN = 5;
    RESIDELIDARLESTS0_RSDSMSTST_HOT = 6;
    RESIDELIDARLESTS0_RSDSMSTST_CAL = 7;
  }
  enum ReSideLidarRiSts0Type {
    RESIDELIDARRISTS0_RSDSMSTST_CFG = 0;
    RESIDELIDARRISTS0_RSDSMSTST_STRTUP = 1;
    RESIDELIDARRISTS0_RSDSMSTST_RUNNG = 2;
    RESIDELIDARRISTS0_RSDSMSTST_BLKD = 3;
    RESIDELIDARRISTS0_RSDSMSTST_FAULTY = 4;
    RESIDELIDARRISTS0_RSDSMSTST_SHUTDOWN = 5;
    RESIDELIDARRISTS0_RSDSMSTST_HOT = 6;
    RESIDELIDARRISTS0_RSDSMSTST_CAL = 7;
  }
  // description AD4 Lane Chg For E2E [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 ad4_lane_chg_for_e2_e = 1;
  // [] [0|1] [initial_value:None]
  optional bool ad4_lane_chg_for_e2_e_ub = 2;
  // [] [0|1] [initial_value:None]
  optional bool ad4_turn_indic_req_ub = 3;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_turn_indic_req_chks = 4;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_turn_indic_req_cntr = 5;
  // description AD4 direction indicator lamp request [] [0|3] [initial_value:0]
  optional AD4TurnIndicReqReqType ad4_turn_indic_req_req = 6;
  // description AD4 unavailale status and reasons for E2E function [] [0|15] [initial_value:0]
  optional AD4UnavlStsForE2EType ad4_unavl_sts_for_e2_e = 7;
  // [] [0|1] [initial_value:None]
  optional bool ad4_unavl_sts_for_e2_e_ub = 8;
  // description warn signal to show E2E message [] [0|7] [initial_value:0]
  optional AD4WarnStsForE2EType ad4_warn_sts_for_e2_e = 9;
  // [] [0|1] [initial_value:None]
  optional bool ad4_warn_sts_for_e2_e_ub = 10;
  // description AD4 windows open control request [] [0|31] [initial_value:0]
  optional AD4WinOpenReqType ad4_win_open_req = 11;
  // [] [0|1] [initial_value:None]
  optional bool ad4_win_open_req_ub = 12;
  // description lidar status for DIM  [] [0|7] [initial_value:0]
  optional FrntSideLidarLeSts0Type frnt_side_lidar_le_sts0 = 13;
  // [] [0|1] [initial_value:None]
  optional bool frnt_side_lidar_le_sts0_ub = 14;
  // description lidar status for DIM  [] [0|7] [initial_value:0]
  optional FrntSideLidarRiSts0Type frnt_side_lidar_ri_sts0 = 15;
  // [] [0|1] [initial_value:None]
  optional bool frnt_side_lidar_ri_sts0_ub = 16;
  // [] [0|1] [initial_value:None]
  optional bool hmi_movg_obj1_ub = 17;
  // [] [0|1] [initial_value:None]
  optional bool hmi_movg_obj10_ub = 18;
  // description object color [] [0|7] [initial_value:0]
  optional HmiMovgObj10ColorOfHmiMovgObjType hmi_movg_obj10_color_of_hmi_movg_obj = 19;
  // description lateral distance of moving obj [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_movg_obj10_dst_lat_of_movg_obj = 20;
  // description longitudinal distance of moving obj [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_movg_obj10_dst_lgt_of_movgobj = 21;
  // description heading angle of moving obj [Deg] [0.0|360.0] [initial_value:0]
  optional double hmi_movg_obj10_hd_dir_of_movg_obj = 22;
  // description type of moving object [] [0|15] [initial_value:0]
  optional HmiMovgObj10HmiMovgObjTypType hmi_movg_obj10_hmi_movg_obj_typ = 23;
  // [] [0|1] [initial_value:None]
  optional bool hmi_movg_obj11_ub = 24;
  // description object color [] [0|7] [initial_value:0]
  optional HmiMovgObj11ColorOfHmiMovgObjType hmi_movg_obj11_color_of_hmi_movg_obj = 25;
  // description lateral distance of moving obj [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_movg_obj11_dst_lat_of_movg_obj = 26;
  // description longitudinal distance of moving obj [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_movg_obj11_dst_lgt_of_movgobj = 27;
  // description heading angle of moving obj [Deg] [0.0|360.0] [initial_value:0]
  optional double hmi_movg_obj11_hd_dir_of_movg_obj = 28;
  // description type of moving object [] [0|15] [initial_value:0]
  optional HmiMovgObj11HmiMovgObjTypType hmi_movg_obj11_hmi_movg_obj_typ = 29;
  // description object color [] [0|7] [initial_value:0]
  optional HmiMovgObj1ColorOfHmiMovgObjType hmi_movg_obj1_color_of_hmi_movg_obj = 30;
  // description lateral distance of moving obj [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_movg_obj1_dst_lat_of_movg_obj = 31;
  // description longitudinal distance of moving obj [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_movg_obj1_dst_lgt_of_movgobj = 32;
  // description heading angle of moving obj [Deg] [0.0|360.0] [initial_value:0]
  optional double hmi_movg_obj1_hd_dir_of_movg_obj = 33;
  // description type of moving object [] [0|15] [initial_value:0]
  optional HmiMovgObj1HmiMovgObjTypType hmi_movg_obj1_hmi_movg_obj_typ = 34;
  // [] [0|1] [initial_value:None]
  optional bool hmi_movg_obj2_ub = 35;
  // description object color [] [0|7] [initial_value:0]
  optional HmiMovgObj2ColorOfHmiMovgObjType hmi_movg_obj2_color_of_hmi_movg_obj = 36;
  // description lateral distance of moving obj [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_movg_obj2_dst_lat_of_movg_obj = 37;
  // description longitudinal distance of moving obj [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_movg_obj2_dst_lgt_of_movgobj = 38;
  // description heading angle of moving obj [Deg] [0.0|360.0] [initial_value:0]
  optional double hmi_movg_obj2_hd_dir_of_movg_obj = 39;
  // description type of moving object [] [0|15] [initial_value:0]
  optional HmiMovgObj2HmiMovgObjTypType hmi_movg_obj2_hmi_movg_obj_typ = 40;
  // [] [0|1] [initial_value:None]
  optional bool hmi_movg_obj3_ub = 41;
  // description object color [] [0|7] [initial_value:0]
  optional HmiMovgObj3ColorOfHmiMovgObjType hmi_movg_obj3_color_of_hmi_movg_obj = 42;
  // description lateral distance of moving obj [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_movg_obj3_dst_lat_of_movg_obj = 43;
  // description longitudinal distance of moving obj [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_movg_obj3_dst_lgt_of_movgobj = 44;
  // description heading angle of moving obj [Deg] [0.0|360.0] [initial_value:0]
  optional double hmi_movg_obj3_hd_dir_of_movg_obj = 45;
  // description type of moving object [] [0|15] [initial_value:0]
  optional HmiMovgObj3HmiMovgObjTypType hmi_movg_obj3_hmi_movg_obj_typ = 46;
  // [] [0|1] [initial_value:None]
  optional bool hmi_movg_obj4_ub = 47;
  // description object color [] [0|7] [initial_value:0]
  optional HmiMovgObj4ColorOfHmiMovgObjType hmi_movg_obj4_color_of_hmi_movg_obj = 48;
  // description lateral distance of moving obj [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_movg_obj4_dst_lat_of_movg_obj = 49;
  // description longitudinal distance of moving obj [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_movg_obj4_dst_lgt_of_movgobj = 50;
  // description heading angle of moving obj [Deg] [0.0|360.0] [initial_value:0]
  optional double hmi_movg_obj4_hd_dir_of_movg_obj = 51;
  // description type of moving object [] [0|15] [initial_value:0]
  optional HmiMovgObj4HmiMovgObjTypType hmi_movg_obj4_hmi_movg_obj_typ = 52;
  // [] [0|1] [initial_value:None]
  optional bool hmi_movg_obj5_ub = 53;
  // description object color [] [0|7] [initial_value:0]
  optional HmiMovgObj5ColorOfHmiMovgObjType hmi_movg_obj5_color_of_hmi_movg_obj = 54;
  // description lateral distance of moving obj [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_movg_obj5_dst_lat_of_movg_obj = 55;
  // description longitudinal distance of moving obj [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_movg_obj5_dst_lgt_of_movgobj = 56;
  // description heading angle of moving obj [Deg] [0.0|360.0] [initial_value:0]
  optional double hmi_movg_obj5_hd_dir_of_movg_obj = 57;
  // description type of moving object [] [0|15] [initial_value:0]
  optional HmiMovgObj5HmiMovgObjTypType hmi_movg_obj5_hmi_movg_obj_typ = 58;
  // [] [0|1] [initial_value:None]
  optional bool hmi_movg_obj6_ub = 59;
  // description object color [] [0|7] [initial_value:0]
  optional HmiMovgObj6ColorOfHmiMovgObjType hmi_movg_obj6_color_of_hmi_movg_obj = 60;
  // description lateral distance of moving obj [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_movg_obj6_dst_lat_of_movg_obj = 61;
  // description longitudinal distance of moving obj [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_movg_obj6_dst_lgt_of_movgobj = 62;
  // description heading angle of moving obj [Deg] [0.0|360.0] [initial_value:0]
  optional double hmi_movg_obj6_hd_dir_of_movg_obj = 63;
  // description type of moving object [] [0|15] [initial_value:0]
  optional HmiMovgObj6HmiMovgObjTypType hmi_movg_obj6_hmi_movg_obj_typ = 64;
  // [] [0|1] [initial_value:None]
  optional bool hmi_movg_obj7_ub = 65;
  // description object color [] [0|7] [initial_value:0]
  optional HmiMovgObj7ColorOfHmiMovgObjType hmi_movg_obj7_color_of_hmi_movg_obj = 66;
  // description lateral distance of moving obj [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_movg_obj7_dst_lat_of_movg_obj = 67;
  // description longitudinal distance of moving obj [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_movg_obj7_dst_lgt_of_movgobj = 68;
  // description heading angle of moving obj [Deg] [0.0|360.0] [initial_value:0]
  optional double hmi_movg_obj7_hd_dir_of_movg_obj = 69;
  // description type of moving object [] [0|15] [initial_value:0]
  optional HmiMovgObj7HmiMovgObjTypType hmi_movg_obj7_hmi_movg_obj_typ = 70;
  // [] [0|1] [initial_value:None]
  optional bool hmi_movg_obj8_ub = 71;
  // description object color [] [0|7] [initial_value:0]
  optional HmiMovgObj8ColorOfHmiMovgObjType hmi_movg_obj8_color_of_hmi_movg_obj = 72;
  // description lateral distance of moving obj [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_movg_obj8_dst_lat_of_movg_obj = 73;
  // description longitudinal distance of moving obj [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_movg_obj8_dst_lgt_of_movgobj = 74;
  // description heading angle of moving obj [Deg] [0.0|360.0] [initial_value:0]
  optional double hmi_movg_obj8_hd_dir_of_movg_obj = 75;
  // description type of moving object [] [0|15] [initial_value:0]
  optional HmiMovgObj8HmiMovgObjTypType hmi_movg_obj8_hmi_movg_obj_typ = 76;
  // [] [0|1] [initial_value:None]
  optional bool hmi_movg_obj9_ub = 77;
  // description object color [] [0|7] [initial_value:0]
  optional HmiMovgObj9ColorOfHmiMovgObjType hmi_movg_obj9_color_of_hmi_movg_obj = 78;
  // description lateral distance of moving obj [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_movg_obj9_dst_lat_of_movg_obj = 79;
  // description longitudinal distance of moving obj [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_movg_obj9_dst_lgt_of_movgobj = 80;
  // description heading angle of moving obj [Deg] [0.0|360.0] [initial_value:0]
  optional double hmi_movg_obj9_hd_dir_of_movg_obj = 81;
  // description type of moving object [] [0|15] [initial_value:0]
  optional HmiMovgObj9HmiMovgObjTypType hmi_movg_obj9_hmi_movg_obj_typ = 82;
  // description subswitch of Pilot fusion navigation menu setting. [] [0|3] [initial_value:0]
  optional HmiNOPCofmOfLanChagType hmi_nop_cofm_of_lan_chag = 83;
  // [] [0|1] [initial_value:None]
  optional bool hmi_nop_cofm_of_lan_chag_ub = 84;
  // description Rear Camera  status [] [0|15] [initial_value:0]
  optional HmiReCamSts0Type hmi_re_cam_sts0 = 85;
  // [] [0|1] [initial_value:None]
  optional bool hmi_re_cam_sts0_ub = 86;
  // [] [0|1] [initial_value:None]
  optional bool hwa_leading_point_ub = 87;
  // description lateral coordinate is variable based on the lateral distance between the vehicle and the target point  [m] [-25.0|25.0] [initial_value:250]
  optional double hwa_leading_point_center_x = 88;
  // description The longitudinal coordinates of the end of the lane change is a fixed value 40m(tunable) [m] [0.0|150.0] [initial_value:0]
  optional double hwa_leading_point_center_y = 89;
  // description indicates whether the point is available [] [0|1] [initial_value:0]
  optional bool hwa_leading_point_valid = 90;
  // description Feedback to HMI for LaneKeepAidActvSts [] [0|1] [initial_value:0]
  optional bool lane_keep_aid_info_sts = 91;
  // [] [0|1] [initial_value:None]
  optional bool lane_keep_aid_info_sts_ub = 92;
  // description lidar status for DIM  [] [0|7] [initial_value:0]
  optional ReLidarSts0Type re_lidar_sts0 = 93;
  // [] [0|1] [initial_value:None]
  optional bool re_lidar_sts0_ub = 94;
  // description lidar status for DIM  [] [0|7] [initial_value:0]
  optional ReSideLidarLeSts0Type re_side_lidar_le_sts0 = 95;
  // [] [0|1] [initial_value:None]
  optional bool re_side_lidar_le_sts0_ub = 96;
  // description lidar status for DIM  [] [0|7] [initial_value:0]
  optional ReSideLidarRiSts0Type re_side_lidar_ri_sts0 = 97;
  // [] [0|1] [initial_value:None]
  optional bool re_side_lidar_ri_sts0_ub = 98;
}

message ADCU_ZCUCANFD1_FR01_1C0 {
// Control Message
  enum ADCtrlModeADCtrlModeType {
    ADCTRLMODEADCTRLMODE_ADCTRLMODE_DEFAULT = 0;
    ADCTRLMODEADCTRLMODE_ADCTRLMODE_HWA = 1;
    ADCTRLMODEADCTRLMODE_ADCTRLMODE_NOA = 2;
    ADCTRLMODEADCTRLMODE_ADCTRLMODE_CNOA = 3;
  }
  enum CllsnFwdWarnType {
    CLLSNFWDWARN_CLLSNFWDWARNREQ_NOWARNING = 0;
    CLLSNFWDWARN_CLLSNFWDWARNREQ_WARNINGACTIVE = 1;
    CLLSNFWDWARN_CLLSNFWDWARNREQ_LATENTWARNING = 2;
  }
  enum SbWErrReqH2ErrReqType {
    SBWERRREQH2ERRREQ_ERRREQ_ALLOK = 0;
    SBWERRREQH2ERRREQ_ERRREQ_TEMPORARILYDEGRADATION = 1;
    SBWERRREQH2ERRREQ_ERRREQ_NORMALPERFORMANCE_HWFAILURE = 2;
    SBWERRREQH2ERRREQ_ERRREQ_HWA_HALFPERFMANDRWA_ALLPERFM = 3;
    SBWERRREQH2ERRREQ_ERRREQ_HWA_ZEROPERFMANDRWA_ALLPERFM = 4;
    SBWERRREQH2ERRREQ_ERRREQ_RWA_HALFPERFORMANCE = 5;
    SBWERRREQH2ERRREQ_ERRREQ_RWA_ZEROPERFMORHWABLOCKORRWABLOCK = 6;
  }
  enum SBWErrReqR2ErrReqType {
    SBWERRREQR2ERRREQ_ERRREQ_ALLOK = 0;
    SBWERRREQR2ERRREQ_ERRREQ_TEMPORARILYDEGRADATION = 1;
    SBWERRREQR2ERRREQ_ERRREQ_NORMALPERFORMANCE_HWFAILURE = 2;
    SBWERRREQR2ERRREQ_ERRREQ_HWA_HALFPERFMANDRWA_ALLPERFM = 3;
    SBWERRREQR2ERRREQ_ERRREQ_HWA_ZEROPERFMANDRWA_ALLPERFM = 4;
    SBWERRREQR2ERRREQ_ERRREQ_RWA_HALFPERFORMANCE = 5;
    SBWERRREQR2ERRREQ_ERRREQ_RWA_ZEROPERFMORHWABLOCKORRWABLOCK = 6;
  }
  enum SbWSysModH2SysMod1Type {
    SBWSYSMODH2SYSMOD1_SYSMOD1_ALLOK = 0;
    SBWSYSMODH2SYSMOD1_SYSMOD1_H2FAILR = 1;
    SBWSYSMODH2SYSMOD1_SYSMOD1_H1FAILR = 2;
    SBWSYSMODH2SYSMOD1_SYSMOD1_HWAFAILR = 3;
    SBWSYSMODH2SYSMOD1_SYSMOD1_R2FAILR = 4;
    SBWSYSMODH2SYSMOD1_SYSMOD1_R2FAILR_H1FAILR = 5;
    SBWSYSMODH2SYSMOD1_SYSMOD1_R2FAILR_H2FAILR = 6;
    SBWSYSMODH2SYSMOD1_SYSMOD1_R2FAILR_HWAFAILR = 7;
    SBWSYSMODH2SYSMOD1_SYSMOD1_R1FAILR = 8;
    SBWSYSMODH2SYSMOD1_SYSMOD1_R1FAILR_H2FAILR = 9;
    SBWSYSMODH2SYSMOD1_SYSMOD1_R1FAILR_H1FAILR = 10;
    SBWSYSMODH2SYSMOD1_SYSMOD1_R1FAILR_HWAFAILR = 11;
    SBWSYSMODH2SYSMOD1_SYSMOD1_RWAFAILR = 12;
    SBWSYSMODH2SYSMOD1_SYSMOD1_RWAFAILR_H1FAILR = 13;
    SBWSYSMODH2SYSMOD1_SYSMOD1_RWAFAILR_H2FAILR = 14;
    SBWSYSMODH2SYSMOD1_SYSMOD1_ALLFAILR = 15;
  }
  enum SbWSysModR2SysMod1Type {
    SBWSYSMODR2SYSMOD1_SYSMOD1_ALLOK = 0;
    SBWSYSMODR2SYSMOD1_SYSMOD1_H2FAILR = 1;
    SBWSYSMODR2SYSMOD1_SYSMOD1_H1FAILR = 2;
    SBWSYSMODR2SYSMOD1_SYSMOD1_HWAFAILR = 3;
    SBWSYSMODR2SYSMOD1_SYSMOD1_R2FAILR = 4;
    SBWSYSMODR2SYSMOD1_SYSMOD1_R2FAILR_H1FAILR = 5;
    SBWSYSMODR2SYSMOD1_SYSMOD1_R2FAILR_H2FAILR = 6;
    SBWSYSMODR2SYSMOD1_SYSMOD1_R2FAILR_HWAFAILR = 7;
    SBWSYSMODR2SYSMOD1_SYSMOD1_R1FAILR = 8;
    SBWSYSMODR2SYSMOD1_SYSMOD1_R1FAILR_H2FAILR = 9;
    SBWSYSMODR2SYSMOD1_SYSMOD1_R1FAILR_H1FAILR = 10;
    SBWSYSMODR2SYSMOD1_SYSMOD1_R1FAILR_HWAFAILR = 11;
    SBWSYSMODR2SYSMOD1_SYSMOD1_RWAFAILR = 12;
    SBWSYSMODR2SYSMOD1_SYSMOD1_RWAFAILR_H1FAILR = 13;
    SBWSYSMODR2SYSMOD1_SYSMOD1_RWAFAILR_H2FAILR = 14;
    SBWSYSMODR2SYSMOD1_SYSMOD1_ALLFAILR = 15;
  }
  // [] [0|1] [initial_value:None]
  optional bool ad4_asy_stand_still_req_ub = 1;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_asy_stand_still_req_chks = 2;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_asy_stand_still_req_cntr = 3;
  // description Requests automatic Soft Stop and Hold from Main AD controller with function safety. [] [0|1] [initial_value:0]
  optional bool ad4_asy_stand_still_req_stand_still_req = 4;
  // [] [0|1] [initial_value:None]
  optional bool ad4_drv_off_req_for_lgt_ctrl_ub = 5;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_drv_off_req_for_lgt_ctrl_chks = 6;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_drv_off_req_for_lgt_ctrl_cntr = 7;
  // description The driving-off requirement of longitudinal control from main AD controller with function safety. [] [0|1] [initial_value:0]
  optional bool ad4_drv_off_req_for_lgt_ctrl_drv_off_req = 8;
  // [] [0|1] [initial_value:None]
  optional bool ad_ctrl_mode_ub = 9;
  // description Describe current ctrl mode, NOA or HWA [] [0|3] [initial_value:0]
  optional ADCtrlModeADCtrlModeType ad_ctrl_mode_ad_ctrl_mode = 10;
  // description Counter [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad_ctrl_mode_chks = 11;
  // description Checksum [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad_ctrl_mode_cntr = 12;
  // description Request for a haptic warning in the steering wheel. [] [0|1] [initial_value:0]
  optional bool asy_steer_whl_hptc_warn_req = 13;
  // [] [0|1] [initial_value:None]
  optional bool asy_steer_whl_hptc_warn_req_ub = 14;
  // description indicate the FCW warning and Latent warning activation. [] [0|7] [initial_value:0]
  optional CllsnFwdWarnType cllsn_fwd_warn = 15;
  // [] [0|1] [initial_value:None]
  optional bool cllsn_fwd_warn_ub = 16;
  // description Request of LDW sound warning. [] [0|1] [initial_value:0]
  optional bool lane_chg_warn_sts = 17;
  // [] [0|1] [initial_value:None]
  optional bool lane_chg_warn_sts_ub = 18;
  // [] [0|1] [initial_value:None]
  optional bool sb_w_decel_lgt_req_h2_ub = 19;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 sb_w_decel_lgt_req_h2_chks = 20;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 sb_w_decel_lgt_req_h2_cntr = 21;
  // description Longitudinal deceleration request. [m/s^2] [-15.0|0.33000000000000007] [initial_value:500]
  optional double sb_w_decel_lgt_req_h2_decel_lgt_req = 22;
  // [] [0|1] [initial_value:None]
  optional bool sb_w_decel_lgt_req_r2_ub = 23;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 sb_w_decel_lgt_req_r2_chks = 24;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 sb_w_decel_lgt_req_r2_cntr = 25;
  // description Longitudinal deceleration request. [m/s^2] [-15.0|0.33000000000000007] [initial_value:500]
  optional double sb_w_decel_lgt_req_r2_decel_lgt_req = 26;
  // [] [0|1] [initial_value:None]
  optional bool sb_w_err_req_h2_ub = 27;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 sb_w_err_req_h2_chks = 28;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 sb_w_err_req_h2_cntr = 29;
  // description The overall error status of SbW which is sent by HWAS. [] [0|7] [initial_value:0]
  optional SbWErrReqH2ErrReqType sb_w_err_req_h2_err_req = 30;
  // [] [0|1] [initial_value:None]
  optional bool sbw_err_req_r2_ub = 31;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 sbw_err_req_r2_chks = 32;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 sbw_err_req_r2_cntr = 33;
  // description The overall error status of SbW system which is sent by RWAS. [] [0|7] [initial_value:0]
  optional SBWErrReqR2ErrReqType sbw_err_req_r2_err_req = 34;
  // [] [0|1] [initial_value:None]
  optional bool sb_w_sys_mod_h2_ub = 35;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 sb_w_sys_mod_h2_chks = 36;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 sb_w_sys_mod_h2_cntr = 37;
  // description The overall system status of SbW which is sent by HWAS is for VDCU to intervene the lateral control or not. [] [0|15] [initial_value:0]
  optional SbWSysModH2SysMod1Type sb_w_sys_mod_h2_sys_mod1 = 38;
  // [] [0|1] [initial_value:None]
  optional bool sb_w_sys_mod_r2_ub = 39;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 sb_w_sys_mod_r2_chks = 40;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 sb_w_sys_mod_r2_cntr = 41;
  // description The overall system status of SbW which is sent by RWAS is for VDCU to intervene the lateral control or not. [] [0|15] [initial_value:0]
  optional SbWSysModR2SysMod1Type sb_w_sys_mod_r2_sys_mod1 = 42;
  // [] [0|1] [initial_value:None]
  optional bool sb_w_veh_spd_lim_cmd_h2_ub = 43;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 sb_w_veh_spd_lim_cmd_h2_chks = 44;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 sb_w_veh_spd_lim_cmd_h2_cntr = 45;
  // description The recommanded value which is sent by HWAS for slowing down the vehicle speed . [m/s] [0.0|127.0] [initial_value:127]
  optional uint32 sb_w_veh_spd_lim_cmd_h2_veh_spd_lim = 46;
  // description To judge whether there is a request for limiting the vehicle speed, sent by HWAS [] [0|1] [initial_value:0]
  optional bool sb_w_veh_spd_lim_cmd_h2_veh_spd_lim_cmd = 47;
  // [] [0|1] [initial_value:None]
  optional bool sb_w_veh_spd_lim_cmd_r2_ub = 48;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 sb_w_veh_spd_lim_cmd_r2_chks = 49;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 sb_w_veh_spd_lim_cmd_r2_cntr = 50;
  // description The recommanded value which is sent by RWAS for slowing down the vehicle speed . [m/s] [0.0|127.0] [initial_value:127]
  optional uint32 sb_w_veh_spd_lim_cmd_r2_veh_spd_lim = 51;
  // description To judge whether there is a request for limiting the vehicle speed, sent by RWAS [] [0|1] [initial_value:0]
  optional bool sb_w_veh_spd_lim_cmd_r2_veh_spd_lim_cmd = 52;
  // description Traffic Lights Warning function status. [] [0|1] [initial_value:0]
  optional bool trfc_li_warn_typ_sts = 53;
  // [] [0|1] [initial_value:None]
  optional bool trfc_li_warn_typ_sts_ub = 54;
}

message ZCUD_ZCUCANFD1_FR07_1C3 {
// Report Message
  enum AD4HeatingCircTestStsType {
    AD4HEATINGCIRCTESTSTS_OFFONERROR_OFF = 0;
    AD4HEATINGCIRCTESTSTS_OFFONERROR_ON = 1;
    AD4HEATINGCIRCTESTSTS_OFFONERROR_ERROR = 2;
    AD4HEATINGCIRCTESTSTS_OFFONERROR_RESERVED = 3;
  }
  enum ExtrLtgStsAFSType {
    EXTRLTGSTSAFS_DEVSTS4_OFF = 0;
    EXTRLTGSTSAFS_DEVSTS4_ON = 1;
    EXTRLTGSTSAFS_DEVSTS4_ERR = 2;
    EXTRLTGSTSAFS_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsAHBCType {
    EXTRLTGSTSAHBC_DEVSTS4_OFF = 0;
    EXTRLTGSTSAHBC_DEVSTS4_ON = 1;
    EXTRLTGSTSAHBC_DEVSTS4_ERR = 2;
    EXTRLTGSTSAHBC_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsAHLType {
    EXTRLTGSTSAHL_DEVSTS4_OFF = 0;
    EXTRLTGSTSAHL_DEVSTS4_ON = 1;
    EXTRLTGSTSAHL_DEVSTS4_ERR = 2;
    EXTRLTGSTSAHL_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsAllWLType {
    EXTRLTGSTSALLWL_DEVSTS4_OFF = 0;
    EXTRLTGSTSALLWL_DEVSTS4_ON = 1;
    EXTRLTGSTSALLWL_DEVSTS4_ERR = 2;
    EXTRLTGSTSALLWL_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsApproachType {
    EXTRLTGSTSAPPROACH_DEVSTS4_OFF = 0;
    EXTRLTGSTSAPPROACH_DEVSTS4_ON = 1;
    EXTRLTGSTSAPPROACH_DEVSTS4_ERR = 2;
    EXTRLTGSTSAPPROACH_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsCornrgLiType {
    EXTRLTGSTSCORNRGLI_DEVSTS4_OFF = 0;
    EXTRLTGSTSCORNRGLI_DEVSTS4_ON = 1;
    EXTRLTGSTSCORNRGLI_DEVSTS4_ERR = 2;
    EXTRLTGSTSCORNRGLI_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsDBLType {
    EXTRLTGSTSDBL_DEVSTS4_OFF = 0;
    EXTRLTGSTSDBL_DEVSTS4_ON = 1;
    EXTRLTGSTSDBL_DEVSTS4_ERR = 2;
    EXTRLTGSTSDBL_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsDRLType {
    EXTRLTGSTSDRL_DEVSTS4_OFF = 0;
    EXTRLTGSTSDRL_DEVSTS4_ON = 1;
    EXTRLTGSTSDRL_DEVSTS4_ERR = 2;
    EXTRLTGSTSDRL_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsFlashType {
    EXTRLTGSTSFLASH_DEVSTS4_OFF = 0;
    EXTRLTGSTSFLASH_DEVSTS4_ON = 1;
    EXTRLTGSTSFLASH_DEVSTS4_ERR = 2;
    EXTRLTGSTSFLASH_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsFrntFogType {
    EXTRLTGSTSFRNTFOG_DEVSTS4_OFF = 0;
    EXTRLTGSTSFRNTFOG_DEVSTS4_ON = 1;
    EXTRLTGSTSFRNTFOG_DEVSTS4_ERR = 2;
    EXTRLTGSTSFRNTFOG_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsGoodbyeType {
    EXTRLTGSTSGOODBYE_DEVSTS4_OFF = 0;
    EXTRLTGSTSGOODBYE_DEVSTS4_ON = 1;
    EXTRLTGSTSGOODBYE_DEVSTS4_ERR = 2;
    EXTRLTGSTSGOODBYE_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsHiBeamType {
    EXTRLTGSTSHIBEAM_DEVSTS4_OFF = 0;
    EXTRLTGSTSHIBEAM_DEVSTS4_ON = 1;
    EXTRLTGSTSHIBEAM_DEVSTS4_ERR = 2;
    EXTRLTGSTSHIBEAM_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsHomeSafeType {
    EXTRLTGSTSHOMESAFE_DEVSTS4_OFF = 0;
    EXTRLTGSTSHOMESAFE_DEVSTS4_ON = 1;
    EXTRLTGSTSHOMESAFE_DEVSTS4_ERR = 2;
    EXTRLTGSTSHOMESAFE_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsHWLType {
    EXTRLTGSTSHWL_DEVSTS4_OFF = 0;
    EXTRLTGSTSHWL_DEVSTS4_ON = 1;
    EXTRLTGSTSHWL_DEVSTS4_ERR = 2;
    EXTRLTGSTSHWL_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsLoBeamType {
    EXTRLTGSTSLOBEAM_DEVSTS4_OFF = 0;
    EXTRLTGSTSLOBEAM_DEVSTS4_ON = 1;
    EXTRLTGSTSLOBEAM_DEVSTS4_ERR = 2;
    EXTRLTGSTSLOBEAM_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsLtgShowType {
    EXTRLTGSTSLTGSHOW_DEVSTS4_OFF = 0;
    EXTRLTGSTSLTGSHOW_DEVSTS4_ON = 1;
    EXTRLTGSTSLTGSHOW_DEVSTS4_ERR = 2;
    EXTRLTGSTSLTGSHOW_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsPosLiFrntType {
    EXTRLTGSTSPOSLIFRNT_DEVSTS4_OFF = 0;
    EXTRLTGSTSPOSLIFRNT_DEVSTS4_ON = 1;
    EXTRLTGSTSPOSLIFRNT_DEVSTS4_ERR = 2;
    EXTRLTGSTSPOSLIFRNT_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsPosLiReType {
    EXTRLTGSTSPOSLIRE_DEVSTS4_OFF = 0;
    EXTRLTGSTSPOSLIRE_DEVSTS4_ON = 1;
    EXTRLTGSTSPOSLIRE_DEVSTS4_ERR = 2;
    EXTRLTGSTSPOSLIRE_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsReFogType {
    EXTRLTGSTSREFOG_DEVSTS4_OFF = 0;
    EXTRLTGSTSREFOG_DEVSTS4_ON = 1;
    EXTRLTGSTSREFOG_DEVSTS4_ERR = 2;
    EXTRLTGSTSREFOG_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsReverseLiType {
    EXTRLTGSTSREVERSELI_DEVSTS4_OFF = 0;
    EXTRLTGSTSREVERSELI_DEVSTS4_ON = 1;
    EXTRLTGSTSREVERSELI_DEVSTS4_ERR = 2;
    EXTRLTGSTSREVERSELI_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsStopLiType {
    EXTRLTGSTSSTOPLI_DEVSTS4_OFF = 0;
    EXTRLTGSTSSTOPLI_DEVSTS4_ON = 1;
    EXTRLTGSTSSTOPLI_DEVSTS4_ERR = 2;
    EXTRLTGSTSSTOPLI_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsTurnIndrLeType {
    EXTRLTGSTSTURNINDRLE_DEVSTS4_OFF = 0;
    EXTRLTGSTSTURNINDRLE_DEVSTS4_ON = 1;
    EXTRLTGSTSTURNINDRLE_DEVSTS4_ERR = 2;
    EXTRLTGSTSTURNINDRLE_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsTurnIndrRiType {
    EXTRLTGSTSTURNINDRRI_DEVSTS4_OFF = 0;
    EXTRLTGSTSTURNINDRRI_DEVSTS4_ON = 1;
    EXTRLTGSTSTURNINDRRI_DEVSTS4_ERR = 2;
    EXTRLTGSTSTURNINDRRI_DEVSTS4_RESD = 3;
  }
  enum ExtrLtgStsWelcomeType {
    EXTRLTGSTSWELCOME_DEVSTS4_OFF = 0;
    EXTRLTGSTSWELCOME_DEVSTS4_ON = 1;
    EXTRLTGSTSWELCOME_DEVSTS4_ERR = 2;
    EXTRLTGSTSWELCOME_DEVSTS4_RESD = 3;
  }
  enum KeyReadStsToAsmKey0Type {
    KEYREADSTSTOASMKEY0_KEYPRSNTSTS1_KEYPRSNTSTSIDLE = 0;
    KEYREADSTSTOASMKEY0_KEYPRSNTSTS1_KEYPRSNTSTSINPROGS = 1;
    KEYREADSTSTOASMKEY0_KEYPRSNTSTS1_KEYPRSNTSTSNOTPRSNT = 2;
    KEYREADSTSTOASMKEY0_KEYPRSNTSTS1_KEYPRSNTSTSPRSNT = 3;
  }
  enum KeyReadStsToAsmKey1Type {
    KEYREADSTSTOASMKEY1_KEYPRSNTSTS1_KEYPRSNTSTSIDLE = 0;
    KEYREADSTSTOASMKEY1_KEYPRSNTSTS1_KEYPRSNTSTSINPROGS = 1;
    KEYREADSTSTOASMKEY1_KEYPRSNTSTS1_KEYPRSNTSTSNOTPRSNT = 2;
    KEYREADSTSTOASMKEY1_KEYPRSNTSTS1_KEYPRSNTSTSPRSNT = 3;
  }
  enum KeyReadStsToAsmKey10Type {
    KEYREADSTSTOASMKEY10_KEYPRSNTSTS1_KEYPRSNTSTSIDLE = 0;
    KEYREADSTSTOASMKEY10_KEYPRSNTSTS1_KEYPRSNTSTSINPROGS = 1;
    KEYREADSTSTOASMKEY10_KEYPRSNTSTS1_KEYPRSNTSTSNOTPRSNT = 2;
    KEYREADSTSTOASMKEY10_KEYPRSNTSTS1_KEYPRSNTSTSPRSNT = 3;
  }
  enum KeyReadStsToAsmKey11Type {
    KEYREADSTSTOASMKEY11_KEYPRSNTSTS1_KEYPRSNTSTSIDLE = 0;
    KEYREADSTSTOASMKEY11_KEYPRSNTSTS1_KEYPRSNTSTSINPROGS = 1;
    KEYREADSTSTOASMKEY11_KEYPRSNTSTS1_KEYPRSNTSTSNOTPRSNT = 2;
    KEYREADSTSTOASMKEY11_KEYPRSNTSTS1_KEYPRSNTSTSPRSNT = 3;
  }
  enum KeyReadStsToAsmKey2Type {
    KEYREADSTSTOASMKEY2_KEYPRSNTSTS1_KEYPRSNTSTSIDLE = 0;
    KEYREADSTSTOASMKEY2_KEYPRSNTSTS1_KEYPRSNTSTSINPROGS = 1;
    KEYREADSTSTOASMKEY2_KEYPRSNTSTS1_KEYPRSNTSTSNOTPRSNT = 2;
    KEYREADSTSTOASMKEY2_KEYPRSNTSTS1_KEYPRSNTSTSPRSNT = 3;
  }
  enum KeyReadStsToAsmKey3Type {
    KEYREADSTSTOASMKEY3_KEYPRSNTSTS1_KEYPRSNTSTSIDLE = 0;
    KEYREADSTSTOASMKEY3_KEYPRSNTSTS1_KEYPRSNTSTSINPROGS = 1;
    KEYREADSTSTOASMKEY3_KEYPRSNTSTS1_KEYPRSNTSTSNOTPRSNT = 2;
    KEYREADSTSTOASMKEY3_KEYPRSNTSTS1_KEYPRSNTSTSPRSNT = 3;
  }
  enum KeyReadStsToAsmKey4Type {
    KEYREADSTSTOASMKEY4_KEYPRSNTSTS1_KEYPRSNTSTSIDLE = 0;
    KEYREADSTSTOASMKEY4_KEYPRSNTSTS1_KEYPRSNTSTSINPROGS = 1;
    KEYREADSTSTOASMKEY4_KEYPRSNTSTS1_KEYPRSNTSTSNOTPRSNT = 2;
    KEYREADSTSTOASMKEY4_KEYPRSNTSTS1_KEYPRSNTSTSPRSNT = 3;
  }
  enum KeyReadStsToAsmKey5Type {
    KEYREADSTSTOASMKEY5_KEYPRSNTSTS1_KEYPRSNTSTSIDLE = 0;
    KEYREADSTSTOASMKEY5_KEYPRSNTSTS1_KEYPRSNTSTSINPROGS = 1;
    KEYREADSTSTOASMKEY5_KEYPRSNTSTS1_KEYPRSNTSTSNOTPRSNT = 2;
    KEYREADSTSTOASMKEY5_KEYPRSNTSTS1_KEYPRSNTSTSPRSNT = 3;
  }
  enum KeyReadStsToAsmKey6Type {
    KEYREADSTSTOASMKEY6_KEYPRSNTSTS1_KEYPRSNTSTSIDLE = 0;
    KEYREADSTSTOASMKEY6_KEYPRSNTSTS1_KEYPRSNTSTSINPROGS = 1;
    KEYREADSTSTOASMKEY6_KEYPRSNTSTS1_KEYPRSNTSTSNOTPRSNT = 2;
    KEYREADSTSTOASMKEY6_KEYPRSNTSTS1_KEYPRSNTSTSPRSNT = 3;
  }
  enum KeyReadStsToAsmKey7Type {
    KEYREADSTSTOASMKEY7_KEYPRSNTSTS1_KEYPRSNTSTSIDLE = 0;
    KEYREADSTSTOASMKEY7_KEYPRSNTSTS1_KEYPRSNTSTSINPROGS = 1;
    KEYREADSTSTOASMKEY7_KEYPRSNTSTS1_KEYPRSNTSTSNOTPRSNT = 2;
    KEYREADSTSTOASMKEY7_KEYPRSNTSTS1_KEYPRSNTSTSPRSNT = 3;
  }
  enum KeyReadStsToAsmKey8Type {
    KEYREADSTSTOASMKEY8_KEYPRSNTSTS1_KEYPRSNTSTSIDLE = 0;
    KEYREADSTSTOASMKEY8_KEYPRSNTSTS1_KEYPRSNTSTSINPROGS = 1;
    KEYREADSTSTOASMKEY8_KEYPRSNTSTS1_KEYPRSNTSTSNOTPRSNT = 2;
    KEYREADSTSTOASMKEY8_KEYPRSNTSTS1_KEYPRSNTSTSPRSNT = 3;
  }
  enum KeyReadStsToAsmKey9Type {
    KEYREADSTSTOASMKEY9_KEYPRSNTSTS1_KEYPRSNTSTSIDLE = 0;
    KEYREADSTSTOASMKEY9_KEYPRSNTSTS1_KEYPRSNTSTSINPROGS = 1;
    KEYREADSTSTOASMKEY9_KEYPRSNTSTS1_KEYPRSNTSTSNOTPRSNT = 2;
    KEYREADSTSTOASMKEY9_KEYPRSNTSTS1_KEYPRSNTSTSPRSNT = 3;
  }
  enum SwtIndcrIndcrTypExtReqType {
    SWTINDCRINDCRTYPEXTREQ_INDCRTYPEXT1_OFF = 0;
    SWTINDCRINDCRTYPEXTREQ_INDCRTYPEXT1_LE = 1;
    SWTINDCRINDCRTYPEXTREQ_INDCRTYPEXT1_RI = 2;
  }
  enum SwtIndcrIndcrTypExtReqToUpdQfType {
    SWTINDCRINDCRTYPEXTREQTOUPDQF_QF1_DEVOFDATAUNDEFD = 0;
    SWTINDCRINDCRTYPEXTREQTOUPDQF_QF1_DATATMPUNDEFDANDEVLNINPROGS = 1;
    SWTINDCRINDCRTYPEXTREQTOUPDQF_QF1_DEVOFDATANOTWITHINRNGALLWD = 2;
    SWTINDCRINDCRTYPEXTREQTOUPDQF_QF1_DATACALCDWITHDEVDEFD = 3;
  }
  enum TrLockStsType {
    TRLOCKSTS_LOCKSTS2_LOCKSTSUKWN = 0;
    TRLOCKSTS_LOCKSTS2_UNLCKD = 1;
    TRLOCKSTS_LOCKSTS2_LOCKD = 2;
    TRLOCKSTS_LOCKSTS2_SAFELOCKD = 3;
  }
  enum TurnIndcrMonostableQfType {
    TURNINDCRMONOSTABLEQF_GENQF1_UNDEFINDDATAACCUR = 0;
    TURNINDCRMONOSTABLEQF_GENQF1_TMPUNDEFDDATA = 1;
    TURNINDCRMONOSTABLEQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    TURNINDCRMONOSTABLEQF_GENQF1_ACCURDATA = 3;
  }
  enum TurnIndcrMonostableTurnIndcrMonostableType {
    TURNINDCRMONOSTABLETURNINDCRMONOSTABLE_DIR10_IDLE = 0;
    TURNINDCRMONOSTABLETURNINDCRMONOSTABLE_DIR10_LEFTFLASH = 1;
    TURNINDCRMONOSTABLETURNINDCRMONOSTABLE_DIR10_LEFT = 2;
    TURNINDCRMONOSTABLETURNINDCRMONOSTABLE_DIR10_RIGHTFLASH = 3;
    TURNINDCRMONOSTABLETURNINDCRMONOSTABLE_DIR10_RIGHT = 4;
  }
  enum TwliBriRawQfType {
    TWLIBRIRAWQF_GENQF1_UNDEFINDDATAACCUR = 0;
    TWLIBRIRAWQF_GENQF1_TMPUNDEFDDATA = 1;
    TWLIBRIRAWQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    TWLIBRIRAWQF_GENQF1_ACCURDATA = 3;
  }
  enum WipgInfoWipgSpdInfoType {
    WIPGINFOWIPGSPDINFO_WIPGSPDINFO_OFF = 0;
    WIPGINFOWIPGSPDINFO_WIPGSPDINFO_INTLLO = 1;
    WIPGINFOWIPGSPDINFO_WIPGSPDINFO_INTLHI = 2;
    WIPGINFOWIPGSPDINFO_WIPGSPDINFO_WIPGSPD4045 = 3;
    WIPGINFOWIPGSPDINFO_WIPGSPDINFO_WIPGSPD4650 = 4;
    WIPGINFOWIPGSPDINFO_WIPGSPDINFO_WIPGSPD5155 = 5;
    WIPGINFOWIPGSPDINFO_WIPGSPDINFO_WIPGSPD5660 = 6;
    WIPGINFOWIPGSPDINFO_WIPGSPDINFO_WIPRERR = 7;
  }
  // description If heating circuit work normal. [] [0|3] [initial_value:0]
  optional AD4HeatingCircTestStsType ad4_heating_circ_test_sts = 1;
  // [] [0|1] [initial_value:None]
  optional bool ad4_heating_circ_test_sts_ub = 2;
  // description AVSL function fuse TSI request [] [0|1] [initial_value:0]
  optional bool adj_spd_limn_fusn_trfc_sgn = 3;
  // [] [0|1] [initial_value:None]
  optional bool adj_spd_limn_fusn_trfc_sgn_ub = 4;
  // [] [0|1] [initial_value:None]
  optional bool extr_ltg_sts_ub = 5;
  // description AFS status [] [0|3] [initial_value:0]
  optional ExtrLtgStsAFSType extr_ltg_sts_afs = 6;
  // description AHBC Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsAHBCType extr_ltg_sts_ahbc = 7;
  // description AHL Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsAHLType extr_ltg_sts_ahl = 8;
  // description All Weather Light Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsAllWLType extr_ltg_sts_all_wl = 9;
  // description Approach Light Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsApproachType extr_ltg_sts_approach = 10;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 extr_ltg_sts_chks = 11;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 extr_ltg_sts_cntr = 12;
  // description Cornering Light Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsCornrgLiType extr_ltg_sts_cornrg_li = 13;
  // description DBL Stataus [] [0|3] [initial_value:0]
  optional ExtrLtgStsDBLType extr_ltg_sts_dbl = 14;
  // description DRL Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsDRLType extr_ltg_sts_drl = 15;
  // description Flash Light Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsFlashType extr_ltg_sts_flash = 16;
  // description Front Fog Light Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsFrntFogType extr_ltg_sts_frnt_fog = 17;
  // description Good Bye Light Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsGoodbyeType extr_ltg_sts_goodbye = 18;
  // description Hi Beam Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsHiBeamType extr_ltg_sts_hi_beam = 19;
  // description Home Safe Light Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsHomeSafeType extr_ltg_sts_home_safe = 20;
  // description HWL Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsHWLType extr_ltg_sts_hwl = 21;
  // description Low Beam Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsLoBeamType extr_ltg_sts_lo_beam = 22;
  // description Light Show Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsLtgShowType extr_ltg_sts_ltg_show = 23;
  // description Position Light Front Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsPosLiFrntType extr_ltg_sts_pos_li_frnt = 24;
  // description Position Light Rear Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsPosLiReType extr_ltg_sts_pos_li_re = 25;
  // description Rear Fog Light Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsReFogType extr_ltg_sts_re_fog = 26;
  // description Reverse Light Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsReverseLiType extr_ltg_sts_reverse_li = 27;
  // description Stop Light Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsStopLiType extr_ltg_sts_stop_li = 28;
  // description Turn Indicator Left Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsTurnIndrLeType extr_ltg_sts_turn_indr_le = 29;
  // [] [0|3] [initial_value:0]
  optional ExtrLtgStsTurnIndrRiType extr_ltg_sts_turn_indr_ri = 30;
  // description Welcome Light Status [] [0|3] [initial_value:0]
  optional ExtrLtgStsWelcomeType extr_ltg_sts_welcome = 31;
  // [] [0|1] [initial_value:None]
  optional bool key_read_sts_to_asm_ub = 32;
  // [] [0|3] [initial_value:0]
  optional KeyReadStsToAsmKey0Type key_read_sts_to_asm_key0 = 33;
  // [] [0|3] [initial_value:0]
  optional KeyReadStsToAsmKey1Type key_read_sts_to_asm_key1 = 34;
  // [] [0|3] [initial_value:0]
  optional KeyReadStsToAsmKey10Type key_read_sts_to_asm_key10 = 35;
  // [] [0|3] [initial_value:0]
  optional KeyReadStsToAsmKey11Type key_read_sts_to_asm_key11 = 36;
  // [] [0|3] [initial_value:0]
  optional KeyReadStsToAsmKey2Type key_read_sts_to_asm_key2 = 37;
  // [] [0|3] [initial_value:0]
  optional KeyReadStsToAsmKey3Type key_read_sts_to_asm_key3 = 38;
  // [] [0|3] [initial_value:0]
  optional KeyReadStsToAsmKey4Type key_read_sts_to_asm_key4 = 39;
  // [] [0|3] [initial_value:0]
  optional KeyReadStsToAsmKey5Type key_read_sts_to_asm_key5 = 40;
  // [] [0|3] [initial_value:0]
  optional KeyReadStsToAsmKey6Type key_read_sts_to_asm_key6 = 41;
  // [] [0|3] [initial_value:0]
  optional KeyReadStsToAsmKey7Type key_read_sts_to_asm_key7 = 42;
  // [] [0|3] [initial_value:0]
  optional KeyReadStsToAsmKey8Type key_read_sts_to_asm_key8 = 43;
  // [] [0|3] [initial_value:0]
  optional KeyReadStsToAsmKey9Type key_read_sts_to_asm_key9 = 44;
  // description The signal describe the amount of rain falling [] [0|15] [initial_value:14]
  optional uint32 rainfall_amnt = 45;
  // [] [0|1] [initial_value:None]
  optional bool rainfall_amnt_ub = 46;
  // description Informs about activation of rear collision warning. [] [0|1] [initial_value:0]
  optional bool rcwm_li_actvd = 47;
  // [] [0|1] [initial_value:None]
  optional bool rcwm_li_actvd_ub = 48;
  // [] [0|1] [initial_value:None]
  optional bool steer_whl_posn_ub = 49;
  // description Angle is height adjustment(HA) [Deg] [-20.48|20.470000000000002] [initial_value:2048]
  optional double steer_whl_posn_ang = 50;
  // description X is length adjustment(LA) [mm] [-204.8|204.7] [initial_value:2048]
  optional double steer_whl_posn_x = 51;
  // description Front fog button signal [] [0|1] [initial_value:0]
  optional bool swt_fog_li_fr = 52;
  // [] [0|1] [initial_value:None]
  optional bool swt_fog_li_fr_ub = 53;
  // [] [0|1] [initial_value:0]
  optional bool swt_fog_li_re = 54;
  // [] [0|1] [initial_value:None]
  optional bool swt_fog_li_re_ub = 55;
  // [] [0|1] [initial_value:None]
  optional bool swt_indcr_ub = 56;
  // description Signal represent status of the turn stalk swich [] [0|3] [initial_value:0]
  optional SwtIndcrIndcrTypExtReqType swt_indcr_indcr_typ_ext_req = 57;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 swt_indcr_indcr_typ_ext_req_chks = 58;
  // description Counter [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 swt_indcr_indcr_typ_ext_req_cntr = 59;
  // description Qf [] [0|3] [initial_value:1]
  optional SwtIndcrIndcrTypExtReqToUpdQfType swt_indcr_indcr_typ_ext_req_to_upd_qf = 60;
  // [] [0|3] [initial_value:0]
  optional TrLockStsType tr_lock_sts = 61;
  // [] [0|1] [initial_value:None]
  optional bool tr_lock_sts_ub = 62;
  // [] [0|1] [initial_value:None]
  optional bool turn_indcr_monostable_ub = 63;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 turn_indcr_monostable_chks = 64;
  // description Counter [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 turn_indcr_monostable_cntr = 65;
  // description Qf [] [0|3] [initial_value:1]
  optional TurnIndcrMonostableQfType turn_indcr_monostable_qf = 66;
  // description turn indicator Monostable [] [0|7] [initial_value:0]
  optional TurnIndcrMonostableTurnIndcrMonostableType turn_indcr_monostable_turn_indcr_monostable = 67;
  // [] [0|1] [initial_value:None]
  optional bool twli_bri_raw_ub = 68;
  // description Outside ambient light measured by SUS and sent to CEM as lux value. Quality Factor [] [0|3] [initial_value:1]
  optional TwliBriRawQfType twli_bri_raw_qf = 69;
  // description Outside ambient light measured by SUS and sent to CEM as lux value. Raw value [Unitless] [0.0|10000.0] [initial_value:0]
  optional double twli_bri_raw_twli_bri_raw = 70;
  // [] [0|1] [initial_value:None]
  optional bool wipg_info_ub = 71;
  // description Information regarding how the wipers are run [] [0|7] [initial_value:0]
  optional WipgInfoWipgSpdInfoType wipg_info_wipg_spd_info = 72;
  // description  0 No wiping, 1 Wiping [] [0|1] [initial_value:0]
  optional bool wipg_info_wipr_actv = 73;
  // description  0 Wiper in lower reversing area or parked, 1 Wiper in wiping area [] [0|1] [initial_value:0]
  optional bool wipg_info_wipr_in_wipg_ar = 74;
}

message ADCU_ZCUCANFD1_FR21_1C6 {
// Control Message
  enum ADCUMaxEvActType {
    ADCUMAXEVACT_MAXEVACT_FULLFCTMOD = 0;
    ADCUMAXEVACT_MAXEVACT_LOWPWRMOD = 1;
    ADCUMAXEVACT_MAXEVACT_FULLFCTMODLOAD = 2;
    ADCUMAXEVACT_MAXEVACT_LOWPWRMODLOAD = 3;
    ADCUMAXEVACT_MAXEVACT_FULLFCTMODLOADFAILR = 4;
    ADCUMAXEVACT_MAXEVACT_LOWPWRMODLOADFAILR = 5;
  }
  enum AsyFctaStsType {
    ASYFCTASTS_ASYFCTASTS_STANDBY = 0;
    ASYFCTASTS_ASYFCTASTS_ACTIVE = 1;
    ASYFCTASTS_ASYFCTASTS_WARNOFF = 2;
    ASYFCTASTS_ASYFCTASTS_BRAKEOFF = 3;
    ASYFCTASTS_ASYFCTASTS_OVERRIDE = 4;
    ASYFCTASTS_ASYFCTASTS_SUPPRESS = 5;
    ASYFCTASTS_ASYFCTASTS_ERROR = 6;
    ASYFCTASTS_ASYFCTASTS_RESERVED = 7;
  }
  enum AsyUndertakOnOffStsType {
    ASYUNDERTAKONOFFSTS_OFFONERRINVALID_OFF = 0;
    ASYUNDERTAKONOFFSTS_OFFONERRINVALID_ON = 1;
    ASYUNDERTAKONOFFSTS_OFFONERRINVALID_ERR = 2;
    ASYUNDERTAKONOFFSTS_OFFONERRINVALID_INVALID = 3;
  }
  enum DoorOpenWarnLeObjAbsLgtSpdType {
    DOOROPENWARNLEOBJABSLGTSPD_SNSRSRC1_UKWN = 0;
    DOOROPENWARNLEOBJABSLGTSPD_SNSRSRC1_RADAR = 1;
    DOOROPENWARNLEOBJABSLGTSPD_SNSRSRC1_CAM = 2;
    DOOROPENWARNLEOBJABSLGTSPD_SNSRSRC1_FUSN = 3;
  }
  enum DoorOpenWarnLeObjSnsrSrcOfAbsLatSpdType {
    DOOROPENWARNLEOBJSNSRSRCOFABSLATSPD_SNSRSRC1_UKWN = 0;
    DOOROPENWARNLEOBJSNSRSRCOFABSLATSPD_SNSRSRC1_RADAR = 1;
    DOOROPENWARNLEOBJSNSRSRCOFABSLATSPD_SNSRSRC1_CAM = 2;
    DOOROPENWARNLEOBJSNSRSRCOFABSLATSPD_SNSRSRC1_FUSN = 3;
  }
  enum DoorOpenWarnLeObjTypeType {
    DOOROPENWARNLEOBJTYPE_ASYOBJTYPE_CAR = 0;
    DOOROPENWARNLEOBJTYPE_ASYOBJTYPE_PEDESTRIAN = 1;
    DOOROPENWARNLEOBJTYPE_ASYOBJTYPE_CYCLIST = 2;
    DOOROPENWARNLEOBJTYPE_ASYOBJTYPE_MOTORBIKE = 3;
    DOOROPENWARNLEOBJTYPE_ASYOBJTYPE_BUS = 4;
    DOOROPENWARNLEOBJTYPE_ASYOBJTYPE_TRUCK = 5;
    DOOROPENWARNLEOBJTYPE_ASYOBJTYPE_TREE = 6;
    DOOROPENWARNLEOBJTYPE_ASYOBJTYPE_WALL = 7;
    DOOROPENWARNLEOBJTYPE_ASYOBJTYPE_ANIMAL = 8;
    DOOROPENWARNLEOBJTYPE_ASYOBJTYPE_UNKNOWN = 9;
  }
  enum LgtFusnTrfcSgnType {
    LGTFUSNTRFCSGN_LGTFUSNTRFCREQ_OFF = 0;
    LGTFUSNTRFCSGN_LGTFUSNTRFCREQ_EEYESPDLIM = 1;
    LGTFUSNTRFCSGN_LGTFUSNTRFCREQ_ALLSPDLIM = 2;
    LGTFUSNTRFCSGN_LGTFUSNTRFCREQ_ERROR = 3;
  }
  // description Indicate the ADAS controller status that the ECU is in low power consumption mode or not. [] [0|7] [initial_value:0]
  optional ADCUMaxEvActType adcu_max_ev_act = 1;
  // [] [0|1] [initial_value:None]
  optional bool adcu_max_ev_act_ub = 2;
  // description Active deceleration information [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_dece_remind = 3;
  // [] [0|1] [initial_value:None]
  optional bool asy_dece_remind_ub = 4;
  // description ELKA action direction and target [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_elk_actvsts = 5;
  // [] [0|1] [initial_value:None]
  optional bool asy_elk_actvsts_ub = 6;
  // description status of FCTA function [] [0|7] [initial_value:0]
  optional AsyFctaStsType asy_fcta_sts = 7;
  // [] [0|1] [initial_value:None]
  optional bool asy_fcta_sts_ub = 8;
  // description The switch status of Lateral offset function. [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_lat_offs_swt_sts = 9;
  // [] [0|1] [initial_value:None]
  optional bool asy_lat_offs_swt_sts_ub = 10;
  // description ELKA on the left side of the curb trigger effect display [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_side_rdr_le = 11;
  // [] [0|1] [initial_value:None]
  optional bool asy_side_rdr_le_ub = 12;
  // description ELKA on the right side of the curb trigger effect display [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_side_rdr_ri = 13;
  // [] [0|1] [initial_value:None]
  optional bool asy_side_rdr_ri_ub = 14;
  // description Overtaking suppression function status [] [0|3] [initial_value:0]
  optional AsyUndertakOnOffStsType asy_undertak_on_off_sts = 15;
  // [] [0|1] [initial_value:None]
  optional bool asy_undertak_on_off_sts_ub = 16;
  // description Overtaking suppression prompt [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_undertak_rmind = 17;
  // [] [0|1] [initial_value:None]
  optional bool asy_undertak_rmind_ub = 18;
  // description Message warning for ICC function [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_warn_mesg_for_aut_drv = 19;
  // [] [0|1] [initial_value:None]
  optional bool asy_warn_mesg_for_aut_drv_ub = 20;
  // [] [0|1] [initial_value:None]
  optional bool door_open_warn_le_obj_ub = 21;
  // description Describe the reletive latent speed of object. [m/s] [-16.0|15.75] [initial_value:64]
  optional double door_open_warn_le_obj_abs_lat_spd = 22;
  // description Describe the reletive latent speed of object. [] [0|3] [initial_value:0]
  optional DoorOpenWarnLeObjAbsLgtSpdType door_open_warn_le_obj_abs_lgt_spd = 23;
  // description Describe the confidence of the object type. [Unitless] [0.0|1.0] [initial_value:0]
  optional double door_open_warn_le_obj_confidence = 24;
  // description Describe the latent distance of object. [m] [-25.0|25.0] [initial_value:250]
  optional double door_open_warn_le_obj_rlvt_lat_dst = 25;
  // description Describe the longitudinal distance of object. [m] [0.0|150.0] [initial_value:0]
  optional double door_open_warn_le_obj_rlvt_lgt_dst = 26;
  // description Describe source of reletive latent speed of object. [] [0|3] [initial_value:0]
  optional DoorOpenWarnLeObjSnsrSrcOfAbsLatSpdType door_open_warn_le_obj_snsr_src_of_abs_lat_spd = 27;
  // description Describe source of reletive longitudinal speed of object. [m/s] [0.0|125.0] [initial_value:0]
  optional double door_open_warn_le_obj_snsr_src_of_abs_lgt_spd = 28;
  // description Describe the TTC between host vehicle and object. [s] [0.0|6.3500000000000005] [initial_value:127]
  optional double door_open_warn_le_obj_ttc = 29;
  // description Describe type of object. [] [0|15] [initial_value:9]
  optional DoorOpenWarnLeObjTypeType door_open_warn_le_obj_type = 30;
  // description Collision Risk(YES/ON) [] [0|1] [initial_value:1]
  optional bool door_open_warn_le_obj_yes_no1 = 31;
  // description SLA function mode [] [0|3] [initial_value:0]
  optional LgtFusnTrfcSgnType lgt_fusn_trfc_sgn = 32;
  // [] [0|1] [initial_value:None]
  optional bool lgt_fusn_trfc_sgn_ub = 33;
  // description Indicates current miscellaneous sign of ENCAP. [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 trfc_info_misc_first_for_en_cap = 34;
  // [] [0|1] [initial_value:None]
  optional bool trfc_info_misc_first_for_en_cap_ub = 35;
}

message ADCU_ZCUCANFD1_FR22_1CA {
// Control Message
  enum DoorOpenWarnRiObjAbsLgtSpdType {
    DOOROPENWARNRIOBJABSLGTSPD_SNSRSRC1_UKWN = 0;
    DOOROPENWARNRIOBJABSLGTSPD_SNSRSRC1_RADAR = 1;
    DOOROPENWARNRIOBJABSLGTSPD_SNSRSRC1_CAM = 2;
    DOOROPENWARNRIOBJABSLGTSPD_SNSRSRC1_FUSN = 3;
  }
  enum DoorOpenWarnRiObjSnsrSrcOfAbsLatSpdType {
    DOOROPENWARNRIOBJSNSRSRCOFABSLATSPD_SNSRSRC1_UKWN = 0;
    DOOROPENWARNRIOBJSNSRSRCOFABSLATSPD_SNSRSRC1_RADAR = 1;
    DOOROPENWARNRIOBJSNSRSRCOFABSLATSPD_SNSRSRC1_CAM = 2;
    DOOROPENWARNRIOBJSNSRSRCOFABSLATSPD_SNSRSRC1_FUSN = 3;
  }
  enum DoorOpenWarnRiObjTypeType {
    DOOROPENWARNRIOBJTYPE_ASYOBJTYPE_CAR = 0;
    DOOROPENWARNRIOBJTYPE_ASYOBJTYPE_PEDESTRIAN = 1;
    DOOROPENWARNRIOBJTYPE_ASYOBJTYPE_CYCLIST = 2;
    DOOROPENWARNRIOBJTYPE_ASYOBJTYPE_MOTORBIKE = 3;
    DOOROPENWARNRIOBJTYPE_ASYOBJTYPE_BUS = 4;
    DOOROPENWARNRIOBJTYPE_ASYOBJTYPE_TRUCK = 5;
    DOOROPENWARNRIOBJTYPE_ASYOBJTYPE_TREE = 6;
    DOOROPENWARNRIOBJTYPE_ASYOBJTYPE_WALL = 7;
    DOOROPENWARNRIOBJTYPE_ASYOBJTYPE_ANIMAL = 8;
    DOOROPENWARNRIOBJTYPE_ASYOBJTYPE_UNKNOWN = 9;
  }
  enum DrvgAstOnSysStsType {
    DRVGASTONSYSSTS_DRVGASTONSYSSTS_DEFAULT = 0;
    DRVGASTONSYSSTS_DRVGASTONSYSSTS_OFF = 1;
    DRVGASTONSYSSTS_DRVGASTONSYSSTS_STANDBY = 2;
    DRVGASTONSYSSTS_DRVGASTONSYSSTS_WARNING = 3;
    DRVGASTONSYSSTS_DRVGASTONSYSSTS_MRM = 4;
    DRVGASTONSYSSTS_DRVGASTONSYSSTS_STOP = 5;
    DRVGASTONSYSSTS_DRVGASTONSYSSTS_FAILURE = 6;
    DRVGASTONSYSSTS_DRVGASTONSYSSTS_RESERVED1 = 7;
    DRVGASTONSYSSTS_DRVGASTONSYSSTS_RESERVED2 = 8;
    DRVGASTONSYSSTS_DRVGASTONSYSSTS_RESERVED3 = 9;
  }
  // description Message reminder D2D function is available [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_d2_d_avl_rmn = 1;
  // [] [0|1] [initial_value:None]
  optional bool asy_d2_d_avl_rmn_ub = 2;
  // description Message reminder D2D function cannot be activated and why [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_d2_d_deactvd_reasn_mesg = 3;
  // [] [0|1] [initial_value:None]
  optional bool asy_d2_d_deactvd_reasn_mesg_ub = 4;
  // description Message reminder D2D functional boundaries are about to be reached [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_d2_d_distan_msg = 5;
  // [] [0|1] [initial_value:None]
  optional bool asy_d2_d_distan_msg_ub = 6;
  // description Message reminder D2D function is arriving at the toll station [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_d2_d_etc_distan_msg = 7;
  // [] [0|1] [initial_value:None]
  optional bool asy_d2_d_etc_distan_msg_ub = 8;
  // description Message reminder D2D function is about to change lanes due to traffic ahead [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_d2_d_remind_msg = 9;
  // [] [0|1] [initial_value:None]
  optional bool asy_d2_d_remind_msg_ub = 10;
  // description Message reminder D2D functions parking out and parking in [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_d2_d_strt_to_end = 11;
  // [] [0|1] [initial_value:None]
  optional bool asy_d2_d_strt_to_end_ub = 12;
  // description ETC switch confirm [] [0|1] [initial_value:0]
  optional bool asy_etc_traffic_sw_sts = 13;
  // [] [0|1] [initial_value:None]
  optional bool asy_etc_traffic_sw_sts_ub = 14;
  // [] [0|1] [initial_value:None]
  optional bool door_open_warn_ri_obj_ub = 15;
  // description Describe the reletive latent speed of object. [m/s] [-16.0|15.75] [initial_value:64]
  optional double door_open_warn_ri_obj_abs_lat_spd = 16;
  // description Describe the reletive latent speed of object. [] [0|3] [initial_value:0]
  optional DoorOpenWarnRiObjAbsLgtSpdType door_open_warn_ri_obj_abs_lgt_spd = 17;
  // description Describe the confidence of the object type. [Unitless] [0.0|1.0] [initial_value:0]
  optional double door_open_warn_ri_obj_confidence = 18;
  // description Describe the latent distance of object. [m] [-25.0|25.0] [initial_value:250]
  optional double door_open_warn_ri_obj_rlvt_lat_dst = 19;
  // description Describe the longitudinal distance of object. [m] [0.0|150.0] [initial_value:0]
  optional double door_open_warn_ri_obj_rlvt_lgt_dst = 20;
  // description Describe source of reletive latent speed of object. [] [0|3] [initial_value:0]
  optional DoorOpenWarnRiObjSnsrSrcOfAbsLatSpdType door_open_warn_ri_obj_snsr_src_of_abs_lat_spd = 21;
  // description Describe source of reletive longitudinal speed of object. [m/s] [0.0|125.0] [initial_value:0]
  optional double door_open_warn_ri_obj_snsr_src_of_abs_lgt_spd = 22;
  // description Describe the TTC between host vehicle and object. [s] [0.0|6.3500000000000005] [initial_value:127]
  optional double door_open_warn_ri_obj_ttc = 23;
  // description Describe type of object. [] [0|15] [initial_value:9]
  optional DoorOpenWarnRiObjTypeType door_open_warn_ri_obj_type = 24;
  // description Collision Risk(YES/ON) [] [0|1] [initial_value:1]
  optional bool door_open_warn_ri_obj_yes_no1 = 25;
  // description the last try function status [] [0|15] [initial_value:0]
  optional DrvgAstOnSysStsType drvg_ast_on_sys_sts = 26;
  // [] [0|1] [initial_value:None]
  optional bool drvg_ast_on_sys_sts_ub = 27;
}

message ADCU_ZCUCANFD1_FR11_1E0 {
// Control Message
  enum AsyFctLrngMesgType {
    ASYFCTLRNGMESG_ASYFCTLRNGMESG_DEFAULT = 0;
    ASYFCTLRNGMESG_ASYFCTLRNGMESG_LEARNMESSAGE = 1;
    ASYFCTLRNGMESG_ASYFCTLRNGMESG_RESERVED1 = 2;
    ASYFCTLRNGMESG_ASYFCTLRNGMESG_RESERVED2 = 3;
  }
  enum HmiRoadArrow1HmiRoadArrowLaneType {
    HMIROADARROW1HMIROADARROWLANE_LANE_UNASSIGNED = 0;
    HMIROADARROW1HMIROADARROWLANE_LANE_CURRENT = 1;
    HMIROADARROW1HMIROADARROWLANE_LANE_FIRSTLEFT = 2;
    HMIROADARROW1HMIROADARROWLANE_LANE_SECONDLEFT = 3;
    HMIROADARROW1HMIROADARROWLANE_LANE_FIRSTRIGHT = 4;
    HMIROADARROW1HMIROADARROWLANE_LANE_SECONDRIGHT = 5;
  }
  enum HmiRoadArrow1HmiRoadArrowTypType {
    HMIROADARROW1HMIROADARROWTYP_HMIROADARROWTYP_UNKNOWN = 0;
    HMIROADARROW1HMIROADARROWTYP_HMIROADARROWTYP_LEFT = 1;
    HMIROADARROW1HMIROADARROWTYP_HMIROADARROWTYP_RIGHT = 2;
    HMIROADARROW1HMIROADARROWTYP_HMIROADARROWTYP_FORWARD = 3;
    HMIROADARROW1HMIROADARROWTYP_HMIROADARROWTYP_LEFTFORWARD = 4;
    HMIROADARROW1HMIROADARROWTYP_HMIROADARROWTYP_LEFTRIGHT = 5;
    HMIROADARROW1HMIROADARROWTYP_HMIROADARROWTYP_RIGHTFORWARD = 6;
    HMIROADARROW1HMIROADARROWTYP_HMIROADARROWTYP_LEFTRIGHTFORWARD = 7;
    HMIROADARROW1HMIROADARROWTYP_HMIROADARROWTYP_DIAMOND = 8;
    HMIROADARROW1HMIROADARROWTYP_HMIROADARROWTYP_UTURN = 9;
    HMIROADARROW1HMIROADARROWTYP_HMIROADARROWTYP_UTURNFORWARD = 10;
    HMIROADARROW1HMIROADARROWTYP_HMIROADARROWTYP_NODISPLAY = 11;
    HMIROADARROW1HMIROADARROWTYP_HMIROADARROWTYP_RESERVED1 = 12;
    HMIROADARROW1HMIROADARROWTYP_HMIROADARROWTYP_RESERVED2 = 13;
    HMIROADARROW1HMIROADARROWTYP_HMIROADARROWTYP_RESERVED3 = 14;
    HMIROADARROW1HMIROADARROWTYP_HMIROADARROWTYP_RESERVED4 = 15;
  }
  enum HmiRoadArrow2HmiRoadArrowLaneType {
    HMIROADARROW2HMIROADARROWLANE_LANE_UNASSIGNED = 0;
    HMIROADARROW2HMIROADARROWLANE_LANE_CURRENT = 1;
    HMIROADARROW2HMIROADARROWLANE_LANE_FIRSTLEFT = 2;
    HMIROADARROW2HMIROADARROWLANE_LANE_SECONDLEFT = 3;
    HMIROADARROW2HMIROADARROWLANE_LANE_FIRSTRIGHT = 4;
    HMIROADARROW2HMIROADARROWLANE_LANE_SECONDRIGHT = 5;
  }
  enum HmiRoadArrow2HmiRoadArrowTypType {
    HMIROADARROW2HMIROADARROWTYP_HMIROADARROWTYP_UNKNOWN = 0;
    HMIROADARROW2HMIROADARROWTYP_HMIROADARROWTYP_LEFT = 1;
    HMIROADARROW2HMIROADARROWTYP_HMIROADARROWTYP_RIGHT = 2;
    HMIROADARROW2HMIROADARROWTYP_HMIROADARROWTYP_FORWARD = 3;
    HMIROADARROW2HMIROADARROWTYP_HMIROADARROWTYP_LEFTFORWARD = 4;
    HMIROADARROW2HMIROADARROWTYP_HMIROADARROWTYP_LEFTRIGHT = 5;
    HMIROADARROW2HMIROADARROWTYP_HMIROADARROWTYP_RIGHTFORWARD = 6;
    HMIROADARROW2HMIROADARROWTYP_HMIROADARROWTYP_LEFTRIGHTFORWARD = 7;
    HMIROADARROW2HMIROADARROWTYP_HMIROADARROWTYP_DIAMOND = 8;
    HMIROADARROW2HMIROADARROWTYP_HMIROADARROWTYP_UTURN = 9;
    HMIROADARROW2HMIROADARROWTYP_HMIROADARROWTYP_UTURNFORWARD = 10;
    HMIROADARROW2HMIROADARROWTYP_HMIROADARROWTYP_NODISPLAY = 11;
    HMIROADARROW2HMIROADARROWTYP_HMIROADARROWTYP_RESERVED1 = 12;
    HMIROADARROW2HMIROADARROWTYP_HMIROADARROWTYP_RESERVED2 = 13;
    HMIROADARROW2HMIROADARROWTYP_HMIROADARROWTYP_RESERVED3 = 14;
    HMIROADARROW2HMIROADARROWTYP_HMIROADARROWTYP_RESERVED4 = 15;
  }
  enum HmiRoadArrow3HmiRoadArrowLaneType {
    HMIROADARROW3HMIROADARROWLANE_LANE_UNASSIGNED = 0;
    HMIROADARROW3HMIROADARROWLANE_LANE_CURRENT = 1;
    HMIROADARROW3HMIROADARROWLANE_LANE_FIRSTLEFT = 2;
    HMIROADARROW3HMIROADARROWLANE_LANE_SECONDLEFT = 3;
    HMIROADARROW3HMIROADARROWLANE_LANE_FIRSTRIGHT = 4;
    HMIROADARROW3HMIROADARROWLANE_LANE_SECONDRIGHT = 5;
  }
  enum HmiRoadArrow3HmiRoadArrowTypType {
    HMIROADARROW3HMIROADARROWTYP_HMIROADARROWTYP_UNKNOWN = 0;
    HMIROADARROW3HMIROADARROWTYP_HMIROADARROWTYP_LEFT = 1;
    HMIROADARROW3HMIROADARROWTYP_HMIROADARROWTYP_RIGHT = 2;
    HMIROADARROW3HMIROADARROWTYP_HMIROADARROWTYP_FORWARD = 3;
    HMIROADARROW3HMIROADARROWTYP_HMIROADARROWTYP_LEFTFORWARD = 4;
    HMIROADARROW3HMIROADARROWTYP_HMIROADARROWTYP_LEFTRIGHT = 5;
    HMIROADARROW3HMIROADARROWTYP_HMIROADARROWTYP_RIGHTFORWARD = 6;
    HMIROADARROW3HMIROADARROWTYP_HMIROADARROWTYP_LEFTRIGHTFORWARD = 7;
    HMIROADARROW3HMIROADARROWTYP_HMIROADARROWTYP_DIAMOND = 8;
    HMIROADARROW3HMIROADARROWTYP_HMIROADARROWTYP_UTURN = 9;
    HMIROADARROW3HMIROADARROWTYP_HMIROADARROWTYP_UTURNFORWARD = 10;
    HMIROADARROW3HMIROADARROWTYP_HMIROADARROWTYP_NODISPLAY = 11;
    HMIROADARROW3HMIROADARROWTYP_HMIROADARROWTYP_RESERVED1 = 12;
    HMIROADARROW3HMIROADARROWTYP_HMIROADARROWTYP_RESERVED2 = 13;
    HMIROADARROW3HMIROADARROWTYP_HMIROADARROWTYP_RESERVED3 = 14;
    HMIROADARROW3HMIROADARROWTYP_HMIROADARROWTYP_RESERVED4 = 15;
  }
  enum HmiRoadArrow4HmiRoadArrowLaneType {
    HMIROADARROW4HMIROADARROWLANE_LANE_UNASSIGNED = 0;
    HMIROADARROW4HMIROADARROWLANE_LANE_CURRENT = 1;
    HMIROADARROW4HMIROADARROWLANE_LANE_FIRSTLEFT = 2;
    HMIROADARROW4HMIROADARROWLANE_LANE_SECONDLEFT = 3;
    HMIROADARROW4HMIROADARROWLANE_LANE_FIRSTRIGHT = 4;
    HMIROADARROW4HMIROADARROWLANE_LANE_SECONDRIGHT = 5;
  }
  enum HmiRoadArrow4HmiRoadArrowTypType {
    HMIROADARROW4HMIROADARROWTYP_HMIROADARROWTYP_UNKNOWN = 0;
    HMIROADARROW4HMIROADARROWTYP_HMIROADARROWTYP_LEFT = 1;
    HMIROADARROW4HMIROADARROWTYP_HMIROADARROWTYP_RIGHT = 2;
    HMIROADARROW4HMIROADARROWTYP_HMIROADARROWTYP_FORWARD = 3;
    HMIROADARROW4HMIROADARROWTYP_HMIROADARROWTYP_LEFTFORWARD = 4;
    HMIROADARROW4HMIROADARROWTYP_HMIROADARROWTYP_LEFTRIGHT = 5;
    HMIROADARROW4HMIROADARROWTYP_HMIROADARROWTYP_RIGHTFORWARD = 6;
    HMIROADARROW4HMIROADARROWTYP_HMIROADARROWTYP_LEFTRIGHTFORWARD = 7;
    HMIROADARROW4HMIROADARROWTYP_HMIROADARROWTYP_DIAMOND = 8;
    HMIROADARROW4HMIROADARROWTYP_HMIROADARROWTYP_UTURN = 9;
    HMIROADARROW4HMIROADARROWTYP_HMIROADARROWTYP_UTURNFORWARD = 10;
    HMIROADARROW4HMIROADARROWTYP_HMIROADARROWTYP_NODISPLAY = 11;
    HMIROADARROW4HMIROADARROWTYP_HMIROADARROWTYP_RESERVED1 = 12;
    HMIROADARROW4HMIROADARROWTYP_HMIROADARROWTYP_RESERVED2 = 13;
    HMIROADARROW4HMIROADARROWTYP_HMIROADARROWTYP_RESERVED3 = 14;
    HMIROADARROW4HMIROADARROWTYP_HMIROADARROWTYP_RESERVED4 = 15;
  }
  enum HmiRoadArrow5HmiRoadArrowLaneType {
    HMIROADARROW5HMIROADARROWLANE_LANE_UNASSIGNED = 0;
    HMIROADARROW5HMIROADARROWLANE_LANE_CURRENT = 1;
    HMIROADARROW5HMIROADARROWLANE_LANE_FIRSTLEFT = 2;
    HMIROADARROW5HMIROADARROWLANE_LANE_SECONDLEFT = 3;
    HMIROADARROW5HMIROADARROWLANE_LANE_FIRSTRIGHT = 4;
    HMIROADARROW5HMIROADARROWLANE_LANE_SECONDRIGHT = 5;
  }
  enum HmiRoadArrow5HmiRoadArrowTypType {
    HMIROADARROW5HMIROADARROWTYP_HMIROADARROWTYP_UNKNOWN = 0;
    HMIROADARROW5HMIROADARROWTYP_HMIROADARROWTYP_LEFT = 1;
    HMIROADARROW5HMIROADARROWTYP_HMIROADARROWTYP_RIGHT = 2;
    HMIROADARROW5HMIROADARROWTYP_HMIROADARROWTYP_FORWARD = 3;
    HMIROADARROW5HMIROADARROWTYP_HMIROADARROWTYP_LEFTFORWARD = 4;
    HMIROADARROW5HMIROADARROWTYP_HMIROADARROWTYP_LEFTRIGHT = 5;
    HMIROADARROW5HMIROADARROWTYP_HMIROADARROWTYP_RIGHTFORWARD = 6;
    HMIROADARROW5HMIROADARROWTYP_HMIROADARROWTYP_LEFTRIGHTFORWARD = 7;
    HMIROADARROW5HMIROADARROWTYP_HMIROADARROWTYP_DIAMOND = 8;
    HMIROADARROW5HMIROADARROWTYP_HMIROADARROWTYP_UTURN = 9;
    HMIROADARROW5HMIROADARROWTYP_HMIROADARROWTYP_UTURNFORWARD = 10;
    HMIROADARROW5HMIROADARROWTYP_HMIROADARROWTYP_NODISPLAY = 11;
    HMIROADARROW5HMIROADARROWTYP_HMIROADARROWTYP_RESERVED1 = 12;
    HMIROADARROW5HMIROADARROWTYP_HMIROADARROWTYP_RESERVED2 = 13;
    HMIROADARROW5HMIROADARROWTYP_HMIROADARROWTYP_RESERVED3 = 14;
    HMIROADARROW5HMIROADARROWTYP_HMIROADARROWTYP_RESERVED4 = 15;
  }
  enum HmiStaticObj1HmiStaticObjTypType {
    HMISTATICOBJ1HMISTATICOBJTYP_HMISTATICOBJTYP_NODISPLAY = 0;
    HMISTATICOBJ1HMISTATICOBJTYP_HMISTATICOBJTYP_CONE = 1;
    HMISTATICOBJ1HMISTATICOBJTYP_HMISTATICOBJTYP_POLE = 2;
    HMISTATICOBJ1HMISTATICOBJTYP_HMISTATICOBJTYP_REFLECTOR = 3;
    HMISTATICOBJ1HMISTATICOBJTYP_HMISTATICOBJTYP_SIGN = 4;
    HMISTATICOBJ1HMISTATICOBJTYP_HMISTATICOBJTYP_BARREL = 5;
    HMISTATICOBJ1HMISTATICOBJTYP_HMISTATICOBJTYP_TRASHCAN = 6;
    HMISTATICOBJ1HMISTATICOBJTYP_HMISTATICOBJTYP_STROLLER = 7;
    HMISTATICOBJ1HMISTATICOBJTYP_HMISTATICOBJTYP_WHEELCHAIR = 8;
    HMISTATICOBJ1HMISTATICOBJTYP_HMISTATICOBJTYP_SUPERMARKETCART = 9;
    HMISTATICOBJ1HMISTATICOBJTYP_HMISTATICOBJTYP_BOX = 10;
    HMISTATICOBJ1HMISTATICOBJTYP_HMISTATICOBJTYP_BOUNDERY = 11;
    HMISTATICOBJ1HMISTATICOBJTYP_HMISTATICOBJTYP_OTHER = 12;
    HMISTATICOBJ1HMISTATICOBJTYP_HMISTATICOBJTYP_NUMTYPES = 13;
    HMISTATICOBJ1HMISTATICOBJTYP_HMISTATICOBJTYP_RESERVED1 = 14;
    HMISTATICOBJ1HMISTATICOBJTYP_HMISTATICOBJTYP_RESERVED2 = 15;
  }
  enum HmiStaticObj2HmiStaticObjTypType {
    HMISTATICOBJ2HMISTATICOBJTYP_HMISTATICOBJTYP_NODISPLAY = 0;
    HMISTATICOBJ2HMISTATICOBJTYP_HMISTATICOBJTYP_CONE = 1;
    HMISTATICOBJ2HMISTATICOBJTYP_HMISTATICOBJTYP_POLE = 2;
    HMISTATICOBJ2HMISTATICOBJTYP_HMISTATICOBJTYP_REFLECTOR = 3;
    HMISTATICOBJ2HMISTATICOBJTYP_HMISTATICOBJTYP_SIGN = 4;
    HMISTATICOBJ2HMISTATICOBJTYP_HMISTATICOBJTYP_BARREL = 5;
    HMISTATICOBJ2HMISTATICOBJTYP_HMISTATICOBJTYP_TRASHCAN = 6;
    HMISTATICOBJ2HMISTATICOBJTYP_HMISTATICOBJTYP_STROLLER = 7;
    HMISTATICOBJ2HMISTATICOBJTYP_HMISTATICOBJTYP_WHEELCHAIR = 8;
    HMISTATICOBJ2HMISTATICOBJTYP_HMISTATICOBJTYP_SUPERMARKETCART = 9;
    HMISTATICOBJ2HMISTATICOBJTYP_HMISTATICOBJTYP_BOX = 10;
    HMISTATICOBJ2HMISTATICOBJTYP_HMISTATICOBJTYP_BOUNDERY = 11;
    HMISTATICOBJ2HMISTATICOBJTYP_HMISTATICOBJTYP_OTHER = 12;
    HMISTATICOBJ2HMISTATICOBJTYP_HMISTATICOBJTYP_NUMTYPES = 13;
    HMISTATICOBJ2HMISTATICOBJTYP_HMISTATICOBJTYP_RESERVED1 = 14;
    HMISTATICOBJ2HMISTATICOBJTYP_HMISTATICOBJTYP_RESERVED2 = 15;
  }
  enum HmiStaticObj3HmiStaticObjTypType {
    HMISTATICOBJ3HMISTATICOBJTYP_HMISTATICOBJTYP_NODISPLAY = 0;
    HMISTATICOBJ3HMISTATICOBJTYP_HMISTATICOBJTYP_CONE = 1;
    HMISTATICOBJ3HMISTATICOBJTYP_HMISTATICOBJTYP_POLE = 2;
    HMISTATICOBJ3HMISTATICOBJTYP_HMISTATICOBJTYP_REFLECTOR = 3;
    HMISTATICOBJ3HMISTATICOBJTYP_HMISTATICOBJTYP_SIGN = 4;
    HMISTATICOBJ3HMISTATICOBJTYP_HMISTATICOBJTYP_BARREL = 5;
    HMISTATICOBJ3HMISTATICOBJTYP_HMISTATICOBJTYP_TRASHCAN = 6;
    HMISTATICOBJ3HMISTATICOBJTYP_HMISTATICOBJTYP_STROLLER = 7;
    HMISTATICOBJ3HMISTATICOBJTYP_HMISTATICOBJTYP_WHEELCHAIR = 8;
    HMISTATICOBJ3HMISTATICOBJTYP_HMISTATICOBJTYP_SUPERMARKETCART = 9;
    HMISTATICOBJ3HMISTATICOBJTYP_HMISTATICOBJTYP_BOX = 10;
    HMISTATICOBJ3HMISTATICOBJTYP_HMISTATICOBJTYP_BOUNDERY = 11;
    HMISTATICOBJ3HMISTATICOBJTYP_HMISTATICOBJTYP_OTHER = 12;
    HMISTATICOBJ3HMISTATICOBJTYP_HMISTATICOBJTYP_NUMTYPES = 13;
    HMISTATICOBJ3HMISTATICOBJTYP_HMISTATICOBJTYP_RESERVED1 = 14;
    HMISTATICOBJ3HMISTATICOBJTYP_HMISTATICOBJTYP_RESERVED2 = 15;
  }
  enum HmiStaticObj4HmiStaticObjTypType {
    HMISTATICOBJ4HMISTATICOBJTYP_HMISTATICOBJTYP_NODISPLAY = 0;
    HMISTATICOBJ4HMISTATICOBJTYP_HMISTATICOBJTYP_CONE = 1;
    HMISTATICOBJ4HMISTATICOBJTYP_HMISTATICOBJTYP_POLE = 2;
    HMISTATICOBJ4HMISTATICOBJTYP_HMISTATICOBJTYP_REFLECTOR = 3;
    HMISTATICOBJ4HMISTATICOBJTYP_HMISTATICOBJTYP_SIGN = 4;
    HMISTATICOBJ4HMISTATICOBJTYP_HMISTATICOBJTYP_BARREL = 5;
    HMISTATICOBJ4HMISTATICOBJTYP_HMISTATICOBJTYP_TRASHCAN = 6;
    HMISTATICOBJ4HMISTATICOBJTYP_HMISTATICOBJTYP_STROLLER = 7;
    HMISTATICOBJ4HMISTATICOBJTYP_HMISTATICOBJTYP_WHEELCHAIR = 8;
    HMISTATICOBJ4HMISTATICOBJTYP_HMISTATICOBJTYP_SUPERMARKETCART = 9;
    HMISTATICOBJ4HMISTATICOBJTYP_HMISTATICOBJTYP_BOX = 10;
    HMISTATICOBJ4HMISTATICOBJTYP_HMISTATICOBJTYP_BOUNDERY = 11;
    HMISTATICOBJ4HMISTATICOBJTYP_HMISTATICOBJTYP_OTHER = 12;
    HMISTATICOBJ4HMISTATICOBJTYP_HMISTATICOBJTYP_NUMTYPES = 13;
    HMISTATICOBJ4HMISTATICOBJTYP_HMISTATICOBJTYP_RESERVED1 = 14;
    HMISTATICOBJ4HMISTATICOBJTYP_HMISTATICOBJTYP_RESERVED2 = 15;
  }
  enum HmiStaticObj5HmiStaticObjTypType {
    HMISTATICOBJ5HMISTATICOBJTYP_HMISTATICOBJTYP_NODISPLAY = 0;
    HMISTATICOBJ5HMISTATICOBJTYP_HMISTATICOBJTYP_CONE = 1;
    HMISTATICOBJ5HMISTATICOBJTYP_HMISTATICOBJTYP_POLE = 2;
    HMISTATICOBJ5HMISTATICOBJTYP_HMISTATICOBJTYP_REFLECTOR = 3;
    HMISTATICOBJ5HMISTATICOBJTYP_HMISTATICOBJTYP_SIGN = 4;
    HMISTATICOBJ5HMISTATICOBJTYP_HMISTATICOBJTYP_BARREL = 5;
    HMISTATICOBJ5HMISTATICOBJTYP_HMISTATICOBJTYP_TRASHCAN = 6;
    HMISTATICOBJ5HMISTATICOBJTYP_HMISTATICOBJTYP_STROLLER = 7;
    HMISTATICOBJ5HMISTATICOBJTYP_HMISTATICOBJTYP_WHEELCHAIR = 8;
    HMISTATICOBJ5HMISTATICOBJTYP_HMISTATICOBJTYP_SUPERMARKETCART = 9;
    HMISTATICOBJ5HMISTATICOBJTYP_HMISTATICOBJTYP_BOX = 10;
    HMISTATICOBJ5HMISTATICOBJTYP_HMISTATICOBJTYP_BOUNDERY = 11;
    HMISTATICOBJ5HMISTATICOBJTYP_HMISTATICOBJTYP_OTHER = 12;
    HMISTATICOBJ5HMISTATICOBJTYP_HMISTATICOBJTYP_NUMTYPES = 13;
    HMISTATICOBJ5HMISTATICOBJTYP_HMISTATICOBJTYP_RESERVED1 = 14;
    HMISTATICOBJ5HMISTATICOBJTYP_HMISTATICOBJTYP_RESERVED2 = 15;
  }
  enum HmiStaticObj6HmiStaticObjTypType {
    HMISTATICOBJ6HMISTATICOBJTYP_HMISTATICOBJTYP_NODISPLAY = 0;
    HMISTATICOBJ6HMISTATICOBJTYP_HMISTATICOBJTYP_CONE = 1;
    HMISTATICOBJ6HMISTATICOBJTYP_HMISTATICOBJTYP_POLE = 2;
    HMISTATICOBJ6HMISTATICOBJTYP_HMISTATICOBJTYP_REFLECTOR = 3;
    HMISTATICOBJ6HMISTATICOBJTYP_HMISTATICOBJTYP_SIGN = 4;
    HMISTATICOBJ6HMISTATICOBJTYP_HMISTATICOBJTYP_BARREL = 5;
    HMISTATICOBJ6HMISTATICOBJTYP_HMISTATICOBJTYP_TRASHCAN = 6;
    HMISTATICOBJ6HMISTATICOBJTYP_HMISTATICOBJTYP_STROLLER = 7;
    HMISTATICOBJ6HMISTATICOBJTYP_HMISTATICOBJTYP_WHEELCHAIR = 8;
    HMISTATICOBJ6HMISTATICOBJTYP_HMISTATICOBJTYP_SUPERMARKETCART = 9;
    HMISTATICOBJ6HMISTATICOBJTYP_HMISTATICOBJTYP_BOX = 10;
    HMISTATICOBJ6HMISTATICOBJTYP_HMISTATICOBJTYP_BOUNDERY = 11;
    HMISTATICOBJ6HMISTATICOBJTYP_HMISTATICOBJTYP_OTHER = 12;
    HMISTATICOBJ6HMISTATICOBJTYP_HMISTATICOBJTYP_NUMTYPES = 13;
    HMISTATICOBJ6HMISTATICOBJTYP_HMISTATICOBJTYP_RESERVED1 = 14;
    HMISTATICOBJ6HMISTATICOBJTYP_HMISTATICOBJTYP_RESERVED2 = 15;
  }
  enum HmiStaticObj7HmiStaticObjTypType {
    HMISTATICOBJ7HMISTATICOBJTYP_HMISTATICOBJTYP_NODISPLAY = 0;
    HMISTATICOBJ7HMISTATICOBJTYP_HMISTATICOBJTYP_CONE = 1;
    HMISTATICOBJ7HMISTATICOBJTYP_HMISTATICOBJTYP_POLE = 2;
    HMISTATICOBJ7HMISTATICOBJTYP_HMISTATICOBJTYP_REFLECTOR = 3;
    HMISTATICOBJ7HMISTATICOBJTYP_HMISTATICOBJTYP_SIGN = 4;
    HMISTATICOBJ7HMISTATICOBJTYP_HMISTATICOBJTYP_BARREL = 5;
    HMISTATICOBJ7HMISTATICOBJTYP_HMISTATICOBJTYP_TRASHCAN = 6;
    HMISTATICOBJ7HMISTATICOBJTYP_HMISTATICOBJTYP_STROLLER = 7;
    HMISTATICOBJ7HMISTATICOBJTYP_HMISTATICOBJTYP_WHEELCHAIR = 8;
    HMISTATICOBJ7HMISTATICOBJTYP_HMISTATICOBJTYP_SUPERMARKETCART = 9;
    HMISTATICOBJ7HMISTATICOBJTYP_HMISTATICOBJTYP_BOX = 10;
    HMISTATICOBJ7HMISTATICOBJTYP_HMISTATICOBJTYP_BOUNDERY = 11;
    HMISTATICOBJ7HMISTATICOBJTYP_HMISTATICOBJTYP_OTHER = 12;
    HMISTATICOBJ7HMISTATICOBJTYP_HMISTATICOBJTYP_NUMTYPES = 13;
    HMISTATICOBJ7HMISTATICOBJTYP_HMISTATICOBJTYP_RESERVED1 = 14;
    HMISTATICOBJ7HMISTATICOBJTYP_HMISTATICOBJTYP_RESERVED2 = 15;
  }
  enum HmiStaticObj8HmiStaticObjTypType {
    HMISTATICOBJ8HMISTATICOBJTYP_HMISTATICOBJTYP_NODISPLAY = 0;
    HMISTATICOBJ8HMISTATICOBJTYP_HMISTATICOBJTYP_CONE = 1;
    HMISTATICOBJ8HMISTATICOBJTYP_HMISTATICOBJTYP_POLE = 2;
    HMISTATICOBJ8HMISTATICOBJTYP_HMISTATICOBJTYP_REFLECTOR = 3;
    HMISTATICOBJ8HMISTATICOBJTYP_HMISTATICOBJTYP_SIGN = 4;
    HMISTATICOBJ8HMISTATICOBJTYP_HMISTATICOBJTYP_BARREL = 5;
    HMISTATICOBJ8HMISTATICOBJTYP_HMISTATICOBJTYP_TRASHCAN = 6;
    HMISTATICOBJ8HMISTATICOBJTYP_HMISTATICOBJTYP_STROLLER = 7;
    HMISTATICOBJ8HMISTATICOBJTYP_HMISTATICOBJTYP_WHEELCHAIR = 8;
    HMISTATICOBJ8HMISTATICOBJTYP_HMISTATICOBJTYP_SUPERMARKETCART = 9;
    HMISTATICOBJ8HMISTATICOBJTYP_HMISTATICOBJTYP_BOX = 10;
    HMISTATICOBJ8HMISTATICOBJTYP_HMISTATICOBJTYP_BOUNDERY = 11;
    HMISTATICOBJ8HMISTATICOBJTYP_HMISTATICOBJTYP_OTHER = 12;
    HMISTATICOBJ8HMISTATICOBJTYP_HMISTATICOBJTYP_NUMTYPES = 13;
    HMISTATICOBJ8HMISTATICOBJTYP_HMISTATICOBJTYP_RESERVED1 = 14;
    HMISTATICOBJ8HMISTATICOBJTYP_HMISTATICOBJTYP_RESERVED2 = 15;
  }
  enum ReSideCamLeSts0Type {
    RESIDECAMLESTS0_RSDSMSTST_CFG = 0;
    RESIDECAMLESTS0_RSDSMSTST_STRTUP = 1;
    RESIDECAMLESTS0_RSDSMSTST_RUNNG = 2;
    RESIDECAMLESTS0_RSDSMSTST_BLKD = 3;
    RESIDECAMLESTS0_RSDSMSTST_FAULTY = 4;
    RESIDECAMLESTS0_RSDSMSTST_SHUTDOWN = 5;
    RESIDECAMLESTS0_RSDSMSTST_HOT = 6;
    RESIDECAMLESTS0_RSDSMSTST_CAL = 7;
  }
  enum ReSideCamRiSts0Type {
    RESIDECAMRISTS0_RSDSMSTST_CFG = 0;
    RESIDECAMRISTS0_RSDSMSTST_STRTUP = 1;
    RESIDECAMRISTS0_RSDSMSTST_RUNNG = 2;
    RESIDECAMRISTS0_RSDSMSTST_BLKD = 3;
    RESIDECAMRISTS0_RSDSMSTST_FAULTY = 4;
    RESIDECAMRISTS0_RSDSMSTST_SHUTDOWN = 5;
    RESIDECAMRISTS0_RSDSMSTST_HOT = 6;
    RESIDECAMRISTS0_RSDSMSTST_CAL = 7;
  }
  enum SelfLaneColorType {
    SELFLANECOLOR_SELFLANECOLOR_LOWLIGHT = 0;
    SELFLANECOLOR_SELFLANECOLOR_HIGHLLIGHT = 1;
    SELFLANECOLOR_SELFLANECOLOR_RESERVED = 2;
  }
  enum TPTFAudioRmdType {
    TPTFAUDIORMD_TPTFAUDIORMD_NOAUDIO = 0;
    TPTFAUDIORMD_TPTFAUDIORMD_AUDIO1 = 1;
    TPTFAUDIORMD_TPTFAUDIORMD_AUDIO2 = 2;
    TPTFAUDIORMD_TPTFAUDIORMD_AUDIO3 = 3;
    TPTFAUDIORMD_TPTFAUDIORMD_AUDIO4 = 4;
    TPTFAUDIORMD_TPTFAUDIORMD_AUDIO5 = 5;
    TPTFAUDIORMD_TPTFAUDIORMD_AUDIO6 = 6;
    TPTFAUDIORMD_TPTFAUDIORMD_RESERVED = 7;
  }
  enum TPTFstatusErrorType {
    TPTFSTATUSERROR_TPTFSTATUSERROR_DEFAULT = 0;
    TPTFSTATUSERROR_TPTFSTATUSERROR_NOWORK = 1;
    TPTFSTATUSERROR_TPTFSTATUSERROR_NOPROFILE = 2;
    TPTFSTATUSERROR_TPTFSTATUSERROR_RESERVED = 3;
  }
  enum TPTFUserRptType {
    TPTFUSERRPT_TPTFUSERRPT_DEFAULT = 0;
    TPTFUSERRPT_TPTFUSERRPT_NOTHIDE = 1;
    TPTFUSERRPT_TPTFUSERRPT_HIDE = 2;
    TPTFUSERRPT_TPTFUSERRPT_RESERVED = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool hmi_road_arrow1_ub = 1;
  // description Road arrow lane relevancy [] [0|7] [initial_value:0]
  optional HmiRoadArrow1HmiRoadArrowLaneType hmi_road_arrow1_hmi_road_arrow_lane = 2;
  // description Type of road arrow [] [0|15] [initial_value:0]
  optional HmiRoadArrow1HmiRoadArrowTypType hmi_road_arrow1_hmi_road_arrow_typ = 3;
  // description The lateral position of a road arrow. [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_road_arrow1_lat_position = 4;
  // description The longitudinal position of a road arrow. [m] [0.0|200.0] [initial_value:0]
  optional double hmi_road_arrow1_long_position = 5;
  // [] [0|1] [initial_value:None]
  optional bool hmi_road_arrow2_ub = 6;
  // description Road arrow lane relevancy [] [0|7] [initial_value:0]
  optional HmiRoadArrow2HmiRoadArrowLaneType hmi_road_arrow2_hmi_road_arrow_lane = 7;
  // description Type of road arrow [] [0|15] [initial_value:0]
  optional HmiRoadArrow2HmiRoadArrowTypType hmi_road_arrow2_hmi_road_arrow_typ = 8;
  // description The lateral position of a road arrow. [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_road_arrow2_lat_position = 9;
  // description The longitudinal position of a road arrow. [m] [0.0|200.0] [initial_value:0]
  optional double hmi_road_arrow2_long_position = 10;
  // [] [0|1] [initial_value:None]
  optional bool hmi_road_arrow3_ub = 11;
  // description Road arrow lane relevancy [] [0|7] [initial_value:0]
  optional HmiRoadArrow3HmiRoadArrowLaneType hmi_road_arrow3_hmi_road_arrow_lane = 12;
  // description Type of road arrow [] [0|15] [initial_value:0]
  optional HmiRoadArrow3HmiRoadArrowTypType hmi_road_arrow3_hmi_road_arrow_typ = 13;
  // description The lateral position of a road arrow. [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_road_arrow3_lat_position = 14;
  // description The longitudinal position of a road arrow. [m] [0.0|200.0] [initial_value:0]
  optional double hmi_road_arrow3_long_position = 15;
  // [] [0|1] [initial_value:None]
  optional bool hmi_road_arrow4_ub = 16;
  // description Road arrow lane relevancy [] [0|7] [initial_value:0]
  optional HmiRoadArrow4HmiRoadArrowLaneType hmi_road_arrow4_hmi_road_arrow_lane = 17;
  // description Type of road arrow [] [0|15] [initial_value:0]
  optional HmiRoadArrow4HmiRoadArrowTypType hmi_road_arrow4_hmi_road_arrow_typ = 18;
  // description The lateral position of a road arrow. [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_road_arrow4_lat_position = 19;
  // description The longitudinal position of a road arrow. [m] [0.0|200.0] [initial_value:0]
  optional double hmi_road_arrow4_long_position = 20;
  // [] [0|1] [initial_value:None]
  optional bool hmi_road_arrow5_ub = 21;
  // description Road arrow lane relevancy [] [0|7] [initial_value:0]
  optional HmiRoadArrow5HmiRoadArrowLaneType hmi_road_arrow5_hmi_road_arrow_lane = 22;
  // description Type of road arrow [] [0|15] [initial_value:0]
  optional HmiRoadArrow5HmiRoadArrowTypType hmi_road_arrow5_hmi_road_arrow_typ = 23;
  // description The lateral position of a road arrow. [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_road_arrow5_lat_position = 24;
  // description The longitudinal position of a road arrow. [m] [0.0|200.0] [initial_value:0]
  optional double hmi_road_arrow5_long_position = 25;
  // [] [0|1] [initial_value:None]
  optional bool hmi_static_obj1_ub = 26;
  // description the information of static object 1 [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_static_obj1_dst_lat_of_static_obj = 27;
  // description the information of static object 1 [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_static_obj1_dst_lgt_of_static_obj = 28;
  // description the information of static object 1 [] [0|15] [initial_value:0]
  optional HmiStaticObj1HmiStaticObjTypType hmi_static_obj1_hmi_static_obj_typ = 29;
  // [] [0|1] [initial_value:None]
  optional bool hmi_static_obj2_ub = 30;
  // description the information of static object 1 [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_static_obj2_dst_lat_of_static_obj = 31;
  // description the information of static object 1 [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_static_obj2_dst_lgt_of_static_obj = 32;
  // description the information of static object 1 [] [0|15] [initial_value:0]
  optional HmiStaticObj2HmiStaticObjTypType hmi_static_obj2_hmi_static_obj_typ = 33;
  // [] [0|1] [initial_value:None]
  optional bool hmi_static_obj3_ub = 34;
  // description the information of static object 1 [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_static_obj3_dst_lat_of_static_obj = 35;
  // description the information of static object 1 [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_static_obj3_dst_lgt_of_static_obj = 36;
  // description the information of static object 1 [] [0|15] [initial_value:0]
  optional HmiStaticObj3HmiStaticObjTypType hmi_static_obj3_hmi_static_obj_typ = 37;
  // [] [0|1] [initial_value:None]
  optional bool hmi_static_obj4_ub = 38;
  // description the information of static object 1 [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_static_obj4_dst_lat_of_static_obj = 39;
  // description the information of static object 1 [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_static_obj4_dst_lgt_of_static_obj = 40;
  // description the information of static object 1 [] [0|15] [initial_value:0]
  optional HmiStaticObj4HmiStaticObjTypType hmi_static_obj4_hmi_static_obj_typ = 41;
  // [] [0|1] [initial_value:None]
  optional bool hmi_static_obj5_ub = 42;
  // description the information of static object 1 [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_static_obj5_dst_lat_of_static_obj = 43;
  // description the information of static object 1 [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_static_obj5_dst_lgt_of_static_obj = 44;
  // description the information of static object 1 [] [0|15] [initial_value:0]
  optional HmiStaticObj5HmiStaticObjTypType hmi_static_obj5_hmi_static_obj_typ = 45;
  // [] [0|1] [initial_value:None]
  optional bool hmi_static_obj6_ub = 46;
  // description the information of static object 1 [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_static_obj6_dst_lat_of_static_obj = 47;
  // description the information of static object 1 [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_static_obj6_dst_lgt_of_static_obj = 48;
  // description the information of static object 1 [] [0|15] [initial_value:0]
  optional HmiStaticObj6HmiStaticObjTypType hmi_static_obj6_hmi_static_obj_typ = 49;
  // [] [0|1] [initial_value:None]
  optional bool hmi_static_obj7_ub = 50;
  // description the information of static object 1 [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_static_obj7_dst_lat_of_static_obj = 51;
  // description the information of static object 1 [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_static_obj7_dst_lgt_of_static_obj = 52;
  // description the information of static object 1 [] [0|15] [initial_value:0]
  optional HmiStaticObj7HmiStaticObjTypType hmi_static_obj7_hmi_static_obj_typ = 53;
  // [] [0|1] [initial_value:None]
  optional bool hmi_static_obj8_ub = 54;
  // description the information of static object 1 [m] [-25.0|25.0] [initial_value:250]
  optional double hmi_static_obj8_dst_lat_of_static_obj = 55;
  // description the information of static object 1 [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_static_obj8_dst_lgt_of_static_obj = 56;
  // description the information of static object 1 [] [0|15] [initial_value:0]
  optional HmiStaticObj8HmiStaticObjTypType hmi_static_obj8_hmi_static_obj_typ = 57;
  // [] [0|1] [initial_value:None]
  optional bool hmi_stop_line_ub = 58;
  // description Confidence of the stop line information. [Unitless] [0.0|1.0] [initial_value:0]
  optional double hmi_stop_line_confidence = 59;
  // description Distance in meters to the detected stop line. [m] [-10.0|50.0] [initial_value:100]
  optional double hmi_stop_line_distance_to_stop_line = 60;
  // description Indicated if stop line is detected in front of the host. [] [0|1] [initial_value:0]
  optional bool hmi_stop_line_stop_line_present = 61;
  // description TimeStamp [s] [0.0|429496.7295] [initial_value:0]
  optional double hmi_stop_line_ti_stamp = 62;
  // description HpaToAppPush [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 hpa_to_app_push = 63;
  // [] [0|1] [initial_value:None]
  optional bool hpa_to_app_push_ub = 64;
  // description HpaToAppResp [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 hpa_to_app_resp = 65;
  // [] [0|1] [initial_value:None]
  optional bool hpa_to_app_resp_ub = 66;
  // description Key location Request [] [0|1] [initial_value:0]
  optional bool key_locn_req = 67;
  // [] [0|1] [initial_value:None]
  optional bool key_locn_req_ub = 68;
  // description Rear Left Side Camera status for display [] [0|7] [initial_value:0]
  optional ReSideCamLeSts0Type re_side_cam_le_sts0 = 69;
  // [] [0|1] [initial_value:None]
  optional bool re_side_cam_le_sts0_ub = 70;
  // description Rear Right Side Camera status for display [] [0|7] [initial_value:0]
  optional ReSideCamRiSts0Type re_side_cam_ri_sts0 = 71;
  // [] [0|1] [initial_value:None]
  optional bool re_side_cam_ri_sts0_ub = 72;
  // description Status signal which indicates the color of ego lane. [] [0|7] [initial_value:0]
  optional SelfLaneColorType self_lane_color = 73;
  // [] [0|1] [initial_value:None]
  optional bool self_lane_color_ub = 74;
  // description Control the TPTF Audio broadcast [] [0|7] [initial_value:0]
  optional TPTFAudioRmdType tptf_audio_rmd = 75;
  // [] [0|1] [initial_value:None]
  optional bool tptf_audio_rmd_ub = 76;
  // description Show the content of user report [Unitless] [0.0|524287.0] [initial_value:0]
  optional uint32 tptf_rpt_data = 77;
  // [] [0|1] [initial_value:None]
  optional bool tptf_rpt_data_ub = 78;
  // description Show the mileage of TPTF learning the driving habits [km] [0.0|999999.0] [initial_value:0]
  optional double tptf_rpt_km = 79;
  // [] [0|1] [initial_value:None]
  optional bool tptf_rpt_km_ub = 80;
  // description Show the time of TPTF learning the driving habits [hours] [0.0|99999.0] [initial_value:0]
  optional double tptf_rpt_time = 81;
  // [] [0|1] [initial_value:None]
  optional bool tptf_rpt_time_ub = 82;
  // description Show the status of TPTF function [] [0|1] [initial_value:0]
  optional bool tpt_fstatus = 83;
  // [] [0|1] [initial_value:None]
  optional bool tpt_fstatus_ub = 84;
  // description Show the Error status of TPTF function [] [0|3] [initial_value:0]
  optional TPTFstatusErrorType tpt_fstatus_error = 85;
  // [] [0|1] [initial_value:None]
  optional bool tpt_fstatus_error_ub = 86;
  // description Lets you control whether the User Report button is displayed [] [0|3] [initial_value:0]
  optional TPTFUserRptType tptf_user_rpt = 87;
  // [] [0|1] [initial_value:None]
  optional bool tptf_user_rpt_ub = 88;
  // description ADAS function learning message signal [] [0|3] [initial_value:0]
  optional AsyFctLrngMesgType asy_fct_lrng_mesg = 89;
  // [] [0|1] [initial_value:None]
  optional bool asy_fct_lrng_mesg_ub = 90;
  // description Jam road mode classical Chinese [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 trfc_jam_warn = 91;
  // [] [0|1] [initial_value:None]
  optional bool trfc_jam_warn_ub = 92;
}

message BCM_ZCUCANFD1_FR03_1E3 {
// Report Message
  enum AsyActrActvForLgtCtrlType {
    ASYACTRACTVFORLGTCTRL_ACTRACTVFORLGTCTRL_ACTRNOTENADFORCMFT = 0;
    ASYACTRACTVFORLGTCTRL_ACTRACTVFORLGTCTRL_PRPSNACTRENADFORCMFT = 1;
    ASYACTRACTVFORLGTCTRL_ACTRACTVFORLGTCTRL_BRKACTRENADFORCMFT = 2;
  }
  enum BrkPedlrRatQfType {
    BRKPEDLRRATQF_GENQF1_UNDEFINDDATAACCUR = 0;
    BRKPEDLRRATQF_GENQF1_TMPUNDEFDDATA = 1;
    BRKPEDLRRATQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    BRKPEDLRRATQF_GENQF1_ACCURDATA = 3;
  }
  enum MsgReqByHillDwnCtrlType {
    MSGREQBYHILLDWNCTRL_MSGREQBYHILLDWNCTRL1_MSGFORHILLDWNCTRLNOTREQD = 0;
    MSGREQBYHILLDWNCTRL_MSGREQBYHILLDWNCTRL1_MSGFORHILLDWNCTRLONREQD = 1;
    MSGREQBYHILLDWNCTRL_MSGREQBYHILLDWNCTRL1_MSGFORHILLDWNCTRLREQDFORBRKG = 2;
    MSGREQBYHILLDWNCTRL_MSGREQBYHILLDWNCTRL1_MSGFORHILLDWNCTRLTMPOFFREQD = 3;
    MSGREQBYHILLDWNCTRL_MSGREQBYHILLDWNCTRL1_RESD4 = 4;
    MSGREQBYHILLDWNCTRL_MSGREQBYHILLDWNCTRL1_RESD5 = 5;
    MSGREQBYHILLDWNCTRL_MSGREQBYHILLDWNCTRL1_RESD6 = 6;
    MSGREQBYHILLDWNCTRL_MSGREQBYHILLDWNCTRL1_RESD7 = 7;
  }
  // description Indicates if the ABS function is temporarily or permantly disabled due to a failure. [] [0|1] [initial_value:0]
  optional bool abs_sts = 1;
  // [] [0|1] [initial_value:None]
  optional bool abs_sts_ub = 2;
  // description Signals which longitudinal actuator that is actively controlling the vehicle for autonomous driving. [] [0|3] [initial_value:0]
  optional AsyActrActvForLgtCtrlType asy_actr_actv_for_lgt_ctrl = 3;
  // [] [0|1] [initial_value:None]
  optional bool asy_actr_actv_for_lgt_ctrl_ub = 4;
  // description Signal indicating that autonomous braking in safety critical situation is allowed by vehicle dynamics. [] [0|1] [initial_value:0]
  optional bool asy_sfty_decel_enad_by_veh_dyn = 5;
  // [] [0|1] [initial_value:None]
  optional bool asy_sfty_decel_enad_by_veh_dyn_ub = 6;
  // description Acknowledged signal from receiver for Brake gain enable signal. Acknowledged signal from receiver for enable signal for deceleration in safety critical situation. [] [0|1] [initial_value:0]
  optional bool asy_sfty_ena_decel_ackd = 7;
  // [] [0|1] [initial_value:None]
  optional bool asy_sfty_ena_decel_ackd_ub = 8;
  // [] [0|1] [initial_value:None]
  optional bool brk_pedlr_rat_ub = 9;
  // description Brake pedal Ratio in percentage value [%] [0.0|100.0] [initial_value:0]
  optional double brk_pedlr_rat_perc = 10;
  // description quality factor [] [0|3] [initial_value:0]
  optional BrkPedlrRatQfType brk_pedlr_rat_qf = 11;
  // description service brake deceleration request response flag [] [0|1] [initial_value:0]
  optional bool inhb_of_asy_sfty_decel_by_veh_dyn = 12;
  // [] [0|1] [initial_value:None]
  optional bool inhb_of_asy_sfty_decel_by_veh_dyn_ub = 13;
  // description Text message request from HDC function for driver information about current HDC state. [] [0|7] [initial_value:0]
  optional MsgReqByHillDwnCtrlType msg_req_by_hill_dwn_ctrl = 14;
  // [] [0|1] [initial_value:None]
  optional bool msg_req_by_hill_dwn_ctrl_ub = 15;
  // description RCTA brake response flag [] [0|1] [initial_value:0]
  optional bool rcta_brk_actvd = 16;
  // [] [0|1] [initial_value:None]
  optional bool rcta_brk_actvd_ub = 17;
  // description RCWM brake actuation is activated. [] [0|1] [initial_value:0]
  optional bool rcwm_brk_actvd = 18;
  // [] [0|1] [initial_value:None]
  optional bool rcwm_brk_actvd_ub = 19;
}

message DHU_ZCUCANFD1_FR01_1E8 {
// Report Message
  enum AutoLaneChgStyleSwStsType {
    AUTOLANECHGSTYLESWSTS_HMIAUTOLANECHGSTYLE_NORMAL = 0;
    AUTOLANECHGSTYLESWSTS_HMIAUTOLANECHGSTYLE_GENTLE = 1;
    AUTOLANECHGSTYLESWSTS_HMIAUTOLANECHGSTYLE_RAPID = 2;
    AUTOLANECHGSTYLESWSTS_HMIAUTOLANECHGSTYLE_FAULT = 3;
  }
  enum AutValtPrkgExperienceRespType {
    AUTVALTPRKGEXPERIENCERESP_CMDTYPE1_IDLE = 0;
    AUTVALTPRKGEXPERIENCERESP_CMDTYPE1_CONFIRM = 1;
    AUTVALTPRKGEXPERIENCERESP_CMDTYPE1_CANCEL = 2;
    AUTVALTPRKGEXPERIENCERESP_CMDTYPE1_NOMOREREMINDER = 3;
  }
  enum BSDSwOnOffandWarnTypeType {
    BSDSWONOFFANDWARNTYPE_WARMTYPE_OFF = 0;
    BSDSWONOFFANDWARNTYPE_WARMTYPE_LIGHT = 1;
    BSDSWONOFFANDWARNTYPE_WARMTYPE_LIGHTANDAUDIO = 2;
  }
  enum CamFltsStsFromDHUType {
    CAMFLTSSTSFROMDHU_EYESONZONE1_UNAVAILABLE = 0;
    CAMFLTSSTSFROMDHU_EYESONZONE1_YES = 1;
    CAMFLTSSTSFROMDHU_EYESONZONE1_NO = 2;
    CAMFLTSSTSFROMDHU_EYESONZONE1_RESERVED = 3;
  }
  enum CllsnAidSnvtySeldStsType {
    CLLSNAIDSNVTYSELDSTS_CLLSNAIDSNVTYSELDSTS_INACTIVE = 0;
    CLLSNAIDSNVTYSELDSTS_CLLSNAIDSNVTYSELDSTS_OFF = 1;
    CLLSNAIDSNVTYSELDSTS_CLLSNAIDSNVTYSELDSTS_ON = 2;
    CLLSNAIDSNVTYSELDSTS_CLLSNAIDSNVTYSELDSTS_MEDIUM = 3;
    CLLSNAIDSNVTYSELDSTS_CLLSNAIDSNVTYSELDSTS_HIGH = 4;
    CLLSNAIDSNVTYSELDSTS_CLLSNAIDSNVTYSELDSTS_RESERVED1 = 5;
    CLLSNAIDSNVTYSELDSTS_CLLSNAIDSNVTYSELDSTS_RESERVED2 = 6;
    CLLSNAIDSNVTYSELDSTS_CLLSNAIDSNVTYSELDSTS_RESERVED3 = 7;
  }
  enum CrsCtrlTiGapAdjReqType {
    CRSCTRLTIGAPADJREQ_TIGAPSETFORLGTCTRL_NONE = 0;
    CRSCTRLTIGAPADJREQ_TIGAPSETFORLGTCTRL_TIMEGAP_1 = 1;
    CRSCTRLTIGAPADJREQ_TIGAPSETFORLGTCTRL_TIMEGAP_2 = 2;
    CRSCTRLTIGAPADJREQ_TIGAPSETFORLGTCTRL_TIMEGAP_3 = 3;
  }
  enum CurrentRoadLvlType {
    CURRENTROADLVL_CURRENTROADLVL_UNKNOWN = 0;
    CURRENTROADLVL_CURRENTROADLVL_CITYFASTWAY = 1;
    CURRENTROADLVL_CURRENTROADLVL_COUNTRYWAY = 2;
    CURRENTROADLVL_CURRENTROADLVL_FERRYWAY = 3;
    CURRENTROADLVL_CURRENTROADLVL_HIGHWAY = 4;
    CURRENTROADLVL_CURRENTROADLVL_LEVEL9WAY = 5;
    CURRENTROADLVL_CURRENTROADLVL_NATIONWAY = 6;
    CURRENTROADLVL_CURRENTROADLVL_PROVINCEWAY = 7;
    CURRENTROADLVL_CURRENTROADLVL_TOWNWAY = 8;
    CURRENTROADLVL_CURRENTROADLVL_WALKWAY = 9;
    CURRENTROADLVL_CURRENTROADLVL_OTHERWAY = 10;
  }
  enum DrvrCrsCtrlFctActvReqType {
    DRVRCRSCTRLFCTACTVREQ_DRVRCRSCTRLFCTACTVREQ_INACTIVE = 0;
    DRVRCRSCTRLFCTACTVREQ_DRVRCRSCTRLFCTACTVREQ_ACTIVATEDBYONOFFBUTTON = 1;
    DRVRCRSCTRLFCTACTVREQ_DRVRCRSCTRLFCTACTVREQ_ACTIVATEDBYRESUMEBUTTON = 2;
    DRVRCRSCTRLFCTACTVREQ_DRVRCRSCTRLFCTACTVREQ_RESERVED = 3;
  }
  enum DrvrDecStsFromDHUType {
    DRVRDECSTSFROMDHU_DRVRDECSTS_UNAVAILABLE = 0;
    DRVRDECSTSFROMDHU_DRVRDECSTS_NOTDETECTED = 1;
    DRVRDECSTSFROMDHU_DRVRDECSTS_EYEDETECTED = 2;
    DRVRDECSTSFROMDHU_DRVRDECSTS_HEADDETECTED = 3;
    DRVRDECSTSFROMDHU_DRVRDECSTS_RESERVED = 4;
  }
  enum DrvrPfmncAlrmReqFromDHUType {
    DRVRPFMNCALRMREQFROMDHU_DRVRPFMNCWARNREQ_UNAVAILABLE = 0;
    DRVRPFMNCALRMREQFROMDHU_DRVRPFMNCWARNREQ_UNKNOWN = 1;
    DRVRPFMNCALRMREQFROMDHU_DRVRPFMNCWARNREQ_NOWARNING = 2;
    DRVRPFMNCALRMREQFROMDHU_DRVRPFMNCWARNREQ_DISTRACTIVE = 3;
    DRVRPFMNCALRMREQFROMDHU_DRVRPFMNCWARNREQ_WARNINGLEVEL1 = 4;
    DRVRPFMNCALRMREQFROMDHU_DRVRPFMNCWARNREQ_WARNINGLEVEL2_NAVIGATION = 5;
    DRVRPFMNCALRMREQFROMDHU_DRVRPFMNCWARNREQ_WARNINGLEVEL2 = 6;
  }
  enum EyeGazeFromDHUEyeGazeZoneType {
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_UNAVILABLE = 0;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_WINDSHIELDDRIVER = 1;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_REARMIRRORINNER = 2;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_WINDSHIELDPASSAGER = 3;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_HUD = 4;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_DIM = 5;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_IHU = 6;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_WINDOWDRIVER = 7;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_REARMIRRORDRIVER = 8;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_DOORDRIVER = 9;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_WINDOWPASSAGNER = 10;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_REARMIRRORPASSANGER = 11;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_DOORPASSANGER = 12;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_FLOORDRIVER = 13;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_FLOORPASSANGER = 14;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_OTHER = 15;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_GREENZONE_1_3_4 = 16;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_YELLOWZONE_2_5_6_7_8_10_11 = 17;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_REDZONE_9_12_13_14 = 18;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_STEERWHEELLE = 19;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_STEERWHEELRI = 20;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_RESERVED3 = 21;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_RESERVED4 = 22;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_RESERVED5 = 23;
    EYEGAZEFROMDHUEYEGAZEZONE_EYEGAZEZONE1_RESERVED6 = 24;
  }
  enum EyeOnRoadFromDHUEyesOnRoadType {
    EYEONROADFROMDHUEYESONROAD_EYESONZONE1_UNAVAILABLE = 0;
    EYEONROADFROMDHUEYESONROAD_EYESONZONE1_YES = 1;
    EYEONROADFROMDHUEYESONROAD_EYESONZONE1_NO = 2;
    EYEONROADFROMDHUEYESONROAD_EYESONZONE1_RESERVED = 3;
  }
  enum LoSpdDrvgAssiShoPushRespType {
    LOSPDDRVGASSISHOPUSHRESP_CMDTYPE1_IDLE = 0;
    LOSPDDRVGASSISHOPUSHRESP_CMDTYPE1_CONFIRM = 1;
    LOSPDDRVGASSISHOPUSHRESP_CMDTYPE1_CANCEL = 2;
    LOSPDDRVGASSISHOPUSHRESP_CMDTYPE1_NOMOREREMINDER = 3;
  }
  enum PrkgAssiReStsType {
    PRKGASSIRESTS_SYSSTS3_INVALID = 0;
    PRKGASSIRESTS_SYSSTS3_SLEEP = 1;
    PRKGASSIRESTS_SYSSTS3_STANDBY = 2;
    PRKGASSIRESTS_SYSSTS3_ACTIVE = 3;
    PRKGASSIRESTS_SYSSTS3_FAILURE = 4;
    PRKGASSIRESTS_SYSSTS3_SELFINSPECTION = 5;
    PRKGASSIRESTS_SYSSTS3_RESERVED1 = 6;
    PRKGASSIRESTS_SYSSTS3_RESERVED2 = 7;
  }
  // description APA custom parking request [] [0|1] [initial_value:0]
  optional bool apa_custom_prkg_req = 1;
  // [] [0|1] [initial_value:None]
  optional bool apa_custom_prkg_req_ub = 2;
  // description EMA function on/off  [] [0|1] [initial_value:0]
  optional bool asy_emgy_manoeuvre_aid_actv_sts = 3;
  // [] [0|1] [initial_value:None]
  optional bool asy_emgy_manoeuvre_aid_actv_sts_ub = 4;
  // description active NOA request [] [0|1] [initial_value:0]
  optional bool asy_noa_upgradeswitch = 5;
  // [] [0|1] [initial_value:None]
  optional bool asy_noa_upgradeswitch_ub = 6;
  // description This switch is used to set auto lane change mode with speed.  [] [0|3] [initial_value:0]
  optional AutoLaneChgStyleSwStsType auto_lane_chg_style_sw_sts = 7;
  // [] [0|1] [initial_value:None]
  optional bool auto_lane_chg_style_sw_sts_ub = 8;
  // description AVP experience notification response [] [0|3] [initial_value:0]
  optional AutValtPrkgExperienceRespType aut_valt_prkg_experience_resp = 9;
  // [] [0|1] [initial_value:None]
  optional bool aut_valt_prkg_experience_resp_ub = 10;
  // description upload picture to cloud switch [] [0|1] [initial_value:0]
  optional bool aut_valt_prkg_picture_upload_swt = 11;
  // [] [0|1] [initial_value:None]
  optional bool aut_valt_prkg_picture_upload_swt_ub = 12;
  // description upload picture to cloud switch [] [0|1] [initial_value:1]
  optional bool aut_valt_prkg_sho_dst_push_swt = 13;
  // [] [0|1] [initial_value:None]
  optional bool aut_valt_prkg_sho_dst_push_swt_ub = 14;
  // description BSDSwOnOffandWarnType [] [0|3] [initial_value:1]
  optional BSDSwOnOffandWarnTypeType bsd_sw_on_offand_warn_type = 15;
  // [] [0|1] [initial_value:None]
  optional bool bsd_sw_on_offand_warn_type_ub = 16;
  // description camera fault status signal [] [0|3] [initial_value:0]
  optional CamFltsStsFromDHUType cam_flts_sts_from_dhu = 17;
  // [] [0|1] [initial_value:None]
  optional bool cam_flts_sts_from_dhu_ub = 18;
  // description sensitive select. [] [0|7] [initial_value:0]
  optional CllsnAidSnvtySeldStsType cllsn_aid_snvty_seld_sts = 19;
  // [] [0|1] [initial_value:None]
  optional bool cllsn_aid_snvty_seld_sts_ub = 20;
  // description AEB function on/off [] [0|1] [initial_value:0]
  optional bool cllsn_mtgtn_actv_seld_sts = 21;
  // [] [0|1] [initial_value:None]
  optional bool cllsn_mtgtn_actv_seld_sts_ub = 22;
  // description ACC Time Gap Adjust Requirement  [] [0|7] [initial_value:0]
  optional CrsCtrlTiGapAdjReqType crs_ctrl_ti_gap_adj_req = 23;
  // [] [0|1] [initial_value:None]
  optional bool crs_ctrl_ti_gap_adj_req_ub = 24;
  // description Current road level [] [0|15] [initial_value:0]
  optional CurrentRoadLvlType current_road_lvl = 25;
  // [] [0|1] [initial_value:None]
  optional bool current_road_lvl_ub = 26;
  // description FCDA function setting [] [0|1] [initial_value:0]
  optional bool drv_off_req = 27;
  // [] [0|1] [initial_value:None]
  optional bool drv_off_req_ub = 28;
  // description this port is used to indicate ACC requirest founction [] [0|3] [initial_value:0]
  optional DrvrCrsCtrlFctActvReqType drvr_crs_ctrl_fct_actv_req = 29;
  // [] [0|1] [initial_value:None]
  optional bool drvr_crs_ctrl_fct_actv_req_ub = 30;
  // description  the signal of the detection state of driver [] [0|7] [initial_value:0]
  optional DrvrDecStsFromDHUType drvr_dec_sts_from_dhu = 31;
  // [] [0|1] [initial_value:None]
  optional bool drvr_dec_sts_from_dhu_ub = 32;
  // description this singal indicate the level of fatigue alarm. [] [0|7] [initial_value:0]
  optional DrvrPfmncAlrmReqFromDHUType drvr_pfmnc_alrm_req_from_dhu = 33;
  // [] [0|1] [initial_value:None]
  optional bool drvr_pfmnc_alrm_req_from_dhu_ub = 34;
  // description the request to enable/disable ELKA function by SW switch in IHU. [] [0|1] [initial_value:0]
  optional bool emgy_lane_keep_aid_actv_sts = 35;
  // [] [0|1] [initial_value:None]
  optional bool emgy_lane_keep_aid_actv_sts_ub = 36;
  // [] [0|1] [initial_value:None]
  optional bool eye_gaze_from_dhu_ub = 37;
  // description eye  gaze zones [] [0|31] [initial_value:0]
  optional EyeGazeFromDHUEyeGazeZoneType eye_gaze_from_dhu_eye_gaze_zone = 38;
  // description eye gaze zone time [Milliseconds] [0.0|65535.0] [initial_value:0]
  optional uint32 eye_gaze_from_dhu_eye_gaze_zone_time = 39;
  // [] [0|1] [initial_value:None]
  optional bool eye_on_road_from_dhu_ub = 40;
  // description Counter [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 eye_on_road_from_dhu_chks = 41;
  // description CRC [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 eye_on_road_from_dhu_cntr = 42;
  // description This signal indicate eyegaze in on road [] [0|3] [initial_value:0]
  optional EyeOnRoadFromDHUEyesOnRoadType eye_on_road_from_dhu_eyes_on_road = 43;
  // [] [0|1] [initial_value:None]
  optional bool eye_open_from_dhu_ub = 44;
  // description  the open angle of left eye [mm] [0.0|25.5] [initial_value:0]
  optional double eye_open_from_dhu_eye_open_deg_le = 45;
  // description the open angle of right eye [mm] [0.0|25.5] [initial_value:0]
  optional double eye_open_from_dhu_eye_open_deg_ri = 46;
  // description Eye open of left [] [0|1] [initial_value:0]
  optional bool eye_open_from_dhu_eye_open_le = 47;
  // description Eye open of right [] [0|1] [initial_value:0]
  optional bool eye_open_from_dhu_eye_open_ri = 48;
  // description the visible state of left eye [] [0|1] [initial_value:0]
  optional bool eye_open_from_dhu_eye_visible_le = 49;
  // description the visible state of right eye [] [0|1] [initial_value:0]
  optional bool eye_open_from_dhu_eye_visible_ri = 50;
  // description face visible [] [0|1] [initial_value:0]
  optional bool eye_open_from_dhu_face_visible = 51;
  // description Driver voice activated G-Pilot request [] [0|1] [initial_value:0]
  optional bool hmi_drvr_sod_req_pilot = 52;
  // [] [0|1] [initial_value:None]
  optional bool hmi_drvr_sod_req_pilot_ub = 53;
  // description AVP short distance push notification response [] [0|3] [initial_value:0]
  optional LoSpdDrvgAssiShoPushRespType lo_spd_drvg_assi_sho_push_resp = 54;
  // [] [0|1] [initial_value:None]
  optional bool lo_spd_drvg_assi_sho_push_resp_ub = 55;
  // description the request to choose the lane change case need confirm by turning function by SW switch in DHU. [] [0|1] [initial_value:0]
  optional bool nop_cofm_of_lan_chag_onoff = 56;
  // [] [0|1] [initial_value:None]
  optional bool nop_cofm_of_lan_chag_onoff_ub = 57;
  // description Indicate PAC working status. [] [0|7] [initial_value:0]
  optional PrkgAssiReStsType prkg_assi_re_sts = 58;
  // [] [0|1] [initial_value:None]
  optional bool prkg_assi_re_sts_ub = 59;
}

message ADCU_ZCUCANFD1_FR02_1F0 {
// Control Message
  enum AD4WhlLockReqWhlLockReqType {
    AD4WHLLOCKREQWHLLOCKREQ_WHLLOCKREQ_NOREQUEST = 0;
    AD4WHLLOCKREQWHLLOCKREQ_WHLLOCKREQ_APPLY = 1;
    AD4WHLLOCKREQWHLLOCKREQ_WHLLOCKREQ_RELEASE = 2;
    AD4WHLLOCKREQWHLLOCKREQ_WHLLOCKREQ_RESERVED = 3;
  }
  enum ADDimLightType {
    ADDIMLIGHT_ADDIMLIGHT_NOREQUEST = 0;
    ADDIMLIGHT_ADDIMLIGHT_LEVEL2 = 1;
    ADDIMLIGHT_ADDIMLIGHT_LEVEL2PLUS = 2;
    ADDIMLIGHT_ADDIMLIGHT_LEVEL3 = 3;
    ADDIMLIGHT_ADDIMLIGHT_MILDALERT = 4;
    ADDIMLIGHT_ADDIMLIGHT_SERIOUSALERT = 5;
    ADDIMLIGHT_ADDIMLIGHT_SAFETYSTOP = 6;
  }
  enum AsyAutDrvCtrlTypType {
    ASYAUTDRVCTRLTYP_ASYAUTDRVCTRLTYP_INACTIVE = 0;
    ASYAUTDRVCTRLTYP_ASYAUTDRVCTRLTYP_ACC = 1;
    ASYAUTDRVCTRLTYP_ASYAUTDRVCTRLTYP_GPILOT = 2;
    ASYAUTDRVCTRLTYP_ASYAUTDRVCTRLTYP_D2D = 3;
  }
  enum AsyAutDrvgAvlSoundType {
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_NOMSG = 0;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_LATCTRLNOTAVL = 1;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_HISPD = 2;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_VEHTOFOLWMISS = 3;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_OVRDTIMAXEXCDD = 4;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_DRVRNOTINLOOPDETD = 5;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_DRVRBUCDRQRD = 6;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_DRVRDOORNOTCLSD = 7;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_GEARNOTINDRV = 8;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_SNSRBLKD = 9;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_HLDTIMAXEXCDD = 10;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_DRVMODSELDNOTOK = 11;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_EPBAPPLD = 12;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_SPDLOWLIMEXCDD = 13;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_TRLRPRSNT = 14;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_MLTPLEMONROADREQ = 15;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_ENDOFHNDSOFFALLWDAREA = 16;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_ROADMONWM = 17;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_CANNOTREACTIVATE = 18;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_NOTINUSE1 = 19;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_ESC_OF = 20;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_HDC_ON = 21;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_RESERVED3 = 22;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_RESERVED4 = 23;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_RESERVED5 = 24;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_RESERVED6 = 25;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_RESERVED7 = 26;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_RESERVED8 = 27;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_RESERVED9 = 28;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_RESERVED10 = 29;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_RESERVED11 = 30;
    ASYAUTDRVGAVLSOUND_ASYAUTDRVGAVL_RESERVED12 = 31;
  }
  enum AsyEmgyLaneKeepAidStsType {
    ASYEMGYLANEKEEPAIDSTS_ASYALATSTS_OFF = 0;
    ASYEMGYLANEKEEPAIDSTS_ASYALATSTS_STANDBY = 1;
    ASYEMGYLANEKEEPAIDSTS_ASYALATSTS_ACTIVE = 2;
    ASYEMGYLANEKEEPAIDSTS_ASYALATSTS_OVERRIDE = 3;
    ASYEMGYLANEKEEPAIDSTS_ASYALATSTS_TEMPORARYERROR = 4;
    ASYEMGYLANEKEEPAIDSTS_ASYALATSTS_PERMANENTERROR = 5;
    ASYEMGYLANEKEEPAIDSTS_ASYALATSTS_NOTENABLEBUTNOTERROR = 6;
  }
  enum AsyEyesOffWarnRqrdType {
    ASYEYESOFFWARNRQRD_LVLWARN1_NOWARN = 0;
    ASYEYESOFFWARNRQRD_LVLWARN1_LVL1 = 1;
    ASYEYESOFFWARNRQRD_LVLWARN1_LVL2 = 2;
  }
  enum AsyEyesOffWarnRqrdSoundType {
    ASYEYESOFFWARNRQRDSOUND_LVLWARN1_NOWARN = 0;
    ASYEYESOFFWARNRQRDSOUND_LVLWARN1_LVL1 = 1;
    ASYEYESOFFWARNRQRDSOUND_LVLWARN1_LVL2 = 2;
  }
  enum AsyFirstTiActvnType {
    ASYFIRSTTIACTVN_ASYFIRSTTIACTVN_NOREQ = 0;
    ASYFIRSTTIACTVN_ASYFIRSTTIACTVN_ICCFIRSTACTICATION = 1;
    ASYFIRSTTIACTVN_ASYFIRSTTIACTVN_ACCFIRSTACTICATION = 2;
    ASYFIRSTTIACTVN_ASYFIRSTTIACTVN_RESERVED = 3;
  }
  enum AsyLaneKeepAidStsType {
    ASYLANEKEEPAIDSTS_ASYALATSTS_OFF = 0;
    ASYLANEKEEPAIDSTS_ASYALATSTS_STANDBY = 1;
    ASYLANEKEEPAIDSTS_ASYALATSTS_ACTIVE = 2;
    ASYLANEKEEPAIDSTS_ASYALATSTS_OVERRIDE = 3;
    ASYLANEKEEPAIDSTS_ASYALATSTS_TEMPORARYERROR = 4;
    ASYLANEKEEPAIDSTS_ASYALATSTS_PERMANENTERROR = 5;
    ASYLANEKEEPAIDSTS_ASYALATSTS_NOTENABLEBUTNOTERROR = 6;
  }
  enum AsyLineLe2ColorType {
    ASYLINELE2COLOR_ASYLINELECOLOR_GREY = 0;
    ASYLINELE2COLOR_ASYLINELECOLOR_WHITE = 1;
    ASYLINELE2COLOR_ASYLINELECOLOR_BLUE = 2;
    ASYLINELE2COLOR_ASYLINELECOLOR_RED = 3;
    ASYLINELE2COLOR_ASYLINELECOLOR_YELLOW = 4;
  }
  enum AsyLineLe2RampTypType {
    ASYLINELE2RAMPTYP_NORAMP = 0;
    ASYLINELE2RAMPTYP_LEFTENTER = 1;
    ASYLINELE2RAMPTYP_LEFTEXIT = 2;
    ASYLINELE2RAMPTYP_RIGHTENTER = 3;
    ASYLINELE2RAMPTYP_RIGHTEXIT = 4;
  }
  enum AsyLineLe2TypType {
    ASYLINELE2TYP_ASYLINELETYP_NODISPLAY = 0;
    ASYLINELE2TYP_ASYLINELETYP_SOLIDLINE = 1;
    ASYLINELE2TYP_ASYLINELETYP_DASHLINE = 2;
  }
  enum AsyLineLeColorType {
    ASYLINELECOLOR_ASYLINELECOLOR_GREY = 0;
    ASYLINELECOLOR_ASYLINELECOLOR_WHITE = 1;
    ASYLINELECOLOR_ASYLINELECOLOR_BLUE = 2;
    ASYLINELECOLOR_ASYLINELECOLOR_RED = 3;
    ASYLINELECOLOR_ASYLINELECOLOR_YELLOW = 4;
  }
  enum AsyLineLeRampTypType {
    ASYLINELERAMPTYP_NORAMP = 0;
    ASYLINELERAMPTYP_LEFTENTER = 1;
    ASYLINELERAMPTYP_LEFTEXIT = 2;
    ASYLINELERAMPTYP_RIGHTENTER = 3;
    ASYLINELERAMPTYP_RIGHTEXIT = 4;
  }
  enum AsyLineLeTypType {
    ASYLINELETYP_ASYLINELETYP_NODISPLAY = 0;
    ASYLINELETYP_ASYLINELETYP_SOLIDLINE = 1;
    ASYLINELETYP_ASYLINELETYP_DASHLINE = 2;
  }
  enum AsyLineRi2ColorType {
    ASYLINERI2COLOR_ASYLINELECOLOR_GREY = 0;
    ASYLINERI2COLOR_ASYLINELECOLOR_WHITE = 1;
    ASYLINERI2COLOR_ASYLINELECOLOR_BLUE = 2;
    ASYLINERI2COLOR_ASYLINELECOLOR_RED = 3;
    ASYLINERI2COLOR_ASYLINELECOLOR_YELLOW = 4;
  }
  enum AsyLineRi2RampTypType {
    ASYLINERI2RAMPTYP_NORAMP = 0;
    ASYLINERI2RAMPTYP_LEFTENTER = 1;
    ASYLINERI2RAMPTYP_LEFTEXIT = 2;
    ASYLINERI2RAMPTYP_RIGHTENTER = 3;
    ASYLINERI2RAMPTYP_RIGHTEXIT = 4;
  }
  enum AsyLineRi2TypType {
    ASYLINERI2TYP_ASYLINELETYP_NODISPLAY = 0;
    ASYLINERI2TYP_ASYLINELETYP_SOLIDLINE = 1;
    ASYLINERI2TYP_ASYLINELETYP_DASHLINE = 2;
  }
  enum AsyLineRiColorType {
    ASYLINERICOLOR_ASYLINELECOLOR_GREY = 0;
    ASYLINERICOLOR_ASYLINELECOLOR_WHITE = 1;
    ASYLINERICOLOR_ASYLINELECOLOR_BLUE = 2;
    ASYLINERICOLOR_ASYLINELECOLOR_RED = 3;
    ASYLINERICOLOR_ASYLINELECOLOR_YELLOW = 4;
  }
  enum AsyLineRiRampTypType {
    ASYLINERIRAMPTYP_NORAMP = 0;
    ASYLINERIRAMPTYP_LEFTENTER = 1;
    ASYLINERIRAMPTYP_LEFTEXIT = 2;
    ASYLINERIRAMPTYP_RIGHTENTER = 3;
    ASYLINERIRAMPTYP_RIGHTEXIT = 4;
  }
  enum AsyNoaStsType {
    ASYNOASTS_ONOFFFAULT_OFF = 0;
    ASYNOASTS_ONOFFFAULT_ON = 1;
    ASYNOASTS_ONOFFFAULT_RESERVED = 2;
    ASYNOASTS_ONOFFFAULT_FAULT = 3;
  }
  enum AsySteerApplyRqrdSoundType {
    ASYSTEERAPPLYRQRDSOUND_LVLWARN1_NOWARN = 0;
    ASYSTEERAPPLYRQRDSOUND_LVLWARN1_LVL1 = 1;
    ASYSTEERAPPLYRQRDSOUND_LVLWARN1_LVL2 = 2;
  }
  enum CircularCamstsType {
    CIRCULARCAMSTS_RSDSMSTST_CFG = 0;
    CIRCULARCAMSTS_RSDSMSTST_STRTUP = 1;
    CIRCULARCAMSTS_RSDSMSTST_RUNNG = 2;
    CIRCULARCAMSTS_RSDSMSTST_BLKD = 3;
    CIRCULARCAMSTS_RSDSMSTST_FAULTY = 4;
    CIRCULARCAMSTS_RSDSMSTST_SHUTDOWN = 5;
    CIRCULARCAMSTS_RSDSMSTST_HOT = 6;
    CIRCULARCAMSTS_RSDSMSTST_CAL = 7;
  }
  enum UturnLightType {
    UTURNLIGHT_COLORSTS_RED = 0;
    UTURNLIGHT_COLORSTS_YELLOW = 1;
    UTURNLIGHT_COLORSTS_GREEN = 2;
    UTURNLIGHT_COLORSTS_RESERVED = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool ad4_whl_lock_req_ub = 1;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad4_whl_lock_req_chks = 2;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad4_whl_lock_req_cntr = 3;
  // description Wheel lock request. [] [0|3] [initial_value:0]
  optional AD4WhlLockReqWhlLockReqType ad4_whl_lock_req_whl_lock_req = 4;
  // description DIM surrounding light, depending on current autonomous driving level [] [0|7] [initial_value:0]
  optional ADDimLightType ad_dim_light = 5;
  // [] [0|1] [initial_value:None]
  optional bool ad_dim_light_ub = 6;
  // description Indicates if autonomous driving is ACC/TJA/HWA/TJP or only ACC. [] [0|7] [initial_value:0]
  optional AsyAutDrvCtrlTypType asy_aut_drv_ctrl_typ = 7;
  // [] [0|1] [initial_value:None]
  optional bool asy_aut_drv_ctrl_typ_ub = 8;
  // description function unavaiable sound signal [] [0|31] [initial_value:0]
  optional AsyAutDrvgAvlSoundType asy_aut_drvg_avl_sound = 9;
  // [] [0|1] [initial_value:None]
  optional bool asy_aut_drvg_avl_sound_ub = 10;
  // description The signal indicates the status of ELKA function; Off, passive, standby,active etc. [] [0|7] [initial_value:3]
  optional AsyEmgyLaneKeepAidStsType asy_emgy_lane_keep_aid_sts = 11;
  // [] [0|1] [initial_value:None]
  optional bool asy_emgy_lane_keep_aid_sts_ub = 12;
  // description Warning for driver eyes off [] [0|3] [initial_value:0]
  optional AsyEyesOffWarnRqrdType asy_eyes_off_warn_rqrd = 13;
  // [] [0|1] [initial_value:None]
  optional bool asy_eyes_off_warn_rqrd_ub = 14;
  // description Eyes off warning sound signal [] [0|3] [initial_value:0]
  optional AsyEyesOffWarnRqrdSoundType asy_eyes_off_warn_rqrd_sound = 15;
  // [] [0|1] [initial_value:None]
  optional bool asy_eyes_off_warn_rqrd_sound_ub = 16;
  // description First activation sound signal [] [0|3] [initial_value:0]
  optional AsyFirstTiActvnType asy_first_ti_actvn = 17;
  // [] [0|1] [initial_value:None]
  optional bool asy_first_ti_actvn_ub = 18;
  // description inform driver takeover request [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_inform_for_drvr = 19;
  // [] [0|1] [initial_value:None]
  optional bool asy_inform_for_drvr_ub = 20;
  // description driver information sound signal [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_inform_for_drvr_sound = 21;
  // [] [0|1] [initial_value:None]
  optional bool asy_inform_for_drvr_sound_ub = 22;
  // description Display the lane would be changed in by different color  [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_lan_chg_color_dsp = 23;
  // [] [0|1] [initial_value:None]
  optional bool asy_lan_chg_color_dsp_ub = 24;
  // description Words warning from NOA  [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_lan_chg_mesg = 25;
  // [] [0|1] [initial_value:None]
  optional bool asy_lan_chg_mesg_ub = 26;
  // description Voice warning from NOA [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_lan_chg_sod = 27;
  // [] [0|1] [initial_value:None]
  optional bool asy_lan_chg_sod_ub = 28;
  // description the status of LKA function; Off, passive, standby,active etc. [] [0|7] [initial_value:0]
  optional AsyLaneKeepAidStsType asy_lane_keep_aid_sts = 29;
  // [] [0|1] [initial_value:None]
  optional bool asy_lane_keep_aid_sts_ub = 30;
  // description this signal is used to indicate whether HWA has been downgraded [] [0|1] [initial_value:0]
  optional bool asy_lat_deg_sts = 31;
  // [] [0|1] [initial_value:None]
  optional bool asy_lat_deg_sts_ub = 32;
  // description End point of the first left 2 line segment [m] [-30.0|225.0] [initial_value:30]
  optional double asy_le2_first_end = 33;
  // [] [0|1] [initial_value:None]
  optional bool asy_le2_first_end_ub = 34;
  // description Start point of the first left 2 line segment [m] [-30.0|225.0] [initial_value:30]
  optional double asy_le2_first_strt = 35;
  // [] [0|1] [initial_value:None]
  optional bool asy_le2_first_strt_ub = 36;
  // description End point of the second left 2 line segment [m] [-30.0|225.0] [initial_value:30]
  optional double asy_le2_sec_end = 37;
  // [] [0|1] [initial_value:None]
  optional bool asy_le2_sec_end_ub = 38;
  // description Start point of the second left 2 line segment [m] [-30.0|225.0] [initial_value:30]
  optional double asy_le2_sec_strt = 39;
  // [] [0|1] [initial_value:None]
  optional bool asy_le2_sec_strt_ub = 40;
  // description End point of the first left line segment [m] [-30.0|225.0] [initial_value:30]
  optional double asy_le_first_end = 41;
  // [] [0|1] [initial_value:None]
  optional bool asy_le_first_end_ub = 42;
  // description Start point of the first left line segment [m] [-30.0|225.0] [initial_value:30]
  optional double asy_le_first_strt = 43;
  // [] [0|1] [initial_value:None]
  optional bool asy_le_first_strt_ub = 44;
  // description End point of the second left line segment [m] [-30.0|225.0] [initial_value:30]
  optional double asy_le_sec_end = 45;
  // [] [0|1] [initial_value:None]
  optional bool asy_le_sec_end_ub = 46;
  // description Start point of the second left line segment [m] [-30.0|225.0] [initial_value:30]
  optional double asy_le_sec_strt = 47;
  // [] [0|1] [initial_value:None]
  optional bool asy_le_sec_strt_ub = 48;
  // description The signal indicates the distance to left line. [m] [-12.7|12.700000000000003] [initial_value:127]
  optional double asy_line_dst_le = 49;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_dst_le_ub = 50;
  // description The signal indicates the distance to right line. [m] [-12.7|12.700000000000003] [initial_value:127]
  optional double asy_line_dst_ri = 51;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_dst_ri_ub = 52;
  // description The signal indicates the color of the left line of left lane. [] [0|15] [initial_value:0]
  optional AsyLineLe2ColorType asy_line_le2_color = 53;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_le2_color_ub = 54;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_le2_pah_ub = 55;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_le2_pah2_ub = 56;
  // description Supply the parameters to creat second left 2 line segment of the path of lane lines [m] [-30.0|30.0] [initial_value:3000]
  optional double asy_line_le2_pah2_prm_a = 57;
  // description Supply the parameters to creat second left 2 line segment of the path of lane lines [rad] [-1.6|1.6] [initial_value:1600]
  optional double asy_line_le2_pah2_prm_b = 58;
  // description Supply the parameters to creat second left 2 line segment of the path of lane lines [1/m] [-0.1|0.1] [initial_value:1000]
  optional double asy_line_le2_pah2_prm_c = 59;
  // description Supply the parameters to creat second left 2 line segment of the path of lane lines [1/m^2] [-0.001|0.001] [initial_value:1000]
  optional double asy_line_le2_pah2_prm_d = 60;
  // description DX-distance  [m] [-30.0|30.0] [initial_value:3000]
  optional double asy_line_le2_pah_prm_a = 61;
  // description yaw angle radian [rad] [-1.6|1.6] [initial_value:1600]
  optional double asy_line_le2_pah_prm_b = 62;
  // description curvature [1/m] [-0.1|0.1] [initial_value:1000]
  optional double asy_line_le2_pah_prm_c = 63;
  // description curvature change [1/m^2] [-0.001|0.001] [initial_value:1000]
  optional double asy_line_le2_pah_prm_d = 64;
  // [m] [-30.0|225.0] [initial_value:30]
  optional double asy_line_le2_ramp_posn = 65;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_le2_ramp_posn_ub = 66;
  // description To display the ramp type of lane line. [] [0|7] [initial_value:0]
  optional AsyLineLe2RampTypType asy_line_le2_ramp_typ = 67;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_le2_ramp_typ_ub = 68;
  // description The signal indicates the type of the left line of left lane. [] [0|15] [initial_value:0]
  optional AsyLineLe2TypType asy_line_le2_typ = 69;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_le2_typ_ub = 70;
  // description The signal indicates the color of the left line of ego lane. [] [0|15] [initial_value:0]
  optional AsyLineLeColorType asy_line_le_color = 71;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_le_color_ub = 72;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_le_pah_ub = 73;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_le_pah2_ub = 74;
  // description Supply the parameters to creat second left line segment of the path of lane lines [m] [-30.0|30.0] [initial_value:3000]
  optional double asy_line_le_pah2_prm_a = 75;
  // description Supply the parameters to creat second left line segment of the path of lane lines [rad] [-1.6|1.6] [initial_value:1600]
  optional double asy_line_le_pah2_prm_b = 76;
  // description Supply the parameters to creat second left line segment of the path of lane lines [1/m] [-0.1|0.1] [initial_value:1000]
  optional double asy_line_le_pah2_prm_c = 77;
  // description Supply the parameters to creat second left line segment of the path of lane lines [1/m^2] [-0.001|0.001] [initial_value:1000]
  optional double asy_line_le_pah2_prm_d = 78;
  // description DX-distance  [m] [-30.0|30.0] [initial_value:3000]
  optional double asy_line_le_pah_prm_a = 79;
  // description yaw angle radian [rad] [-1.6|1.6] [initial_value:1600]
  optional double asy_line_le_pah_prm_b = 80;
  // description curvature [1/m] [-0.1|0.1] [initial_value:1000]
  optional double asy_line_le_pah_prm_c = 81;
  // description curvature change [1/m^2] [-0.001|0.001] [initial_value:1000]
  optional double asy_line_le_pah_prm_d = 82;
  // [m] [-30.0|225.0] [initial_value:30]
  optional double asy_line_le_ramp_posn = 83;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_le_ramp_posn_ub = 84;
  // description To display the ramp type of lane line. [] [0|7] [initial_value:0]
  optional AsyLineLeRampTypType asy_line_le_ramp_typ = 85;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_le_ramp_typ_ub = 86;
  // description The signal indicates the type of the left line of ego lane. [] [0|15] [initial_value:0]
  optional AsyLineLeTypType asy_line_le_typ = 87;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_le_typ_ub = 88;
  // description The signal indicates the color of the right line of right lane. [] [0|15] [initial_value:0]
  optional AsyLineRi2ColorType asy_line_ri2_color = 89;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_ri2_color_ub = 90;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_ri2_pah_ub = 91;
  // description DX-distance  [m] [-30.0|30.0] [initial_value:3000]
  optional double asy_line_ri2_pah_prm_a = 92;
  // description yaw angle radian [rad] [-1.6|1.6] [initial_value:1600]
  optional double asy_line_ri2_pah_prm_b = 93;
  // description curvature [1/m] [-0.1|0.1] [initial_value:1000]
  optional double asy_line_ri2_pah_prm_c = 94;
  // description curvature change [1/m^2] [-0.001|0.001] [initial_value:1000]
  optional double asy_line_ri2_pah_prm_d = 95;
  // [m] [-30.0|225.0] [initial_value:30]
  optional double asy_line_ri2_ramp_posn = 96;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_ri2_ramp_posn_ub = 97;
  // description To display the ramp type of lane line. [] [0|7] [initial_value:0]
  optional AsyLineRi2RampTypType asy_line_ri2_ramp_typ = 98;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_ri2_ramp_typ_ub = 99;
  // description The signal indicates the type of the right line of right lane. [] [0|15] [initial_value:0]
  optional AsyLineRi2TypType asy_line_ri2_typ = 100;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_ri2_typ_ub = 101;
  // description The signal indicates the color of the right line of ego lane. [] [0|15] [initial_value:0]
  optional AsyLineRiColorType asy_line_ri_color = 102;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_ri_color_ub = 103;
  // description To display the ramp type of lane line. [] [0|7] [initial_value:0]
  optional AsyLineRiRampTypType asy_line_ri_ramp_typ = 104;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_ri_ramp_typ_ub = 105;
  // description Gpilot Suggest Driver to Active  [] [0|1] [initial_value:0]
  optional bool asy_noa_actv_suggest = 106;
  // [] [0|1] [initial_value:None]
  optional bool asy_noa_actv_suggest_ub = 107;
  // description NOA activation suggest sound signal [] [0|1] [initial_value:0]
  optional bool asy_noa_actv_suggest_sound = 108;
  // [] [0|1] [initial_value:None]
  optional bool asy_noa_actv_suggest_sound_ub = 109;
  // description Warning driver when the journey comming to the end [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_noa_distan_msg = 110;
  // [] [0|1] [initial_value:None]
  optional bool asy_noa_distan_msg_ub = 111;
  // description NOA navigation distance sound signal [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_noa_distan_msg_sound = 112;
  // [] [0|1] [initial_value:None]
  optional bool asy_noa_distan_msg_sound_ub = 113;
  // [] [0|3] [initial_value:0]
  optional AsyNoaStsType asy_noa_sts = 114;
  // [] [0|1] [initial_value:None]
  optional bool asy_noa_sts_ub = 115;
  // description hands off sound requirement signal [] [0|3] [initial_value:0]
  optional AsySteerApplyRqrdSoundType asy_steer_apply_rqrd_sound = 116;
  // [] [0|1] [initial_value:None]
  optional bool asy_steer_apply_rqrd_sound_ub = 117;
  // description Circular camera status [] [0|7] [initial_value:0]
  optional CircularCamstsType circular_camsts = 118;
  // [] [0|1] [initial_value:None]
  optional bool circular_camsts_ub = 119;
  // description U Turn light display for TLA [] [0|3] [initial_value:3]
  optional UturnLightType uturn_light = 120;
  // [] [0|1] [initial_value:None]
  optional bool uturn_light_ub = 121;
}

message DHU_ZCUCANFD1_FR12_1F5 {
// Report Message
  // [] [0|1] [initial_value:None]
  optional bool veh_cfg_prm_ext_ub = 1;
  // [] [0|1] [initial_value:None]
  optional bool veh_cfg_prm_ext2_ub = 2;
  // description CarConfigExtended2 BlockID [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext2_blk_id_byte_posn1 = 3;
  // description CarConfigExtended2 BytePos2 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext2_ccp_byte_posn2 = 4;
  // description CarConfigExtended2 BytePos3 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext2_ccp_byte_posn3 = 5;
  // description CarConfigExtended2 BytePos4 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext2_ccp_byte_posn4 = 6;
  // description CarConfigExtended2 BytePos5 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext2_ccp_byte_posn5 = 7;
  // description CarConfigExtended2 BytePos6 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext2_ccp_byte_posn6 = 8;
  // description CarConfigExtended2 BytePos7 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext2_ccp_byte_posn7 = 9;
  // description CarConfigExtended2 BytePos8 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext2_ccp_byte_posn8 = 10;
  // description CarConfigExtended BlockID [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext_blk_id_byte_posn1 = 11;
  // description CarConfigExtended BytePos2 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext_ccp_byte_posn2 = 12;
  // description CarConfigExtended BytePos3 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext_ccp_byte_posn3 = 13;
  // description CarConfigExtended BytePos4 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext_ccp_byte_posn4 = 14;
  // description CarConfigExtended BytePos5 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext_ccp_byte_posn5 = 15;
  // description CarConfigExtended BytePos6 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext_ccp_byte_posn6 = 16;
  // description CarConfigExtended BytePos7 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext_ccp_byte_posn7 = 17;
  // description CarConfigExtended BytePos8 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_cfg_prm_ext_ccp_byte_posn8 = 18;
  // [] [0|1] [initial_value:None]
  optional bool vin_ub = 19;
  // description VIN number block counter.  [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 vin_block_nr = 20;
  // description VIN byte 1. Used for character 1, 8 and 15. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 vin_vin_signal_pos1 = 21;
  // description VIN byte 2. Used for character 2, 9 and 16. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 vin_vin_signal_pos2 = 22;
  // description VIN byte 3. Used for character 3, 10 and 17. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 vin_vin_signal_pos3 = 23;
  // description VIN byte 4. Used for character 4 and 11. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 vin_vin_signal_pos4 = 24;
  // description VIN byte 5. Used for character 5 and 12. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 vin_vin_signal_pos5 = 25;
  // description VIN byte 6. Used for character 6 and 13. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 vin_vin_signal_pos6 = 26;
  // description VIN byte 7. Used for character 7 and 14. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 vin_vin_signal_pos7 = 27;
}

message DHU_ZCUCANFD1_FR14_1F8 {
// Report Message
  enum AutValtPrkgMapRespMapIDResultType {
    AUTVALTPRKGMAPRESPMAPIDRESULT_MAPIDRESULT_IDLE = 0;
    AUTVALTPRKGMAPRESPMAPIDRESULT_MAPIDRESULT_AVAILABLE = 1;
    AUTVALTPRKGMAPRESPMAPIDRESULT_MAPIDRESULT_NOTAVAILABLE = 2;
  }
  enum FrntAndRePrkgInSwtType {
    FRNTANDREPRKGINSWT_FRNTANDREPRKGINSWT_DEFAULT = 0;
    FRNTANDREPRKGINSWT_FRNTANDREPRKGINSWT_FRNTPRKGIN = 1;
    FRNTANDREPRKGINSWT_FRNTANDREPRKGINSWT_REPRKGIN = 2;
    FRNTANDREPRKGINSWT_FRNTANDREPRKGINSWT_RESERVED = 3;
  }
  enum HmiCnoaAutoLaneChgStyleSwStsType {
    HMICNOAAUTOLANECHGSTYLESWSTS_HMIAUTOLANECHGSTYLE_NORMAL = 0;
    HMICNOAAUTOLANECHGSTYLESWSTS_HMIAUTOLANECHGSTYLE_GENTLE = 1;
    HMICNOAAUTOLANECHGSTYLESWSTS_HMIAUTOLANECHGSTYLE_RAPID = 2;
    HMICNOAAUTOLANECHGSTYLESWSTS_HMIAUTOLANECHGSTYLE_FAULT = 3;
  }
  enum HmiDrvrSodReqCnoaLrngType {
    HMIDRVRSODREQCNOALRNG_ABSWARNINDCNREQ_ABSWARNINDCNONREQ = 0;
    HMIDRVRSODREQCNOALRNG_ABSWARNINDCNREQ_ABSWARNINDCNFLSGREQ = 1;
    HMIDRVRSODREQCNOALRNG_ABSWARNINDCNREQ_RESD2 = 2;
    HMIDRVRSODREQCNOALRNG_ABSWARNINDCNREQ_ABSWARNINDCNOFFREQ = 3;
  }
  enum HmiDrvrSodReqCnoaMainPageType {
    HMIDRVRSODREQCNOAMAINPAGE_ABSWARNINDCNREQ_ABSWARNINDCNONREQ = 0;
    HMIDRVRSODREQCNOAMAINPAGE_ABSWARNINDCNREQ_ABSWARNINDCNFLSGREQ = 1;
    HMIDRVRSODREQCNOAMAINPAGE_ABSWARNINDCNREQ_RESD2 = 2;
    HMIDRVRSODREQCNOAMAINPAGE_ABSWARNINDCNREQ_ABSWARNINDCNOFFREQ = 3;
  }
  enum HmiDrvrSodReqContnsLrngType {
    HMIDRVRSODREQCONTNSLRNG_ABSWARNINDCNREQ_ABSWARNINDCNONREQ = 0;
    HMIDRVRSODREQCONTNSLRNG_ABSWARNINDCNREQ_ABSWARNINDCNFLSGREQ = 1;
    HMIDRVRSODREQCONTNSLRNG_ABSWARNINDCNREQ_RESD2 = 2;
    HMIDRVRSODREQCONTNSLRNG_ABSWARNINDCNREQ_ABSWARNINDCNOFFREQ = 3;
  }
  enum HmiDrvrSodReqFinishLrngType {
    HMIDRVRSODREQFINISHLRNG_ABSWARNINDCNREQ_ABSWARNINDCNONREQ = 0;
    HMIDRVRSODREQFINISHLRNG_ABSWARNINDCNREQ_ABSWARNINDCNFLSGREQ = 1;
    HMIDRVRSODREQFINISHLRNG_ABSWARNINDCNREQ_RESD2 = 2;
    HMIDRVRSODREQFINISHLRNG_ABSWARNINDCNREQ_ABSWARNINDCNOFFREQ = 3;
  }
  enum HmiToPrkgDelayType {
    HMITOPRKGDELAY_DEFAULTONOFF_DEFAULT = 0;
    HMITOPRKGDELAY_DEFAULTONOFF_ON = 1;
    HMITOPRKGDELAY_DEFAULTONOFF_OFF = 2;
    HMITOPRKGDELAY_DEFAULTONOFF_RESERVED = 3;
  }
  enum MonrSysStsType {
    MONRSYSSTS_SYSSTS3_INVALID = 0;
    MONRSYSSTS_SYSSTS3_SLEEP = 1;
    MONRSYSSTS_SYSSTS3_STANDBY = 2;
    MONRSYSSTS_SYSSTS3_ACTIVE = 3;
    MONRSYSSTS_SYSSTS3_FAILURE = 4;
    MONRSYSSTS_SYSSTS3_SELFINSPECTION = 5;
    MONRSYSSTS_SYSSTS3_RESERVED1 = 6;
    MONRSYSSTS_SYSSTS3_RESERVED2 = 7;
  }
  enum NavNOAStatusChangeReqType {
    NAVNOASTATUSCHANGEREQ_ADCTRLMODE_DEFAULT = 0;
    NAVNOASTATUSCHANGEREQ_ADCTRLMODE_HWA = 1;
    NAVNOASTATUSCHANGEREQ_ADCTRLMODE_NOA = 2;
    NAVNOASTATUSCHANGEREQ_ADCTRLMODE_CNOA = 3;
  }
  enum PrkgDstCtrlReqType {
    PRKGDSTCTRLREQ_ONOFFNOREQ_NOREQ = 0;
    PRKGDSTCTRLREQ_ONOFFNOREQ_ON = 1;
    PRKGDSTCTRLREQ_ONOFFNOREQ_OFF = 2;
  }
  enum PrkgTouchCoornReqFingerIndexType {
    PRKGTOUCHCOORNREQFINGERINDEX_INDEX1_NOREQ = 0;
    PRKGTOUCHCOORNREQFINGERINDEX_INDEX1_1 = 1;
    PRKGTOUCHCOORNREQFINGERINDEX_INDEX1_2 = 2;
    PRKGTOUCHCOORNREQFINGERINDEX_INDEX1_3 = 3;
    PRKGTOUCHCOORNREQFINGERINDEX_INDEX1_4 = 4;
    PRKGTOUCHCOORNREQFINGERINDEX_INDEX1_5 = 5;
  }
  enum PrkgTouchCoornReqTouchEveTypType {
    PRKGTOUCHCOORNREQTOUCHEVETYP_TOUCHEVETYP_NOTTOUCH = 0;
    PRKGTOUCHCOORNREQTOUCHEVETYP_TOUCHEVETYP_PENDOWN = 1;
    PRKGTOUCHCOORNREQTOUCHEVETYP_TOUCHEVETYP_PENUP = 2;
    PRKGTOUCHCOORNREQTOUCHEVETYP_TOUCHEVETYP_PENMOVE = 3;
  }
  enum ProfPenSts1Type {
    PROFPENSTS1_IDPEN_PROFUKWN = 0;
    PROFPENSTS1_IDPEN_PROF1 = 1;
    PROFPENSTS1_IDPEN_PROF2 = 2;
    PROFPENSTS1_IDPEN_PROF3 = 3;
    PROFPENSTS1_IDPEN_PROF4 = 4;
    PROFPENSTS1_IDPEN_PROF5 = 5;
    PROFPENSTS1_IDPEN_PROF6 = 6;
    PROFPENSTS1_IDPEN_PROF7 = 7;
    PROFPENSTS1_IDPEN_PROF8 = 8;
    PROFPENSTS1_IDPEN_PROF9 = 9;
    PROFPENSTS1_IDPEN_PROF10 = 10;
    PROFPENSTS1_IDPEN_PROF11 = 11;
    PROFPENSTS1_IDPEN_PROF12 = 12;
    PROFPENSTS1_IDPEN_PROF13 = 13;
    PROFPENSTS1_IDPEN_RESD14 = 14;
    PROFPENSTS1_IDPEN_PROFALL = 15;
  }
  enum PtDrvrSetgType {
    PTDRVRSETG_DRVMODREQTYPE1_UNDEFD = 0;
    PTDRVRSETG_DRVMODREQTYPE1_ECO = 1;
    PTDRVRSETG_DRVMODREQTYPE1_COMFORT_NORMAL = 2;
    PTDRVRSETG_DRVMODREQTYPE1_DYNAMIC_SPORT = 3;
    PTDRVRSETG_DRVMODREQTYPE1_INDIVIDUAL = 4;
    PTDRVRSETG_DRVMODREQTYPE1_OFFROAD_CROSSTERRAIN = 5;
    PTDRVRSETG_DRVMODREQTYPE1_ADAPTIVE = 6;
    PTDRVRSETG_DRVMODREQTYPE1_RACE = 7;
    PTDRVRSETG_DRVMODREQTYPE1_PURE_EV = 8;
    PTDRVRSETG_DRVMODREQTYPE1_HYBRID = 9;
    PTDRVRSETG_DRVMODREQTYPE1_POWER = 10;
    PTDRVRSETG_DRVMODREQTYPE1_SNOW = 11;
    PTDRVRSETG_DRVMODREQTYPE1_SAND = 12;
    PTDRVRSETG_DRVMODREQTYPE1_MUD = 13;
    PTDRVRSETG_DRVMODREQTYPE1_ROCK = 14;
    PTDRVRSETG_DRVMODREQTYPE1_ERR = 15;
  }
  enum ReStreamMediaSwtReqType {
    RESTREAMMEDIASWTREQ_ONOFFNOREQ_NOREQ = 0;
    RESTREAMMEDIASWTREQ_ONOFFNOREQ_ON = 1;
    RESTREAMMEDIASWTREQ_ONOFFNOREQ_OFF = 2;
  }
  enum RPASelectParInType {
    RPASELECTPARIN_RPASELECTPARIN_DEFAULT = 0;
    RPASELECTPARIN_RPASELECTPARIN_PHONEPRKGIN = 1;
    RPASELECTPARIN_RPASELECTPARIN_CLSDOORPRKGIN = 2;
    RPASELECTPARIN_RPASELECTPARIN_RESERVED = 3;
  }
  enum SftySigGroupFromHmiSafe1SftyHmiDendType {
    SFTYSIGGROUPFROMHMISAFE1SFTYHMIDEND_NOYESCRIT1_NOTVLD1 = 0;
    SFTYSIGGROUPFROMHMISAFE1SFTYHMIDEND_NOYESCRIT1_NO = 1;
    SFTYSIGGROUPFROMHMISAFE1SFTYHMIDEND_NOYESCRIT1_YES = 2;
    SFTYSIGGROUPFROMHMISAFE1SFTYHMIDEND_NOYESCRIT1_NOTVLD2 = 3;
  }
  enum SftySigGroupFromHmiSafe1SftyHmiEnaType {
    SFTYSIGGROUPFROMHMISAFE1SFTYHMIENA_NOYESCRIT1_NOTVLD1 = 0;
    SFTYSIGGROUPFROMHMISAFE1SFTYHMIENA_NOYESCRIT1_NO = 1;
    SFTYSIGGROUPFROMHMISAFE1SFTYHMIENA_NOYESCRIT1_YES = 2;
    SFTYSIGGROUPFROMHMISAFE1SFTYHMIENA_NOYESCRIT1_NOTVLD2 = 3;
  }
  enum SftySigGroupFromHmiSafe1SftySigFaildDetdByHmiType {
    SFTYSIGGROUPFROMHMISAFE1SFTYSIGFAILDDETDBYHMI_NOYESCRIT1_NOTVLD1 = 0;
    SFTYSIGGROUPFROMHMISAFE1SFTYSIGFAILDDETDBYHMI_NOYESCRIT1_NO = 1;
    SFTYSIGGROUPFROMHMISAFE1SFTYSIGFAILDDETDBYHMI_NOYESCRIT1_YES = 2;
    SFTYSIGGROUPFROMHMISAFE1SFTYSIGFAILDDETDBYHMI_NOYESCRIT1_NOTVLD2 = 3;
  }
  enum SnsrDrvrPfmncStsFromDHUType {
    SNSRDRVRPFMNCSTSFROMDHU_SENSOR_STRTUP = 0;
    SNSRDRVRPFMNCSTSFROMDHU_SENSOR_SHUTDOWN = 1;
    SNSRDRVRPFMNCSTSFROMDHU_SENSOR_RUNNG = 2;
    SNSRDRVRPFMNCSTSFROMDHU_SENSOR_BLKD = 3;
    SNSRDRVRPFMNCSTSFROMDHU_SENSOR_FAULTY = 4;
    SNSRDRVRPFMNCSTSFROMDHU_SENSOR_HOT = 5;
    SNSRDRVRPFMNCSTSFROMDHU_SENSOR_VOL = 6;
    SNSRDRVRPFMNCSTSFROMDHU_SENSOR_CURR = 7;
  }
  enum SpdLimMethdOffsModeReqType {
    SPDLIMMETHDOFFSMODEREQ_HMISPDLIMMETHDOFFSMOD_FIXVALUE = 0;
    SPDLIMMETHDOFFSMODEREQ_HMISPDLIMMETHDOFFSMOD_PERCENTAGE = 1;
    SPDLIMMETHDOFFSMODEREQ_HMISPDLIMMETHDOFFSMOD_FAULT = 2;
    SPDLIMMETHDOFFSMODEREQ_HMISPDLIMMETHDOFFSMOD_RESERVED1 = 3;
  }
  enum VoiceActiveADCUType {
    VOICEACTIVEADCU_ACCPMRDIAG_NORMAL = 0;
    VOICEACTIVEADCU_ACCPMRDIAG_WARNING = 1;
    VOICEACTIVEADCU_ACCPMRDIAG_ERROR = 2;
  }
  // description AmplifrErrSts [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 amplifr_err_sts = 1;
  // [] [0|1] [initial_value:None]
  optional bool amplifr_err_sts_ub = 2;
  // description Custom parking adsorption button [] [0|1] [initial_value:0]
  optional bool apa_prkg_adsorption = 3;
  // [] [0|1] [initial_value:None]
  optional bool apa_prkg_adsorption_ub = 4;
  // [Unitless] [0.0|1023.0] [initial_value:1023]
  optional uint32 dist_cam_from_nav_map = 5;
  // [] [0|1] [initial_value:None]
  optional bool dist_cam_from_nav_map_ub = 6;
  // description Drift Parking setting [] [0|1] [initial_value:0]
  optional bool drift_prkg_req = 7;
  // [] [0|1] [initial_value:None]
  optional bool drift_prkg_req_ub = 8;
  // description Exit APA Custom parking request [] [0|1] [initial_value:0]
  optional bool exit_custom_prkg_req = 9;
  // [] [0|1] [initial_value:None]
  optional bool exit_custom_prkg_req_ub = 10;
  // description Switch the direction of parking in the front and rear of the vehicle [] [0|3] [initial_value:0]
  optional FrntAndRePrkgInSwtType frnt_and_re_prkg_in_swt = 11;
  // [] [0|1] [initial_value:None]
  optional bool frnt_and_re_prkg_in_swt_ub = 12;
  // description GPS signal confidence, successful=1 or failure=0.  [] [0|1] [initial_value:1]
  optional bool gps_status_int = 13;
  // [] [0|1] [initial_value:None]
  optional bool gps_status_int_ub = 14;
  // description This switch is used to set auto lane change mode with speed [] [0|3] [initial_value:0]
  optional HmiCnoaAutoLaneChgStyleSwStsType hmi_cnoa_auto_lane_chg_style_sw_sts = 15;
  // [] [0|1] [initial_value:None]
  optional bool hmi_cnoa_auto_lane_chg_style_sw_sts_ub = 16;
  // description subswitch of Pilot fusion navigation menu setting [] [0|1] [initial_value:0]
  optional bool hmi_cnoa_crs_swt_on_off = 17;
  // [] [0|1] [initial_value:None]
  optional bool hmi_cnoa_crs_swt_on_off_ub = 18;
  // description Release signal [] [0|1] [initial_value:0]
  optional bool hmi_cnoa_lrng_swt_on_off = 19;
  // [] [0|1] [initial_value:None]
  optional bool hmi_cnoa_lrng_swt_on_off_ub = 20;
  // description Voice activated lane change switch settings [] [0|1] [initial_value:0]
  optional bool hmi_cnoa_sod_lan_chg_swt = 21;
  // [] [0|1] [initial_value:None]
  optional bool hmi_cnoa_sod_lan_chg_swt_ub = 22;
  // description CNOA control [] [0|3] [initial_value:0]
  optional HmiDrvrSodReqCnoaLrngType hmi_drvr_sod_req_cnoa_lrng = 23;
  // [] [0|1] [initial_value:None]
  optional bool hmi_drvr_sod_req_cnoa_lrng_ub = 24;
  // description CNOA control [] [0|3] [initial_value:0]
  optional HmiDrvrSodReqCnoaMainPageType hmi_drvr_sod_req_cnoa_main_page = 25;
  // [] [0|1] [initial_value:None]
  optional bool hmi_drvr_sod_req_cnoa_main_page_ub = 26;
  // description CNOA control [] [0|3] [initial_value:0]
  optional HmiDrvrSodReqContnsLrngType hmi_drvr_sod_req_contns_lrng = 27;
  // [] [0|1] [initial_value:None]
  optional bool hmi_drvr_sod_req_contns_lrng_ub = 28;
  // description CNOA control [] [0|3] [initial_value:0]
  optional HmiDrvrSodReqFinishLrngType hmi_drvr_sod_req_finish_lrng = 29;
  // [] [0|1] [initial_value:None]
  optional bool hmi_drvr_sod_req_finish_lrng_ub = 30;
  // description ETC Switch [] [0|1] [initial_value:0]
  optional bool hmi_etc_traffic_sw_sts = 31;
  // [] [0|1] [initial_value:None]
  optional bool hmi_etc_traffic_sw_sts_ub = 32;
  // description Absolute value of speed limit offset [Unitless] [0.0|63.0] [initial_value:0]
  optional uint32 hmi_spd_lim_methd_off_set = 33;
  // [] [0|1] [initial_value:None]
  optional bool hmi_spd_lim_methd_off_set_ub = 34;
  // description Rate offset percentage Setting [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 hmi_spd_lim_methd_preference = 35;
  // [] [0|1] [initial_value:None]
  optional bool hmi_spd_lim_methd_preference_ub = 36;
  // description HMI MAX EV mode [] [0|1] [initial_value:0]
  optional bool hmi_sup_end_mod = 37;
  // [] [0|1] [initial_value:None]
  optional bool hmi_sup_end_mod_ub = 38;
  // description The HMI receives the calculation delay signal fed back by the DHU cloud and forwards it to the ASM [] [0|3] [initial_value:0]
  optional HmiToPrkgDelayType hmi_to_prkg_delay = 39;
  // [] [0|1] [initial_value:None]
  optional bool hmi_to_prkg_delay_ub = 40;
  // description HPA-Max function setting switch [] [0|1] [initial_value:0]
  optional bool hpa_max_swt = 41;
  // [] [0|1] [initial_value:None]
  optional bool hpa_max_swt_ub = 42;
  // description Intelligent Summon function setting switch [] [0|1] [initial_value:0]
  optional bool intelligent_summon_setting = 43;
  // [] [0|1] [initial_value:None]
  optional bool intelligent_summon_setting_ub = 44;
  // description ISAPhoneStatus [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 isa_phone_status = 45;
  // [] [0|1] [initial_value:None]
  optional bool isa_phone_status_ub = 46;
  // description Indicate AVM working status. [] [0|7] [initial_value:0]
  optional MonrSysStsType monr_sys_sts = 47;
  // [] [0|1] [initial_value:None]
  optional bool monr_sys_sts_ub = 48;
  // description Nav NOA Status Change Req [] [0|3] [initial_value:0]
  optional NavNOAStatusChangeReqType nav_noa_status_change_req = 49;
  // [] [0|1] [initial_value:None]
  optional bool nav_noa_status_change_req_ub = 50;
  // description PhoneUserlD [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 phone_userl_d = 51;
  // [] [0|1] [initial_value:None]
  optional bool phone_userl_d_ub = 52;
  // description Request to enter/exit PDC interface [] [0|3] [initial_value:0]
  optional PrkgDstCtrlReqType prkg_dst_ctrl_req = 53;
  // [] [0|1] [initial_value:None]
  optional bool prkg_dst_ctrl_req_ub = 54;
  // [] [0|1] [initial_value:None]
  optional bool prkg_touch_coorn_req_ub = 55;
  // description The coordinate of finger when user clicks the screen [Unitless] [0.0|8191.0] [initial_value:0]
  optional uint32 prkg_touch_coorn_req_coordinate_x = 56;
  // description The coordinate of finger when user clicks the screen [Unitless] [0.0|8191.0] [initial_value:0]
  optional uint32 prkg_touch_coorn_req_coordinate_y = 57;
  // description The amount of finger when user clicks the screen [] [0|7] [initial_value:0]
  optional PrkgTouchCoornReqFingerIndexType prkg_touch_coorn_req_finger_index = 58;
  // description The gesture of finger when user clicks the screen [] [0|7] [initial_value:0]
  optional PrkgTouchCoornReqTouchEveTypType prkg_touch_coorn_req_touch_eve_typ = 59;
  // [] [0|15] [initial_value:0]
  optional ProfPenSts1Type prof_pen_sts1 = 60;
  // [] [0|1] [initial_value:None]
  optional bool prof_pen_sts1_ub = 61;
  // description PtDrvrSetg [] [0|15] [initial_value:0]
  optional PtDrvrSetgType pt_drvr_setg = 62;
  // [] [0|1] [initial_value:None]
  optional bool pt_drvr_setg_ub = 63;
  // description Rear streaming media switch [] [0|3] [initial_value:0]
  optional ReStreamMediaSwtReqType re_stream_media_swt_req = 64;
  // [] [0|1] [initial_value:None]
  optional bool re_stream_media_swt_req_ub = 65;
  // description User-selected departure and parking method [] [0|7] [initial_value:0]
  optional RPASelectParInType rpa_select_par_in = 66;
  // [] [0|1] [initial_value:None]
  optional bool rpa_select_par_in_ub = 67;
  // description RVMPhoneStatus [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 rvm_phone_status = 68;
  // [] [0|1] [initial_value:None]
  optional bool rvm_phone_status_ub = 69;
  // [] [0|1] [initial_value:None]
  optional bool sfty_sig_group_from_hmi_safe1_ub = 70;
  // description this port is used to tell the status of HMI subsystem to ADAS subsystem [] [0|3] [initial_value:0]
  optional SftySigGroupFromHmiSafe1SftyHmiDendType sfty_sig_group_from_hmi_safe1_sfty_hmi_dend = 71;
  // description this port is used to tell the status of HMI subsystem to ADAS subsystem [] [0|3] [initial_value:0]
  optional SftySigGroupFromHmiSafe1SftyHmiEnaType sfty_sig_group_from_hmi_safe1_sfty_hmi_ena = 72;
  // description this port is used to tell the status of HMI subsystem to ADAS subsystem [] [0|3] [initial_value:0]
  optional SftySigGroupFromHmiSafe1SftySigFaildDetdByHmiType sfty_sig_group_from_hmi_safe1_sfty_sig_faild_detd_by_hmi = 73;
  // description this port is used to tell the status of HMI subsystem to ADAS subsystem [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 sfty_sig_group_from_hmi_safe1_sfty_sig_group_from_hmi_safe_chks = 74;
  // description this port is used to tell the status of HMI subsystem to ADAS subsystem [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 sfty_sig_group_from_hmi_safe1_sfty_sig_group_from_hmi_safe_cntr = 75;
  // description  DMM sensor status signal [] [0|7] [initial_value:1]
  optional SnsrDrvrPfmncStsFromDHUType snsr_drvr_pfmnc_sts_from_dhu = 76;
  // [] [0|1] [initial_value:None]
  optional bool snsr_drvr_pfmnc_sts_from_dhu_ub = 77;
  // description fusion speed offset mode include FixValue /Percentage;   [] [0|3] [initial_value:0]
  optional SpdLimMethdOffsModeReqType spd_lim_methd_offs_mode_req = 78;
  // [] [0|1] [initial_value:None]
  optional bool spd_lim_methd_offs_mode_req_ub = 79;
  // description Activate ADCU through voice from inside or outside the vehicle [] [0|15] [initial_value:0]
  optional VoiceActiveADCUType voice_active_adcu = 80;
  // [] [0|1] [initial_value:None]
  optional bool voice_active_adcu_ub = 81;
  // description Voice controlled braking [] [0|1] [initial_value:0]
  optional bool voice_ctrl_brk = 82;
  // [] [0|1] [initial_value:None]
  optional bool voice_ctrl_brk_ub = 83;
  // [] [0|1] [initial_value:None]
  optional bool aut_valt_prkg_map_resp_ub = 84;
  // description bit0-31 means map ID 1-32 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 aut_valt_prkg_map_resp_map_id_list1 = 85;
  // description bit0-31 means map ID 33-64 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 aut_valt_prkg_map_resp_map_id_list2 = 86;
  // description bit0-31 means map ID 65-96 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 aut_valt_prkg_map_resp_map_id_list3 = 87;
  // description bit0-31 means map ID 97-100 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 aut_valt_prkg_map_resp_map_id_list4 = 88;
  // description Map ID self-test result [] [0|15] [initial_value:0]
  optional AutValtPrkgMapRespMapIDResultType aut_valt_prkg_map_resp_map_id_result = 89;
}

message ADCU_ZCUCANFD1_FR06_1FF {
// Control Message
  enum AD4FrtLampReqType {
    AD4FRTLAMPREQ_AD4FRTLAMPREQ_NOREQUEST = 0;
    AD4FRTLAMPREQ_AD4FRTLAMPREQ_TURNOFF = 1;
    AD4FRTLAMPREQ_AD4FRTLAMPREQ_TURNONLOWBEAM = 2;
    AD4FRTLAMPREQ_AD4FRTLAMPREQ_TURNONHIGHBEAM = 3;
  }
  enum AD4RearFogLampReqType {
    AD4REARFOGLAMPREQ_ONOFFNOREQ_NOREQ = 0;
    AD4REARFOGLAMPREQ_ONOFFNOREQ_ON = 1;
    AD4REARFOGLAMPREQ_ONOFFNOREQ_OFF = 2;
  }
  enum AD4TrunkCtrlReqType {
    AD4TRUNKCTRLREQ_DOOROPENERIDLE = 0;
    AD4TRUNKCTRLREQ_DOOROPENEROPEN = 1;
    AD4TRUNKCTRLREQ_DOOROPENERCLS = 2;
    AD4TRUNKCTRLREQ_DOOROPENERSTOP = 3;
  }
  enum AsyLineRiTypType {
    ASYLINERITYP_ASYLINELETYP_NODISPLAY = 0;
    ASYLINERITYP_ASYLINELETYP_SOLIDLINE = 1;
    ASYLINERITYP_ASYLINELETYP_DASHLINE = 2;
  }
  enum AsySodPilotCfirmType {
    ASYSODPILOTCFIRM_ACTVNAVL2_NOCMD = 0;
    ASYSODPILOTCFIRM_ACTVNAVL2_ACTVN = 1;
    ASYSODPILOTCFIRM_ACTVNAVL2_DEACTVN = 2;
  }
  enum AvlStsForLongAutDrvSoundType {
    AVLSTSFORLONGAUTDRVSOUND_AVLSTSFORLONGAUTDRV4_NOMSG = 0;
    AVLSTSFORLONGAUTDRVSOUND_AVLSTSFORLONGAUTDRV4_LGTCTRLNOTAVL = 1;
    AVLSTSFORLONGAUTDRVSOUND_AVLSTSFORLONGAUTDRV4_ACCCNCL = 2;
    AVLSTSFORLONGAUTDRVSOUND_AVLSTSFORLONGAUTDRV4_NOVEHAHD = 3;
    AVLSTSFORLONGAUTDRVSOUND_AVLSTSFORLONGAUTDRV4_DRVRBUCDRQRD = 4;
    AVLSTSFORLONGAUTDRVSOUND_AVLSTSFORLONGAUTDRV4_DRVRDOORNOTCLSD = 5;
    AVLSTSFORLONGAUTDRVSOUND_AVLSTSFORLONGAUTDRV4_GEARNOTINDRV = 6;
    AVLSTSFORLONGAUTDRVSOUND_AVLSTSFORLONGAUTDRV4_GEARNEUT = 7;
    AVLSTSFORLONGAUTDRVSOUND_AVLSTSFORLONGAUTDRV4_SNSRBLKD = 8;
    AVLSTSFORLONGAUTDRVSOUND_AVLSTSFORLONGAUTDRV4_HLDTIMAXEXCDD = 9;
    AVLSTSFORLONGAUTDRVSOUND_AVLSTSFORLONGAUTDRV4_OVRDTIMAXEXCDD = 10;
    AVLSTSFORLONGAUTDRVSOUND_AVLSTSFORLONGAUTDRV4_SPDLOWLIMEXCDD = 11;
    AVLSTSFORLONGAUTDRVSOUND_AVLSTSFORLONGAUTDRV4_DRVMODSELDNOTOK = 12;
    AVLSTSFORLONGAUTDRVSOUND_AVLSTSFORLONGAUTDRV4_EPBAPPLD = 13;
    AVLSTSFORLONGAUTDRVSOUND_AVLSTSFORLONGAUTDRV4_ESC_OFF = 14;
    AVLSTSFORLONGAUTDRVSOUND_AVLSTSFORLONGAUTDRV4_HDC_ON = 15;
  }
  enum CnclWarnForAutDrvSoundType {
    CNCLWARNFORAUTDRVSOUND_LVLWARN2_NOWARN = 0;
    CNCLWARNFORAUTDRVSOUND_LVLWARN2_LVL1 = 1;
    CNCLWARNFORAUTDRVSOUND_LVLWARN2_LVL2 = 2;
    CNCLWARNFORAUTDRVSOUND_LVLWARN2_LVL3 = 3;
  }
  enum CnclWarnLgtForAutDrvSoundType {
    CNCLWARNLGTFORAUTDRVSOUND_NOYESCRIT1_NOTVLD1 = 0;
    CNCLWARNLGTFORAUTDRVSOUND_NOYESCRIT1_NO = 1;
    CNCLWARNLGTFORAUTDRVSOUND_NOYESCRIT1_YES = 2;
    CNCLWARNLGTFORAUTDRVSOUND_NOYESCRIT1_NOTVLD2 = 3;
  }
  enum FrntLidarSts0Type {
    FRNTLIDARSTS0_RSDSMSTST_CFG = 0;
    FRNTLIDARSTS0_RSDSMSTST_STRTUP = 1;
    FRNTLIDARSTS0_RSDSMSTST_RUNNG = 2;
    FRNTLIDARSTS0_RSDSMSTST_BLKD = 3;
    FRNTLIDARSTS0_RSDSMSTST_FAULTY = 4;
    FRNTLIDARSTS0_RSDSMSTST_SHUTDOWN = 5;
    FRNTLIDARSTS0_RSDSMSTST_HOT = 6;
    FRNTLIDARSTS0_RSDSMSTST_CAL = 7;
  }
  enum FrntSideCamLeSts0Type {
    FRNTSIDECAMLESTS0_RSDSMSTST_CFG = 0;
    FRNTSIDECAMLESTS0_RSDSMSTST_STRTUP = 1;
    FRNTSIDECAMLESTS0_RSDSMSTST_RUNNG = 2;
    FRNTSIDECAMLESTS0_RSDSMSTST_BLKD = 3;
    FRNTSIDECAMLESTS0_RSDSMSTST_FAULTY = 4;
    FRNTSIDECAMLESTS0_RSDSMSTST_SHUTDOWN = 5;
    FRNTSIDECAMLESTS0_RSDSMSTST_HOT = 6;
    FRNTSIDECAMLESTS0_RSDSMSTST_CAL = 7;
  }
  enum FrntSideCamRiSts0Type {
    FRNTSIDECAMRISTS0_RSDSMSTST_CFG = 0;
    FRNTSIDECAMRISTS0_RSDSMSTST_STRTUP = 1;
    FRNTSIDECAMRISTS0_RSDSMSTST_RUNNG = 2;
    FRNTSIDECAMRISTS0_RSDSMSTST_BLKD = 3;
    FRNTSIDECAMRISTS0_RSDSMSTST_FAULTY = 4;
    FRNTSIDECAMRISTS0_RSDSMSTST_SHUTDOWN = 5;
    FRNTSIDECAMRISTS0_RSDSMSTST_HOT = 6;
    FRNTSIDECAMRISTS0_RSDSMSTST_CAL = 7;
  }
  enum HmiAutoLaneChgStyleType {
    HMIAUTOLANECHGSTYLE_HMIAUTOLANECHGSTYLE_NORMAL = 0;
    HMIAUTOLANECHGSTYLE_HMIAUTOLANECHGSTYLE_GENTLE = 1;
    HMIAUTOLANECHGSTYLE_HMIAUTOLANECHGSTYLE_RAPID = 2;
    HMIAUTOLANECHGSTYLE_HMIAUTOLANECHGSTYLE_FAULT = 3;
  }
  enum HmiCrosswalkcolorType {
    HMICROSSWALKCOLOR_LINECOLOR_WHITE = 0;
    HMICROSSWALKCOLOR_LINECOLOR_YELLOW = 1;
    HMICROSSWALKCOLOR_LINECOLOR_RED = 2;
    HMICROSSWALKCOLOR_LINECOLOR_BLUE = 3;
    HMICROSSWALKCOLOR_LINECOLOR_ORANGE = 4;
    HMICROSSWALKCOLOR_LINECOLOR_GREEN = 5;
    HMICROSSWALKCOLOR_LINECOLOR_OTHER = 6;
  }
  enum HmiLaneChgInfoType {
    HMILANECHGINFO_HMILANECHGINFO_DEFAULT = 0;
    HMILANECHGINFO_HMILANECHGINFO_FRONTVEHICLESPEEDSLOW = 1;
    HMILANECHGINFO_HMILANECHGINFO_PLSCHANGETORIGHTLANE = 2;
    HMILANECHGINFO_HMILANECHGINFO_PLSCHANGETOLEFTLANE = 3;
  }
  // description AD4 front low/high beam request [] [0|3] [initial_value:0]
  optional AD4FrtLampReqType ad4_frt_lamp_req = 1;
  // [] [0|1] [initial_value:None]
  optional bool ad4_frt_lamp_req_ub = 2;
  // description AD4 Rear fog lamp request [] [0|3] [initial_value:0]
  optional AD4RearFogLampReqType ad4_rear_fog_lamp_req = 3;
  // [] [0|1] [initial_value:None]
  optional bool ad4_rear_fog_lamp_req_ub = 4;
  // description AD4 Res Request For E2E [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 ad4_res_req_for_e2_e = 5;
  // [] [0|1] [initial_value:None]
  optional bool ad4_res_req_for_e2_e_ub = 6;
  // description AD4 Trunk control Req [] [0|3] [initial_value:0]
  optional AD4TrunkCtrlReqType ad4_trunk_ctrl_req = 7;
  // [] [0|1] [initial_value:None]
  optional bool ad4_trunk_ctrl_req_ub = 8;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_ri2_pah2_ub = 9;
  // description Supply the parameters to creat second right 2 line segment of the path of lane lines [m] [-30.0|30.0] [initial_value:3000]
  optional double asy_line_ri2_pah2_prm_a = 10;
  // description Supply the parameters to creat second right 2 line segment of the path of lane lines [rad] [-1.6|1.6] [initial_value:1600]
  optional double asy_line_ri2_pah2_prm_b = 11;
  // description Supply the parameters to creat second right 2 line segment of the path of lane lines [1/m] [-0.1|0.1] [initial_value:1000]
  optional double asy_line_ri2_pah2_prm_c = 12;
  // description Supply the parameters to creat second right 2 line segment of the path of lane lines [1/m^2] [-0.001|0.001] [initial_value:1000]
  optional double asy_line_ri2_pah2_prm_d = 13;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_ri_pah_ub = 14;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_ri_pah2_ub = 15;
  // description Supply the parameters to creat second right line segment of the path of lane lines [m] [-30.0|30.0] [initial_value:3000]
  optional double asy_line_ri_pah2_prm_a = 16;
  // description Supply the parameters to creat second right line segment of the path of lane lines [rad] [-1.6|1.6] [initial_value:1600]
  optional double asy_line_ri_pah2_prm_b = 17;
  // description Supply the parameters to creat second right line segment of the path of lane lines [1/m] [-0.1|0.1] [initial_value:1000]
  optional double asy_line_ri_pah2_prm_c = 18;
  // description Supply the parameters to creat second right line segment of the path of lane lines [1/m^2] [-0.001|0.001] [initial_value:1000]
  optional double asy_line_ri_pah2_prm_d = 19;
  // description DX-distance  [m] [-30.0|30.0] [initial_value:3000]
  optional double asy_line_ri_pah_prm_a = 20;
  // description yaw angle radian [rad] [-1.6|1.6] [initial_value:1600]
  optional double asy_line_ri_pah_prm_b = 21;
  // description curvature [1/m] [-0.1|0.1] [initial_value:1000]
  optional double asy_line_ri_pah_prm_c = 22;
  // description curvature change [1/m^2] [-0.001|0.001] [initial_value:1000]
  optional double asy_line_ri_pah_prm_d = 23;
  // [m] [-30.0|225.0] [initial_value:30]
  optional double asy_line_ri_ramp_posn = 24;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_ri_ramp_posn_ub = 25;
  // description The signal indicates the type of the right line of ego lane. [] [0|15] [initial_value:0]
  optional AsyLineRiTypType asy_line_ri_typ = 26;
  // [] [0|1] [initial_value:None]
  optional bool asy_line_ri_typ_ub = 27;
  // description End point of the first right 2 line segment [m] [-30.0|225.0] [initial_value:30]
  optional double asy_ri2_first_end = 28;
  // [] [0|1] [initial_value:None]
  optional bool asy_ri2_first_end_ub = 29;
  // description Start point of the first right 2 line segment [m] [-30.0|225.0] [initial_value:30]
  optional double asy_ri2_first_strt = 30;
  // [] [0|1] [initial_value:None]
  optional bool asy_ri2_first_strt_ub = 31;
  // description End point of the second right 2 line segment [m] [-30.0|225.0] [initial_value:30]
  optional double asy_ri2_sec_end = 32;
  // [] [0|1] [initial_value:None]
  optional bool asy_ri2_sec_end_ub = 33;
  // description Start point of the second right 2 line segment [m] [-30.0|225.0] [initial_value:30]
  optional double asy_ri2_sec_strt = 34;
  // [] [0|1] [initial_value:None]
  optional bool asy_ri2_sec_strt_ub = 35;
  // description End point of the first right line segment [m] [-30.0|225.0] [initial_value:30]
  optional double asy_ri_first_end = 36;
  // [] [0|1] [initial_value:None]
  optional bool asy_ri_first_end_ub = 37;
  // description End point of the second right line segment [m] [-30.0|225.0] [initial_value:30]
  optional double asy_ri_first_strt = 38;
  // [] [0|1] [initial_value:None]
  optional bool asy_ri_first_strt_ub = 39;
  // description End point of the second right line segment [m] [-30.0|225.0] [initial_value:30]
  optional double asy_ri_sec_end = 40;
  // [] [0|1] [initial_value:None]
  optional bool asy_ri_sec_end_ub = 41;
  // description Start point of the second right line segment [m] [-30.0|225.0] [initial_value:30]
  optional double asy_ri_sec_strt = 42;
  // [] [0|1] [initial_value:None]
  optional bool asy_ri_sec_strt_ub = 43;
  // description An estimation of the road curvature. This signal will give the curvature of the road edge, barrier or lane marking, depending on which kind of intervention currently active. [rad] [-0.0064|0.006350000000000001] [initial_value:128]
  optional double asy_road_crvt = 44;
  // [] [0|1] [initial_value:None]
  optional bool asy_road_crvt_ub = 45;
  // description SafeStop status of NOA/HWA [] [0|1] [initial_value:0]
  optional bool asy_safe_stop_sts = 46;
  // [] [0|1] [initial_value:None]
  optional bool asy_safe_stop_sts_ub = 47;
  // description the status feedback of voice activation for lane changing [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_sod_lane_chg_switch = 48;
  // [] [0|1] [initial_value:None]
  optional bool asy_sod_lane_chg_switch_ub = 49;
  // description the status feedback of voice activation for G-Pilot [] [0|3] [initial_value:0]
  optional AsySodPilotCfirmType asy_sod_pilot_cfirm = 50;
  // [] [0|1] [initial_value:None]
  optional bool asy_sod_pilot_cfirm_ub = 51;
  // description function unavaliable sound signal [] [0|15] [initial_value:0]
  optional AvlStsForLongAutDrvSoundType avl_sts_for_long_aut_drv_sound = 52;
  // [] [0|1] [initial_value:None]
  optional bool avl_sts_for_long_aut_drv_sound_ub = 53;
  // description cancal warning sound signal [] [0|3] [initial_value:0]
  optional CnclWarnForAutDrvSoundType cncl_warn_for_aut_drv_sound = 54;
  // [] [0|1] [initial_value:None]
  optional bool cncl_warn_for_aut_drv_sound_ub = 55;
  // description function cancal warning sound signal [] [0|3] [initial_value:0]
  optional CnclWarnLgtForAutDrvSoundType cncl_warn_lgt_for_aut_drv_sound = 56;
  // [] [0|1] [initial_value:None]
  optional bool cncl_warn_lgt_for_aut_drv_sound_ub = 57;
  // description Front Lidar status for display [] [0|7] [initial_value:0]
  optional FrntLidarSts0Type frnt_lidar_sts0 = 58;
  // [] [0|1] [initial_value:None]
  optional bool frnt_lidar_sts0_ub = 59;
  // description Front Left Side Camera status for display [] [0|7] [initial_value:0]
  optional FrntSideCamLeSts0Type frnt_side_cam_le_sts0 = 60;
  // [] [0|1] [initial_value:None]
  optional bool frnt_side_cam_le_sts0_ub = 61;
  // description Front Right Side Camera status for display [] [0|7] [initial_value:0]
  optional FrntSideCamRiSts0Type frnt_side_cam_ri_sts0 = 62;
  // [] [0|1] [initial_value:None]
  optional bool frnt_side_cam_ri_sts0_ub = 63;
  // description End point of the first line segment [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_asy_vehicle_first_end = 64;
  // [] [0|1] [initial_value:None]
  optional bool hmi_asy_vehicle_first_end_ub = 65;
  // description Start point of the first line segment [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_asy_vehicle_first_strt = 66;
  // [] [0|1] [initial_value:None]
  optional bool hmi_asy_vehicle_first_strt_ub = 67;
  // [] [0|1] [initial_value:None]
  optional bool hmi_asy_vehicle_pah_ub = 68;
  // [] [0|1] [initial_value:None]
  optional bool hmi_asy_vehicle_pah2_ub = 69;
  // description Supply the parameters to creat second line segment of the path of vehicle lines [m] [-30.0|30.0] [initial_value:3000]
  optional double hmi_asy_vehicle_pah2_prm_a = 70;
  // description Supply the parameters to creat second line segment of the path of vehicle lines [rad] [-1.6|1.6] [initial_value:1600]
  optional double hmi_asy_vehicle_pah2_prm_b = 71;
  // description Supply the parameters to creat second line segment of the path of vehicle lines [1/m] [-0.1|0.1] [initial_value:1000]
  optional double hmi_asy_vehicle_pah2_prm_c = 72;
  // description Supply the parameters to creat second  line segment of the path of vehicle lines [1/m^2] [-0.001|0.001] [initial_value:1000]
  optional double hmi_asy_vehicle_pah2_prm_d = 73;
  // description The signal indicates if the vehicle path diaplays. [] [0|1] [initial_value:0]
  optional bool hmi_asy_vehicle_pah_disp = 74;
  // [] [0|1] [initial_value:None]
  optional bool hmi_asy_vehicle_pah_disp_ub = 75;
  // description DX-distance  [m] [-30.0|30.0] [initial_value:3000]
  optional double hmi_asy_vehicle_pah_prm_a = 76;
  // description yaw angle radian [rad] [-1.6|1.6] [initial_value:1600]
  optional double hmi_asy_vehicle_pah_prm_b = 77;
  // description curvature [1/m] [-0.1|0.1] [initial_value:1000]
  optional double hmi_asy_vehicle_pah_prm_c = 78;
  // description curvature change [1/m^2] [-0.001|0.001] [initial_value:1000]
  optional double hmi_asy_vehicle_pah_prm_d = 79;
  // description End point of the second line segment [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_asy_vehicle_sec_end = 80;
  // [] [0|1] [initial_value:None]
  optional bool hmi_asy_vehicle_sec_end_ub = 81;
  // description Start point of the second line segment [m] [-30.0|225.0] [initial_value:30]
  optional double hmi_asy_vehicle_sec_strt = 82;
  // [] [0|1] [initial_value:None]
  optional bool hmi_asy_vehicle_sec_strt_ub = 83;
  // description This switch is used to set auto lane change mode with speed.  [] [0|3] [initial_value:0]
  optional HmiAutoLaneChgStyleType hmi_auto_lane_chg_style = 84;
  // [] [0|1] [initial_value:None]
  optional bool hmi_auto_lane_chg_style_ub = 85;
  // [] [0|1] [initial_value:None]
  optional bool hmi_crosswalk_ub = 86;
  // description Rotational angle of the crosswalk relative to the vehicle direction [rad] [-1.6|1.6] [initial_value:160]
  optional double hmi_crosswalk_angle = 87;
  // description crosswalk color [] [0|7] [initial_value:6]
  optional HmiCrosswalkcolorType hmi_crosswalkcolor = 88;
  // description Lateral distance to the crosswalk front edge center [m] [-100.0|100.0] [initial_value:1000]
  optional double hmi_crosswalklateral_distance = 89;
  // description Length of the crosswalk [m] [0.0|30.0] [initial_value:0]
  optional double hmi_crosswalklength = 90;
  // description Longitudinal distance to the crosswalk front edge [m] [0.0|150.0] [initial_value:0]
  optional double hmi_crosswalklongitudinal_distance = 91;
  // description TimeStamp [s] [0.0|429496.7295] [initial_value:0]
  optional double hmi_crosswalk_ti_stamp = 92;
  // description Width of the crosswalk [m] [0.0|30.0] [initial_value:0]
  optional double hmi_crosswalkwidth = 93;
  // description inform the driver with message please change lane ahead [] [0|3] [initial_value:0]
  optional HmiLaneChgInfoType hmi_lane_chg_info = 94;
  // [] [0|1] [initial_value:None]
  optional bool hmi_lane_chg_info_ub = 95;
  // description override warning to the driver at the first engine start period when ACC is working [] [0|1] [initial_value:0]
  optional bool ovrd_wrn_for_fst_actv = 96;
  // [] [0|1] [initial_value:None]
  optional bool ovrd_wrn_for_fst_actv_ub = 97;
  // description ValtPrkgAvmOpenReq [] [0|1] [initial_value:0]
  optional bool valt_prkg_avm_open_req = 98;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_avm_open_req_ub = 99;
}

message PASZCUCANFD1_FR06_210 {
// Control Message
  enum AudWarnOfSnsrParkAssiFrntType {
    AUDWARNOFSNSRPARKASSIFRNT_BUZZERREQ_BUZZEROFF = 0;
    AUDWARNOFSNSRPARKASSIFRNT_BUZZERREQ_BUZZERON = 1;
    AUDWARNOFSNSRPARKASSIFRNT_BUZZERREQ_BUZZERONAT4HZ = 2;
    AUDWARNOFSNSRPARKASSIFRNT_BUZZERREQ_BUZZERONAT2HZ = 3;
    AUDWARNOFSNSRPARKASSIFRNT_BUZZERREQ_LEFTON = 4;
    AUDWARNOFSNSRPARKASSIFRNT_BUZZERREQ_LEFTONAT4HZ = 5;
    AUDWARNOFSNSRPARKASSIFRNT_BUZZERREQ_LEFTONAT2HZ = 6;
    AUDWARNOFSNSRPARKASSIFRNT_BUZZERREQ_RIGHTON = 7;
    AUDWARNOFSNSRPARKASSIFRNT_BUZZERREQ_RIGHTONAT4HZ = 8;
    AUDWARNOFSNSRPARKASSIFRNT_BUZZERREQ_RIGHTONAT2HZ = 9;
  }
  enum AudWarnOfSnsrParkAssiReType {
    AUDWARNOFSNSRPARKASSIRE_BUZZERREQ_BUZZEROFF = 0;
    AUDWARNOFSNSRPARKASSIRE_BUZZERREQ_BUZZERON = 1;
    AUDWARNOFSNSRPARKASSIRE_BUZZERREQ_BUZZERONAT4HZ = 2;
    AUDWARNOFSNSRPARKASSIRE_BUZZERREQ_BUZZERONAT2HZ = 3;
    AUDWARNOFSNSRPARKASSIRE_BUZZERREQ_LEFTON = 4;
    AUDWARNOFSNSRPARKASSIRE_BUZZERREQ_LEFTONAT4HZ = 5;
    AUDWARNOFSNSRPARKASSIRE_BUZZERREQ_LEFTONAT2HZ = 6;
    AUDWARNOFSNSRPARKASSIRE_BUZZERREQ_RIGHTON = 7;
    AUDWARNOFSNSRPARKASSIRE_BUZZERREQ_RIGHTONAT4HZ = 8;
    AUDWARNOFSNSRPARKASSIRE_BUZZERREQ_RIGHTONAT2HZ = 9;
  }
  enum DispAndSwtOfPrkgModType {
    DISPANDSWTOFPRKGMOD_DISPANDSWTOFPRKGMOD_NOREQUEST = 0;
    DISPANDSWTOFPRKGMOD_DISPANDSWTOFPRKGMOD_PARKIN_OUTSELECT = 1;
    DISPANDSWTOFPRKGMOD_DISPANDSWTOFPRKGMOD_ONLYHORIZONTALPARKINGIN = 2;
    DISPANDSWTOFPRKGMOD_DISPANDSWTOFPRKGMOD_ONLYPERPENDICULARPARKINGIN_FORWARD = 3;
    DISPANDSWTOFPRKGMOD_DISPANDSWTOFPRKGMOD_ONLYPERPENDICULARPARKINGIN_BACKWARD = 4;
    DISPANDSWTOFPRKGMOD_DISPANDSWTOFPRKGMOD_HORIZONTALPARKINGIN_PERPENDICULARPARKINGIN_FORWARD = 5;
    DISPANDSWTOFPRKGMOD_DISPANDSWTOFPRKGMOD_HORIZONTALPARKINGIN_PERPENDICULARPARKINGIN_BACKWARD = 6;
    DISPANDSWTOFPRKGMOD_DISPANDSWTOFPRKGMOD_PERPENDICULARPARKINGIN_FORWARDORBACKWARD = 7;
    DISPANDSWTOFPRKGMOD_DISPANDSWTOFPRKGMOD_HORIZONTALPARKINGINORPERPENDICULARPARKINGIN_FORWARDORBACKWARD = 8;
    DISPANDSWTOFPRKGMOD_DISPANDSWTOFPRKGMOD_ONLYHORIZONTALPARKINGOUT = 9;
    DISPANDSWTOFPRKGMOD_DISPANDSWTOFPRKGMOD_ONLYPERPENDICULARPARKINGOUT_FORWARD = 10;
    DISPANDSWTOFPRKGMOD_DISPANDSWTOFPRKGMOD_ONLYPERPENDICULARPARKINGOUT_BACKWARD = 11;
    DISPANDSWTOFPRKGMOD_DISPANDSWTOFPRKGMOD_HORIZONTALPARKINGOUTORPERPENDICULARPARKINGOUT_FORWARD = 12;
    DISPANDSWTOFPRKGMOD_DISPANDSWTOFPRKGMOD_HORIZONTALPARKINGOUTORPERPENDICULARPARKINGOUT_BACKWARD = 13;
    DISPANDSWTOFPRKGMOD_DISPANDSWTOFPRKGMOD_PERPENDICULARPARKINGOUT_FORWARDORBACWARD = 14;
    DISPANDSWTOFPRKGMOD_DISPANDSWTOFPRKGMOD_HORIZONTALPARKINGOUTORPERPENDICULARPARKINGOUT_FORWARDORBACWARD = 15;
  }
  enum FrntLeOfSnsrOfPrkgAssiSideType {
    FRNTLEOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_NODISTANCE = 0;
    FRNTLEOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE1 = 1;
    FRNTLEOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE2 = 2;
    FRNTLEOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE3 = 3;
    FRNTLEOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE4 = 4;
    FRNTLEOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE5 = 5;
    FRNTLEOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE6 = 6;
    FRNTLEOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE7 = 7;
  }
  enum FrntRiOfSnsrOfPrkgAssiSideType {
    FRNTRIOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_NODISTANCE = 0;
    FRNTRIOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE1 = 1;
    FRNTRIOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE2 = 2;
    FRNTRIOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE3 = 3;
    FRNTRIOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE4 = 4;
    FRNTRIOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE5 = 5;
    FRNTRIOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE6 = 6;
    FRNTRIOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE7 = 7;
  }
  enum InsdLeOfSnsrPrkgAssiFrntType {
    INSDLEOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_NODISTANCE = 0;
    INSDLEOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE1 = 1;
    INSDLEOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE2 = 2;
    INSDLEOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE3 = 3;
    INSDLEOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE4 = 4;
    INSDLEOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE5 = 5;
    INSDLEOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE6 = 6;
    INSDLEOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE7 = 7;
  }
  enum InsdLeOfSnsrPrkgAssiReType {
    INSDLEOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_NODISTANCE = 0;
    INSDLEOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE1 = 1;
    INSDLEOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE2 = 2;
    INSDLEOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE3 = 3;
    INSDLEOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE4 = 4;
    INSDLEOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE5 = 5;
    INSDLEOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE6 = 6;
    INSDLEOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE7 = 7;
  }
  enum InsdRiOfSnsrPrkgAssiFrntType {
    INSDRIOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_NODISTANCE = 0;
    INSDRIOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE1 = 1;
    INSDRIOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE2 = 2;
    INSDRIOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE3 = 3;
    INSDRIOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE4 = 4;
    INSDRIOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE5 = 5;
    INSDRIOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE6 = 6;
    INSDRIOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE7 = 7;
  }
  enum InsdRiOfSnsrPrkgAssiReType {
    INSDRIOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_NODISTANCE = 0;
    INSDRIOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE1 = 1;
    INSDRIOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE2 = 2;
    INSDRIOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE3 = 3;
    INSDRIOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE4 = 4;
    INSDRIOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE5 = 5;
    INSDRIOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE6 = 6;
    INSDRIOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE7 = 7;
  }
  enum OutdLeOfSnsrPrkgAssiFrntType {
    OUTDLEOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_NODISTANCE = 0;
    OUTDLEOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE1 = 1;
    OUTDLEOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE2 = 2;
    OUTDLEOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE3 = 3;
    OUTDLEOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE4 = 4;
    OUTDLEOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE5 = 5;
    OUTDLEOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE6 = 6;
    OUTDLEOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE7 = 7;
  }
  enum OutdLeOfSnsrPrkgAssiReType {
    OUTDLEOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_NODISTANCE = 0;
    OUTDLEOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE1 = 1;
    OUTDLEOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE2 = 2;
    OUTDLEOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE3 = 3;
    OUTDLEOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE4 = 4;
    OUTDLEOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE5 = 5;
    OUTDLEOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE6 = 6;
    OUTDLEOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE7 = 7;
  }
  enum OutdRiOfSnsrPrkgAssiFrntType {
    OUTDRIOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_NODISTANCE = 0;
    OUTDRIOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE1 = 1;
    OUTDRIOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE2 = 2;
    OUTDRIOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE3 = 3;
    OUTDRIOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE4 = 4;
    OUTDRIOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE5 = 5;
    OUTDRIOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE6 = 6;
    OUTDRIOFSNSRPRKGASSIFRNT_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE7 = 7;
  }
  enum OutdRiOfSnsrPrkgAssiReType {
    OUTDRIOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_NODISTANCE = 0;
    OUTDRIOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE1 = 1;
    OUTDRIOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE2 = 2;
    OUTDRIOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE3 = 3;
    OUTDRIOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE4 = 4;
    OUTDRIOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE5 = 5;
    OUTDRIOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE6 = 6;
    OUTDRIOFSNSRPRKGASSIRE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE7 = 7;
  }
  enum PrkgEmgyBrkFltDispType {
    PRKGEMGYBRKFLTDISP_TYPEOFPOSIDISP_NODISPLAY = 0;
    PRKGEMGYBRKFLTDISP_TYPEOFPOSIDISP_FRONTFAULT = 1;
    PRKGEMGYBRKFLTDISP_TYPEOFPOSIDISP_REARFAULT = 2;
  }
  enum PrkgStsToEDRAPAToType {
    PRKGSTSTOEDRAPATO_APATO_DEFUALT = 0;
    PRKGSTSTOEDRAPATO_APATO_FAULTED = 1;
    PRKGSTSTOEDRAPATO_APATO_OFF = 2;
    PRKGSTSTOEDRAPATO_APATO_STANDBY = 3;
    PRKGSTSTOEDRAPATO_APATO_ACTIVE = 4;
    PRKGSTSTOEDRAPATO_APATO_RESERVED1 = 5;
    PRKGSTSTOEDRAPATO_APATO_RESERVED2 = 6;
    PRKGSTSTOEDRAPATO_APATO_RESERVED3 = 7;
  }
  enum PrkgStsToEDRHPAToType {
    PRKGSTSTOEDRHPATO_APATO_DEFUALT = 0;
    PRKGSTSTOEDRHPATO_APATO_FAULTED = 1;
    PRKGSTSTOEDRHPATO_APATO_OFF = 2;
    PRKGSTSTOEDRHPATO_APATO_STANDBY = 3;
    PRKGSTSTOEDRHPATO_APATO_ACTIVE = 4;
    PRKGSTSTOEDRHPATO_APATO_RESERVED1 = 5;
    PRKGSTSTOEDRHPATO_APATO_RESERVED2 = 6;
    PRKGSTSTOEDRHPATO_APATO_RESERVED3 = 7;
  }
  enum PrkgStsToEDRLSDAandTBAToType {
    PRKGSTSTOEDRLSDAANDTBATO_APATO_DEFUALT = 0;
    PRKGSTSTOEDRLSDAANDTBATO_APATO_FAULTED = 1;
    PRKGSTSTOEDRLSDAANDTBATO_APATO_OFF = 2;
    PRKGSTSTOEDRLSDAANDTBATO_APATO_STANDBY = 3;
    PRKGSTSTOEDRLSDAANDTBATO_APATO_ACTIVE = 4;
    PRKGSTSTOEDRLSDAANDTBATO_APATO_RESERVED1 = 5;
    PRKGSTSTOEDRLSDAANDTBATO_APATO_RESERVED2 = 6;
    PRKGSTSTOEDRLSDAANDTBATO_APATO_RESERVED3 = 7;
  }
  enum PrkgStsToEDRreserved1Type {
    PRKGSTSTOEDRRESERVED1_APATO_DEFUALT = 0;
    PRKGSTSTOEDRRESERVED1_APATO_FAULTED = 1;
    PRKGSTSTOEDRRESERVED1_APATO_OFF = 2;
    PRKGSTSTOEDRRESERVED1_APATO_STANDBY = 3;
    PRKGSTSTOEDRRESERVED1_APATO_ACTIVE = 4;
    PRKGSTSTOEDRRESERVED1_APATO_RESERVED1 = 5;
    PRKGSTSTOEDRRESERVED1_APATO_RESERVED2 = 6;
    PRKGSTSTOEDRRESERVED1_APATO_RESERVED3 = 7;
  }
  enum PrkgStsToEDRreserved2Type {
    PRKGSTSTOEDRRESERVED2_APATO_DEFUALT = 0;
    PRKGSTSTOEDRRESERVED2_APATO_FAULTED = 1;
    PRKGSTSTOEDRRESERVED2_APATO_OFF = 2;
    PRKGSTSTOEDRRESERVED2_APATO_STANDBY = 3;
    PRKGSTSTOEDRRESERVED2_APATO_ACTIVE = 4;
    PRKGSTSTOEDRRESERVED2_APATO_RESERVED1 = 5;
    PRKGSTSTOEDRRESERVED2_APATO_RESERVED2 = 6;
    PRKGSTSTOEDRRESERVED2_APATO_RESERVED3 = 7;
  }
  enum PrkgStsToEDRreserved3Type {
    PRKGSTSTOEDRRESERVED3_APATO_DEFUALT = 0;
    PRKGSTSTOEDRRESERVED3_APATO_FAULTED = 1;
    PRKGSTSTOEDRRESERVED3_APATO_OFF = 2;
    PRKGSTSTOEDRRESERVED3_APATO_STANDBY = 3;
    PRKGSTSTOEDRRESERVED3_APATO_ACTIVE = 4;
    PRKGSTSTOEDRRESERVED3_APATO_RESERVED1 = 5;
    PRKGSTSTOEDRRESERVED3_APATO_RESERVED2 = 6;
    PRKGSTSTOEDRRESERVED3_APATO_RESERVED3 = 7;
  }
  enum PrkgStsToEDRRPAToType {
    PRKGSTSTOEDRRPATO_APATO_DEFUALT = 0;
    PRKGSTSTOEDRRPATO_APATO_FAULTED = 1;
    PRKGSTSTOEDRRPATO_APATO_OFF = 2;
    PRKGSTSTOEDRRPATO_APATO_STANDBY = 3;
    PRKGSTSTOEDRRPATO_APATO_ACTIVE = 4;
    PRKGSTSTOEDRRPATO_APATO_RESERVED1 = 5;
    PRKGSTSTOEDRRPATO_APATO_RESERVED2 = 6;
    PRKGSTSTOEDRRPATO_APATO_RESERVED3 = 7;
  }
  enum RCVEmgyLampReqType {
    RCVEMGYLAMPREQ_RCVEMGYLAMPREQ_DEFAULT = 0;
    RCVEMGYLAMPREQ_RCVEMGYLAMPREQ_OPENFASTEFLASHER = 1;
    RCVEMGYLAMPREQ_RCVEMGYLAMPREQ_OPENEFLASHER = 2;
    RCVEMGYLAMPREQ_RCVEMGYLAMPREQ_LEFTTURN = 3;
    RCVEMGYLAMPREQ_RCVEMGYLAMPREQ_RIGHTTURN = 4;
    RCVEMGYLAMPREQ_RCVEMGYLAMPREQ_CLOSEEFLASHER = 5;
  }
  enum ReLeOfSnsrOfPrkgAssiSideType {
    RELEOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_NODISTANCE = 0;
    RELEOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE1 = 1;
    RELEOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE2 = 2;
    RELEOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE3 = 3;
    RELEOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE4 = 4;
    RELEOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE5 = 5;
    RELEOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE6 = 6;
    RELEOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE7 = 7;
  }
  enum RemCtrlVehLockReqType {
    REMCTRLVEHLOCKREQ_REMCTRLVEHLOCKREQ_DEFAULT = 0;
    REMCTRLVEHLOCKREQ_REMCTRLVEHLOCKREQ_UNLOCK = 1;
    REMCTRLVEHLOCKREQ_REMCTRLVEHLOCKREQ_INSIDELOCK = 2;
    REMCTRLVEHLOCKREQ_REMCTRLVEHLOCKREQ_OUTSIDELOCK = 3;
  }
  enum ReRiOfSnsrOfPrkgAssiSideType {
    RERIOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_NODISTANCE = 0;
    RERIOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE1 = 1;
    RERIOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE2 = 2;
    RERIOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE3 = 3;
    RERIOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE4 = 4;
    RERIOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE5 = 5;
    RERIOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE6 = 6;
    RERIOFSNSROFPRKGASSISIDE_SNSRPRKGASSIFRNTSNSRDSTINSD_RANGE7 = 7;
  }
  enum VehHomePrkgSysStsType {
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_OFF = 0;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_STANDBY = 1;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_PARKINMAPBUILDING = 2;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_LOCALIZATION = 3;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_PARKINCRUISING = 4;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_PARKOUTCRUSING = 5;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_PARKINMAPBUILDINGAPAPREACTIVE = 6;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_INTERRUPT = 7;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_PARKINPREACTIVE = 8;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_PARKINPROCESS = 9;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_PARKINRANDOMPARKINGIN = 10;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_PARKINMAPBUILDINGAPAPARKING = 11;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_PARKOUTPREACTIVE = 12;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_PARKOUTPROCESS = 13;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_QUIT = 14;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_PARKINCOMPLETED = 15;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_PARKOUTCOMPLETED = 16;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_ABORT = 17;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_SUSPEND = 18;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_INITIALIZATION = 19;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_FAILURE = 20;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_READY = 21;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_PARKOUTMAPBUILDING = 22;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_PARKINMAPBUILDINGGENERATE = 23;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_PARKOUTMAPBUILDINGGENERATE = 24;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_PARKINMAPBUILDINGNAMED = 25;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_PARKOUTMAPBUILDINGNAMED = 26;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS1_EXIT = 27;
    VEHHOMEPRKGSYSSTS_HOMEPRKGSYSSTS_PARKOUTTAKEOVER = 28;
  }
  enum VehPrkgLockTheftReqType {
    VEHPRKGLOCKTHEFTREQ_VEHPRKGLOCKTHEFTREQ_NOREQUEST = 0;
    VEHPRKGLOCKTHEFTREQ_VEHPRKGLOCKTHEFTREQ_INSIDELOCKANDINCOMPLETEARMREQUEST = 1;
    VEHPRKGLOCKTHEFTREQ_VEHPRKGLOCKTHEFTREQ_OUTSIDELOCKANDCOMPLETEARMREQUEST = 2;
    VEHPRKGLOCKTHEFTREQ_VEHPRKGLOCKTHEFTREQ_UNLOCKANDDISARMREQUEST = 3;
  }
  enum VehWinSunRoofClsReqType {
    VEHWINSUNROOFCLSREQ_OPENCLS3_NOREQUEST = 0;
    VEHWINSUNROOFCLSREQ_OPENCLS3_CLOSE = 1;
    VEHWINSUNROOFCLSREQ_OPENCLS3_RESERVED1 = 2;
    VEHWINSUNROOFCLSREQ_OPENCLS3_RESERVED2 = 3;
  }
  // description Front audio warning Req [] [0|15] [initial_value:0]
  optional AudWarnOfSnsrParkAssiFrntType aud_warn_of_snsr_park_assi_frnt = 1;
  // [] [0|1] [initial_value:None]
  optional bool aud_warn_of_snsr_park_assi_frnt_ub = 2;
  // description Rear audio warning Req [] [0|15] [initial_value:0]
  optional AudWarnOfSnsrParkAssiReType aud_warn_of_snsr_park_assi_re = 3;
  // [] [0|1] [initial_value:None]
  optional bool aud_warn_of_snsr_park_assi_re_ub = 4;
  // description Parking mode display and selector switch [] [0|15] [initial_value:0]
  optional DispAndSwtOfPrkgModType disp_and_swt_of_prkg_mod = 5;
  // [] [0|1] [initial_value:None]
  optional bool disp_and_swt_of_prkg_mod_ub = 6;
  // description Display self searching slot button on [] [0|1] [initial_value:0]
  optional bool disp_prkg_stall_btn = 7;
  // [] [0|1] [initial_value:None]
  optional bool disp_prkg_stall_btn_ub = 8;
  // description This is  the detected barriers distance range from front left side sector [] [0|7] [initial_value:0]
  optional FrntLeOfSnsrOfPrkgAssiSideType frnt_le_of_snsr_of_prkg_assi_side = 9;
  // [] [0|1] [initial_value:None]
  optional bool frnt_le_of_snsr_of_prkg_assi_side_ub = 10;
  // description This is  the detected barriers distance range from front right side sector [] [0|7] [initial_value:0]
  optional FrntRiOfSnsrOfPrkgAssiSideType frnt_ri_of_snsr_of_prkg_assi_side = 11;
  // [] [0|1] [initial_value:None]
  optional bool frnt_ri_of_snsr_of_prkg_assi_side_ub = 12;
  // description This is the distance of detected barriers from front inside left USS [] [0|7] [initial_value:0]
  optional InsdLeOfSnsrPrkgAssiFrntType insd_le_of_snsr_prkg_assi_frnt = 13;
  // [] [0|1] [initial_value:None]
  optional bool insd_le_of_snsr_prkg_assi_frnt_ub = 14;
  // description This is the distance of detected barriers from rear inside left USS [] [0|7] [initial_value:0]
  optional InsdLeOfSnsrPrkgAssiReType insd_le_of_snsr_prkg_assi_re = 15;
  // [] [0|1] [initial_value:None]
  optional bool insd_le_of_snsr_prkg_assi_re_ub = 16;
  // description This is the distance of detected barriers from front inside right USS [] [0|7] [initial_value:0]
  optional InsdRiOfSnsrPrkgAssiFrntType insd_ri_of_snsr_prkg_assi_frnt = 17;
  // [] [0|1] [initial_value:None]
  optional bool insd_ri_of_snsr_prkg_assi_frnt_ub = 18;
  // description This is the distance of detected barriers from rear inside right USS [] [0|7] [initial_value:0]
  optional InsdRiOfSnsrPrkgAssiReType insd_ri_of_snsr_prkg_assi_re = 19;
  // [] [0|1] [initial_value:None]
  optional bool insd_ri_of_snsr_prkg_assi_re_ub = 20;
  // description This is the distance of detected barriers from front outside left USS [] [0|7] [initial_value:0]
  optional OutdLeOfSnsrPrkgAssiFrntType outd_le_of_snsr_prkg_assi_frnt = 21;
  // [] [0|1] [initial_value:None]
  optional bool outd_le_of_snsr_prkg_assi_frnt_ub = 22;
  // description This is the distance of detected barriers from rear outside left USS [] [0|7] [initial_value:0]
  optional OutdLeOfSnsrPrkgAssiReType outd_le_of_snsr_prkg_assi_re = 23;
  // [] [0|1] [initial_value:None]
  optional bool outd_le_of_snsr_prkg_assi_re_ub = 24;
  // description This is the distance of detected barriers from front outside right USS [] [0|7] [initial_value:0]
  optional OutdRiOfSnsrPrkgAssiFrntType outd_ri_of_snsr_prkg_assi_frnt = 25;
  // [] [0|1] [initial_value:None]
  optional bool outd_ri_of_snsr_prkg_assi_frnt_ub = 26;
  // description This is the distance of detected barriers from rear outside right USS [] [0|7] [initial_value:0]
  optional OutdRiOfSnsrPrkgAssiReType outd_ri_of_snsr_prkg_assi_re = 27;
  // [] [0|1] [initial_value:None]
  optional bool outd_ri_of_snsr_prkg_assi_re_ub = 28;
  // description wordage(undo process)display [] [0|1] [initial_value:0]
  optional bool prkg_back_disp = 29;
  // [] [0|1] [initial_value:None]
  optional bool prkg_back_disp_ub = 30;
  // description PEB fault display [] [0|3] [initial_value:0]
  optional PrkgEmgyBrkFltDispType prkg_emgy_brk_flt_disp = 31;
  // [] [0|1] [initial_value:None]
  optional bool prkg_emgy_brk_flt_disp_ub = 32;
  // description Parking progress display:0-100% [%] [0.0|127.0] [initial_value:0]
  optional uint32 prkg_progs_disp = 33;
  // [] [0|1] [initial_value:None]
  optional bool prkg_progs_disp_ub = 34;
  // [] [0|1] [initial_value:None]
  optional bool prkg_sts_to_edr_ub = 35;
  // description APATo [] [0|7] [initial_value:0]
  optional PrkgStsToEDRAPAToType prkg_sts_to_edrapa_to = 36;
  // description HPATo [] [0|7] [initial_value:0]
  optional PrkgStsToEDRHPAToType prkg_sts_to_edrhpa_to = 37;
  // description LSDA&&TBATo [] [0|7] [initial_value:0]
  optional PrkgStsToEDRLSDAandTBAToType prkg_sts_to_edrlsd_aand_tba_to = 38;
  // description reserved1 [] [0|7] [initial_value:0]
  optional PrkgStsToEDRreserved1Type prkg_sts_to_ed_rreserved1 = 39;
  // description reserved2 [] [0|7] [initial_value:0]
  optional PrkgStsToEDRreserved2Type prkg_sts_to_ed_rreserved2 = 40;
  // description reserved3 [] [0|7] [initial_value:0]
  optional PrkgStsToEDRreserved3Type prkg_sts_to_ed_rreserved3 = 41;
  // description RPATo [] [0|7] [initial_value:0]
  optional PrkgStsToEDRRPAToType prkg_sts_to_edrrpa_to = 42;
  // description remote control vehicle emergency Lamp request [] [0|7] [initial_value:0]
  optional RCVEmgyLampReqType rcv_emgy_lamp_req = 43;
  // [] [0|1] [initial_value:None]
  optional bool rcv_emgy_lamp_req_ub = 44;
  // description This is  the detected barriers distance range from rear left side sector [] [0|7] [initial_value:0]
  optional ReLeOfSnsrOfPrkgAssiSideType re_le_of_snsr_of_prkg_assi_side = 45;
  // [] [0|1] [initial_value:None]
  optional bool re_le_of_snsr_of_prkg_assi_side_ub = 46;
  // description remote control vehicle Lock request [] [0|7] [initial_value:0]
  optional RemCtrlVehLockReqType rem_ctrl_veh_lock_req = 47;
  // [] [0|1] [initial_value:None]
  optional bool rem_ctrl_veh_lock_req_ub = 48;
  // description This is  the detected barriers distance range from rear right side sector [] [0|7] [initial_value:0]
  optional ReRiOfSnsrOfPrkgAssiSideType re_ri_of_snsr_of_prkg_assi_side = 49;
  // [] [0|1] [initial_value:None]
  optional bool re_ri_of_snsr_of_prkg_assi_side_ub = 50;
  // description Home zone parking system status. [] [0|31] [initial_value:0]
  optional VehHomePrkgSysStsType veh_home_prkg_sys_sts = 51;
  // [] [0|1] [initial_value:None]
  optional bool veh_home_prkg_sys_sts_ub = 52;
  // description Request lock/arm(unlock/disarm) the vehicle. [] [0|3] [initial_value:0]
  optional VehPrkgLockTheftReqType veh_prkg_lock_theft_req = 53;
  // [] [0|1] [initial_value:None]
  optional bool veh_prkg_lock_theft_req_ub = 54;
  // description Request close the vehicle windows and sunroof. [] [0|3] [initial_value:0]
  optional VehWinSunRoofClsReqType veh_win_sun_roof_cls_req = 55;
  // [] [0|1] [initial_value:None]
  optional bool veh_win_sun_roof_cls_req_ub = 56;
}

message PASZCUCANFD1_FR04_211 {
// Control Message
  enum AutPrkgVoiceTypRespType {
    AUTPRKGVOICETYPRESP_VOICETYP10_NOREQ = 0;
    AUTPRKGVOICETYPRESP_VOICETYP10_SIMPLE = 1;
    AUTPRKGVOICETYPRESP_VOICETYP10_MIDDLE = 2;
    AUTPRKGVOICETYPRESP_VOICETYP10_COMPLEX = 3;
  }
  enum ObjOnIfOfSnsrType {
    OBJONIFOFSNSR_OBJONIFOFSNSR_NORMAL = 0;
    OBJONIFOFSNSR_OBJONIFOFSNSR_FRONTUSSCOVERD = 1;
    OBJONIFOFSNSR_OBJONIFOFSNSR_REARUSSCOVERD = 2;
    OBJONIFOFSNSR_OBJONIFOFSNSR_FRONTANDREARUSSCOVERD = 3;
  }
  enum SnsrFltOfPrkgDstCtrlType {
    SNSRFLTOFPRKGDSTCTRL_SNSRFLTOFPRKGDSTCTRL_NORMAL = 0;
    SNSRFLTOFPRKGDSTCTRL_SNSRFLTOFPRKGDSTCTRL_FRONTUSSFAULT = 1;
    SNSRFLTOFPRKGDSTCTRL_SNSRFLTOFPRKGDSTCTRL_REARUSSFAULT = 2;
    SNSRFLTOFPRKGDSTCTRL_SNSRFLTOFPRKGDSTCTRL_FRONTANDREARUSSFAULT = 3;
  }
  // description Set button signal of 'non-inductive parking' [] [0|1] [initial_value:0]
  optional bool aut_actv_prkg_fct_swt_resp = 1;
  // [] [0|1] [initial_value:None]
  optional bool aut_actv_prkg_fct_swt_resp_ub = 2;
  // description Setting item 'Voice' button signal [] [0|1] [initial_value:0]
  optional bool aut_prkg_voice_swt_resp = 3;
  // [] [0|1] [initial_value:None]
  optional bool aut_prkg_voice_swt_resp_ub = 4;
  // description Setting item 'Voice Broadcast Mode' key signal [] [0|3] [initial_value:0]
  optional AutPrkgVoiceTypRespType aut_prkg_voice_typ_resp = 5;
  // [] [0|1] [initial_value:None]
  optional bool aut_prkg_voice_typ_resp_ub = 6;
  // description Front inside left ultrasonic sensor release the distance  [cm] [0.0|511.0] [initial_value:511]
  optional uint32 insd_snsr_dst_frnt_sho_le = 7;
  // [] [0|1] [initial_value:None]
  optional bool insd_snsr_dst_frnt_sho_le_ub = 8;
  // description Front inside right ultrasonic sensor release the distance  [cm] [0.0|511.0] [initial_value:511]
  optional uint32 insd_snsr_dst_frnt_sho_ri = 9;
  // [] [0|1] [initial_value:None]
  optional bool insd_snsr_dst_frnt_sho_ri_ub = 10;
  // description Rear inside left ultrasonic sensor release the distance  [cm] [0.0|511.0] [initial_value:511]
  optional uint32 insd_snsr_dst_re_sho_le = 11;
  // [] [0|1] [initial_value:None]
  optional bool insd_snsr_dst_re_sho_le_ub = 12;
  // description Rear inside right ultrasonic sensor release the distance  [cm] [0.0|511.0] [initial_value:511]
  optional uint32 insd_snsr_dst_re_sho_ri = 13;
  // [] [0|1] [initial_value:None]
  optional bool insd_snsr_dst_re_sho_ri_ub = 14;
  // description Set the button signal of 'low-speed exploration push' [] [0|1] [initial_value:0]
  optional bool lsda_notif_push_resp = 15;
  // [] [0|1] [initial_value:None]
  optional bool lsda_notif_push_resp_ub = 16;
  // description Whether the USS is covered. [] [0|3] [initial_value:0]
  optional ObjOnIfOfSnsrType obj_on_if_of_snsr = 17;
  // [] [0|1] [initial_value:None]
  optional bool obj_on_if_of_snsr_ub = 18;
  // description Front inside right ultrasonic sensor release the distance [cm] [0.0|511.0] [initial_value:511]
  optional uint32 outd_snsr_dst_frnt_sho_le = 19;
  // [] [0|1] [initial_value:None]
  optional bool outd_snsr_dst_frnt_sho_le_ub = 20;
  // description Front inside right ultrasonic sensor release the distance  [cm] [0.0|511.0] [initial_value:511]
  optional uint32 outd_snsr_dst_frnt_sho_ri = 21;
  // [] [0|1] [initial_value:None]
  optional bool outd_snsr_dst_frnt_sho_ri_ub = 22;
  // description Rear inside left ultrasonic sensor release the distance  [cm] [0.0|511.0] [initial_value:511]
  optional uint32 outd_snsr_dst_re_sho_le = 23;
  // [] [0|1] [initial_value:None]
  optional bool outd_snsr_dst_re_sho_le_ub = 24;
  // description Rear inside left ultrasonic sensor release the distance  [cm] [0.0|511.0] [initial_value:511]
  optional uint32 outd_snsr_dst_re_sho_ri = 25;
  // [] [0|1] [initial_value:None]
  optional bool outd_snsr_dst_re_sho_ri_ub = 26;
  // description When PDC is Failure or Inhibited, release the warning sound.  [] [0|1] [initial_value:0]
  optional bool prkg_dst_ctrl_warn = 27;
  // [] [0|1] [initial_value:None]
  optional bool prkg_dst_ctrl_warn_ub = 28;
  // description Front side left ultrasonic sensor release the distance  [cm] [0.0|511.0] [initial_value:511]
  optional uint32 snsr_dst_frnt_sho_side_le = 29;
  // [] [0|1] [initial_value:None]
  optional bool snsr_dst_frnt_sho_side_le_ub = 30;
  // description Front side right ultrasonic sensor release the distance  [cm] [0.0|511.0] [initial_value:511]
  optional uint32 snsr_dst_frnt_sho_side_ri = 31;
  // [] [0|1] [initial_value:None]
  optional bool snsr_dst_frnt_sho_side_ri_ub = 32;
  // description Whether USS is fault. [] [0|3] [initial_value:0]
  optional SnsrFltOfPrkgDstCtrlType snsr_flt_of_prkg_dst_ctrl = 33;
  // [] [0|1] [initial_value:None]
  optional bool snsr_flt_of_prkg_dst_ctrl_ub = 34;
}

message ZCUP_ZCUCANFD1_FR01_212 {
// Report Message
  enum AjarFuelFlapSwitchType {
    AJARFUELFLAPSWITCH_DOORSTS2_UKWN = 0;
    AJARFUELFLAPSWITCH_DOORSTS2_OPEND = 1;
    AJARFUELFLAPSWITCH_DOORSTS2_CLSD = 2;
  }
  enum DoorPassLockStsType {
    DOORPASSLOCKSTS_LOCKSTS2_LOCKSTSUKWN = 0;
    DOORPASSLOCKSTS_LOCKSTS2_UNLCKD = 1;
    DOORPASSLOCKSTS_LOCKSTS2_LOCKD = 2;
    DOORPASSLOCKSTS_LOCKSTS2_SAFELOCKD = 3;
  }
  enum DoorRiReLockStsType {
    DOORRIRELOCKSTS_LOCKSTS2_LOCKSTSUKWN = 0;
    DOORRIRELOCKSTS_LOCKSTS2_UNLCKD = 1;
    DOORRIRELOCKSTS_LOCKSTS2_LOCKD = 2;
    DOORRIRELOCKSTS_LOCKSTS2_SAFELOCKD = 3;
  }
  enum MirrFoldStsAtPassType {
    MIRRFOLDSTSATPASS_MIRRFOLDSTSTYP_MIRRFOLDPOSNUNDEFD = 0;
    MIRRFOLDSTSATPASS_MIRRFOLDSTSTYP_MIRRNOTFOLDPOSN = 1;
    MIRRFOLDSTSATPASS_MIRRFOLDSTSTYP_MIRRFOLDPOSN = 2;
    MIRRFOLDSTSATPASS_MIRRFOLDSTSTYP_MIRRMOVGTONOTFOLD = 3;
    MIRRFOLDSTSATPASS_MIRRFOLDSTSTYP_MIRRMOVGTOFOLD = 4;
  }
  enum PassSeatSnsrSts2Type {
    PASSSEATSNSRSTS2_OKNOKDI_OK = 0;
    PASSSEATSNSRSTS2_OKNOKDI_NOTOK = 1;
    PASSSEATSNSRSTS2_OKNOKDI_DISABLED = 2;
    PASSSEATSNSRSTS2_OKNOKDI_RESERVED = 3;
  }
  enum PassSeatSts2Type {
    PASSSEATSTS2_OCCPTPRESST1_UNDEFD1 = 0;
    PASSSEATSTS2_OCCPTPRESST1_OCCPTNOTPRSNT = 1;
    PASSSEATSTS2_OCCPTPRESST1_OCCPTPRSNT = 2;
    PASSSEATSTS2_OCCPTPRESST1_UNDEFD2 = 3;
  }
  enum WinPosnStsAtPassType {
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_POSNUKWN = 0;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_CLSFULL = 1;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN4 = 2;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN8 = 3;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN12 = 4;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN16 = 5;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN20 = 6;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN24 = 7;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN28 = 8;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN32 = 9;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN36 = 10;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN40 = 11;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN44 = 12;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN48 = 13;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN52 = 14;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN56 = 15;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN60 = 16;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN64 = 17;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN68 = 18;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN72 = 19;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN76 = 20;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN80 = 21;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN84 = 22;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN88 = 23;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN92 = 24;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_PERCOPEN96 = 25;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_OPENFULL = 26;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_RESD1 = 27;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_RESD2 = 28;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_RESD3 = 29;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_RESD4 = 30;
    WINPOSNSTSATPASS_WINANDROOFANDCURTPOSNTYP_MOVG = 31;
  }
  enum WinPosnStsAtReRiType {
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_POSNUKWN = 0;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_CLSFULL = 1;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN4 = 2;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN8 = 3;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN12 = 4;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN16 = 5;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN20 = 6;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN24 = 7;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN28 = 8;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN32 = 9;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN36 = 10;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN40 = 11;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN44 = 12;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN48 = 13;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN52 = 14;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN56 = 15;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN60 = 16;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN64 = 17;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN68 = 18;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN72 = 19;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN76 = 20;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN80 = 21;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN84 = 22;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN88 = 23;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN92 = 24;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_PERCOPEN96 = 25;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_OPENFULL = 26;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_RESD1 = 27;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_RESD2 = 28;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_RESD3 = 29;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_RESD4 = 30;
    WINPOSNSTSATRERI_WINANDROOFANDCURTPOSNTYP_MOVG = 31;
  }
  // [] [0|3] [initial_value:0]
  optional AjarFuelFlapSwitchType ajar_fuel_flap_switch = 1;
  // [] [0|1] [initial_value:None]
  optional bool ajar_fuel_flap_switch_ub = 2;
  // [] [0|3] [initial_value:0]
  optional DoorPassLockStsType door_pass_lock_sts = 3;
  // [] [0|1] [initial_value:None]
  optional bool door_pass_lock_sts_ub = 4;
  // [] [0|3] [initial_value:0]
  optional DoorRiReLockStsType door_ri_re_lock_sts = 5;
  // [] [0|1] [initial_value:None]
  optional bool door_ri_re_lock_sts_ub = 6;
  // description LED status in passenger side rear mirror [] [0|1] [initial_value:1]
  optional bool lcma_led_sts_pass_side = 7;
  // [] [0|1] [initial_value:None]
  optional bool lcma_led_sts_pass_side_ub = 8;
  // description Reports the fold status of the outer rear view mirrors. Passanger side. [] [0|7] [initial_value:0]
  optional MirrFoldStsAtPassType mirr_fold_sts_at_pass = 9;
  // [] [0|1] [initial_value:None]
  optional bool mirr_fold_sts_at_pass_ub = 10;
  // description Informs if there is a fault on the Passenger seat sensor is detected through electrical measurements, or plausibility judgement. NotOk means sensor is judged as faulty. Di means that the sensor is not configured. [] [0|3] [initial_value:0]
  optional PassSeatSnsrSts2Type pass_seat_snsr_sts2 = 11;
  // [] [0|1] [initial_value:None]
  optional bool pass_seat_snsr_sts2_ub = 12;
  // description Describes if an occupant is detected in the passenger seat. [] [0|3] [initial_value:1]
  optional PassSeatSts2Type pass_seat_sts2 = 13;
  // [] [0|1] [initial_value:None]
  optional bool pass_seat_sts2_ub = 14;
  // [] [0|31] [initial_value:0]
  optional WinPosnStsAtPassType win_posn_sts_at_pass = 15;
  // [] [0|1] [initial_value:None]
  optional bool win_posn_sts_at_pass_ub = 16;
  // [] [0|31] [initial_value:0]
  optional WinPosnStsAtReRiType win_posn_sts_at_re_ri = 17;
  // [] [0|1] [initial_value:None]
  optional bool win_posn_sts_at_re_ri_ub = 18;
}

message ADCU_ZCUCANFD1_FR14_220 {
// Control Message
  enum AsyAutEmgySteerActvType {
    ASYAUTEMGYSTEERACTV_ASYAUTEMGYSTEERACTV_DEFAULT = 0;
    ASYAUTEMGYSTEERACTV_ASYAUTEMGYSTEERACTV_AESACTIVE = 1;
    ASYAUTEMGYSTEERACTV_ASYAUTEMGYSTEERACTV_RESERVED1 = 2;
    ASYAUTEMGYSTEERACTV_ASYAUTEMGYSTEERACTV_RESERVED2 = 3;
  }
  enum VehObjforADB1AdbClassnType {
    VEHOBJFORADB1ADBCLASSN_ADBCLASSN_NOVEHICLE = 0;
    VEHOBJFORADB1ADBCLASSN_ADBCLASSN_CAR = 1;
    VEHOBJFORADB1ADBCLASSN_ADBCLASSN_TRUCK = 2;
    VEHOBJFORADB1ADBCLASSN_ADBCLASSN_BUS = 3;
    VEHOBJFORADB1ADBCLASSN_ADBCLASSN_BIKEORMOTORBIKE = 4;
    VEHOBJFORADB1ADBCLASSN_ADBCLASSN_PEDESTRAIN = 5;
    VEHOBJFORADB1ADBCLASSN_ADBCLASSN_MIXED = 6;
    VEHOBJFORADB1ADBCLASSN_ADBCLASSN_UNKNOWN = 7;
  }
  enum VehObjforADB1AdbObjDirType {
    VEHOBJFORADB1ADBOBJDIR_ADBOBJDIR_IDLE = 0;
    VEHOBJFORADB1ADBOBJDIR_ADBOBJDIR_ONCOMING = 1;
    VEHOBJFORADB1ADBOBJDIR_ADBOBJDIR_PRECEDING = 2;
    VEHOBJFORADB1ADBOBJDIR_ADBOBJDIR_OTHERS = 3;
  }
  enum VehObjforADB2AdbClassnType {
    VEHOBJFORADB2ADBCLASSN_ADBCLASSN_NOVEHICLE = 0;
    VEHOBJFORADB2ADBCLASSN_ADBCLASSN_CAR = 1;
    VEHOBJFORADB2ADBCLASSN_ADBCLASSN_TRUCK = 2;
    VEHOBJFORADB2ADBCLASSN_ADBCLASSN_BUS = 3;
    VEHOBJFORADB2ADBCLASSN_ADBCLASSN_BIKEORMOTORBIKE = 4;
    VEHOBJFORADB2ADBCLASSN_ADBCLASSN_PEDESTRAIN = 5;
    VEHOBJFORADB2ADBCLASSN_ADBCLASSN_MIXED = 6;
    VEHOBJFORADB2ADBCLASSN_ADBCLASSN_UNKNOWN = 7;
  }
  enum VehObjforADB2AdbObjDirType {
    VEHOBJFORADB2ADBOBJDIR_ADBOBJDIR_IDLE = 0;
    VEHOBJFORADB2ADBOBJDIR_ADBOBJDIR_ONCOMING = 1;
    VEHOBJFORADB2ADBOBJDIR_ADBOBJDIR_PRECEDING = 2;
    VEHOBJFORADB2ADBOBJDIR_ADBOBJDIR_OTHERS = 3;
  }
  enum VehObjforADB3AdbClassnType {
    VEHOBJFORADB3ADBCLASSN_ADBCLASSN_NOVEHICLE = 0;
    VEHOBJFORADB3ADBCLASSN_ADBCLASSN_CAR = 1;
    VEHOBJFORADB3ADBCLASSN_ADBCLASSN_TRUCK = 2;
    VEHOBJFORADB3ADBCLASSN_ADBCLASSN_BUS = 3;
    VEHOBJFORADB3ADBCLASSN_ADBCLASSN_BIKEORMOTORBIKE = 4;
    VEHOBJFORADB3ADBCLASSN_ADBCLASSN_PEDESTRAIN = 5;
    VEHOBJFORADB3ADBCLASSN_ADBCLASSN_MIXED = 6;
    VEHOBJFORADB3ADBCLASSN_ADBCLASSN_UNKNOWN = 7;
  }
  enum VehObjforADB3AdbObjDirType {
    VEHOBJFORADB3ADBOBJDIR_ADBOBJDIR_IDLE = 0;
    VEHOBJFORADB3ADBOBJDIR_ADBOBJDIR_ONCOMING = 1;
    VEHOBJFORADB3ADBOBJDIR_ADBOBJDIR_PRECEDING = 2;
    VEHOBJFORADB3ADBOBJDIR_ADBOBJDIR_OTHERS = 3;
  }
  enum VehObjforADB4AdbClassnType {
    VEHOBJFORADB4ADBCLASSN_ADBCLASSN_NOVEHICLE = 0;
    VEHOBJFORADB4ADBCLASSN_ADBCLASSN_CAR = 1;
    VEHOBJFORADB4ADBCLASSN_ADBCLASSN_TRUCK = 2;
    VEHOBJFORADB4ADBCLASSN_ADBCLASSN_BUS = 3;
    VEHOBJFORADB4ADBCLASSN_ADBCLASSN_BIKEORMOTORBIKE = 4;
    VEHOBJFORADB4ADBCLASSN_ADBCLASSN_PEDESTRAIN = 5;
    VEHOBJFORADB4ADBCLASSN_ADBCLASSN_MIXED = 6;
    VEHOBJFORADB4ADBCLASSN_ADBCLASSN_UNKNOWN = 7;
  }
  enum VehObjforADB4AdbObjDirType {
    VEHOBJFORADB4ADBOBJDIR_ADBOBJDIR_IDLE = 0;
    VEHOBJFORADB4ADBOBJDIR_ADBOBJDIR_ONCOMING = 1;
    VEHOBJFORADB4ADBOBJDIR_ADBOBJDIR_PRECEDING = 2;
    VEHOBJFORADB4ADBOBJDIR_ADBOBJDIR_OTHERS = 3;
  }
  enum VehObjforADB5AdbClassnType {
    VEHOBJFORADB5ADBCLASSN_ADBCLASSN_NOVEHICLE = 0;
    VEHOBJFORADB5ADBCLASSN_ADBCLASSN_CAR = 1;
    VEHOBJFORADB5ADBCLASSN_ADBCLASSN_TRUCK = 2;
    VEHOBJFORADB5ADBCLASSN_ADBCLASSN_BUS = 3;
    VEHOBJFORADB5ADBCLASSN_ADBCLASSN_BIKEORMOTORBIKE = 4;
    VEHOBJFORADB5ADBCLASSN_ADBCLASSN_PEDESTRAIN = 5;
    VEHOBJFORADB5ADBCLASSN_ADBCLASSN_MIXED = 6;
    VEHOBJFORADB5ADBCLASSN_ADBCLASSN_UNKNOWN = 7;
  }
  enum VehObjforADB5AdbObjDirType {
    VEHOBJFORADB5ADBOBJDIR_ADBOBJDIR_IDLE = 0;
    VEHOBJFORADB5ADBOBJDIR_ADBOBJDIR_ONCOMING = 1;
    VEHOBJFORADB5ADBOBJDIR_ADBOBJDIR_PRECEDING = 2;
    VEHOBJFORADB5ADBOBJDIR_ADBOBJDIR_OTHERS = 3;
  }
  enum VehObjforADB6AdbClassnType {
    VEHOBJFORADB6ADBCLASSN_ADBCLASSN_NOVEHICLE = 0;
    VEHOBJFORADB6ADBCLASSN_ADBCLASSN_CAR = 1;
    VEHOBJFORADB6ADBCLASSN_ADBCLASSN_TRUCK = 2;
    VEHOBJFORADB6ADBCLASSN_ADBCLASSN_BUS = 3;
    VEHOBJFORADB6ADBCLASSN_ADBCLASSN_BIKEORMOTORBIKE = 4;
    VEHOBJFORADB6ADBCLASSN_ADBCLASSN_PEDESTRAIN = 5;
    VEHOBJFORADB6ADBCLASSN_ADBCLASSN_MIXED = 6;
    VEHOBJFORADB6ADBCLASSN_ADBCLASSN_UNKNOWN = 7;
  }
  enum VehObjforADB6AdbObjDirType {
    VEHOBJFORADB6ADBOBJDIR_ADBOBJDIR_IDLE = 0;
    VEHOBJFORADB6ADBOBJDIR_ADBOBJDIR_ONCOMING = 1;
    VEHOBJFORADB6ADBOBJDIR_ADBOBJDIR_PRECEDING = 2;
    VEHOBJFORADB6ADBOBJDIR_ADBOBJDIR_OTHERS = 3;
  }
  enum VehObjforADB7AdbClassnType {
    VEHOBJFORADB7ADBCLASSN_ADBCLASSN_NOVEHICLE = 0;
    VEHOBJFORADB7ADBCLASSN_ADBCLASSN_CAR = 1;
    VEHOBJFORADB7ADBCLASSN_ADBCLASSN_TRUCK = 2;
    VEHOBJFORADB7ADBCLASSN_ADBCLASSN_BUS = 3;
    VEHOBJFORADB7ADBCLASSN_ADBCLASSN_BIKEORMOTORBIKE = 4;
    VEHOBJFORADB7ADBCLASSN_ADBCLASSN_PEDESTRAIN = 5;
    VEHOBJFORADB7ADBCLASSN_ADBCLASSN_MIXED = 6;
    VEHOBJFORADB7ADBCLASSN_ADBCLASSN_UNKNOWN = 7;
  }
  enum VehObjforADB7AdbObjDirType {
    VEHOBJFORADB7ADBOBJDIR_ADBOBJDIR_IDLE = 0;
    VEHOBJFORADB7ADBOBJDIR_ADBOBJDIR_ONCOMING = 1;
    VEHOBJFORADB7ADBOBJDIR_ADBOBJDIR_PRECEDING = 2;
    VEHOBJFORADB7ADBOBJDIR_ADBOBJDIR_OTHERS = 3;
  }
  enum VehObjforADB8AdbClassnType {
    VEHOBJFORADB8ADBCLASSN_ADBCLASSN_NOVEHICLE = 0;
    VEHOBJFORADB8ADBCLASSN_ADBCLASSN_CAR = 1;
    VEHOBJFORADB8ADBCLASSN_ADBCLASSN_TRUCK = 2;
    VEHOBJFORADB8ADBCLASSN_ADBCLASSN_BUS = 3;
    VEHOBJFORADB8ADBCLASSN_ADBCLASSN_BIKEORMOTORBIKE = 4;
    VEHOBJFORADB8ADBCLASSN_ADBCLASSN_PEDESTRAIN = 5;
    VEHOBJFORADB8ADBCLASSN_ADBCLASSN_MIXED = 6;
    VEHOBJFORADB8ADBCLASSN_ADBCLASSN_UNKNOWN = 7;
  }
  enum VehObjforADB8AdbObjDirType {
    VEHOBJFORADB8ADBOBJDIR_ADBOBJDIR_IDLE = 0;
    VEHOBJFORADB8ADBOBJDIR_ADBOBJDIR_ONCOMING = 1;
    VEHOBJFORADB8ADBOBJDIR_ADBOBJDIR_PRECEDING = 2;
    VEHOBJFORADB8ADBOBJDIR_ADBOBJDIR_OTHERS = 3;
  }
  // description AES switch [] [0|3] [initial_value:0]
  optional AsyAutEmgySteerActvType asy_aut_emgy_steer_actv = 1;
  // [] [0|1] [initial_value:None]
  optional bool asy_aut_emgy_steer_actv_ub = 2;
  // [] [0|1] [initial_value:None]
  optional bool veh_objfor_adb1_ub = 3;
  // description Absolute distance between ego vehicle/camera and object [m] [0.0|1000.0] [initial_value:0]
  optional double veh_objfor_adb1_adb_abs_dist = 4;
  // description Object Type [] [0|7] [initial_value:0]
  optional VehObjforADB1AdbClassnType veh_objfor_adb1_adb_classn = 5;
  // description horizontal angle between left of object front or tail lamp and the ego vehicle camera [Deg] [-40.0|40.0] [initial_value:800]
  optional double veh_objfor_adb1_adb_hozl_ag_le = 6;
  // description horizontal angle between right of object front or tail lamp and the ego vehicle camera [Deg] [-40.0|40.0] [initial_value:800]
  optional double veh_objfor_adb1_adb_hozl_ag_ri = 7;
  // description Object moving direction [] [0|3] [initial_value:0]
  optional VehObjforADB1AdbObjDirType veh_objfor_adb1_adb_obj_dir = 8;
  // description Object left angle moving speed [DegPerSec] [-50.0|52.2] [initial_value:250]
  optional double veh_objfor_adb1_adb_obj_hozl_ag_spd_le = 9;
  // description Object right angle moving speed [DegPerSec] [-50.0|52.2] [initial_value:250]
  optional double veh_objfor_adb1_adb_obj_hozl_ag_spd_ri = 10;
  // description Is the object a tracked one or a spontaneously occuring one [] [0|1] [initial_value:0]
  optional bool veh_objfor_adb1_adb_trk_info = 11;
  // description angle between ego vehicle camera and the bottom of object  [Deg] [-3.0|12.5] [initial_value:6]
  optional double veh_objfor_adb1_adb_vert_ag = 12;
  // [] [0|1] [initial_value:None]
  optional bool veh_objfor_adb2_ub = 13;
  // description Absolute distance between ego vehicle/camera and object [m] [0.0|1000.0] [initial_value:0]
  optional double veh_objfor_adb2_adb_abs_dist = 14;
  // description Object Type [] [0|7] [initial_value:0]
  optional VehObjforADB2AdbClassnType veh_objfor_adb2_adb_classn = 15;
  // description horizontal angle between left of object front or tail lamp and the ego vehicle camera [Deg] [-40.0|40.0] [initial_value:800]
  optional double veh_objfor_adb2_adb_hozl_ag_le = 16;
  // description horizontal angle between right of object front or tail lamp and the ego vehicle camera [Deg] [-40.0|40.0] [initial_value:800]
  optional double veh_objfor_adb2_adb_hozl_ag_ri = 17;
  // description Object moving direction [] [0|3] [initial_value:0]
  optional VehObjforADB2AdbObjDirType veh_objfor_adb2_adb_obj_dir = 18;
  // description Object left angle moving speed [DegPerSec] [-50.0|52.2] [initial_value:250]
  optional double veh_objfor_adb2_adb_obj_hozl_ag_spd_le = 19;
  // description Object right angle moving speed [DegPerSec] [-50.0|52.2] [initial_value:250]
  optional double veh_objfor_adb2_adb_obj_hozl_ag_spd_ri = 20;
  // description Is the object a tracked one or a spontaneously occuring one [] [0|1] [initial_value:0]
  optional bool veh_objfor_adb2_adb_trk_info = 21;
  // description angle between ego vehicle camera and the bottom of object  [Deg] [-3.0|12.5] [initial_value:6]
  optional double veh_objfor_adb2_adb_vert_ag = 22;
  // [] [0|1] [initial_value:None]
  optional bool veh_objfor_adb3_ub = 23;
  // description Absolute distance between ego vehicle/camera and object [m] [0.0|1000.0] [initial_value:0]
  optional double veh_objfor_adb3_adb_abs_dist = 24;
  // description Object Type [] [0|7] [initial_value:0]
  optional VehObjforADB3AdbClassnType veh_objfor_adb3_adb_classn = 25;
  // description horizontal angle between left of object front or tail lamp and the ego vehicle camera [Deg] [-40.0|40.0] [initial_value:800]
  optional double veh_objfor_adb3_adb_hozl_ag_le = 26;
  // description horizontal angle between right of object front or tail lamp and the ego vehicle camera [Deg] [-40.0|40.0] [initial_value:800]
  optional double veh_objfor_adb3_adb_hozl_ag_ri = 27;
  // description Object moving direction [] [0|3] [initial_value:0]
  optional VehObjforADB3AdbObjDirType veh_objfor_adb3_adb_obj_dir = 28;
  // description Object left angle moving speed [DegPerSec] [-50.0|52.2] [initial_value:250]
  optional double veh_objfor_adb3_adb_obj_hozl_ag_spd_le = 29;
  // description Object right angle moving speed [DegPerSec] [-50.0|52.2] [initial_value:250]
  optional double veh_objfor_adb3_adb_obj_hozl_ag_spd_ri = 30;
  // description Is the object a tracked one or a spontaneously occuring one [] [0|1] [initial_value:0]
  optional bool veh_objfor_adb3_adb_trk_info = 31;
  // description angle between ego vehicle camera and the bottom of object  [Deg] [-3.0|12.5] [initial_value:6]
  optional double veh_objfor_adb3_adb_vert_ag = 32;
  // [] [0|1] [initial_value:None]
  optional bool veh_objfor_adb4_ub = 33;
  // description Absolute distance between ego vehicle/camera and object [m] [0.0|1000.0] [initial_value:0]
  optional double veh_objfor_adb4_adb_abs_dist = 34;
  // description Object Type [] [0|7] [initial_value:0]
  optional VehObjforADB4AdbClassnType veh_objfor_adb4_adb_classn = 35;
  // description horizontal angle between left of object front or tail lamp and the ego vehicle camera [Deg] [-40.0|40.0] [initial_value:800]
  optional double veh_objfor_adb4_adb_hozl_ag_le = 36;
  // description horizontal angle between right of object front or tail lamp and the ego vehicle camera [Deg] [-40.0|40.0] [initial_value:800]
  optional double veh_objfor_adb4_adb_hozl_ag_ri = 37;
  // description Object moving direction [] [0|3] [initial_value:0]
  optional VehObjforADB4AdbObjDirType veh_objfor_adb4_adb_obj_dir = 38;
  // description Object left angle moving speed [DegPerSec] [-50.0|52.2] [initial_value:250]
  optional double veh_objfor_adb4_adb_obj_hozl_ag_spd_le = 39;
  // description Object right angle moving speed [DegPerSec] [-50.0|52.2] [initial_value:250]
  optional double veh_objfor_adb4_adb_obj_hozl_ag_spd_ri = 40;
  // description Is the object a tracked one or a spontaneously occuring one [] [0|1] [initial_value:0]
  optional bool veh_objfor_adb4_adb_trk_info = 41;
  // description angle between ego vehicle camera and the bottom of object  [Deg] [-3.0|12.5] [initial_value:6]
  optional double veh_objfor_adb4_adb_vert_ag = 42;
  // [] [0|1] [initial_value:None]
  optional bool veh_objfor_adb5_ub = 43;
  // description Absolute distance between ego vehicle/camera and object [m] [0.0|1000.0] [initial_value:0]
  optional double veh_objfor_adb5_adb_abs_dist = 44;
  // description Object Type [] [0|7] [initial_value:0]
  optional VehObjforADB5AdbClassnType veh_objfor_adb5_adb_classn = 45;
  // description horizontal angle between left of object front or tail lamp and the ego vehicle camera [Deg] [-40.0|40.0] [initial_value:800]
  optional double veh_objfor_adb5_adb_hozl_ag_le = 46;
  // description horizontal angle between right of object front or tail lamp and the ego vehicle camera [Deg] [-40.0|40.0] [initial_value:800]
  optional double veh_objfor_adb5_adb_hozl_ag_ri = 47;
  // description Object moving direction [] [0|3] [initial_value:0]
  optional VehObjforADB5AdbObjDirType veh_objfor_adb5_adb_obj_dir = 48;
  // description Object left angle moving speed [DegPerSec] [-50.0|52.2] [initial_value:250]
  optional double veh_objfor_adb5_adb_obj_hozl_ag_spd_le = 49;
  // description Object right angle moving speed [DegPerSec] [-50.0|52.2] [initial_value:250]
  optional double veh_objfor_adb5_adb_obj_hozl_ag_spd_ri = 50;
  // description Is the object a tracked one or a spontaneously occuring one [] [0|1] [initial_value:0]
  optional bool veh_objfor_adb5_adb_trk_info = 51;
  // description angle between ego vehicle camera and the bottom of object  [Deg] [-3.0|12.5] [initial_value:6]
  optional double veh_objfor_adb5_adb_vert_ag = 52;
  // [] [0|1] [initial_value:None]
  optional bool veh_objfor_adb6_ub = 53;
  // description Absolute distance between ego vehicle/camera and object [m] [0.0|1000.0] [initial_value:0]
  optional double veh_objfor_adb6_adb_abs_dist = 54;
  // description Object Type [] [0|7] [initial_value:0]
  optional VehObjforADB6AdbClassnType veh_objfor_adb6_adb_classn = 55;
  // description horizontal angle between left of object front or tail lamp and the ego vehicle camera [Deg] [-40.0|40.0] [initial_value:800]
  optional double veh_objfor_adb6_adb_hozl_ag_le = 56;
  // description horizontal angle between right of object front or tail lamp and the ego vehicle camera [Deg] [-40.0|40.0] [initial_value:800]
  optional double veh_objfor_adb6_adb_hozl_ag_ri = 57;
  // description Object moving direction [] [0|3] [initial_value:0]
  optional VehObjforADB6AdbObjDirType veh_objfor_adb6_adb_obj_dir = 58;
  // description Object left angle moving speed [DegPerSec] [-50.0|52.2] [initial_value:250]
  optional double veh_objfor_adb6_adb_obj_hozl_ag_spd_le = 59;
  // description Object right angle moving speed [DegPerSec] [-50.0|52.2] [initial_value:250]
  optional double veh_objfor_adb6_adb_obj_hozl_ag_spd_ri = 60;
  // description Is the object a tracked one or a spontaneously occuring one [] [0|1] [initial_value:0]
  optional bool veh_objfor_adb6_adb_trk_info = 61;
  // description angle between ego vehicle camera and the bottom of object  [Deg] [-3.0|12.5] [initial_value:6]
  optional double veh_objfor_adb6_adb_vert_ag = 62;
  // [] [0|1] [initial_value:None]
  optional bool veh_objfor_adb7_ub = 63;
  // description Absolute distance between ego vehicle/camera and object [m] [0.0|1000.0] [initial_value:0]
  optional double veh_objfor_adb7_adb_abs_dist = 64;
  // description Object Type [] [0|7] [initial_value:0]
  optional VehObjforADB7AdbClassnType veh_objfor_adb7_adb_classn = 65;
  // description horizontal angle between left of object front or tail lamp and the ego vehicle camera [Deg] [-40.0|40.0] [initial_value:800]
  optional double veh_objfor_adb7_adb_hozl_ag_le = 66;
  // description horizontal angle between right of object front or tail lamp and the ego vehicle camera [Deg] [-40.0|40.0] [initial_value:800]
  optional double veh_objfor_adb7_adb_hozl_ag_ri = 67;
  // description Object moving direction [] [0|3] [initial_value:0]
  optional VehObjforADB7AdbObjDirType veh_objfor_adb7_adb_obj_dir = 68;
  // description Object left angle moving speed [DegPerSec] [-50.0|52.2] [initial_value:250]
  optional double veh_objfor_adb7_adb_obj_hozl_ag_spd_le = 69;
  // description Object right angle moving speed [DegPerSec] [-50.0|52.2] [initial_value:250]
  optional double veh_objfor_adb7_adb_obj_hozl_ag_spd_ri = 70;
  // description Is the object a tracked one or a spontaneously occuring one [] [0|1] [initial_value:0]
  optional bool veh_objfor_adb7_adb_trk_info = 71;
  // description angle between ego vehicle camera and the bottom of object  [Deg] [-3.0|12.5] [initial_value:6]
  optional double veh_objfor_adb7_adb_vert_ag = 72;
  // [] [0|1] [initial_value:None]
  optional bool veh_objfor_adb8_ub = 73;
  // description Absolute distance between ego vehicle/camera and object [m] [0.0|1000.0] [initial_value:0]
  optional double veh_objfor_adb8_adb_abs_dist = 74;
  // description Object Type [] [0|7] [initial_value:0]
  optional VehObjforADB8AdbClassnType veh_objfor_adb8_adb_classn = 75;
  // description horizontal angle between left of object front or tail lamp and the ego vehicle camera [Deg] [-40.0|40.0] [initial_value:800]
  optional double veh_objfor_adb8_adb_hozl_ag_le = 76;
  // description horizontal angle between right of object front or tail lamp and the ego vehicle camera [Deg] [-40.0|40.0] [initial_value:800]
  optional double veh_objfor_adb8_adb_hozl_ag_ri = 77;
  // description Object moving direction [] [0|3] [initial_value:0]
  optional VehObjforADB8AdbObjDirType veh_objfor_adb8_adb_obj_dir = 78;
  // description Object left angle moving speed [DegPerSec] [-50.0|52.2] [initial_value:250]
  optional double veh_objfor_adb8_adb_obj_hozl_ag_spd_le = 79;
  // description Object right angle moving speed [DegPerSec] [-50.0|52.2] [initial_value:250]
  optional double veh_objfor_adb8_adb_obj_hozl_ag_spd_ri = 80;
  // description Is the object a tracked one or a spontaneously occuring one [] [0|1] [initial_value:0]
  optional bool veh_objfor_adb8_adb_trk_info = 81;
  // description angle between ego vehicle camera and the bottom of object  [Deg] [-3.0|12.5] [initial_value:6]
  optional double veh_objfor_adb8_adb_vert_ag = 82;
}

message ZCUD_ZCUCANFD1_FR05_221 {
// Report Message
  // [] [0|1] [initial_value:None]
  optional bool key_distnc_sts_ub = 1;
  // [cm] [0.0|1023.0] [initial_value:1023]
  optional uint32 key_distnc_sts_key0 = 2;
  // [cm] [0.0|1023.0] [initial_value:1023]
  optional uint32 key_distnc_sts_key1 = 3;
  // [cm] [0.0|1023.0] [initial_value:1023]
  optional uint32 key_distnc_sts_key2 = 4;
  // [cm] [0.0|1023.0] [initial_value:1023]
  optional uint32 key_distnc_sts_key3 = 5;
  // [cm] [0.0|1023.0] [initial_value:1023]
  optional uint32 key_distnc_sts_key4 = 6;
  // [cm] [0.0|1023.0] [initial_value:1023]
  optional uint32 key_distnc_sts_key5 = 7;
  // description Request to show message in DIM indicating that there is a fault with the RMx. [] [0|1] [initial_value:0]
  optional bool msg_req_for_rtrctr_rvsb_le = 8;
  // [] [0|1] [initial_value:None]
  optional bool msg_req_for_rtrctr_rvsb_le_ub = 9;
  // description Request to show message in DIM indicating that there is a fault with the RMx. [] [0|1] [initial_value:0]
  optional bool msg_req_for_rtrctr_rvsb_ri = 10;
  // [] [0|1] [initial_value:None]
  optional bool msg_req_for_rtrctr_rvsb_ri_ub = 11;
  // description Inlet Coolant Temperature of the DCDC [degC] [-40.0|215.0] [initial_value:40]
  optional double t_dc_dc_coolt = 12;
  // [] [0|1] [initial_value:None]
  optional bool t_dc_dc_coolt_ub = 13;
  // description Day or night status signal. Lux value (not this signal) sent from SUS to CEM and CEM sets day or night signal. [] [0|1] [initial_value:0]
  optional bool twli_bri_sts = 14;
  // [] [0|1] [initial_value:None]
  optional bool twli_bri_sts_ub = 15;
}

message ADCU_ZCUCANFD1_FR19_226 {
// Control Message
  enum AsyD2DModeD2DModeType {
    ASYD2DMODED2DMODE_ASYD2DMODE_NAD = 0;
    ASYD2DMODED2DMODE_ASYD2DMODE_HNOA = 1;
    ASYD2DMODED2DMODE_ASYD2DMODE_UNOA = 2;
    ASYD2DMODED2DMODE_ASYD2DMODE_HPACRUISEGROUND = 3;
    ASYD2DMODED2DMODE_ASYD2DMODE_HPACRUISEUNDERGROUND = 4;
    ASYD2DMODED2DMODE_ASYD2DMODE_HPAPARKING = 5;
    ASYD2DMODED2DMODE_ASYD2DMODE_APA = 6;
    ASYD2DMODED2DMODE_ASYD2DMODE_RESERVED = 7;
  }
  enum CreateMapCourseDisplayType {
    CREATEMAPCOURSEDISPLAY_CREATEMAPCOURSEDISPLAY_DEFAULT = 0;
    CREATEMAPCOURSEDISPLAY_CREATEMAPCOURSEDISPLAY_COURSE1 = 1;
    CREATEMAPCOURSEDISPLAY_CREATEMAPCOURSEDISPLAY_COURSE2 = 2;
    CREATEMAPCOURSEDISPLAY_CREATEMAPCOURSEDISPLAY_COURSE3 = 3;
  }
  enum CustBtnStsType {
    CUSTBTNSTS_ACTVNAVL4_IDLE = 0;
    CUSTBTNSTS_ACTVNAVL4_ACTVN = 1;
    CUSTBTNSTS_ACTVNAVL4_DEACTVN = 2;
    CUSTBTNSTS_ACTVNAVL4_RECOMMAND = 3;
  }
  enum D2DMapPopupDisplayType {
    D2DMAPPOPUPDISPLAY_DISPLAY_DEFAULT = 0;
    D2DMAPPOPUPDISPLAY_DISPLAY_DISPLAY = 1;
    D2DMAPPOPUPDISPLAY_DISPLAY_RESERVE1 = 2;
    D2DMAPPOPUPDISPLAY_DISPLAY_RESERVE2 = 3;
  }
  enum ExitCustBtnStsType {
    EXITCUSTBTNSTS_ACTVNAVL4_IDLE = 0;
    EXITCUSTBTNSTS_ACTVNAVL4_ACTVN = 1;
    EXITCUSTBTNSTS_ACTVNAVL4_DEACTVN = 2;
    EXITCUSTBTNSTS_ACTVNAVL4_RECOMMAND = 3;
  }
  enum HPACruisingSignCruiseIconColourType {
    HPACRUISINGSIGNCRUISEICONCOLOUR_CRUISEICONCOLOUR_DEFAULT = 0;
    HPACRUISINGSIGNCRUISEICONCOLOUR_CRUISEICONCOLOUR_GREEN = 1;
    HPACRUISINGSIGNCRUISEICONCOLOUR_CRUISEICONCOLOUR_WHITE = 2;
    HPACRUISINGSIGNCRUISEICONCOLOUR_CRUISEICONCOLOUR_GREY = 3;
  }
  enum HPAPushmMapCardTargetPrkgTypeType {
    HPAPUSHMMAPCARDTARGETPRKGTYPE_TARGETPRKGTYPE_DEFAULT = 0;
    HPAPUSHMMAPCARDTARGETPRKGTYPE_TARGETPRKGTYPE_TARGETPARKINGSPACE = 1;
    HPAPUSHMMAPCARDTARGETPRKGTYPE_TARGETPRKGTYPE_REGIONALPARKINGSPACE = 2;
    HPAPUSHMMAPCARDTARGETPRKGTYPE_TARGETPRKGTYPE_RESERVE = 3;
  }
  enum HpaToHMIPopDisplayType {
    HPATOHMIPOPDISPLAY_HPATOHMIPOPDISPLAY_DEFAULT = 0;
    HPATOHMIPOPDISPLAY_HPATOHMIPOPDISPLAY_D2DPOPAFTERDRA = 1;
    HPATOHMIPOPDISPLAY_HPATOHMIPOPDISPLAY_CREMAPSIGPOP = 2;
    HPATOHMIPOPDISPLAY_HPATOHMIPOPDISPLAY_FIDPRKGLOC = 3;
    HPATOHMIPOPDISPLAY_HPATOHMIPOPDISPLAY_OPTIMAL_PARKING = 4;
  }
  enum ISAReqDHUTraVidType {
    ISAREQDHUTRAVID_ISAREQTRAVID_DEFULT = 0;
    ISAREQDHUTRAVID_ISAREQTRAVID_STARTPROCESS = 1;
    ISAREQDHUTRAVID_ISAREQTRAVID_STARTPROCESSANDUPLOAD = 2;
    ISAREQDHUTRAVID_ISAREQTRAVID_RESERVED = 3;
  }
  enum ISAWrkstsType {
    ISAWRKSTS_WRKSTS_OFF = 0;
    ISAWRKSTS_WRKSTS_STANDBY = 1;
    ISAWRKSTS_WRKSTS_ACTIVE = 2;
    ISAWRKSTS_WRKSTS_PROCESSACTIVE = 3;
    ISAWRKSTS_WRKSTS_COMPLETED = 4;
    ISAWRKSTS_WRKSTS_SUSPEND = 5;
    ISAWRKSTS_WRKSTS_FAILURE = 6;
    ISAWRKSTS_WRKSTS_ABORT = 7;
    ISAWRKSTS_WRKSTS_QUIT = 8;
    ISAWRKSTS_WRKSTS_CANCEL = 9;
  }
  enum LoSpdAndTrkBckSysStsType {
    LOSPDANDTRKBCKSYSSTS_LSDAANDTBA_OFF = 0;
    LOSPDANDTRKBCKSYSSTS_LSDAANDTBA_STANDBY = 1;
    LOSPDANDTRKBCKSYSSTS_LSDAANDTBA_RESERVED = 2;
    LOSPDANDTRKBCKSYSSTS_LSDAANDTBA_PREACTIVE = 3;
    LOSPDANDTRKBCKSYSSTS_LSDAANDTBA_FAILURE = 4;
    LOSPDANDTRKBCKSYSSTS_LSDAANDTBA_QUIT = 5;
    LOSPDANDTRKBCKSYSSTS_LSDAANDTBA_ACTIVE = 6;
    LOSPDANDTRKBCKSYSSTS_LSDAANDTBA_ABORT = 7;
    LOSPDANDTRKBCKSYSSTS_LSDAANDTBA_SUSPEND = 8;
    LOSPDANDTRKBCKSYSSTS_LSDAANDTBA_COMPLETED = 9;
  }
  enum MAIButtonStsDispsetType {
    MAIBUTTONSTSDISPSET_BUTTONSTS_ACTVN = 0;
    MAIBUTTONSTSDISPSET_BUTTONSTS_DEACTVN = 1;
    MAIBUTTONSTSDISPSET_BUTTONSTS_HIDE = 2;
    MAIBUTTONSTSDISPSET_BUTTONSTS_RESERVED = 3;
  }
  enum PrkgActivePushType {
    PRKGACTIVEPUSH_PRKGACTIVEPUSH_NOREQ = 0;
    PRKGACTIVEPUSH_PRKGACTIVEPUSH_PROMPT = 1;
    PRKGACTIVEPUSH_PRKGACTIVEPUSH_BUTTON = 2;
    PRKGACTIVEPUSH_PRKGACTIVEPUSH_PROMPTANDBUTTON = 3;
    PRKGACTIVEPUSH_PRKGACTIVEPUSH_AVM_RECOMMEND = 4;
  }
  enum PrkgBtnStsDispFloatType {
    PRKGBTNSTSDISPFLOAT_ACTVNAVL4_IDLE = 0;
    PRKGBTNSTSDISPFLOAT_ACTVNAVL4_ACTVN = 1;
    PRKGBTNSTSDISPFLOAT_ACTVNAVL4_DEACTVN = 2;
    PRKGBTNSTSDISPFLOAT_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgBtnStsDispLeftType {
    PRKGBTNSTSDISPLEFT_ACTVNAVL4_IDLE = 0;
    PRKGBTNSTSDISPLEFT_ACTVNAVL4_ACTVN = 1;
    PRKGBTNSTSDISPLEFT_ACTVNAVL4_DEACTVN = 2;
    PRKGBTNSTSDISPLEFT_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgBtnStsDispMiddleType {
    PRKGBTNSTSDISPMIDDLE_ACTVNAVL4_IDLE = 0;
    PRKGBTNSTSDISPMIDDLE_ACTVNAVL4_ACTVN = 1;
    PRKGBTNSTSDISPMIDDLE_ACTVNAVL4_DEACTVN = 2;
    PRKGBTNSTSDISPMIDDLE_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgBtnStsDispRightType {
    PRKGBTNSTSDISPRIGHT_ACTVNAVL4_IDLE = 0;
    PRKGBTNSTSDISPRIGHT_ACTVNAVL4_ACTVN = 1;
    PRKGBTNSTSDISPRIGHT_ACTVNAVL4_DEACTVN = 2;
    PRKGBTNSTSDISPRIGHT_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgBtnStsDispTBAType {
    PRKGBTNSTSDISPTBA_ACTVNAVL4_IDLE = 0;
    PRKGBTNSTSDISPTBA_ACTVNAVL4_ACTVN = 1;
    PRKGBTNSTSDISPTBA_ACTVNAVL4_DEACTVN = 2;
    PRKGBTNSTSDISPTBA_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgSpdRespType {
    PRKGSPDRESP_CLASSNQLY_LOW = 0;
    PRKGSPDRESP_CLASSNQLY_MEDIUM = 1;
    PRKGSPDRESP_CLASSNQLY_HIGH = 2;
  }
  enum PrkgToHmiCloudDelayType {
    PRKGTOHMICLOUDDELAY_PRKGTOHMICLOUDDELAY_DEFAULT = 0;
    PRKGTOHMICLOUDDELAY_PRKGTOHMICLOUDDELAY_ON = 1;
    PRKGTOHMICLOUDDELAY_PRKGTOHMICLOUDDELAY_OFF = 2;
    PRKGTOHMICLOUDDELAY_PRKGTOHMICLOUDDELAY_RESERVE = 3;
  }
  enum PrkgToHmiUploadAppType {
    PRKGTOHMIUPLOADAPP_UPLOADSTS_DEFAULTVLAUE = 0;
    PRKGTOHMIUPLOADAPP_UPLOADSTS_STARTUPLOADING = 1;
    PRKGTOHMIUPLOADAPP_UPLOADSTS_ENDUPLOAD = 2;
    PRKGTOHMIUPLOADAPP_UPLOADSTS_RESD = 3;
  }
  enum PrkgToHmiUploadCloudType {
    PRKGTOHMIUPLOADCLOUD_UPLOADSTS2_DEFAULTVALUE = 0;
    PRKGTOHMIUPLOADCLOUD_UPLOADSTS2_STARTUPLOADING1 = 1;
    PRKGTOHMIUPLOADCLOUD_UPLOADSTS2_STARTUPLOADING2 = 2;
    PRKGTOHMIUPLOADCLOUD_UPLOADSTS2_STARTUPLOADING3 = 3;
    PRKGTOHMIUPLOADCLOUD_UPLOADSTS2_STARTUPLOADING4 = 4;
    PRKGTOHMIUPLOADCLOUD_UPLOADSTS2_STARTUPLOADING5 = 5;
    PRKGTOHMIUPLOADCLOUD_UPLOADSTS2_ENDUPLOAD = 6;
    PRKGTOHMIUPLOADCLOUD_UPLOADSTS2_RESD = 7;
  }
  enum RVMReqDHUTraVidType {
    RVMREQDHUTRAVID_ISAREQTRAVID_DEFULT = 0;
    RVMREQDHUTRAVID_ISAREQTRAVID_STARTPROCESS = 1;
    RVMREQDHUTRAVID_ISAREQTRAVID_STARTPROCESSANDUPLOAD = 2;
    RVMREQDHUTRAVID_ISAREQTRAVID_RESERVED = 3;
  }
  enum RVMWrkstsType {
    RVMWRKSTS_WRKSTS_OFF = 0;
    RVMWRKSTS_WRKSTS_STANDBY = 1;
    RVMWRKSTS_WRKSTS_ACTIVE = 2;
    RVMWRKSTS_WRKSTS_PROCESSACTIVE = 3;
    RVMWRKSTS_WRKSTS_COMPLETED = 4;
    RVMWRKSTS_WRKSTS_SUSPEND = 5;
    RVMWRKSTS_WRKSTS_FAILURE = 6;
    RVMWRKSTS_WRKSTS_ABORT = 7;
    RVMWRKSTS_WRKSTS_QUIT = 8;
    RVMWRKSTS_WRKSTS_CANCEL = 9;
  }
  enum TBASysStsType {
    TBASYSSTS_LSDAANDTBA_OFF = 0;
    TBASYSSTS_LSDAANDTBA_STANDBY = 1;
    TBASYSSTS_LSDAANDTBA_RESERVED = 2;
    TBASYSSTS_LSDAANDTBA_PREACTIVE = 3;
    TBASYSSTS_LSDAANDTBA_FAILURE = 4;
    TBASYSSTS_LSDAANDTBA_QUIT = 5;
    TBASYSSTS_LSDAANDTBA_ACTIVE = 6;
    TBASYSSTS_LSDAANDTBA_ABORT = 7;
    TBASYSSTS_LSDAANDTBA_SUSPEND = 8;
    TBASYSSTS_LSDAANDTBA_COMPLETED = 9;
  }
  enum ValtPrkgL1BtnDisp1CreateBtnStType {
    VALTPRKGL1BTNDISP1CREATEBTNST_BTNST1_DEFAULT = 0;
    VALTPRKGL1BTNDISP1CREATEBTNST_BTNST1_DISPLAYEDANDCLICKABLE = 1;
    VALTPRKGL1BTNDISP1CREATEBTNST_BTNST1_DISPLAYEDANDUNCLICKABLE = 2;
    VALTPRKGL1BTNDISP1CREATEBTNST_BTNST1_UNDISPLAYED = 3;
  }
  enum ValtPrkgL1BtnDisp1FinishBtnStType {
    VALTPRKGL1BTNDISP1FINISHBTNST_BTNST1_DEFAULT = 0;
    VALTPRKGL1BTNDISP1FINISHBTNST_BTNST1_DISPLAYEDANDCLICKABLE = 1;
    VALTPRKGL1BTNDISP1FINISHBTNST_BTNST1_DISPLAYEDANDUNCLICKABLE = 2;
    VALTPRKGL1BTNDISP1FINISHBTNST_BTNST1_UNDISPLAYED = 3;
  }
  enum ValtPrkgOutUseBtnType {
    VALTPRKGOUTUSEBTN_BTNST1_DEFAULT = 0;
    VALTPRKGOUTUSEBTN_BTNST1_DISPLAYEDANDCLICKABLE = 1;
    VALTPRKGOUTUSEBTN_BTNST1_DISPLAYEDANDUNCLICKABLE = 2;
    VALTPRKGOUTUSEBTN_BTNST1_UNDISPLAYED = 3;
  }
  enum ValtPrkgOutUsePopType {
    VALTPRKGOUTUSEPOP_VALTPRKGOUTUSEPOP_DEFAULT = 0;
    VALTPRKGOUTUSEPOP_VALTPRKGOUTUSEPOP_POPBTN = 1;
    VALTPRKGOUTUSEPOP_VALTPRKGOUTUSEPOP_RESVERSE1 = 2;
    VALTPRKGOUTUSEPOP_VALTPRKGOUTUSEPOP_RESVERSE2 = 3;
  }
  enum ValtPrkgTTLightType {
    VALTPRKGTTLIGHT_CRUISEICONCOLOUR_DEFAULT = 0;
    VALTPRKGTTLIGHT_CRUISEICONCOLOUR_GREEN = 1;
    VALTPRKGTTLIGHT_CRUISEICONCOLOUR_WHITE = 2;
    VALTPRKGTTLIGHT_CRUISEICONCOLOUR_GREY = 3;
  }
  // description Voice warning for unable to active CNOA cruise function. [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_actv_faild_voice = 1;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_actv_faild_voice_ub = 2;
  // description Voice warning driver when the CNOA Cruise function active or inactive. [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_actv_voice = 3;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_actv_voice_ub = 4;
  // description Voice warning for CNOA Cruise function to cross intersections. [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_cross_intsec_voice = 5;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_cross_intsec_voice_ub = 6;
  // description Voice warning for CNOA Cruise function canceled. [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_deactvd_voice = 7;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_deactvd_voice_ub = 8;
  // description Voice warning for finishing CNOA Cruise function. [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_finshd_voice = 9;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_finshd_voice_ub = 10;
  // description Voice warning for CNOA Lane Change function. [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_lan_chg_voice = 11;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_lan_chg_voice_ub = 12;
  // description Voice warning for CNOA lateral offset. [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_offs_voice = 13;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_offs_voice_ub = 14;
  // description Voice warning for CNOA Cruise function to remind the driver pay attention to road conditions. [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_rmn_voice = 15;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_rmn_voice_ub = 16;
  // description Voice warning for CNOA function to request the driver hands on. [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_cnoa_hands_off_voice = 17;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_hands_off_voice_ub = 18;
  // description Voice warning for CNOA Learning route aborting. [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_cnoa_lrng_abort_voice = 19;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lrng_abort_voice_ub = 20;
  // description Voice warning for unable to active CNOA Learning Route function. [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_cnoa_lrng_actv_faild_voice = 21;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lrng_actv_faild_voice_ub = 22;
  // description Voice warning for CNOA function start to Learn route. [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_cnoa_lrng_actv_voice = 23;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lrng_actv_voice_ub = 24;
  // description CNOA Learning complete Voice [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_cnoa_lrng_cmpl_voice = 25;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lrng_cmpl_voice_ub = 26;
  // description Voice warning for CNOA leraning route available. [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_cnoa_lrng_prmpt_voice = 27;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lrng_prmpt_voice_ub = 28;
  // description Voice warning for CNOA function take over. [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_cnoa_takeover_warn_voice = 29;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_takeover_warn_voice_ub = 30;
  // [] [0|1] [initial_value:None]
  optional bool asy_d2_d_mode_ub = 31;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 asy_d2_d_mode_chks = 32;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_d2_d_mode_cntr = 33;
  // description Describe D2D Ctrl Mode = HNOA\UNOA\HPA\APA [] [0|15] [initial_value:0]
  optional AsyD2DModeD2DModeType asy_d2_d_mode_d2_d_mode = 34;
  // description Active deceleration information [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_dece_remind_sound = 35;
  // [] [0|1] [initial_value:None]
  optional bool asy_dece_remind_sound_ub = 36;
  // description the status feedback of voice activation for CNOA Main Page. [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_drvr_sod_cfirm_cnoa_main_page = 37;
  // [] [0|1] [initial_value:None]
  optional bool asy_drvr_sod_cfirm_cnoa_main_page_ub = 38;
  // description Voice reminder when the function of NOA is available. [] [0|1] [initial_value:0]
  optional bool asy_noa_avl_rmn_sound = 39;
  // [] [0|1] [initial_value:None]
  optional bool asy_noa_avl_rmn_sound_ub = 40;
  // description Overtaking suppression prompt [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_undertak_rmind_sound = 41;
  // [] [0|1] [initial_value:None]
  optional bool asy_undertak_rmind_sound_ub = 42;
  // description Voice warning for ICC function [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_warn_sod_for_aut_drv = 43;
  // [] [0|1] [initial_value:None]
  optional bool asy_warn_sod_for_aut_drv_ub = 44;
  // description Custom parking button status [] [0|3] [initial_value:0]
  optional CustBtnStsType cust_btn_sts = 45;
  // [] [0|1] [initial_value:None]
  optional bool cust_btn_sts_ub = 46;
  // description DPA Button Status [] [0|1] [initial_value:0]
  optional bool dpa_btn_sts = 47;
  // [] [0|1] [initial_value:None]
  optional bool dpa_btn_sts_ub = 48;
  // description Exit the custom parking button status [] [0|3] [initial_value:0]
  optional ExitCustBtnStsType exit_cust_btn_sts = 49;
  // [] [0|1] [initial_value:None]
  optional bool exit_cust_btn_sts_ub = 50;
  // [] [0|1] [initial_value:None]
  optional bool hpa_cruising_sign_ub = 51;
  // description CruiseIconColour [] [0|3] [initial_value:0]
  optional HPACruisingSignCruiseIconColourType hpa_cruising_sign_cruise_icon_colour = 52;
  // description CruisingGears [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 hpa_cruising_sign_cruising_gears = 53;
  // description CruisingSpeed [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 hpa_cruising_sign_cruising_speed = 54;
  // description HPAPrkgOptions [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 hpa_prkg_options = 55;
  // [] [0|1] [initial_value:None]
  optional bool hpa_prkg_options_ub = 56;
  // [] [0|1] [initial_value:None]
  optional bool hpa_pushm_map_card_ub = 57;
  // description BasementEntrance [] [0|1] [initial_value:0]
  optional bool hpa_pushm_map_card_basement_entrance = 58;
  // description BasementExit [] [0|1] [initial_value:0]
  optional bool hpa_pushm_map_card_basement_exit = 59;
  // description HPA [] [0|1] [initial_value:0]
  optional bool hpa_pushm_map_card_hpa = 60;
  // description ParkEntrance [] [0|1] [initial_value:0]
  optional bool hpa_pushm_map_card_park_entrance = 61;
  // description ParkExit [] [0|1] [initial_value:0]
  optional bool hpa_pushm_map_card_park_exit = 62;
  // description Reserve1 [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 hpa_pushm_map_card_reserve1 = 63;
  // description TargetPrkg [] [0|1] [initial_value:0]
  optional bool hpa_pushm_map_card_target_prkg = 64;
  // description TargetPrkgType [] [0|3] [initial_value:0]
  optional HPAPushmMapCardTargetPrkgTypeType hpa_pushm_map_card_target_prkg_type = 65;
  // description ISA request DHU transfer video. [] [0|3] [initial_value:0]
  optional ISAReqDHUTraVidType isa_req_dhu_tra_vid = 66;
  // [] [0|1] [initial_value:None]
  optional bool isa_req_dhu_tra_vid_ub = 67;
  // description ISA work status [] [0|15] [initial_value:0]
  optional ISAWrkstsType isa_wrksts = 68;
  // [] [0|1] [initial_value:None]
  optional bool isa_wrksts_ub = 69;
  // description LSDA&TBA status [] [0|15] [initial_value:0]
  optional LoSpdAndTrkBckSysStsType lo_spd_and_trk_bck_sys_sts = 70;
  // [] [0|1] [initial_value:None]
  optional bool lo_spd_and_trk_bck_sys_sts_ub = 71;
  // description The LSDA function actively pushes signals [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 lsda_auto_popup_disp = 72;
  // [] [0|1] [initial_value:None]
  optional bool lsda_auto_popup_disp_ub = 73;
  // description Request MAI switch to set gray signal [] [0|3] [initial_value:0]
  optional MAIButtonStsDispsetType mai_button_sts_dispset = 74;
  // [] [0|1] [initial_value:None]
  optional bool mai_button_sts_dispset_ub = 75;
  // description View switch request [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 pdc_view_swi_req = 76;
  // [] [0|1] [initial_value:None]
  optional bool pdc_view_swi_req_ub = 77;
  // [] [0|7] [initial_value:0]
  optional PrkgActivePushType prkg_active_push = 78;
  // [] [0|1] [initial_value:None]
  optional bool prkg_active_push_ub = 79;
  // description The status signal of floating ball on the interface of vehicle and machine [] [0|3] [initial_value:0]
  optional PrkgBtnStsDispFloatType prkg_btn_sts_disp_float = 80;
  // [] [0|1] [initial_value:None]
  optional bool prkg_btn_sts_disp_float_ub = 81;
  // description Left berth button status signal [] [0|3] [initial_value:0]
  optional PrkgBtnStsDispLeftType prkg_btn_sts_disp_left = 82;
  // [] [0|1] [initial_value:None]
  optional bool prkg_btn_sts_disp_left_ub = 83;
  // description Middle berth button status signal [] [0|3] [initial_value:0]
  optional PrkgBtnStsDispMiddleType prkg_btn_sts_disp_middle = 84;
  // [] [0|1] [initial_value:None]
  optional bool prkg_btn_sts_disp_middle_ub = 85;
  // description Right berth button status signal [] [0|3] [initial_value:0]
  optional PrkgBtnStsDispRightType prkg_btn_sts_disp_right = 86;
  // [] [0|1] [initial_value:None]
  optional bool prkg_btn_sts_disp_right_ub = 87;
  // description TBA button status signal [] [0|3] [initial_value:0]
  optional PrkgBtnStsDispTBAType prkg_btn_sts_disp_tba = 88;
  // [] [0|1] [initial_value:None]
  optional bool prkg_btn_sts_disp_tba_ub = 89;
  // [] [0|1] [initial_value:None]
  optional bool prkg_map_osd_disp0_ub = 90;
  // description Hr [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp0_hr = 91;
  // description ID [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp0_map_id = 92;
  // description Mins [Unitless] [0.0|63.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp0_mins = 93;
  // description Outside Remaining distance [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp0_outd_remaining_dst = 94;
  // description Outside Sts [] [0|1] [initial_value:0]
  optional bool prkg_map_osd_disp0_outd_sts = 95;
  // description Sec [Unitless] [0.0|63.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp0_sec = 96;
  // [] [0|1] [initial_value:None]
  optional bool prkg_map_osd_disp1_ub = 97;
  // description Hr [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp1_hr = 98;
  // description MapID [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp1_map_id = 99;
  // description Mins [Unitless] [0.0|63.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp1_mins = 100;
  // description Outside Remaining distance [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp1_outd_remaining_dst = 101;
  // description Outside Sts [] [0|1] [initial_value:0]
  optional bool prkg_map_osd_disp1_outd_sts = 102;
  // description Sec [Unitless] [0.0|63.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp1_sec = 103;
  // [] [0|1] [initial_value:None]
  optional bool prkg_map_osd_disp2_ub = 104;
  // description Hr [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp2_hr = 105;
  // description MapID [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp2_map_id = 106;
  // description Mins [Unitless] [0.0|63.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp2_mins = 107;
  // description Outside Remaining distance [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp2_outd_remaining_dst = 108;
  // description Outside Sts [] [0|1] [initial_value:0]
  optional bool prkg_map_osd_disp2_outd_sts = 109;
  // description Sec [Unitless] [0.0|63.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp2_sec = 110;
  // [] [0|1] [initial_value:None]
  optional bool prkg_map_osd_disp3_ub = 111;
  // description Hr [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp3_hr = 112;
  // description MapID [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp3_map_id = 113;
  // description Mins [Unitless] [0.0|63.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp3_mins = 114;
  // description Outside Remaining distance [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp3_outd_remaining_dst = 115;
  // description Outside Sts [] [0|1] [initial_value:0]
  optional bool prkg_map_osd_disp3_outd_sts = 116;
  // description Sec [Unitless] [0.0|63.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp3_sec = 117;
  // [] [0|1] [initial_value:None]
  optional bool prkg_map_osd_disp4_ub = 118;
  // description Hr [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp4_hr = 119;
  // description MapID [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp4_map_id = 120;
  // description Mins [Unitless] [0.0|63.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp4_mins = 121;
  // description Outside Remaining distance [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp4_outd_remaining_dst = 122;
  // description Outside Sts [] [0|1] [initial_value:0]
  optional bool prkg_map_osd_disp4_outd_sts = 123;
  // description Sec [Unitless] [0.0|63.0] [initial_value:0]
  optional uint32 prkg_map_osd_disp4_sec = 124;
  // description Parking speed setting response [] [0|3] [initial_value:1]
  optional PrkgSpdRespType prkg_spd_resp = 125;
  // [] [0|1] [initial_value:None]
  optional bool prkg_spd_resp_ub = 126;
  // description PrkgToHmiCloudDelay [] [0|3] [initial_value:0]
  optional PrkgToHmiCloudDelayType prkg_to_hmi_cloud_delay = 127;
  // [] [0|1] [initial_value:None]
  optional bool prkg_to_hmi_cloud_delay_ub = 128;
  // description PrkgToHmiUploadApp [] [0|3] [initial_value:0]
  optional PrkgToHmiUploadAppType prkg_to_hmi_upload_app = 129;
  // [] [0|1] [initial_value:None]
  optional bool prkg_to_hmi_upload_app_ub = 130;
  // description PrkgToHmiUploadCloud [] [0|7] [initial_value:0]
  optional PrkgToHmiUploadCloudType prkg_to_hmi_upload_cloud = 131;
  // [] [0|1] [initial_value:None]
  optional bool prkg_to_hmi_upload_cloud_ub = 132;
  // [] [0|1] [initial_value:None]
  optional bool pushm_map_floor_ub = 133;
  // description End [Unitless] [0.0|63.0] [initial_value:0]
  optional uint32 pushm_map_floor_end = 134;
  // description Start [Unitless] [0.0|63.0] [initial_value:0]
  optional uint32 pushm_map_floor_start = 135;
  // description STS [] [0|1] [initial_value:0]
  optional bool pushm_map_floor_sts = 136;
  // description RVM request DHU transfer video to TSP [] [0|3] [initial_value:0]
  optional RVMReqDHUTraVidType rvm_req_dhu_tra_vid = 137;
  // [] [0|1] [initial_value:None]
  optional bool rvm_req_dhu_tra_vid_ub = 138;
  // description RVM work status [] [0|15] [initial_value:0]
  optional RVMWrkstsType rvm_wrksts = 139;
  // [] [0|1] [initial_value:None]
  optional bool rvm_wrksts_ub = 140;
  // description TBA status [] [0|15] [initial_value:0]
  optional TBASysStsType tba_sys_sts = 141;
  // [] [0|1] [initial_value:None]
  optional bool tba_sys_sts_ub = 142;
  // description ValtPrkgCardChinese [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 valt_prkg_card_chinese = 143;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_card_chinese_ub = 144;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_l1_btn_disp1_ub = 145;
  // description CreateBtnSt [] [0|3] [initial_value:0]
  optional ValtPrkgL1BtnDisp1CreateBtnStType valt_prkg_l1_btn_disp1_create_btn_st = 146;
  // description FinishBtnSt [] [0|3] [initial_value:0]
  optional ValtPrkgL1BtnDisp1FinishBtnStType valt_prkg_l1_btn_disp1_finish_btn_st = 147;
  // description reserve1 [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 valt_prkg_l1_btn_disp1_reserve1 = 148;
  // description reserve2 [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 valt_prkg_l1_btn_disp1_reserve2 = 149;
  // description reserve3 [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 valt_prkg_l1_btn_disp1_reserve3 = 150;
  // description View switching request [] [0|1] [initial_value:0]
  optional bool view_layout_req = 151;
  // [] [0|1] [initial_value:None]
  optional bool view_layout_req_ub = 152;
  // description CreateMapCourseDisplay [] [0|3] [initial_value:0]
  optional CreateMapCourseDisplayType create_map_course_display = 153;
  // [] [0|1] [initial_value:None]
  optional bool create_map_course_display_ub = 154;
  // description D2DMapPopupDisplay [] [0|3] [initial_value:0]
  optional D2DMapPopupDisplayType d2_d_map_popup_display = 155;
  // [] [0|1] [initial_value:None]
  optional bool d2_d_map_popup_display_ub = 156;
  // description HpaToHMIPopDisplay [] [0|15] [initial_value:0]
  optional HpaToHMIPopDisplayType hpa_to_hmi_pop_display = 157;
  // [] [0|1] [initial_value:None]
  optional bool hpa_to_hmi_pop_display_ub = 158;
  // description ValtPrkgOutUseBtn [] [0|3] [initial_value:0]
  optional ValtPrkgOutUseBtnType valt_prkg_out_use_btn = 1159;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_out_use_btn_ub = 160;
  // description ValtPrkgOutUsePop [] [0|3] [initial_value:0]
  optional ValtPrkgOutUsePopType valt_prkg_out_use_pop = 161;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_out_use_pop_ub = 162;
  // description ValtPrkgTTLight [] [0|3] [initial_value:0]
  optional ValtPrkgTTLightType valt_prkg_tt_light = 163;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_tt_light_ub = 164;
}

message BCM_ZCUCANFD1_FR11_240 {
// Control Message
  enum BrkSysStsBrkDegradationType {
    BRKSYSSTSBRKDEGRADATION_NODEGRADATION_GREEN = 0;
    BRKSYSSTSBRKDEGRADATION_LGTFAILR_RED = 1;
    BRKSYSSTSBRKDEGRADATION_ABSESCTEMPORARILYOFF_YELLOW = 2;
    BRKSYSSTSBRKDEGRADATION_ESCSERVICEREQUIRED_YELLOW = 3;
    BRKSYSSTSBRKDEGRADATION_ESCTEMPORARILYOFF_YELLOW = 4;
    BRKSYSSTSBRKDEGRADATION_STCTEMPORARILYOFF_YELLOW = 5;
    BRKSYSSTSBRKDEGRADATION_EPBFAILR_YELLOW = 6;
    BRKSYSSTSBRKDEGRADATION_RESERVED0 = 7;
    BRKSYSSTSBRKDEGRADATION_RESERVED1 = 8;
    BRKSYSSTSBRKDEGRADATION_RESERVED2 = 9;
    BRKSYSSTSBRKDEGRADATION_RESERVED3 = 10;
    BRKSYSSTSBRKDEGRADATION_BRKDEGRAD_GENERALBRAKEFAILUREYELLOW = 11;
    BRKSYSSTSBRKDEGRADATION_RESERVED5 = 12;
    BRKSYSSTSBRKDEGRADATION_RESERVED6 = 13;
    BRKSYSSTSBRKDEGRADATION_RESERVED7 = 14;
    BRKSYSSTSBRKDEGRADATION_RESERVED8 = 15;
  }
  enum BrkSysStsBrkSysCapabilityType {
    BRKSYSSTSBRKSYSCAPABILITY_NOTINITIALIZED = 0;
    BRKSYSSTSBRKSYSCAPABILITY_FULL = 1;
    BRKSYSSTSBRKSYSCAPABILITY_TESTPENDING = 2;
    BRKSYSSTSBRKSYSCAPABILITY_FAULT = 3;
  }
  enum BrkSysStsBrkSysModCfmdType {
    BRKSYSSTSBRKSYSMODCFMD_MODCFMD_NOREQ = 0;
    BRKSYSSTSBRKSYSMODCFMD_MODCFMD_E2E = 1;
    BRKSYSSTSBRKSYSMODCFMD_MODCFMD_RESERVED2 = 2;
    BRKSYSSTSBRKSYSMODCFMD_MODCFMD_RESERVED3 = 3;
    BRKSYSSTSBRKSYSMODCFMD_MODCFMD_RESERVED4 = 4;
    BRKSYSSTSBRKSYSMODCFMD_MODCFMD_RESERVED5 = 5;
    BRKSYSSTSBRKSYSMODCFMD_MODCFMD_RESERVED6 = 6;
    BRKSYSSTSBRKSYSMODCFMD_MODCFMD_RESERVED7 = 7;
    BRKSYSSTSBRKSYSMODCFMD_MODCFMD_RESERVED8 = 8;
    BRKSYSSTSBRKSYSMODCFMD_MODCFMD_ACC_HWA = 9;
    BRKSYSSTSBRKSYSMODCFMD_MODCFMD_PEB = 10;
    BRKSYSSTSBRKSYSMODCFMD_MODCFMD_APA = 11;
    BRKSYSSTSBRKSYSMODCFMD_MODCFMD_RPA = 12;
    BRKSYSSTSBRKSYSMODCFMD_MODCFMD_HPA = 13;
    BRKSYSSTSBRKSYSMODCFMD_MODCFMD_TJP_HWC = 14;
    BRKSYSSTSBRKSYSMODCFMD_MODCFMD_NOP = 15;
  }
  enum EscWarnIndcnReqEscWarnIndcnReqType {
    ESCWARNINDCNREQESCWARNINDCNREQ_ESCWARNINDCNREQ_ESCWARNINDCNONREQ = 0;
    ESCWARNINDCNREQESCWARNINDCNREQ_ESCWARNINDCNREQ_ESCWARNINDCNFLSGREQ = 1;
    ESCWARNINDCNREQESCWARNINDCNREQ_ESCWARNINDCNREQ_RESD2 = 2;
    ESCWARNINDCNREQESCWARNINDCNREQ_ESCWARNINDCNREQ_ESCWARNINDCNOFFREQ = 3;
  }
  enum LampReqByVehHldType {
    LAMPREQBYVEHHLD_DEVSTS4_OFF = 0;
    LAMPREQBYVEHHLD_DEVSTS4_ON = 1;
    LAMPREQBYVEHHLD_DEVSTS4_ERR = 2;
    LAMPREQBYVEHHLD_DEVSTS4_RESD = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool brk_sys_sts_ub = 1;
  // description ADL3 [] [0|1] [initial_value:0]
  optional bool brk_sys_sts_adl3_brk_fall_bck = 2;
  // description Degradation mode [] [0|15] [initial_value:0]
  optional BrkSysStsBrkDegradationType brk_sys_sts_brk_degradation = 3;
  // description Brake capability [] [0|3] [initial_value:0]
  optional BrkSysStsBrkSysCapabilityType brk_sys_sts_brk_sys_capability = 4;
  // description Mode confirmation [] [0|15] [initial_value:0]
  optional BrkSysStsBrkSysModCfmdType brk_sys_sts_brk_sys_mod_cfmd = 5;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 brk_sys_sts_chks = 6;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 brk_sys_sts_cntr = 7;
  // [] [0|1] [initial_value:None]
  optional bool esc_warn_indcn_req_ub = 8;
  // description Esc warning indication request or indication to driver that the Esc function is in active intervention. In case of disabled Esc the warning telltale shall be permanently lit. In case of active intervention indication the telltale will flash. Checksum for Esc warning indication request [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 esc_warn_indcn_req_chks = 9;
  // description Esc warning indication request or indication to driver that the Esc function is in active intervention. In case of disabled Esc the warning telltale shall be permanently lit. In case of active intervention indication the telltale will flash. Counter for Esc warning indication request [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 esc_warn_indcn_req_cntr = 10;
  // [] [0|3] [initial_value:3]
  optional EscWarnIndcnReqEscWarnIndcnReqType esc_warn_indcn_req_esc_warn_indcn_req = 11;
  // description Request to display Autohold function symbol in DIM. 0=OFF, 1=ON. [] [0|3] [initial_value:0]
  optional LampReqByVehHldType lamp_req_by_veh_hld = 12;
  // [] [0|1] [initial_value:None]
  optional bool lamp_req_by_veh_hld_ub = 13;
}

message ZCUD_ZCUCANFD1_FR06_243 {
// Report Message
  enum LeFrntTireMsgPWarnFlgType {
    LEFRNTTIREMSGPWARNFLG_PWARNFLG_NORMAL = 0;
    LEFRNTTIREMSGPWARNFLG_PWARNFLG_LOWPRESSUREWARNING = 1;
    LEFRNTTIREMSGPWARNFLG_PWARNFLG_HIGHPRESSUREWARNING = 2;
    LEFRNTTIREMSGPWARNFLG_PWARNFLG_RESERVE = 3;
  }
  enum LeReTireMsgPWarnFlgType {
    LERETIREMSGPWARNFLG_PWARNFLG_NORMAL = 0;
    LERETIREMSGPWARNFLG_PWARNFLG_LOWPRESSUREWARNING = 1;
    LERETIREMSGPWARNFLG_PWARNFLG_HIGHPRESSUREWARNING = 2;
    LERETIREMSGPWARNFLG_PWARNFLG_RESERVE = 3;
  }
  enum OnBdChrgrHndlSts1Type {
    ONBDCHRGRHNDLSTS1_ONBDCHRGRHNDLSTS1_DISCONNECTED = 0;
    ONBDCHRGRHNDLSTS1_ONBDCHRGRHNDLSTS1_CONNECTEDWITHOUTPOWER = 1;
    ONBDCHRGRHNDLSTS1_ONBDCHRGRHNDLSTS1_POWERAVAILABLEBUTNOTACTIVATED = 2;
    ONBDCHRGRHNDLSTS1_ONBDCHRGRHNDLSTS1_CONNECTEDWITHPOWER = 3;
    ONBDCHRGRHNDLSTS1_ONBDCHRGRHNDLSTS1_DISCHARGECONNECTWITHOUTPOWERINCAR = 4;
    ONBDCHRGRHNDLSTS1_ONBDCHRGRHNDLSTS1_DISCHARGECONNECTWITHOUTPOWEROUTCAR = 5;
    ONBDCHRGRHNDLSTS1_ONBDCHRGRHNDLSTS1_DISCHARGECONNECTWITHPOWERINCAR = 6;
    ONBDCHRGRHNDLSTS1_ONBDCHRGRHNDLSTS1_DISCHARGECONNECTWITHPOWEROUTCAR = 7;
    ONBDCHRGRHNDLSTS1_ONBDCHRGRHNDLSTS1_INIT = 8;
    ONBDCHRGRHNDLSTS1_ONBDCHRGRHNDLSTS1_FAULT = 9;
    ONBDCHRGRHNDLSTS1_ONBDCHRGRHNDLSTS1_NOTCOMPLETECONNNECTED = 10;
    ONBDCHRGRHNDLSTS1_ONBDCHRGRHNDLSTS1_RESERVED0 = 11;
    ONBDCHRGRHNDLSTS1_ONBDCHRGRHNDLSTS1_RESERVED1 = 12;
    ONBDCHRGRHNDLSTS1_ONBDCHRGRHNDLSTS1_RESERVED2 = 13;
  }
  enum RiFrntTireMsgPWarnFlgType {
    RIFRNTTIREMSGPWARNFLG_PWARNFLG_NORMAL = 0;
    RIFRNTTIREMSGPWARNFLG_PWARNFLG_LOWPRESSUREWARNING = 1;
    RIFRNTTIREMSGPWARNFLG_PWARNFLG_HIGHPRESSUREWARNING = 2;
    RIFRNTTIREMSGPWARNFLG_PWARNFLG_RESERVE = 3;
  }
  enum RiReTireMsgPWarnFlgType {
    RIRETIREMSGPWARNFLG_PWARNFLG_NORMAL = 0;
    RIRETIREMSGPWARNFLG_PWARNFLG_LOWPRESSUREWARNING = 1;
    RIRETIREMSGPWARNFLG_PWARNFLG_HIGHPRESSUREWARNING = 2;
    RIRETIREMSGPWARNFLG_PWARNFLG_RESERVE = 3;
  }
  // description DCDC actived state [] [0|1] [initial_value:0]
  optional bool dc_dc_actvd = 1;
  // [] [0|1] [initial_value:None]
  optional bool dc_dc_actvd_ub = 2;
  // description Actual state of charge of the Hv Battery. [%] [0.0|100.0] [initial_value:0]
  optional double hv_batt_soc = 3;
  // [] [0|1] [initial_value:None]
  optional bool hv_batt_soc_ub = 4;
  // [] [0|1] [initial_value:None]
  optional bool le_frnt_tire_msg_ub = 5;
  // description battery low status [] [0|1] [initial_value:0]
  optional bool le_frnt_tire_msg_batt_lo_st = 6;
  // description fast lost warn flag [] [0|1] [initial_value:0]
  optional bool le_frnt_tire_msg_fast_lose_warn_flg = 7;
  // description message old flag [] [0|1] [initial_value:0]
  optional bool le_frnt_tire_msg_msg_old_flg = 8;
  // description tire temperature [KiloPa] [0.0|350.115] [initial_value:255]
  optional double le_frnt_tire_msg_p = 9;
  // description pressure warn flag [] [0|3] [initial_value:0]
  optional LeFrntTireMsgPWarnFlgType le_frnt_tire_msg_p_warn_flg = 10;
  // description system warn flag [] [0|1] [initial_value:0]
  optional bool le_frnt_tire_msg_sys_warn_flg = 11;
  // description tire pressure [degC] [-50.0|205.0] [initial_value:255]
  optional double le_frnt_tire_msg_t = 12;
  // description tire fill status [] [0|1] [initial_value:0]
  optional bool le_frnt_tire_msg_tire_fillg_assi_p_sts = 13;
  // description temperature warn flag [] [0|1] [initial_value:0]
  optional bool le_frnt_tire_msg_t_warn_flg = 14;
  // [] [0|1] [initial_value:None]
  optional bool le_re_tire_msg_ub = 15;
  // description battery low status [] [0|1] [initial_value:0]
  optional bool le_re_tire_msg_batt_lo_st = 16;
  // description fast lost warn flag [] [0|1] [initial_value:0]
  optional bool le_re_tire_msg_fast_lose_warn_flg = 17;
  // description message old flag [] [0|1] [initial_value:0]
  optional bool le_re_tire_msg_msg_old_flg = 18;
  // description tire temperature [KiloPa] [0.0|350.115] [initial_value:255]
  optional double le_re_tire_msg_p = 19;
  // description pressure warn flag [] [0|3] [initial_value:0]
  optional LeReTireMsgPWarnFlgType le_re_tire_msg_p_warn_flg = 20;
  // description system warn flag [] [0|1] [initial_value:0]
  optional bool le_re_tire_msg_sys_warn_flg = 21;
  // description tire pressure [degC] [-50.0|205.0] [initial_value:255]
  optional double le_re_tire_msg_t = 22;
  // description tire fill status [] [0|1] [initial_value:0]
  optional bool le_re_tire_msg_tire_fillg_assi_p_sts = 23;
  // description temperature warn flag [] [0|1] [initial_value:0]
  optional bool le_re_tire_msg_t_warn_flg = 24;
  // description Status of the Onboard Charger connection to the grid.  [] [0|15] [initial_value:8]
  optional OnBdChrgrHndlSts1Type on_bd_chrgr_hndl_sts1 = 25;
  // [] [0|1] [initial_value:None]
  optional bool on_bd_chrgr_hndl_sts1_ub = 26;
  // [] [0|1] [initial_value:None]
  optional bool ri_frnt_tire_msg_ub = 27;
  // description battery low status [] [0|1] [initial_value:0]
  optional bool ri_frnt_tire_msg_batt_lo_st = 28;
  // description fast lost warn flag [] [0|1] [initial_value:0]
  optional bool ri_frnt_tire_msg_fast_lose_warn_flg = 29;
  // description message old flag [] [0|1] [initial_value:0]
  optional bool ri_frnt_tire_msg_msg_old_flg = 30;
  // description tire temperature [KiloPa] [0.0|350.115] [initial_value:255]
  optional double ri_frnt_tire_msg_p = 31;
  // description pressure warn flag [] [0|3] [initial_value:0]
  optional RiFrntTireMsgPWarnFlgType ri_frnt_tire_msg_p_warn_flg = 32;
  // description system warn flag [] [0|1] [initial_value:0]
  optional bool ri_frnt_tire_msg_sys_warn_flg = 33;
  // description tire pressure [degC] [-50.0|205.0] [initial_value:255]
  optional double ri_frnt_tire_msg_t = 34;
  // description tire fill status [] [0|1] [initial_value:0]
  optional bool ri_frnt_tire_msg_tire_fillg_assi_p_sts = 35;
  // description temperature warn flag [] [0|1] [initial_value:0]
  optional bool ri_frnt_tire_msg_t_warn_flg = 36;
  // [] [0|1] [initial_value:None]
  optional bool ri_re_tire_msg_ub = 37;
  // description battery low status [] [0|1] [initial_value:0]
  optional bool ri_re_tire_msg_batt_lo_st = 38;
  // description fast lost warn flag [] [0|1] [initial_value:0]
  optional bool ri_re_tire_msg_fast_lose_warn_flg = 39;
  // description message old flag [] [0|1] [initial_value:0]
  optional bool ri_re_tire_msg_msg_old_flg = 40;
  // description tire temperature [KiloPa] [0.0|350.115] [initial_value:255]
  optional double ri_re_tire_msg_p = 41;
  // description pressure warn flag [] [0|3] [initial_value:0]
  optional RiReTireMsgPWarnFlgType ri_re_tire_msg_p_warn_flg = 42;
  // description system warn flag [] [0|1] [initial_value:0]
  optional bool ri_re_tire_msg_sys_warn_flg = 43;
  // description tire pressure [degC] [-50.0|205.0] [initial_value:255]
  optional double ri_re_tire_msg_t = 44;
  // description tire fill status [] [0|1] [initial_value:0]
  optional bool ri_re_tire_msg_tire_fillg_assi_p_sts = 45;
  // description temperature warn flag [] [0|1] [initial_value:0]
  optional bool ri_re_tire_msg_t_warn_flg = 46;
}

message PASZCUCANFD1_FR15_24B {
// Control Message
  enum MobDevRPAAuthentReq1AuthentStsType {
    MOBDEVRPAAUTHENTREQ1AUTHENTSTS_AUTH_SUCCESS = 0;
    MOBDEVRPAAUTHENTREQ1AUTHENTSTS_AUTH_FAILED = 1;
    MOBDEVRPAAUTHENTREQ1AUTHENTSTS_AUTH_NONE = 2;
    MOBDEVRPAAUTHENTREQ1AUTHENTSTS_AUTH_RESERVED1 = 3;
  }
  enum ObstacleMinimumDistanceFrntMinDstPosnType {
    OBSTACLEMINIMUMDISTANCEFRNTMINDSTPOSN_POSITION_NO = 0;
    OBSTACLEMINIMUMDISTANCEFRNTMINDSTPOSN_POSITION_INSIDELEFT = 1;
    OBSTACLEMINIMUMDISTANCEFRNTMINDSTPOSN_POSITION_INSIDERIGHT = 2;
    OBSTACLEMINIMUMDISTANCEFRNTMINDSTPOSN_POSITION_OUTLEFT = 3;
    OBSTACLEMINIMUMDISTANCEFRNTMINDSTPOSN_POSITION_OUTRIGHT = 4;
    OBSTACLEMINIMUMDISTANCEFRNTMINDSTPOSN_POSITION_SIDELEFT = 5;
    OBSTACLEMINIMUMDISTANCEFRNTMINDSTPOSN_POSITION_SIDERIGHT = 6;
    OBSTACLEMINIMUMDISTANCEFRNTMINDSTPOSN_POSITION_RESERVED = 7;
  }
  enum ObstacleMinimumDistanceReMinDstPosnType {
    OBSTACLEMINIMUMDISTANCEREMINDSTPOSN_POSITION_NO = 0;
    OBSTACLEMINIMUMDISTANCEREMINDSTPOSN_POSITION_INSIDELEFT = 1;
    OBSTACLEMINIMUMDISTANCEREMINDSTPOSN_POSITION_INSIDERIGHT = 2;
    OBSTACLEMINIMUMDISTANCEREMINDSTPOSN_POSITION_OUTLEFT = 3;
    OBSTACLEMINIMUMDISTANCEREMINDSTPOSN_POSITION_OUTRIGHT = 4;
    OBSTACLEMINIMUMDISTANCEREMINDSTPOSN_POSITION_SIDELEFT = 5;
    OBSTACLEMINIMUMDISTANCEREMINDSTPOSN_POSITION_SIDERIGHT = 6;
    OBSTACLEMINIMUMDISTANCEREMINDSTPOSN_POSITION_RESERVED = 7;
  }
  enum PrkgAmbLiReqType {
    PRKGAMBLIREQ_PRKGAMBLIREQ_NOREQ = 0;
    PRKGAMBLIREQ_PRKGAMBLIREQ_ATYP_SEARCHING = 1;
    PRKGAMBLIREQ_PRKGAMBLIREQ_BTYP_PREACTIVE = 2;
    PRKGAMBLIREQ_PRKGAMBLIREQ_CTYP_ACTIVE = 3;
    PRKGAMBLIREQ_PRKGAMBLIREQ_DTYP_COMPLETED = 4;
    PRKGAMBLIREQ_PRKGAMBLIREQ_ETYP_QUITABORT = 5;
    PRKGAMBLIREQ_PRKGAMBLIREQ_FTYP_LOCNSUCCESS = 6;
    PRKGAMBLIREQ_PRKGAMBLIREQ_ETYP_ABORT = 7;
  }
  enum PrkgAuxInfoDispType {
    PRKGAUXINFODISP_PRKGAUXINFODISP_DEFAULT = 0;
    PRKGAUXINFODISP_PRKGAUXINFODISP_PLEASEPAYATTENTIONTOSURROUNDING = 1;
    PRKGAUXINFODISP_PRKGAUXINFODISP_PLEASEFORWARD = 2;
    PRKGAUXINFODISP_PRKGAUXINFODISP_PRESSTTHEBRAKEPEDAL = 3;
    PRKGAUXINFODISP_PRKGAUXINFODISP_SELECTPARKINGSLOT = 4;
    PRKGAUXINFODISP_PRKGAUXINFODISP_PARKINGSLOTSELECTED = 5;
    PRKGAUXINFODISP_PRKGAUXINFODISP_PARKINGTYPERECOMMANDBUTTONOFF = 6;
    PRKGAUXINFODISP_PRKGAUXINFODISP_CHOOSEPARKINGMODE_OR_CHANGEOTHERPARKINGSPACES = 7;
    PRKGAUXINFODISP_PRKGAUXINFODISP_CHOOSEPARKINGMODE = 8;
    PRKGAUXINFODISP_PRKGAUXINFODISP_RELEASETHEBRAKEPEDAL = 9;
    PRKGAUXINFODISP_PRKGAUXINFODISP_PRESSTHEBRAKEPEDALTHENSEARCINGSPACESRPP = 10;
    PRKGAUXINFODISP_PRKGAUXINFODISP_SELECTIONPARKDIRECTIONBEFOREACTIVE = 11;
    PRKGAUXINFODISP_PRKGAUXINFODISP_TIPSTARTPARKINGRPA = 12;
    PRKGAUXINFODISP_PRKGAUXINFODISP_PRESSTHEBRAKEPEDAL = 13;
    PRKGAUXINFODISP_PRKGAUXINFODISP_TIPSTARTPARKING = 14;
    PRKGAUXINFODISP_PRKGAUXINFODISP_SELECTIONDIRECTIONSTART = 15;
  }
  enum PrkgBtnStsDispAVMType {
    PRKGBTNSTSDISPAVM_ACTVNAVL4_IDLE = 0;
    PRKGBTNSTSDISPAVM_ACTVNAVL4_ACTVN = 1;
    PRKGBTNSTSDISPAVM_ACTVNAVL4_DEACTVN = 2;
    PRKGBTNSTSDISPAVM_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgBtnStsDispGroupCancelType {
    PRKGBTNSTSDISPGROUPCANCEL_ACTVNAVL4_IDLE = 0;
    PRKGBTNSTSDISPGROUPCANCEL_ACTVNAVL4_ACTVN = 1;
    PRKGBTNSTSDISPGROUPCANCEL_ACTVNAVL4_DEACTVN = 2;
    PRKGBTNSTSDISPGROUPCANCEL_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgBtnStsDispGroupPrkgInType {
    PRKGBTNSTSDISPGROUPPRKGIN_ACTVNAVL4_IDLE = 0;
    PRKGBTNSTSDISPGROUPPRKGIN_ACTVNAVL4_ACTVN = 1;
    PRKGBTNSTSDISPGROUPPRKGIN_ACTVNAVL4_DEACTVN = 2;
    PRKGBTNSTSDISPGROUPPRKGIN_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgBtnStsDispGroupPrkgOutType {
    PRKGBTNSTSDISPGROUPPRKGOUT_ACTVNAVL4_IDLE = 0;
    PRKGBTNSTSDISPGROUPPRKGOUT_ACTVNAVL4_ACTVN = 1;
    PRKGBTNSTSDISPGROUPPRKGOUT_ACTVNAVL4_DEACTVN = 2;
    PRKGBTNSTSDISPGROUPPRKGOUT_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgBtnStsDispGroupSelfChooseSpaceType {
    PRKGBTNSTSDISPGROUPSELFCHOOSESPACE_ACTVNAVL4_IDLE = 0;
    PRKGBTNSTSDISPGROUPSELFCHOOSESPACE_ACTVNAVL4_ACTVN = 1;
    PRKGBTNSTSDISPGROUPSELFCHOOSESPACE_ACTVNAVL4_DEACTVN = 2;
    PRKGBTNSTSDISPGROUPSELFCHOOSESPACE_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgBtnStsDispLSDAType {
    PRKGBTNSTSDISPLSDA_ACTVNAVL4_IDLE = 0;
    PRKGBTNSTSDISPLSDA_ACTVNAVL4_ACTVN = 1;
    PRKGBTNSTSDISPLSDA_ACTVNAVL4_DEACTVN = 2;
    PRKGBTNSTSDISPLSDA_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgBtnStsDispsetType {
    PRKGBTNSTSDISPSET_ACTVNAVL4_IDLE = 0;
    PRKGBTNSTSDISPSET_ACTVNAVL4_ACTVN = 1;
    PRKGBTNSTSDISPSET_ACTVNAVL4_DEACTVN = 2;
    PRKGBTNSTSDISPSET_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgDispGroupLeCornrLocnType {
    PRKGDISPGROUPLECORNRLOCN_CORNRLOCN_NOQUARTILE = 0;
    PRKGDISPGROUPLECORNRLOCN_CORNRLOCN_FIRSTQUARTILE = 1;
    PRKGDISPGROUPLECORNRLOCN_CORNRLOCN_SECONDQUARTILE = 2;
    PRKGDISPGROUPLECORNRLOCN_CORNRLOCN_THIRDQUARTILE = 3;
    PRKGDISPGROUPLECORNRLOCN_CORNRLOCN_FOUTHQUARTILE = 4;
    PRKGDISPGROUPLECORNRLOCN_CORNRLOCN_RESERVED1 = 5;
    PRKGDISPGROUPLECORNRLOCN_CORNRLOCN_RESERVED2 = 6;
    PRKGDISPGROUPLECORNRLOCN_CORNRLOCN_RESERVED3 = 7;
  }
  enum PrkgDispGroupPrkgTypType {
    PRKGDISPGROUPPRKGTYP_PRKGTYP_DEFAULT = 0;
    PRKGDISPGROUPPRKGTYP_PRKGTYP_LEFTPERPENDICULAR = 1;
    PRKGDISPGROUPPRKGTYP_PRKGTYP_LEFTPARALLEL = 2;
    PRKGDISPGROUPPRKGTYP_PRKGTYP_RIGHTPERPENDICULAR = 3;
    PRKGDISPGROUPPRKGTYP_PRKGTYP_RIGHTPARALLEL = 4;
    PRKGDISPGROUPPRKGTYP_PRKGTYP_RESERVED2 = 5;
    PRKGDISPGROUPPRKGTYP_PRKGTYP_RESERVED3 = 6;
    PRKGDISPGROUPPRKGTYP_PRKGTYP_RESERVED4 = 7;
  }
  enum PrkgDockDisReqType {
    PRKGDOCKDISREQ_ACTVNAVL4_IDLE = 0;
    PRKGDOCKDISREQ_ACTVNAVL4_ACTVN = 1;
    PRKGDOCKDISREQ_ACTVNAVL4_DEACTVN = 2;
    PRKGDOCKDISREQ_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgDstCtrlStsType {
    PRKGDSTCTRLSTS_PRKGDSTCTRLSYSSTS_OFF = 0;
    PRKGDSTCTRLSTS_PRKGDSTCTRLSYSSTS_STANDBY = 1;
    PRKGDSTCTRLSTS_PRKGDSTCTRLSYSSTS_FRONTREARACTIVE = 2;
    PRKGDSTCTRLSTS_PRKGDSTCTRLSYSSTS_FRONTACTIVE = 3;
    PRKGDSTCTRLSTS_PRKGDSTCTRLSYSSTS_REARACTIVE = 4;
    PRKGDSTCTRLSTS_PRKGDSTCTRLSYSSTS_SYSTEMFAILURE = 5;
    PRKGDSTCTRLSTS_PRKGDSTCTRLSYSSTS_INHIBITED = 6;
    PRKGDSTCTRLSTS_PRKGDSTCTRLSYSSTS_INITIALIZE = 7;
    PRKGDSTCTRLSTS_PRKGDSTCTRLSYSSTS_COVERED = 8;
    PRKGDSTCTRLSTS_PRKGDSTCTRLSYSSTS_FRONTACTIVETRAILERMODE = 9;
    PRKGDSTCTRLSTS_PRKGDSTCTRLSYSSTS_RESERVED1 = 10;
    PRKGDSTCTRLSTS_PRKGDSTCTRLSYSSTS_RESERVED2 = 11;
    PRKGDSTCTRLSTS_PRKGDSTCTRLSYSSTS_RESERVED3 = 12;
    PRKGDSTCTRLSTS_PRKGDSTCTRLSYSSTS_RESERVED4 = 13;
    PRKGDSTCTRLSTS_PRKGDSTCTRLSYSSTS_RESERVED5 = 14;
    PRKGDSTCTRLSTS_PRKGDSTCTRLSYSSTS_RESERVED6 = 15;
  }
  enum PrkgEmgyBrkWarnType {
    PRKGEMGYBRKWARN_PRKGEMGYBRKWARN_OFF = 0;
    PRKGEMGYBRKWARN_PRKGEMGYBRKWARN_ONNOTACTIVE = 1;
    PRKGEMGYBRKWARN_PRKGEMGYBRKWARN_FAULT = 2;
    PRKGEMGYBRKWARN_PRKGEMGYBRKWARN_PEBACTIVATE = 3;
    PRKGEMGYBRKWARN_PRKGEMGYBRKWARN_MSPACTIVATE = 4;
    PRKGEMGYBRKWARN_PRKGEMGYBRKWARN_LARGERAINWARNING = 5;
  }
  enum PrkgOutModBtnSts1Type {
    PRKGOUTMODBTNSTS1_ACTVNAVL4_IDLE = 0;
    PRKGOUTMODBTNSTS1_ACTVNAVL4_ACTVN = 1;
    PRKGOUTMODBTNSTS1_ACTVNAVL4_DEACTVN = 2;
    PRKGOUTMODBTNSTS1_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgOutModBtnSts2Type {
    PRKGOUTMODBTNSTS2_ACTVNAVL4_IDLE = 0;
    PRKGOUTMODBTNSTS2_ACTVNAVL4_ACTVN = 1;
    PRKGOUTMODBTNSTS2_ACTVNAVL4_DEACTVN = 2;
    PRKGOUTMODBTNSTS2_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgOutModBtnSts3Type {
    PRKGOUTMODBTNSTS3_ACTVNAVL4_IDLE = 0;
    PRKGOUTMODBTNSTS3_ACTVNAVL4_ACTVN = 1;
    PRKGOUTMODBTNSTS3_ACTVNAVL4_DEACTVN = 2;
    PRKGOUTMODBTNSTS3_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgOutModBtnSts4Type {
    PRKGOUTMODBTNSTS4_ACTVNAVL4_IDLE = 0;
    PRKGOUTMODBTNSTS4_ACTVNAVL4_ACTVN = 1;
    PRKGOUTMODBTNSTS4_ACTVNAVL4_DEACTVN = 2;
    PRKGOUTMODBTNSTS4_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgOutModBtnSts5Type {
    PRKGOUTMODBTNSTS5_ACTVNAVL4_IDLE = 0;
    PRKGOUTMODBTNSTS5_ACTVNAVL4_ACTVN = 1;
    PRKGOUTMODBTNSTS5_ACTVNAVL4_DEACTVN = 2;
    PRKGOUTMODBTNSTS5_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgOutModBtnSts6Type {
    PRKGOUTMODBTNSTS6_ACTVNAVL4_IDLE = 0;
    PRKGOUTMODBTNSTS6_ACTVNAVL4_ACTVN = 1;
    PRKGOUTMODBTNSTS6_ACTVNAVL4_DEACTVN = 2;
    PRKGOUTMODBTNSTS6_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgOutModBtnStsToAPPPrkgOutModBtnSts1Type {
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS1_ACTVNAVL4_IDLE = 0;
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS1_ACTVNAVL4_ACTVN = 1;
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS1_ACTVNAVL4_DEACTVN = 2;
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS1_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgOutModBtnStsToAPPPrkgOutModBtnSts2Type {
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS2_ACTVNAVL4_IDLE = 0;
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS2_ACTVNAVL4_ACTVN = 1;
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS2_ACTVNAVL4_DEACTVN = 2;
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS2_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgOutModBtnStsToAPPPrkgOutModBtnSts3Type {
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS3_ACTVNAVL4_IDLE = 0;
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS3_ACTVNAVL4_ACTVN = 1;
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS3_ACTVNAVL4_DEACTVN = 2;
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS3_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgOutModBtnStsToAPPPrkgOutModBtnSts4Type {
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS4_ACTVNAVL4_IDLE = 0;
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS4_ACTVNAVL4_ACTVN = 1;
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS4_ACTVNAVL4_DEACTVN = 2;
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS4_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgOutModBtnStsToAPPPrkgOutModBtnSts5Type {
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS5_ACTVNAVL4_IDLE = 0;
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS5_ACTVNAVL4_ACTVN = 1;
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS5_ACTVNAVL4_DEACTVN = 2;
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS5_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgOutModBtnStsToAPPPrkgOutModBtnSts6Type {
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS6_ACTVNAVL4_IDLE = 0;
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS6_ACTVNAVL4_ACTVN = 1;
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS6_ACTVNAVL4_DEACTVN = 2;
    PRKGOUTMODBTNSTSTOAPPPRKGOUTMODBTNSTS6_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PrkgRecordTagType {
    PRKGRECORDTAG_SYSSTS3_INVALID = 0;
    PRKGRECORDTAG_SYSSTS3_SLEEP = 1;
    PRKGRECORDTAG_SYSSTS3_STANDBY = 2;
    PRKGRECORDTAG_SYSSTS3_ACTIVE = 3;
    PRKGRECORDTAG_SYSSTS3_FAILURE = 4;
    PRKGRECORDTAG_SYSSTS3_SELFINSPECTION = 5;
    PRKGRECORDTAG_SYSSTS3_RESERVED1 = 6;
    PRKGRECORDTAG_SYSSTS3_RESERVED2 = 7;
  }
  // description Parking instructions in Chinese [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 drvr_assc_sys_disp = 1;
  // [] [0|1] [initial_value:None]
  optional bool drvr_assc_sys_disp_ub = 2;
  // description ADCU2(APA/RPA/AVP) Check conditions exist [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 drvr_assc_sys_disp_list = 3;
  // [] [0|1] [initial_value:None]
  optional bool drvr_assc_sys_disp_list_ub = 4;
  // [] [0|1] [initial_value:None]
  optional bool mob_dev_rpa_authent_req1_ub = 5;
  // description authentsts [] [0|7] [initial_value:2]
  optional MobDevRPAAuthentReq1AuthentStsType mob_dev_rpa_authent_req1_authent_sts = 6;
  // description CHKS [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 mob_dev_rpa_authent_req1_chks = 7;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 mob_dev_rpa_authent_req1_cntr = 8;
  // description randomx [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 mob_dev_rpa_authent_req1_rnd_x = 9;
  // description randomY [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 mob_dev_rpa_authent_req1_rnd_y = 10;
  // [] [0|1] [initial_value:None]
  optional bool obstacle_minimum_distance_frnt_ub = 11;
  // description Output minimum distance value. Initial value: 511 [Unitless] [0.0|511.0] [initial_value:511]
  optional uint32 obstacle_minimum_distance_frnt_min_dst = 12;
  // description Minimum Distance Position to DHU. [] [0|7] [initial_value:0]
  optional ObstacleMinimumDistanceFrntMinDstPosnType obstacle_minimum_distance_frnt_min_dst_posn = 13;
  // description Stop Display Request. Initial value: 0x0: NotReq [] [0|1] [initial_value:0]
  optional bool obstacle_minimum_distance_frnt_stop_disp_req = 14;
  // [] [0|1] [initial_value:None]
  optional bool obstacle_minimum_distance_re_ub = 15;
  // description Output minimum distance value. Initial value: 511 [Unitless] [0.0|511.0] [initial_value:511]
  optional uint32 obstacle_minimum_distance_re_min_dst = 16;
  // description Minimum Distance Position to DHU. [] [0|7] [initial_value:0]
  optional ObstacleMinimumDistanceReMinDstPosnType obstacle_minimum_distance_re_min_dst_posn = 17;
  // description Stop Display Request. Initial value: 0x0: NotReq [] [0|1] [initial_value:0]
  optional bool obstacle_minimum_distance_re_stop_disp_req = 18;
  // description PDC Mute button status to HMI. [] [0|1] [initial_value:0]
  optional bool pdc_mute_btn_sts = 19;
  // [] [0|1] [initial_value:None]
  optional bool pdc_mute_btn_sts_ub = 20;
  // description PrkgAmbLiReq [] [0|15] [initial_value:0]
  optional PrkgAmbLiReqType prkg_amb_li_req = 21;
  // [] [0|1] [initial_value:None]
  optional bool prkg_amb_li_req_ub = 22;
  // description a signal to HMI to display guide information. [] [0|15] [initial_value:0]
  optional PrkgAuxInfoDispType prkg_aux_info_disp = 23;
  // [] [0|1] [initial_value:None]
  optional bool prkg_aux_info_disp_ub = 24;
  // description AVM button status signal [] [0|3] [initial_value:0]
  optional PrkgBtnStsDispAVMType prkg_btn_sts_disp_avm = 25;
  // [] [0|1] [initial_value:None]
  optional bool prkg_btn_sts_disp_avm_ub = 26;
  // [] [0|1] [initial_value:None]
  optional bool prkg_btn_sts_disp_group_ub = 27;
  // [] [0|3] [initial_value:0]
  optional PrkgBtnStsDispGroupCancelType prkg_btn_sts_disp_group_cancel = 28;
  // [] [0|3] [initial_value:0]
  optional PrkgBtnStsDispGroupPrkgInType prkg_btn_sts_disp_group_prkg_in = 29;
  // [] [0|3] [initial_value:0]
  optional PrkgBtnStsDispGroupPrkgOutType prkg_btn_sts_disp_group_prkg_out = 30;
  // [] [0|3] [initial_value:0]
  optional PrkgBtnStsDispGroupSelfChooseSpaceType prkg_btn_sts_disp_group_self_choose_space = 31;
  // description LSDA button status signal [] [0|3] [initial_value:0]
  optional PrkgBtnStsDispLSDAType prkg_btn_sts_disp_lsda = 32;
  // [] [0|1] [initial_value:None]
  optional bool prkg_btn_sts_disp_lsda_ub = 33;
  // description Setting item button status signal [] [0|3] [initial_value:0]
  optional PrkgBtnStsDispsetType prkg_btn_sts_dispset = 34;
  // [] [0|1] [initial_value:None]
  optional bool prkg_btn_sts_dispset_ub = 35;
  // [] [0|1] [initial_value:None]
  optional bool prkg_disp_group_ub = 36;
  // description That's the X-coordinate of point A [Unitless] [0.0|4095.0] [initial_value:0]
  optional uint32 prkg_disp_group_le_cornr_coornx = 37;
  // description That's the y-coordinate of point A [Unitless] [0.0|4095.0] [initial_value:0]
  optional uint32 prkg_disp_group_le_cornr_coorny = 38;
  // [] [0|7] [initial_value:0]
  optional PrkgDispGroupLeCornrLocnType prkg_disp_group_le_cornr_locn = 39;
  // description parking slot type [] [0|7] [initial_value:0]
  optional PrkgDispGroupPrkgTypType prkg_disp_group_prkg_typ = 40;
  // description That's the x-coordinate of point B [Unitless] [0.0|4095.0] [initial_value:0]
  optional uint32 prkg_disp_group_ri_cornr_coornx = 41;
  // description That's the y-coordinate of point B [Unitless] [0.0|4095.0] [initial_value:0]
  optional uint32 prkg_disp_group_ri_cornr_coorny = 42;
  // description slot number [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 prkg_disp_group_stall_nr = 43;
  // description The Dock bar displays and sets the gray status signal [] [0|3] [initial_value:0]
  optional PrkgDockDisReqType prkg_dock_dis_req = 44;
  // [] [0|1] [initial_value:None]
  optional bool prkg_dock_dis_req_ub = 45;
  // description This is the PDC function operation status [] [0|15] [initial_value:0]
  optional PrkgDstCtrlStsType prkg_dst_ctrl_sts = 46;
  // [] [0|1] [initial_value:None]
  optional bool prkg_dst_ctrl_sts_ub = 47;
  // description PEB warning info [] [0|7] [initial_value:0]
  optional PrkgEmgyBrkWarnType prkg_emgy_brk_warn = 48;
  // [] [0|1] [initial_value:None]
  optional bool prkg_emgy_brk_warn_ub = 49;
  // description Vehicle parking system request CSD display/not display the parking video stream [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 prkg_img_disp_req = 50;
  // [] [0|1] [initial_value:None]
  optional bool prkg_img_disp_req_ub = 51;
  // [] [0|1] [initial_value:None]
  optional bool prkg_out_mod_btn_sts_ub = 52;
  // description Vertical parking out front left button status display [] [0|3] [initial_value:0]
  optional PrkgOutModBtnSts1Type prkg_out_mod_btn_sts1 = 53;
  // description Vertical parking out front right button status display [] [0|3] [initial_value:0]
  optional PrkgOutModBtnSts2Type prkg_out_mod_btn_sts2 = 54;
  // description Vertical parking out rear left button status display [] [0|3] [initial_value:0]
  optional PrkgOutModBtnSts3Type prkg_out_mod_btn_sts3 = 55;
  // description Vertical parking out rear right button status display [] [0|3] [initial_value:0]
  optional PrkgOutModBtnSts4Type prkg_out_mod_btn_sts4 = 56;
  // description Horizontal left parking out button status dispaly [] [0|3] [initial_value:0]
  optional PrkgOutModBtnSts5Type prkg_out_mod_btn_sts5 = 57;
  // description Horizontal right parking out button status dispaly [] [0|3] [initial_value:0]
  optional PrkgOutModBtnSts6Type prkg_out_mod_btn_sts6 = 58;
  // [] [0|1] [initial_value:None]
  optional bool prkg_out_mod_btn_sts_to_app_ub = 59;
  // description Vertical parking out front left button status display [] [0|3] [initial_value:0]
  optional PrkgOutModBtnStsToAPPPrkgOutModBtnSts1Type prkg_out_mod_btn_sts_to_app_prkg_out_mod_btn_sts1 = 60;
  // description Vertical parking out front right button status display [] [0|3] [initial_value:0]
  optional PrkgOutModBtnStsToAPPPrkgOutModBtnSts2Type prkg_out_mod_btn_sts_to_app_prkg_out_mod_btn_sts2 = 61;
  // description Vertical parking out rear left button status display [] [0|3] [initial_value:0]
  optional PrkgOutModBtnStsToAPPPrkgOutModBtnSts3Type prkg_out_mod_btn_sts_to_app_prkg_out_mod_btn_sts3 = 62;
  // description Vertical parking out rear right button status display [] [0|3] [initial_value:0]
  optional PrkgOutModBtnStsToAPPPrkgOutModBtnSts4Type prkg_out_mod_btn_sts_to_app_prkg_out_mod_btn_sts4 = 63;
  // description Horizontal left parking out button status dispaly [] [0|3] [initial_value:0]
  optional PrkgOutModBtnStsToAPPPrkgOutModBtnSts5Type prkg_out_mod_btn_sts_to_app_prkg_out_mod_btn_sts5 = 64;
  // description Horizontal right parking out button status dispaly [] [0|3] [initial_value:0]
  optional PrkgOutModBtnStsToAPPPrkgOutModBtnSts6Type prkg_out_mod_btn_sts_to_app_prkg_out_mod_btn_sts6 = 65;
  // description DVR open/close parking control vehicle video request signal [] [0|1] [initial_value:0]
  optional bool prkg_record_req = 66;
  // [] [0|1] [initial_value:None]
  optional bool prkg_record_req_ub = 67;
  // description The DVR shows the icon signal of parking control status [] [0|7] [initial_value:0]
  optional PrkgRecordTagType prkg_record_tag = 68;
  // [] [0|1] [initial_value:None]
  optional bool prkg_record_tag_ub = 69;
  // description Self-recommended parking mode switch confirm and memory [] [0|1] [initial_value:1]
  optional bool prkg_typ_aut_btn_cfmd = 70;
  // [] [0|1] [initial_value:None]
  optional bool prkg_typ_aut_btn_cfmd_ub = 71;
  // description RPA function enable or display by PAS memory [] [0|1] [initial_value:1]
  optional bool rem_prkg_ena_sts = 72;
  // [] [0|1] [initial_value:None]
  optional bool rem_prkg_ena_sts_ub = 73;
  // description Responses the maximum move distance of RSPA (Remote Straight Parking Assist) [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 rem_straight_prkg_assi_seln_req_resp = 74;
  // [] [0|1] [initial_value:None]
  optional bool rem_straight_prkg_assi_seln_req_resp_ub = 75;
}

message ADCU_ZCUCANFD1_FR07_280 {
// Control Message
  enum AD4HornWarnType {
    AD4HORNWARN_AD4HORNWARN_NOWARN = 0;
    AD4HORNWARN_AD4HORNWARN_LOWWARN = 1;
    AD4HORNWARN_AD4HORNWARN_MIDWARN = 2;
    AD4HORNWARN_AD4HORNWARN_CONSTANTWARN = 3;
  }
  enum AsyALatIndcrType {
    ASYALATINDCR_ASYINDCRDISPSTS_NODISP = 0;
    ASYALATINDCR_ASYINDCRDISPSTS_OFFDISP = 1;
    ASYALATINDCR_ASYINDCRDISPSTS_STANDBYDISP = 2;
    ASYALATINDCR_ASYINDCRDISPSTS_ACTIVEDISP = 3;
    ASYALATINDCR_ASYINDCRDISPSTS_OVERRIDEDISP = 4;
    ASYALATINDCR_ASYINDCRDISPSTS_FAILUREDISP = 5;
    ASYALATINDCR_ASYINDCRDISPSTS_PASSIVE = 6;
  }
  enum AsyALgtIndcrType {
    ASYALGTINDCR_ASYINDCRDISPSTS_NODISP = 0;
    ASYALGTINDCR_ASYINDCRDISPSTS_OFFDISP = 1;
    ASYALGTINDCR_ASYINDCRDISPSTS_STANDBYDISP = 2;
    ASYALGTINDCR_ASYINDCRDISPSTS_ACTIVEDISP = 3;
    ASYALGTINDCR_ASYINDCRDISPSTS_OVERRIDEDISP = 4;
    ASYALGTINDCR_ASYINDCRDISPSTS_FAILUREDISP = 5;
    ASYALGTINDCR_ASYINDCRDISPSTS_PASSIVE = 6;
  }
  enum AsyAutDrvgLiReqType {
    ASYAUTDRVGLIREQ_ONOFFNOREQ_NOREQ = 0;
    ASYAUTDRVGLIREQ_ONOFFNOREQ_ON = 1;
    ASYAUTDRVGLIREQ_ONOFFNOREQ_OFF = 2;
  }
  enum AsyObjForBigData0SnsrSrcOfAbsLatSpdType {
    ASYOBJFORBIGDATA0SNSRSRCOFABSLATSPD_SNSRSRC1_UKWN = 0;
    ASYOBJFORBIGDATA0SNSRSRCOFABSLATSPD_SNSRSRC1_RADAR = 1;
    ASYOBJFORBIGDATA0SNSRSRCOFABSLATSPD_SNSRSRC1_CAM = 2;
    ASYOBJFORBIGDATA0SNSRSRCOFABSLATSPD_SNSRSRC1_FUSN = 3;
  }
  enum AsyObjForBigData0SnsrSrcOfAbsLgtSpdType {
    ASYOBJFORBIGDATA0SNSRSRCOFABSLGTSPD_SNSRSRC1_UKWN = 0;
    ASYOBJFORBIGDATA0SNSRSRCOFABSLGTSPD_SNSRSRC1_RADAR = 1;
    ASYOBJFORBIGDATA0SNSRSRCOFABSLGTSPD_SNSRSRC1_CAM = 2;
    ASYOBJFORBIGDATA0SNSRSRCOFABSLGTSPD_SNSRSRC1_FUSN = 3;
  }
  enum AsyObjForBigData0TypeType {
    ASYOBJFORBIGDATA0TYPE_ASYOBJTYPE_CAR = 0;
    ASYOBJFORBIGDATA0TYPE_ASYOBJTYPE_PEDESTRIAN = 1;
    ASYOBJFORBIGDATA0TYPE_ASYOBJTYPE_CYCLIST = 2;
    ASYOBJFORBIGDATA0TYPE_ASYOBJTYPE_MOTORBIKE = 3;
    ASYOBJFORBIGDATA0TYPE_ASYOBJTYPE_BUS = 4;
    ASYOBJFORBIGDATA0TYPE_ASYOBJTYPE_TRUCK = 5;
    ASYOBJFORBIGDATA0TYPE_ASYOBJTYPE_TREE = 6;
    ASYOBJFORBIGDATA0TYPE_ASYOBJTYPE_WALL = 7;
    ASYOBJFORBIGDATA0TYPE_ASYOBJTYPE_ANIMAL = 8;
    ASYOBJFORBIGDATA0TYPE_ASYOBJTYPE_UNKNOWN = 9;
  }
  enum AsyObjTypeType {
    ASYOBJTYPE_ASYOBJTYPE_CAR = 0;
    ASYOBJTYPE_ASYOBJTYPE_PEDESTRIAN = 1;
    ASYOBJTYPE_ASYOBJTYPE_CYCLIST = 2;
    ASYOBJTYPE_ASYOBJTYPE_MOTORBIKE = 3;
    ASYOBJTYPE_ASYOBJTYPE_BUS = 4;
    ASYOBJTYPE_ASYOBJTYPE_TRUCK = 5;
    ASYOBJTYPE_ASYOBJTYPE_TREE = 6;
    ASYOBJTYPE_ASYOBJTYPE_WALL = 7;
    ASYOBJTYPE_ASYOBJTYPE_ANIMAL = 8;
    ASYOBJTYPE_ASYOBJTYPE_UNKNOWN = 9;
  }
  enum AvlStsForLongAutDrvType {
    AVLSTSFORLONGAUTDRV_AVLSTSFORLONGAUTDRV4_NOMSG = 0;
    AVLSTSFORLONGAUTDRV_AVLSTSFORLONGAUTDRV4_LGTCTRLNOTAVL = 1;
    AVLSTSFORLONGAUTDRV_AVLSTSFORLONGAUTDRV4_ACCCNCL = 2;
    AVLSTSFORLONGAUTDRV_AVLSTSFORLONGAUTDRV4_NOVEHAHD = 3;
    AVLSTSFORLONGAUTDRV_AVLSTSFORLONGAUTDRV4_DRVRBUCDRQRD = 4;
    AVLSTSFORLONGAUTDRV_AVLSTSFORLONGAUTDRV4_DRVRDOORNOTCLSD = 5;
    AVLSTSFORLONGAUTDRV_AVLSTSFORLONGAUTDRV4_GEARNOTINDRV = 6;
    AVLSTSFORLONGAUTDRV_AVLSTSFORLONGAUTDRV4_GEARNEUT = 7;
    AVLSTSFORLONGAUTDRV_AVLSTSFORLONGAUTDRV4_SNSRBLKD = 8;
    AVLSTSFORLONGAUTDRV_AVLSTSFORLONGAUTDRV4_HLDTIMAXEXCDD = 9;
    AVLSTSFORLONGAUTDRV_AVLSTSFORLONGAUTDRV4_OVRDTIMAXEXCDD = 10;
    AVLSTSFORLONGAUTDRV_AVLSTSFORLONGAUTDRV4_SPDLOWLIMEXCDD = 11;
    AVLSTSFORLONGAUTDRV_AVLSTSFORLONGAUTDRV4_DRVMODSELDNOTOK = 12;
    AVLSTSFORLONGAUTDRV_AVLSTSFORLONGAUTDRV4_EPBAPPLD = 13;
    AVLSTSFORLONGAUTDRV_AVLSTSFORLONGAUTDRV4_ESC_OFF = 14;
    AVLSTSFORLONGAUTDRV_AVLSTSFORLONGAUTDRV4_HDC_ON = 15;
  }
  enum CamStatus0Type {
    CAMSTATUS0_RSDSMSTST_CFG = 0;
    CAMSTATUS0_RSDSMSTST_STRTUP = 1;
    CAMSTATUS0_RSDSMSTST_RUNNG = 2;
    CAMSTATUS0_RSDSMSTST_BLKD = 3;
    CAMSTATUS0_RSDSMSTST_FAULTY = 4;
    CAMSTATUS0_RSDSMSTST_SHUTDOWN = 5;
    CAMSTATUS0_RSDSMSTST_HOT = 6;
    CAMSTATUS0_RSDSMSTST_CAL = 7;
  }
  enum CllsnMtgtnFaultStsType {
    CLLSNMTGTNFAULTSTS_CLLSNMTGTNFAULTSTS_NOFAULT = 0;
    CLLSNMTGTNFAULTSTS_CLLSNMTGTNFAULTSTS_FRONT = 1;
    CLLSNMTGTNFAULTSTS_CLLSNMTGTNFAULTSTS_FRONTSIDE = 2;
    CLLSNMTGTNFAULTSTS_CLLSNMTGTNFAULTSTS_BOTH = 3;
  }
  enum CllsnWarnReIndcnType {
    CLLSNWARNREINDCN_LCMAINDCN_NOLCMAWARN = 0;
    CLLSNWARNREINDCN_LCMAINDCN_LCMAWARNLVL1 = 1;
    CLLSNWARNREINDCN_LCMAINDCN_NOTUSED = 2;
    CLLSNWARNREINDCN_LCMAINDCN_LCMAWARNLVL2 = 3;
  }
  enum CnclWarnLgtForAutDrvType {
    CNCLWARNLGTFORAUTDRV_NOYESCRIT1_NOTVLD1 = 0;
    CNCLWARNLGTFORAUTDRV_NOYESCRIT1_NO = 1;
    CNCLWARNLGTFORAUTDRV_NOYESCRIT1_YES = 2;
    CNCLWARNLGTFORAUTDRV_NOYESCRIT1_NOTVLD2 = 3;
  }
  enum CustSlotAvleOrNotType {
    CUSTSLOTAVLEORNOT_CUSTSLOTAVLEORNOT_DEFAULT = 0;
    CUSTSLOTAVLEORNOT_CUSTSLOTAVLEORNOT_SUPPORT = 1;
    CUSTSLOTAVLEORNOT_CUSTSLOTAVLEORNOT_NONSUPPORT = 2;
  }
  enum CustSlotStsType {
    CUSTSLOTSTS_CUSTSLOTSTS_IDLE = 0;
    CUSTSLOTSTS_CUSTSLOTSTS_OPTIONAL = 1;
    CUSTSLOTSTS_CUSTSLOTSTS_PARKIN = 2;
    CUSTSLOTSTS_CUSTSLOTSTS_NOPARKIN = 3;
  }
  enum DrvOffModType {
    DRVOFFMOD_ONOFFSTS_DEFAULT = 0;
    DRVOFFMOD_ONOFFSTS_ON = 1;
    DRVOFFMOD_ONOFFSTS_OFF = 2;
    DRVOFFMOD_ONOFFSTS_OFF_INTERRUPTED = 3;
  }
  enum DrvOffWarnType {
    DRVOFFWARN_LVLWARN2_NOWARN = 0;
    DRVOFFWARN_LVLWARN2_LVL1 = 1;
    DRVOFFWARN_LVLWARN2_LVL2 = 2;
    DRVOFFWARN_LVLWARN2_LVL3 = 3;
  }
  enum FrntRdrSts0Type {
    FRNTRDRSTS0_RSDSMSTST_CFG = 0;
    FRNTRDRSTS0_RSDSMSTST_STRTUP = 1;
    FRNTRDRSTS0_RSDSMSTST_RUNNG = 2;
    FRNTRDRSTS0_RSDSMSTST_BLKD = 3;
    FRNTRDRSTS0_RSDSMSTST_FAULTY = 4;
    FRNTRDRSTS0_RSDSMSTST_SHUTDOWN = 5;
    FRNTRDRSTS0_RSDSMSTST_HOT = 6;
    FRNTRDRSTS0_RSDSMSTST_CAL = 7;
  }
  enum FrntSideRdrLeSts0Type {
    FRNTSIDERDRLESTS0_RSDSMSTST_CFG = 0;
    FRNTSIDERDRLESTS0_RSDSMSTST_STRTUP = 1;
    FRNTSIDERDRLESTS0_RSDSMSTST_RUNNG = 2;
    FRNTSIDERDRLESTS0_RSDSMSTST_BLKD = 3;
    FRNTSIDERDRLESTS0_RSDSMSTST_FAULTY = 4;
    FRNTSIDERDRLESTS0_RSDSMSTST_SHUTDOWN = 5;
    FRNTSIDERDRLESTS0_RSDSMSTST_HOT = 6;
    FRNTSIDERDRLESTS0_RSDSMSTST_CAL = 7;
  }
  enum FrntSideRdrRiSts0Type {
    FRNTSIDERDRRISTS0_RSDSMSTST_CFG = 0;
    FRNTSIDERDRRISTS0_RSDSMSTST_STRTUP = 1;
    FRNTSIDERDRRISTS0_RSDSMSTST_RUNNG = 2;
    FRNTSIDERDRRISTS0_RSDSMSTST_BLKD = 3;
    FRNTSIDERDRRISTS0_RSDSMSTST_FAULTY = 4;
    FRNTSIDERDRRISTS0_RSDSMSTST_SHUTDOWN = 5;
    FRNTSIDERDRRISTS0_RSDSMSTST_HOT = 6;
    FRNTSIDERDRRISTS0_RSDSMSTST_CAL = 7;
  }
  enum HmiAutoLaneChgStsForAsyAIAsistAudioType {
    HMIAUTOLANECHGSTSFORASYAIASISTAUDIO_NOLANECHG = 0;
    HMIAUTOLANECHGSTSFORASYAIASISTAUDIO_LANECHGONLESIDEFINSH = 1;
    HMIAUTOLANECHGSTSFORASYAIASISTAUDIO_LANECHGONRISIDEFINSH = 2;
    HMIAUTOLANECHGSTSFORASYAIASISTAUDIO_LANECHGFAILRONLESIDE = 3;
    HMIAUTOLANECHGSTSFORASYAIASISTAUDIO_LANECHGFAILRONRISIDE = 4;
    HMIAUTOLANECHGSTSFORASYAIASISTAUDIO_LANECHGNOTAVLONLESIDE = 5;
    HMIAUTOLANECHGSTSFORASYAIASISTAUDIO_LANECHGNOTAVLONRISIDE = 6;
    HMIAUTOLANECHGSTSFORASYAIASISTAUDIO_LANECHGONLESIDEPROGRESS = 7;
    HMIAUTOLANECHGSTSFORASYAIASISTAUDIO_LANECHGONRISIDEPROGRESS = 8;
    HMIAUTOLANECHGSTSFORASYAIASISTAUDIO_LANECHGCNCONLESIDE = 9;
    HMIAUTOLANECHGSTSFORASYAIASISTAUDIO_LANECHGCNCONRISIDE = 10;
  }
  enum HPAMapIDDistributionMapIDTypeType {
    HPAMAPIDDISTRIBUTIONMAPIDTYPE_MAPIDTYPE_DLE = 0;
    HPAMAPIDDISTRIBUTIONMAPIDTYPE_MAPIDTYPE_ENTERCREATED = 1;
    HPAMAPIDDISTRIBUTIONMAPIDTYPE_MAPIDTYPE_EXITCREATED = 2;
    HPAMAPIDDISTRIBUTIONMAPIDTYPE_MAPIDTYPE_CREATEROUTE = 3;
    HPAMAPIDDISTRIBUTIONMAPIDTYPE_MAPIDTYPE_OVERENTERCREATED = 4;
    HPAMAPIDDISTRIBUTIONMAPIDTYPE_MAPIDTYPE_OVEREXITCREATED = 5;
    HPAMAPIDDISTRIBUTIONMAPIDTYPE_MAPIDTYPE_OVERCREATEROUTE = 6;
  }
  enum IHUSetDispADType {
    IHUSETDISPAD_SETTINGDISPSTS_NORMAL = 0;
    IHUSETDISPAD_SETTINGDISPSTS_ALCAUNAVAILABLE = 1;
    IHUSETDISPAD_SETTINGDISPSTS_BOTHUNAVAILABLE = 2;
    IHUSETDISPAD_SETTINGDISPSTS_TSIFUSNUNAVAILABLE = 3;
  }
  enum LcmaOnType {
    LCMAON_LCMACTRAON_OFF = 0;
    LCMAON_LCMACTRAON_PASSIVE = 1;
    LCMAON_LCMACTRAON_ACTIVE = 2;
    LCMAON_LCMACTRAON_ERROR = 3;
  }
  enum LeTTCLvType {
    LETTCLV_WARNLVL_NOWARN = 0;
    LETTCLV_WARNLVL_WARNLVL1 = 1;
    LETTCLV_WARNLVL_WARNLVL2_NOAUDIO = 2;
    LETTCLV_WARNLVL_WARNLVL3_AUDIO = 3;
  }
  enum OffsForSpdWarnSetgStsType {
    OFFSFORSPDWARNSETGSTS_OFFSFORSPDWARNSETGSTS_MINUS10 = 0;
    OFFSFORSPDWARNSETGSTS_OFFSFORSPDWARNSETGSTS_MINUS5 = 1;
    OFFSFORSPDWARNSETGSTS_OFFSFORSPDWARNSETGSTS_ZERO = 2;
    OFFSFORSPDWARNSETGSTS_OFFSFORSPDWARNSETGSTS_PLUS5 = 3;
    OFFSFORSPDWARNSETGSTS_OFFSFORSPDWARNSETGSTS_PLUS10 = 4;
    OFFSFORSPDWARNSETGSTS_OFFSFORSPDWARNSETGSTS_RESERVED = 5;
  }
  enum PrkgFctLrngMesgType {
    PRKGFCTLRNGMESG_ASYFCTLRNGMESG_DEFAULT = 0;
    PRKGFCTLRNGMESG_ASYFCTLRNGMESG_LEARNMESSAGE = 1;
    PRKGFCTLRNGMESG_ASYFCTLRNGMESG_RESERVED1 = 2;
    PRKGFCTLRNGMESG_ASYFCTLRNGMESG_RESERVED2 = 3;
  }
  enum ReSideRdrLeSts0Type {
    RESIDERDRLESTS0_RSDSMSTST_CFG = 0;
    RESIDERDRLESTS0_RSDSMSTST_STRTUP = 1;
    RESIDERDRLESTS0_RSDSMSTST_RUNNG = 2;
    RESIDERDRLESTS0_RSDSMSTST_BLKD = 3;
    RESIDERDRLESTS0_RSDSMSTST_FAULTY = 4;
    RESIDERDRLESTS0_RSDSMSTST_SHUTDOWN = 5;
    RESIDERDRLESTS0_RSDSMSTST_HOT = 6;
    RESIDERDRLESTS0_RSDSMSTST_CAL = 7;
  }
  enum ReSideRdrRiSts0Type {
    RESIDERDRRISTS0_RSDSMSTST_CFG = 0;
    RESIDERDRRISTS0_RSDSMSTST_STRTUP = 1;
    RESIDERDRRISTS0_RSDSMSTST_RUNNG = 2;
    RESIDERDRRISTS0_RSDSMSTST_BLKD = 3;
    RESIDERDRRISTS0_RSDSMSTST_FAULTY = 4;
    RESIDERDRRISTS0_RSDSMSTST_SHUTDOWN = 5;
    RESIDERDRRISTS0_RSDSMSTST_HOT = 6;
    RESIDERDRRISTS0_RSDSMSTST_CAL = 7;
  }
  enum RiTTCLvType {
    RITTCLV_WARNLVL_NOWARN = 0;
    RITTCLV_WARNLVL_WARNLVL1 = 1;
    RITTCLV_WARNLVL_WARNLVL2_NOAUDIO = 2;
    RITTCLV_WARNLVL_WARNLVL3_AUDIO = 3;
  }
  enum SpdLimCoupldFirstType {
    SPDLIMCOUPLDFIRST_SPDCOUPLDSGN3_NOSPDINFO = 0;
    SPDLIMCOUPLDFIRST_SPDCOUPLDSGN3_ENDOFALLLIML = 1;
    SPDLIMCOUPLDFIRST_SPDCOUPLDSGN3_HIWAYSGN1 = 2;
    SPDLIMCOUPLDFIRST_SPDCOUPLDSGN3_HIWAYSGN2 = 3;
    SPDLIMCOUPLDFIRST_SPDCOUPLDSGN3_ENDOFHIWAYSGN1 = 4;
    SPDLIMCOUPLDFIRST_SPDCOUPLDSGN3_ENDOFHIWAYSGN2 = 5;
    SPDLIMCOUPLDFIRST_SPDCOUPLDSGN3_FREEWAYSGN1 = 6;
    SPDLIMCOUPLDFIRST_SPDCOUPLDSGN3_FREEWAYSGN2 = 7;
    SPDLIMCOUPLDFIRST_SPDCOUPLDSGN3_ENDOFFREEWAYSGN1 = 8;
    SPDLIMCOUPLDFIRST_SPDCOUPLDSGN3_ENDOFFREEWAYSGN2 = 9;
    SPDLIMCOUPLDFIRST_SPDCOUPLDSGN3_STRTOFCTY = 10;
    SPDLIMCOUPLDFIRST_SPDCOUPLDSGN3_ENDOFCTY = 11;
    SPDLIMCOUPLDFIRST_SPDCOUPLDSGN3_STRTOFTOWN = 12;
    SPDLIMCOUPLDFIRST_SPDCOUPLDSGN3_ENDOFTOWN = 13;
    SPDLIMCOUPLDFIRST_SPDCOUPLDSGN3_STRTOFSPDARLO = 14;
    SPDLIMCOUPLDFIRST_SPDCOUPLDSGN3_ENDOFSPDARLO = 15;
    SPDLIMCOUPLDFIRST_SPDCOUPLDSGN3_ENDOFSPDLIM = 16;
    SPDLIMCOUPLDFIRST_SPDCOUPLDSGN3_STRTOFTOWNSEC = 17;
    SPDLIMCOUPLDFIRST_SPDCOUPLDSGN3_ENDOFTOWNSEC = 18;
  }
  enum SpdLimSpplFirstType {
    SPDLIMSPPLFIRST_SPPLTRFCSGNINFO_OFF = 0;
    SPDLIMSPPLFIRST_SPPLTRFCSGNINFO_LEFT = 1;
    SPDLIMSPPLFIRST_SPPLTRFCSGNINFO_RIGHT = 2;
    SPDLIMSPPLFIRST_SPPLTRFCSGNINFO_RAIN = 3;
    SPDLIMSPPLFIRST_SPPLTRFCSGNINFO_SNOW = 4;
    SPDLIMSPPLFIRST_SPPLTRFCSGNINFO_SNOWANDRAIN = 5;
    SPDLIMSPPLFIRST_SPPLTRFCSGNINFO_WET = 6;
    SPDLIMSPPLFIRST_SPPLTRFCSGNINFO_ICE = 7;
    SPDLIMSPPLFIRST_SPPLTRFCSGNINFO_TRAILER = 8;
    SPDLIMSPPLFIRST_SPPLTRFCSGNINFO_ZONE = 9;
    SPDLIMSPPLFIRST_SPPLTRFCSGNINFO_TIMELIMIT = 10;
    SPDLIMSPPLFIRST_SPPLTRFCSGNINFO_DISTANCETO = 11;
    SPDLIMSPPLFIRST_SPPLTRFCSGNINFO_DISTANCEDURING = 12;
    SPDLIMSPPLFIRST_SPPLTRFCSGNINFO_SCHOOLAREA = 13;
    SPDLIMSPPLFIRST_SPPLTRFCSGNINFO_FOG = 14;
    SPDLIMSPPLFIRST_SPPLTRFCSGNINFO_NIGHT = 15;
    SPDLIMSPPLFIRST_SPPLTRFCSGNINFO_RAMP = 16;
    SPDLIMSPPLFIRST_SPPLTRFCSGNINFO_GENERALSUPPLEMENTARYSIGN = 17;
    SPDLIMSPPLFIRST_SPPLTRFCSGNINFO_END = 18;
  }
  enum SpdLimWarnReqType {
    SPDLIMWARNREQ_SPDLIMWARNREQ1_NOWARN = 0;
    SPDLIMWARNREQ_SPDLIMWARNREQ1_SPDHI = 1;
    SPDLIMWARNREQ_SPDLIMWARNREQ1_SPDHIANDSPDCTRLPASSD = 2;
  }
  // description AD4 Horn Alert warning [] [0|3] [initial_value:0]
  optional AD4HornWarnType ad4_horn_warn = 1;
  // [] [0|1] [initial_value:None]
  optional bool ad4_horn_warn_ub = 2;
  // description Lateral control on/off/active/standby/error status HMI indicator display [] [0|7] [initial_value:0]
  optional AsyALatIndcrType asy_a_lat_indcr = 3;
  // [] [0|1] [initial_value:None]
  optional bool asy_a_lat_indcr_ub = 4;
  // description Longitudinal control on/off/active/standby/error status HMI indicator display [] [0|7] [initial_value:0]
  optional AsyALgtIndcrType asy_a_lgt_indcr = 5;
  // [] [0|1] [initial_value:None]
  optional bool asy_a_lgt_indcr_ub = 6;
  // description Trumpet warning for driver [] [0|1] [initial_value:0]
  optional bool asy_horn_warn_rqrd = 7;
  // [] [0|1] [initial_value:None]
  optional bool asy_horn_warn_rqrd_ub = 8;
  // [] [0|1] [initial_value:None]
  optional bool asy_obj_for_big_data0_ub = 9;
  // description Describe the reletive latent speed of object. [m/s] [-16.0|15.75] [initial_value:64]
  optional double asy_obj_for_big_data0_abs_lat_spd = 10;
  // description Describe the reletive latent speed of object. [m/s] [0.0|125.0] [initial_value:0]
  optional double asy_obj_for_big_data0_abs_lgt_spd = 11;
  // description Describe the confidence of the object type. [Unitless] [0.0|1.0] [initial_value:0]
  optional double asy_obj_for_big_data0_confidence = 12;
  // description Describe the latent distance of object. [m] [-25.0|25.0] [initial_value:250]
  optional double asy_obj_for_big_data0_rlvt_lat_dst = 13;
  // description Describe the longitudinal distance of object. [m] [0.0|150.0] [initial_value:0]
  optional double asy_obj_for_big_data0_rlvt_lgt_dst = 14;
  // description Describe source of reletive latent speed of object. [] [0|3] [initial_value:0]
  optional AsyObjForBigData0SnsrSrcOfAbsLatSpdType asy_obj_for_big_data0_snsr_src_of_abs_lat_spd = 15;
  // description Describe source of reletive longitudinal speed of object. [] [0|3] [initial_value:0]
  optional AsyObjForBigData0SnsrSrcOfAbsLgtSpdType asy_obj_for_big_data0_snsr_src_of_abs_lgt_spd = 16;
  // description Describe the TTC between host vehicle and object. [s] [0.0|6.3500000000000005] [initial_value:127]
  optional double asy_obj_for_big_data0_ttc = 17;
  // description Describe type of object. [] [0|15] [initial_value:9]
  optional AsyObjForBigData0TypeType asy_obj_for_big_data0_type = 18;
  // description The signal indicates the type of the front object for AEB function. [] [0|15] [initial_value:0]
  optional AsyObjTypeType asy_obj_type = 19;
  // [] [0|1] [initial_value:None]
  optional bool asy_obj_type_ub = 20;
  // description Lane keeping assist cancel message [] [0|1] [initial_value:0]
  optional bool asy_warn_for_steer_cncl = 21;
  // [] [0|1] [initial_value:None]
  optional bool asy_warn_for_steer_cncl_ub = 22;
  // description ACC unable to activate reason message [] [0|15] [initial_value:0]
  optional AvlStsForLongAutDrvType avl_sts_for_long_aut_drv = 23;
  // [] [0|1] [initial_value:None]
  optional bool avl_sts_for_long_aut_drv_ub = 24;
  // description camera status for DIM  [] [0|7] [initial_value:0]
  optional CamStatus0Type cam_status0 = 25;
  // [] [0|1] [initial_value:None]
  optional bool cam_status0_ub = 26;
  // description indicate the AEB  brake intervention to the driver. [] [0|1] [initial_value:0]
  optional bool cllsn_aid_post = 27;
  // [] [0|1] [initial_value:None]
  optional bool cllsn_aid_post_ub = 28;
  // description This signal represents status of collision mitigation support system of front and front side. [] [0|3] [initial_value:0]
  optional CllsnMtgtnFaultStsType cllsn_mtgtn_fault_sts = 29;
  // [] [0|1] [initial_value:None]
  optional bool cllsn_mtgtn_fault_sts_ub = 30;
  // description Collision front and front side mitigation support function on/off status [] [0|1] [initial_value:1]
  optional bool cllsn_mtgtn_onoff_sts = 31;
  // [] [0|1] [initial_value:None]
  optional bool cllsn_mtgtn_onoff_sts_ub = 32;
  // description Request to activate collision warning against rear object [] [0|3] [initial_value:0]
  optional CllsnWarnReIndcnType cllsn_warn_re_indcn = 33;
  // [] [0|1] [initial_value:None]
  optional bool cllsn_warn_re_indcn_ub = 34;
  // description to show that  the longitudinal control is canceled. [] [0|3] [initial_value:0]
  optional CnclWarnLgtForAutDrvType cncl_warn_lgt_for_aut_drv = 35;
  // [] [0|1] [initial_value:None]
  optional bool cncl_warn_lgt_for_aut_drv_ub = 36;
  // description Whether the custom parking slot supports parking [] [0|3] [initial_value:0]
  optional CustSlotAvleOrNotType cust_slot_avle_or_not = 37;
  // [] [0|1] [initial_value:None]
  optional bool cust_slot_avle_or_not_ub = 38;
  // description Custom parking slot status [] [0|7] [initial_value:0]
  optional CustSlotStsType cust_slot_sts = 39;
  // [] [0|1] [initial_value:None]
  optional bool cust_slot_sts_ub = 40;
  // description drvoff fuction is on/off/error [] [0|3] [initial_value:0]
  optional DrvOffModType drv_off_mod = 41;
  // [] [0|1] [initial_value:None]
  optional bool drv_off_mod_ub = 42;
  // description This signal is used to warn that the preceding vehicle is driving off. [] [0|3] [initial_value:0]
  optional DrvOffWarnType drv_off_warn = 43;
  // [] [0|1] [initial_value:None]
  optional bool drv_off_warn_ub = 44;
  // description Front Radar status for display [] [0|7] [initial_value:0]
  optional FrntRdrSts0Type frnt_rdr_sts0 = 45;
  // [] [0|1] [initial_value:None]
  optional bool frnt_rdr_sts0_ub = 46;
  // description Left Front Side Radar status for display [] [0|7] [initial_value:0]
  optional FrntSideRdrLeSts0Type frnt_side_rdr_le_sts0 = 47;
  // [] [0|1] [initial_value:None]
  optional bool frnt_side_rdr_le_sts0_ub = 48;
  // description Right Front Side Radar status for display [] [0|7] [initial_value:0]
  optional FrntSideRdrRiSts0Type frnt_side_rdr_ri_sts0 = 49;
  // [] [0|1] [initial_value:None]
  optional bool frnt_side_rdr_ri_sts0_ub = 50;
  // description Autonomously lane change inform for audio subsystem [] [0|15] [initial_value:0]
  optional HmiAutoLaneChgStsForAsyAIAsistAudioType hmi_auto_lane_chg_sts_for_asy_ai_asist_audio = 51;
  // [] [0|1] [initial_value:None]
  optional bool hmi_auto_lane_chg_sts_for_asy_ai_asist_audio_ub = 52;
  // description HPAHeartbeatResponse  [] [0|1] [initial_value:0]
  optional bool hpa_heart_resp = 53;
  // [] [0|1] [initial_value:None]
  optional bool hpa_heart_resp_ub = 54;
  // [] [0|3] [initial_value:0]
  optional IHUSetDispADType ihu_set_disp_ad = 55;
  // [] [0|1] [initial_value:None]
  optional bool ihu_set_disp_ad_ub = 56;
  // description statemachine signal [] [0|3] [initial_value:0]
  optional LcmaOnType lcma_on = 57;
  // [] [0|1] [initial_value:None]
  optional bool lcma_on_ub = 58;
  // description Left side TTC level information  [] [0|3] [initial_value:0]
  optional LeTTCLvType le_ttc_lv = 59;
  // [] [0|1] [initial_value:None]
  optional bool le_ttc_lv_ub = 60;
  // description MAI function activation request sends warning signal [] [0|1] [initial_value:0]
  optional bool mai_aud_warn_req = 61;
  // [] [0|1] [initial_value:None]
  optional bool mai_aud_warn_req_ub = 62;
  // description MAI function  reminder [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 mai_remi_disp = 63;
  // [] [0|1] [initial_value:None]
  optional bool mai_remi_disp_ub = 64;
  // description Indicates the speed offset to speed limit warn for TSR function. [] [0|7] [initial_value:2]
  optional OffsForSpdWarnSetgStsType offs_for_spd_warn_setg_sts = 65;
  // [] [0|1] [initial_value:None]
  optional bool offs_for_spd_warn_setg_sts_ub = 66;
  // description Left rear Side Radar status for display [] [0|7] [initial_value:0]
  optional ReSideRdrLeSts0Type re_side_rdr_le_sts0 = 67;
  // [] [0|1] [initial_value:None]
  optional bool re_side_rdr_le_sts0_ub = 68;
  // description Right rear Side Radar status for display [] [0|7] [initial_value:0]
  optional ReSideRdrRiSts0Type re_side_rdr_ri_sts0 = 69;
  // [] [0|1] [initial_value:None]
  optional bool re_side_rdr_ri_sts0_ub = 70;
  // description Re Stream Media Swt Resp [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 re_stream_media_swt_resp = 71;
  // [] [0|1] [initial_value:None]
  optional bool re_stream_media_swt_resp_ub = 72;
  // description Right side TTC level information  [] [0|3] [initial_value:0]
  optional RiTTCLvType ri_ttc_lv = 73;
  // [] [0|1] [initial_value:None]
  optional bool ri_ttc_lv_ub = 74;
  // description Received by DIM to display relevant speed limit symbol or not. [] [0|31] [initial_value:0]
  optional SpdLimCoupldFirstType spd_lim_coupld_first = 75;
  // [] [0|1] [initial_value:None]
  optional bool spd_lim_coupld_first_ub = 76;
  // description Upcoming speed limit for DIM to display. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 spd_lim_sec = 77;
  // [] [0|1] [initial_value:None]
  optional bool spd_lim_sec_ub = 78;
  // description Indicates current supplementary speed limit sign. [] [0|31] [initial_value:0]
  optional SpdLimSpplFirstType spd_lim_sppl_first = 79;
  // [] [0|1] [initial_value:None]
  optional bool spd_lim_sppl_first_ub = 80;
  // [] [0|3] [initial_value:0]
  optional SpdLimWarnReqType spd_lim_warn_req = 81;
  // [] [0|1] [initial_value:None]
  optional bool spd_lim_warn_req_ub = 82;
  // description Request to activate warning for too high speed compared to current speed limit. [] [0|1] [initial_value:0]
  optional bool spd_lim_warn_req_aud = 83;
  // [] [0|1] [initial_value:None]
  optional bool spd_lim_warn_req_aud_ub = 84;
  // description Whether there are too many cars [] [0|1] [initial_value:0]
  optional bool too_many_cars = 85;
  // [] [0|1] [initial_value:None]
  optional bool too_many_cars_ub = 86;
  // description Smart drive light request signal [] [0|3] [initial_value:0]
  optional AsyAutDrvgLiReqType asy_aut_drvg_li_req = 87;
  // [] [0|1] [initial_value:None]
  optional bool asy_aut_drvg_li_req_ub = 88;
  // [] [0|1] [initial_value:None]
  optional bool hpa_map_id_distribution_ub = 89;
  // description MapIDList1 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 hpa_map_id_distribution_map_id_list1 = 90;
  // description MapIDList2 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 hpa_map_id_distribution_map_id_list2 = 91;
  // description MapIDList3 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 hpa_map_id_distribution_map_id_list3 = 92;
  // description MapIDList4 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 hpa_map_id_distribution_map_id_list4 = 93;
  // description MapIDType [] [0|15] [initial_value:0]
  optional HPAMapIDDistributionMapIDTypeType hpa_map_id_distribution_map_id_type = 94;
  // description Parking function video learn pop-up requests [] [0|3] [initial_value:0]
  optional PrkgFctLrngMesgType prkg_fct_lrng_mesg = 95;
  // [] [0|1] [initial_value:None]
  optional bool prkg_fct_lrng_mesg_ub = 96;
}

message BCM_ZCUCANFD1_FR14_2C0 {
// Report Message
  // description tire radius estimated [m] [0.25|0.50048764] [initial_value:266]
  optional double tire_rd_estimd = 1;
  // [] [0|1] [initial_value:None]
  optional bool tire_rd_estimd_ub = 2;
}

message DHU_ZCUCANFD1_FR08_2EF {
// Report Message
  enum AutPrkgHandSlotNrReqTopoSlotStatusType {
    AUTPRKGHANDSLOTNRREQTOPOSLOTSTATUS_SLOTSTATUS_IDLE = 0;
    AUTPRKGHANDSLOTNRREQTOPOSLOTSTATUS_SLOTSTATUS_SELECT = 1;
    AUTPRKGHANDSLOTNRREQTOPOSLOTSTATUS_SLOTSTATUS_CANCEL = 2;
    AUTPRKGHANDSLOTNRREQTOPOSLOTSTATUS_SLOTSTATUS_RESERVED = 3;
  }
  enum AutPrkgSelectEntranceType {
    AUTPRKGSELECTENTRANCE_AUTPRKGSELECTENTRANCE_IDLE = 0;
    AUTPRKGSELECTENTRANCE_AUTPRKGSELECTENTRANCE_TARGETPRKG = 1;
    AUTPRKGSELECTENTRANCE_AUTPRKGSELECTENTRANCE_PARKENTRANCE = 2;
    AUTPRKGSELECTENTRANCE_AUTPRKGSELECTENTRANCE_BASEMENTENTRANCE = 3;
    AUTPRKGSELECTENTRANCE_AUTPRKGSELECTENTRANCE_PARKEXIT = 4;
    AUTPRKGSELECTENTRANCE_AUTPRKGSELECTENTRANCE_BASEMENTEXIT = 5;
    AUTPRKGSELECTENTRANCE_AUTPRKGSELECTENTRANCE_RESERVED = 6;
  }
  enum AutValtPrkgClsPopType {
    AUTVALTPRKGCLSPOP_AUTVALTPRKGCLSPOP_DEFAULT = 0;
    AUTVALTPRKGCLSPOP_AUTVALTPRKGCLSPOP_CONFIRMEXIT = 1;
    AUTVALTPRKGCLSPOP_AUTVALTPRKGCLSPOP_CANCELEXIT = 2;
    AUTVALTPRKGCLSPOP_AUTVALTPRKGCLSPOP_RESERVED = 3;
  }
  enum AutValtPrkgCoverResultsType {
    AUTVALTPRKGCOVERRESULTS_AUTVALTPRKGCOVERRESULTS_DEFAULT = 0;
    AUTVALTPRKGCOVERRESULTS_AUTVALTPRKGCOVERRESULTS_SUCCESS = 1;
    AUTVALTPRKGCOVERRESULTS_AUTVALTPRKGCOVERRESULTS_FAIL = 2;
    AUTVALTPRKGCOVERRESULTS_AUTVALTPRKGCOVERRESULTS_RESERVED = 3;
  }
  enum AutValtPrkgMapUploadBulidMapType2Type {
    AUTVALTPRKGMAPUPLOADBULIDMAPTYPE2_MAPTYPE2_DEFAULT = 0;
    AUTVALTPRKGMAPUPLOADBULIDMAPTYPE2_MAPTYPE2_PRKGINCREATE = 1;
    AUTVALTPRKGMAPUPLOADBULIDMAPTYPE2_MAPTYPE2_PRKGOUTCREATE = 2;
    AUTVALTPRKGMAPUPLOADBULIDMAPTYPE2_MAPTYPE2_PRKGCNCLLOCATD = 3;
    AUTVALTPRKGMAPUPLOADBULIDMAPTYPE2_MAPTYPE2_PRKGINDELETE = 4;
    AUTVALTPRKGMAPUPLOADBULIDMAPTYPE2_MAPTYPE2_PRKGOUTDELETE = 5;
    AUTVALTPRKGMAPUPLOADBULIDMAPTYPE2_MAPTYPE2_PRKGINSELECT = 6;
    AUTVALTPRKGMAPUPLOADBULIDMAPTYPE2_MAPTYPE2_PRKGOUTSELECT = 7;
    AUTVALTPRKGMAPUPLOADBULIDMAPTYPE2_MAPTYPE2_PRKGINSELECT_NOLONGER = 8;
    AUTVALTPRKGMAPUPLOADBULIDMAPTYPE2_MAPTYPE2_PRKGOUTSELECT_NOLONGER = 9;
    AUTVALTPRKGMAPUPLOADBULIDMAPTYPE2_MAPTYPE2_PRKGINCOVER = 10;
    AUTVALTPRKGMAPUPLOADBULIDMAPTYPE2_MAPTYPE2_PRKGOUTCOVER = 11;
    AUTVALTPRKGMAPUPLOADBULIDMAPTYPE2_MAPTYPE2_SYNC = 12;
    AUTVALTPRKGMAPUPLOADBULIDMAPTYPE2_MAPTYPE2_RESERVED1 = 13;
    AUTVALTPRKGMAPUPLOADBULIDMAPTYPE2_MAPTYPE2_RESERVED2 = 14;
  }
  enum AutValtPrkgMapUploadUseMapType2Type {
    AUTVALTPRKGMAPUPLOADUSEMAPTYPE2_MAPTYPE2_DEFAULT = 0;
    AUTVALTPRKGMAPUPLOADUSEMAPTYPE2_MAPTYPE2_PRKGINCREATE = 1;
    AUTVALTPRKGMAPUPLOADUSEMAPTYPE2_MAPTYPE2_PRKGOUTCREATE = 2;
    AUTVALTPRKGMAPUPLOADUSEMAPTYPE2_MAPTYPE2_PRKGCNCLLOCATD = 3;
    AUTVALTPRKGMAPUPLOADUSEMAPTYPE2_MAPTYPE2_PRKGINDELETE = 4;
    AUTVALTPRKGMAPUPLOADUSEMAPTYPE2_MAPTYPE2_PRKGOUTDELETE = 5;
    AUTVALTPRKGMAPUPLOADUSEMAPTYPE2_MAPTYPE2_PRKGINSELECT = 6;
    AUTVALTPRKGMAPUPLOADUSEMAPTYPE2_MAPTYPE2_PRKGOUTSELECT = 7;
    AUTVALTPRKGMAPUPLOADUSEMAPTYPE2_MAPTYPE2_PRKGINSELECT_NOLONGER = 8;
    AUTVALTPRKGMAPUPLOADUSEMAPTYPE2_MAPTYPE2_PRKGOUTSELECT_NOLONGER = 9;
    AUTVALTPRKGMAPUPLOADUSEMAPTYPE2_MAPTYPE2_PRKGINCOVER = 10;
    AUTVALTPRKGMAPUPLOADUSEMAPTYPE2_MAPTYPE2_PRKGOUTCOVER = 11;
    AUTVALTPRKGMAPUPLOADUSEMAPTYPE2_MAPTYPE2_SYNC = 12;
    AUTVALTPRKGMAPUPLOADUSEMAPTYPE2_MAPTYPE2_RESERVED1 = 13;
    AUTVALTPRKGMAPUPLOADUSEMAPTYPE2_MAPTYPE2_RESERVED2 = 14;
  }
  enum AutValtPrkgOutdBtnType {
    AUTVALTPRKGOUTDBTN_AUTVALTPRKGOUTDBTN_DEFAULT = 0;
    AUTVALTPRKGOUTDBTN_AUTVALTPRKGOUTDBTN_CONFIRM = 1;
    AUTVALTPRKGOUTDBTN_AUTVALTPRKGOUTDBTN_CANCEL = 2;
    AUTVALTPRKGOUTDBTN_AUTVALTPRKGOUTDBTN_RESERVED = 3;
  }
  enum AutValtPrkgSelectD2DType {
    AUTVALTPRKGSELECTD2D_AUTVALTPRKGSELECTD2D_DEFAULT = 0;
    AUTVALTPRKGSELECTD2D_AUTVALTPRKGSELECTD2D_D2DMAP = 1;
    AUTVALTPRKGSELECTD2D_AUTVALTPRKGSELECTD2D_CLOUDMAP = 2;
    AUTVALTPRKGSELECTD2D_AUTVALTPRKGSELECTD2D_NAVIGATION = 3;
  }
  enum CalltypeAndStsCallTypeType {
    CALLTYPEANDSTSCALLTYPE_CALLTYPE_NOCALL = 0;
    CALLTYPEANDSTSCALLTYPE_CALLTYPE_MANUALECALL = 1;
    CALLTYPEANDSTSCALLTYPE_CALLTYPE_AUTOECALL = 2;
    CALLTYPEANDSTSCALLTYPE_CALLTYPE_BCALLORICALL = 3;
    CALLTYPEANDSTSCALLTYPE_CALLTYPE_RESERVED1 = 4;
    CALLTYPEANDSTSCALLTYPE_CALLTYPE_RESERVED2 = 5;
    CALLTYPEANDSTSCALLTYPE_CALLTYPE_RESERVED3 = 6;
    CALLTYPEANDSTSCALLTYPE_CALLTYPE_RESERVED4 = 7;
  }
  enum CalltypeAndStsEcallStatusType {
    CALLTYPEANDSTSECALLSTATUS_ECALLSTATUS_DEFAULT = 0;
    CALLTYPEANDSTSECALLSTATUS_ECALLSTATUS_CALLTART = 1;
    CALLTYPEANDSTSECALLSTATUS_ECALLSTATUS_CALLCONNECTING = 2;
    CALLTYPEANDSTSECALLSTATUS_ECALLSTATUS_CALLDATASENTING = 3;
    CALLTYPEANDSTSECALLSTATUS_ECALLSTATUS_CALLCONNECTED = 4;
    CALLTYPEANDSTSECALLSTATUS_ECALLSTATUS_CALLENDED = 5;
    CALLTYPEANDSTSECALLSTATUS_ECALLSTATUS_INCOMINGCALL = 6;
    CALLTYPEANDSTSECALLSTATUS_ECALLSTATUS_CALLFAILED = 7;
  }
  enum HmiActvSftyLrngStsType {
    HMIACTVSFTYLRNGSTS_LRNGSTS_DEFAULT = 0;
    HMIACTVSFTYLRNGSTS_LRNGSTS_FINISH = 1;
    HMIACTVSFTYLRNGSTS_LRNGSTS_NOTFINISH = 2;
    HMIACTVSFTYLRNGSTS_LRNGSTS_RESERVED = 3;
  }
  enum HmiCnoaCrsSpdOfstModeType {
    HMICNOACRSSPDOFSTMODE_HMISPDLIMMETHDOFFSMOD_FIXVALUE = 0;
    HMICNOACRSSPDOFSTMODE_HMISPDLIMMETHDOFFSMOD_PERCENTAGE = 1;
    HMICNOACRSSPDOFSTMODE_HMISPDLIMMETHDOFFSMOD_FAULT = 2;
    HMICNOACRSSPDOFSTMODE_HMISPDLIMMETHDOFFSMOD_RESERVED1 = 3;
  }
  enum HmiCrsCtrlLrngStsType {
    HMICRSCTRLLRNGSTS_LRNGSTS_DEFAULT = 0;
    HMICRSCTRLLRNGSTS_LRNGSTS_FINISH = 1;
    HMICRSCTRLLRNGSTS_LRNGSTS_NOTFINISH = 2;
    HMICRSCTRLLRNGSTS_LRNGSTS_RESERVED = 3;
  }
  enum HmiD2DLrngStsType {
    HMID2DLRNGSTS_LRNGSTS_DEFAULT = 0;
    HMID2DLRNGSTS_LRNGSTS_FINISH = 1;
    HMID2DLRNGSTS_LRNGSTS_NOTFINISH = 2;
    HMID2DLRNGSTS_LRNGSTS_RESERVED = 3;
  }
  enum HmiFctLrngMesgFbType {
    HMIFCTLRNGMESGFB_ONOFFNOREQ_NOREQ = 0;
    HMIFCTLRNGMESGFB_ONOFFNOREQ_ON = 1;
    HMIFCTLRNGMESGFB_ONOFFNOREQ_OFF = 2;
  }
  enum HznDataMapProviderType {
    HZNDATAMAPPROVIDER_MAPPROVIDER_UNKNOWN = 0;
    HZNDATAMAPPROVIDER_MAPPROVIDER_NOKIAHERENAVTEQ = 1;
    HZNDATAMAPPROVIDER_MAPPROVIDER_TOMTOMTELEATLAS = 2;
    HZNDATAMAPPROVIDER_MAPPROVIDER_ZENRIN = 3;
    HZNDATAMAPPROVIDER_MAPPROVIDER_IPC = 4;
    HZNDATAMAPPROVIDER_MAPPROVIDER_NAVINFO = 5;
    HZNDATAMAPPROVIDER_MAPPROVIDER_AUTONAVI = 6;
    HZNDATAMAPPROVIDER_MAPPROVIDER_NOTAVAILABLE = 7;
  }
  enum HznDataMessageTypeType {
    HZNDATAMESSAGETYPE_MESSAGETYPE_SYSTEMSPECIFIC = 0;
    HZNDATAMESSAGETYPE_MESSAGETYPE_POSITION = 1;
    HZNDATAMESSAGETYPE_MESSAGETYPE_SEGMENT = 2;
    HZNDATAMESSAGETYPE_MESSAGETYPE_STUB = 3;
    HZNDATAMESSAGETYPE_MESSAGETYPE_PROFILESHORT = 4;
    HZNDATAMESSAGETYPE_MESSAGETYPE_PROFILELONG = 5;
    HZNDATAMESSAGETYPE_MESSAGETYPE_METADATA = 6;
    HZNDATAMESSAGETYPE_MESSAGETYPE_RESERVED = 7;
  }
  enum IndcnUnitClkFmtType {
    INDCNUNITCLKFMT_CLKFMT_HR24 = 0;
    INDCNUNITCLKFMT_CLKFMT_HR12 = 1;
    INDCNUNITCLKFMT_CLKFMT_UKWNCLKFMT = 2;
  }
  enum IndcnUnitDateFmtType {
    INDCNUNITDATEFMT_DATEFMT_DATEFMT1 = 0;
    INDCNUNITDATEFMT_DATEFMT_DATEFMT2 = 1;
    INDCNUNITDATEFMT_DATEFMT_DATEFMT3 = 2;
    INDCNUNITDATEFMT_DATEFMT_UKWNFMT = 3;
  }
  enum IndcnUnitDstLongType {
    INDCNUNITDSTLONG_DSTLONG_KM = 0;
    INDCNUNITDSTLONG_DSTLONG_MILES = 1;
    INDCNUNITDSTLONG_DSTLONG_UKWNUNIT = 2;
  }
  enum IndcnUnitDstShoType {
    INDCNUNITDSTSHO_DSTSHO_MTR = 0;
    INDCNUNITDSTSHO_DSTSHO_FT = 1;
    INDCNUNITDSTSHO_DSTSHO_YARDS = 2;
    INDCNUNITDSTSHO_DSTSHO_UKWNUNIT = 3;
  }
  enum IndcnUnitFuCnsUnitType {
    INDCNUNITFUCNSUNIT_FUCNSINDCDUNIT_LPERHECTOKILOM = 0;
    INDCNUNITFUCNSUNIT_FUCNSINDCDUNIT_KILOMPERL = 1;
    INDCNUNITFUCNSUNIT_FUCNSINDCDUNIT_MILEPERGALLONENGLAND = 2;
    INDCNUNITFUCNSUNIT_FUCNSINDCDUNIT_MILEPERGALLONUSA = 3;
    INDCNUNITFUCNSUNIT_FUCNSINDCDUNIT_UKWNUNIT = 4;
  }
  enum IndcnUnitPUnitType {
    INDCNUNITPUNIT_PUNIT_PA = 0;
    INDCNUNITPUNIT_PUNIT_PSI = 1;
    INDCNUNITPUNIT_PUNIT_BAR = 2;
    INDCNUNITPUNIT_PUNIT_ATM = 3;
    INDCNUNITPUNIT_PUNIT_UKWNUNIT = 4;
  }
  enum IndcnUnitSpdUnitType {
    INDCNUNITSPDUNIT_VEHSPDINDCDUNIT_KMPH = 0;
    INDCNUNITSPDUNIT_VEHSPDINDCDUNIT_MPH = 1;
    INDCNUNITSPDUNIT_VEHSPDINDCDUNIT_UKWNUNIT = 2;
  }
  enum IndcnUnitTUnitType {
    INDCNUNITTUNIT_AMBTINDCDUNIT_CELSIUS = 0;
    INDCNUNITTUNIT_AMBTINDCDUNIT_FAHRENHEIT = 1;
    INDCNUNITTUNIT_AMBTINDCDUNIT_UKWNUNIT = 2;
  }
  enum IndcnUnitVolUnitType {
    INDCNUNITVOLUNIT_VOLUNIT_LITRE = 0;
    INDCNUNITVOLUNIT_VOLUNIT_GALLON1 = 1;
    INDCNUNITVOLUNIT_VOLUNIT_GALLON2 = 2;
    INDCNUNITVOLUNIT_VOLUNIT_UKWNUNIT = 3;
  }
  enum MiscTrfcSgnInfoFromNavMapType {
    MISCTRFCSGNINFOFROMNAVMAP_TRFCINFOMISCFIRST_OFF = 0;
    MISCTRFCSGNINFOFROMNAVMAP_TRFCINFOMISCFIRST_NOENTRANCE = 1;
    MISCTRFCSGNINFOFROMNAVMAP_TRFCINFOMISCFIRST_VEHICLEPASSINGNOTALLOWED = 2;
    MISCTRFCSGNINFOFROMNAVMAP_TRFCINFOMISCFIRST_ENDOFVEHICLEPASSINGNOTALLOWED = 3;
    MISCTRFCSGNINFOFROMNAVMAP_TRFCINFOMISCFIRST_STOP = 4;
    MISCTRFCSGNINFOFROMNAVMAP_TRFCINFOMISCFIRST_SPEEDLIMITCONTROL = 5;
    MISCTRFCSGNINFOFROMNAVMAP_TRFCINFOMISCFIRST_USNIGHTSPEEDLIMIT = 6;
    MISCTRFCSGNINFOFROMNAVMAP_TRFCINFOMISCFIRST_SCHOOLANDCHILDRENWARNING = 7;
    MISCTRFCSGNINFOFROMNAVMAP_TRFCINFOMISCFIRST_ROADWORK = 8;
    MISCTRFCSGNINFOFROMNAVMAP_TRFCINFOMISCFIRST_LEFTCURVE = 9;
    MISCTRFCSGNINFOFROMNAVMAP_TRFCINFOMISCFIRST_RIGHTCURVE = 10;
    MISCTRFCSGNINFOFROMNAVMAP_TRFCINFOMISCFIRST_SERIESCURVES = 11;
    MISCTRFCSGNINFOFROMNAVMAP_TRFCINFOMISCFIRST_RESERVED = 12;
  }
  enum PrkgLrngStsAPARPALrngStsType {
    PRKGLRNGSTSAPARPALRNGSTS_LRNGSTS_DEFAULT = 0;
    PRKGLRNGSTSAPARPALRNGSTS_LRNGSTS_FINISH = 1;
    PRKGLRNGSTSAPARPALRNGSTS_LRNGSTS_NOTFINISH = 2;
    PRKGLRNGSTSAPARPALRNGSTS_LRNGSTS_RESERVED = 3;
  }
  enum PrkgLrngStsHPALrngStsType {
    PRKGLRNGSTSHPALRNGSTS_LRNGSTS_DEFAULT = 0;
    PRKGLRNGSTSHPALRNGSTS_LRNGSTS_FINISH = 1;
    PRKGLRNGSTSHPALRNGSTS_LRNGSTS_NOTFINISH = 2;
    PRKGLRNGSTSHPALRNGSTS_LRNGSTS_RESERVED = 3;
  }
  enum PrkgLrngStsReserved1Type {
    PRKGLRNGSTSRESERVED1_LRNGSTS_DEFAULT = 0;
    PRKGLRNGSTSRESERVED1_LRNGSTS_FINISH = 1;
    PRKGLRNGSTSRESERVED1_LRNGSTS_NOTFINISH = 2;
    PRKGLRNGSTSRESERVED1_LRNGSTS_RESERVED = 3;
  }
  enum PrkgLrngStsReserved2Type {
    PRKGLRNGSTSRESERVED2_LRNGSTS_DEFAULT = 0;
    PRKGLRNGSTSRESERVED2_LRNGSTS_FINISH = 1;
    PRKGLRNGSTSRESERVED2_LRNGSTS_NOTFINISH = 2;
    PRKGLRNGSTSRESERVED2_LRNGSTS_RESERVED = 3;
  }
  enum PrkgLrngStsReserved3Type {
    PRKGLRNGSTSRESERVED3_LRNGSTS_DEFAULT = 0;
    PRKGLRNGSTSRESERVED3_LRNGSTS_FINISH = 1;
    PRKGLRNGSTSRESERVED3_LRNGSTS_NOTFINISH = 2;
    PRKGLRNGSTSRESERVED3_LRNGSTS_RESERVED = 3;
  }
  enum PrkgSlotTypSelectType {
    PRKGSLOTTYPSELECT_PRKGSLOTTYPSELECT_DEFAULT = 0;
    PRKGSLOTTYPSELECT_PRKGSLOTTYPSELECT_TERMIANLSLOT = 1;
    PRKGSLOTTYPSELECT_PRKGSLOTTYPSELECT_AREASLOT = 2;
    PRKGSLOTTYPSELECT_PRKGSLOTTYPSELECT_RESERVED = 3;
  }
  enum PrkgTutorialRespType {
    PRKGTUTORIALRESP_PRKGTUTORIALRESP_DEFAULT = 0;
    PRKGTUTORIALRESP_PRKGTUTORIALRESP_GOTIT = 1;
    PRKGTUTORIALRESP_PRKGTUTORIALRESP_LEARN = 2;
    PRKGTUTORIALRESP_PRKGTUTORIALRESP_RESERVED = 3;
  }
  // description APA parking slot id when user select by hand [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 aut_prkg_hand_slot_nr_req = 1;
  // [] [0|1] [initial_value:None]
  optional bool aut_prkg_hand_slot_nr_req_ub = 2;
  // [] [0|1] [initial_value:None]
  optional bool aut_prkg_hand_slot_nr_req_topo_ub = 3;
  // description The parking slot ID selected/cancelled by the user [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 aut_prkg_hand_slot_nr_req_topo_slot_id = 4;
  // description The parking slot selected/cancelled by the user [] [0|3] [initial_value:0]
  optional AutPrkgHandSlotNrReqTopoSlotStatusType aut_prkg_hand_slot_nr_req_topo_slot_status = 5;
  // description Different entrances selected by the user [] [0|15] [initial_value:0]
  optional AutPrkgSelectEntranceType aut_prkg_select_entrance = 6;
  // [] [0|1] [initial_value:None]
  optional bool aut_prkg_select_entrance_ub = 7;
  // [] [0|1] [initial_value:None]
  optional bool aut_valt_prkg_map_upload_bulid_ub = 8;
  // description bit0-31 means map ID 1-32 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 aut_valt_prkg_map_upload_bulid_map_list1 = 9;
  // description bit0-31 means map ID 33-64 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 aut_valt_prkg_map_upload_bulid_map_list2 = 10;
  // description bit0-31 means map ID 65-96 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 aut_valt_prkg_map_upload_bulid_map_list3 = 11;
  // description bit0-31 means map ID 96-99 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 aut_valt_prkg_map_upload_bulid_map_list4 = 12;
  // description Route upload result [] [0|15] [initial_value:0]
  optional AutValtPrkgMapUploadBulidMapType2Type aut_valt_prkg_map_upload_bulid_map_type2 = 13;
  // [] [0|1] [initial_value:None]
  optional bool aut_valt_prkg_map_upload_use_ub = 14;
  // description bit0-31 means map ID 1-32 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 aut_valt_prkg_map_upload_use_map_list1 = 15;
  // description bit0-31 means map ID 33-64 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 aut_valt_prkg_map_upload_use_map_list2 = 16;
  // description bit0-31 means map ID 65-96 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 aut_valt_prkg_map_upload_use_map_list3 = 17;
  // description bit0-31 means map ID 96-99 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 aut_valt_prkg_map_upload_use_map_list4 = 18;
  // description Route upload result [] [0|15] [initial_value:0]
  optional AutValtPrkgMapUploadUseMapType2Type aut_valt_prkg_map_upload_use_map_type2 = 19;
  // description user selects the displayed floor [Unitless] [-63.0|64.0] [initial_value:63]
  optional double aut_valt_prkg_topo_flr = 20;
  // [] [0|1] [initial_value:None]
  optional bool aut_valt_prkg_topo_flr_ub = 21;
  // [] [0|1] [initial_value:None]
  optional bool calltype_and_sts_ub = 22;
  // description call type [] [0|7] [initial_value:0]
  optional CalltypeAndStsCallTypeType calltype_and_sts_call_type = 23;
  // description ecall status [] [0|7] [initial_value:0]
  optional CalltypeAndStsEcallStatusType calltype_and_sts_ecall_status = 24;
  // description the request to select REM by switch in HMI [] [0|1] [initial_value:0]
  optional bool cpmsw_on_off = 25;
  // [] [0|1] [initial_value:None]
  optional bool cpmsw_on_off_ub = 26;
  // description Country code information [Unitless] [0.0|1023.0] [initial_value:0]
  optional uint32 ctry_cod_info = 27;
  // [] [0|1] [initial_value:None]
  optional bool ctry_cod_info_ub = 28;
  // description Vehicle-person parallel function switch [] [0|1] [initial_value:0]
  optional bool drvr_detn_on_off = 29;
  // [] [0|1] [initial_value:None]
  optional bool drvr_detn_on_off_ub = 30;
  // description Release signal [] [0|1] [initial_value:0]
  optional bool hmi_aut_lane_chg_swt_sts = 31;
  // [] [0|1] [initial_value:None]
  optional bool hmi_aut_lane_chg_swt_sts_ub = 32;
  // description The speed limit deviation mode is set [] [0|3] [initial_value:0]
  optional HmiCnoaCrsSpdOfstModeType hmi_cnoa_crs_spd_ofst_mode = 33;
  // [] [0|1] [initial_value:None]
  optional bool hmi_cnoa_crs_spd_ofst_mode_ub = 34;
  // description Rate limit deviation percentage setting [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 hmi_cnoa_crs_spd_ofst_prct = 35;
  // [] [0|1] [initial_value:None]
  optional bool hmi_cnoa_crs_spd_ofst_prct_ub = 36;
  // description The absolute value of speed limit deviation is set [Unitless] [0.0|63.0] [initial_value:0]
  optional uint32 hmi_cnoa_crs_spd_ofst_val = 37;
  // [] [0|1] [initial_value:None]
  optional bool hmi_cnoa_crs_spd_ofst_val_ub = 38;
  // description Release signal [] [0|1] [initial_value:0]
  optional bool hmi_fast_lane_swt_on_off = 39;
  // [] [0|1] [initial_value:None]
  optional bool hmi_fast_lane_swt_on_off_ub = 40;
  // description Release signal [] [0|1] [initial_value:0]
  optional bool hmi_lat_offs_swt_on_off = 41;
  // [] [0|1] [initial_value:None]
  optional bool hmi_lat_offs_swt_on_off_ub = 42;
  // description Release signal [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 hmi_noa_tar_spd_offs = 43;
  // [] [0|1] [initial_value:None]
  optional bool hmi_noa_tar_spd_offs_ub = 44;
  // [] [0|1] [initial_value:None]
  optional bool hzn_data_ub = 45;
  // description ISO 3166-1 Release 2007-03 country code of current position; 0 stands for unknown. Valid values are those specified by ISO 3166-1 numeric [Unitless] [0.0|1023.0] [initial_value:156]
  optional uint32 hzn_data_country_code = 46;
  // description Cyclic counter of this message type: Reconstructor can use this value to detect missing messages [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 hzn_data_cyclic_counter = 47;
  // description 0 stands for Driving Side Left. 1 stands for Driving Side Right. Default is 1. [] [0|1] [initial_value:1]
  optional bool hzn_data_driving_side = 48;
  // description This field is ADAS Horizon Provider specific and expresses the hardware and/or software version of the provider depending of the company specific numbering scheme. 0 stands for unknown. [Unitless] [0.0|511.0] [initial_value:0]
  optional uint32 hzn_data_hardware_version = 49;
  // description Contains Major protocol version [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 hzn_data_major_protocol_version = 50;
  // description Map Provider of current area (map tile, region, country ).  [] [0|7] [initial_value:0]
  optional HznDataMapProviderType hzn_data_map_provider = 51;
  // description Content of this field is Year of release of map of current area using the formula ((Year minus 2000) modulo 63). [Unitless] [0.0|63.0] [initial_value:0]
  optional uint32 hzn_data_map_version_year = 52;
  // description Content of this field is Year quarter of release of map of current area using the formula (Quarter minus 1).  [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 hzn_data_map_version_year_quarter = 53;
  // description Type of a CAN message in the scope of the ADASISv2 protocol [] [0|7] [initial_value:6]
  optional HznDataMessageTypeType hzn_data_message_type = 54;
  // description Contains Minor protocol sub-version [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 hzn_data_minor_protocol_sub_version = 55;
  // description Contains Minor protocol version [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 hzn_data_minor_protocol_version = 56;
  // description Based on ISO 3166-2, for a given Country Code, specifies region of a country where vehicle is currently positioned. 0 stands for unknown, value 32767 means N/A [Unitless] [0.0|32767.0] [initial_value:0]
  optional uint32 hzn_data_region_code = 57;
  // description 1 stands for miles per hour (mph). 0 stands for kilometers/hour (km/h). Default is 0. [] [0|1] [initial_value:0]
  optional bool hzn_data_speed_units = 58;
  // [] [0|1] [initial_value:None]
  optional bool img_snsr_clr_req_ub = 59;
  // description Send a Request signal to IHU to tell user the AVM front camera lens are dirty, need to be cleaned. [] [0|1] [initial_value:0]
  optional bool img_snsr_clr_req_frnt = 60;
  // description Send a Request signal to IHU to tell user the AVM left camera lens are dirty, need to be cleaned. [] [0|1] [initial_value:0]
  optional bool img_snsr_clr_req_le = 61;
  // description Send a Request signal to IHU to tell user the AVM rear camera lens are dirty, need to be cleaned. [] [0|1] [initial_value:0]
  optional bool img_snsr_clr_req_re = 62;
  // description Send a Request signal to IHU to tell user the AVM right camera lens are dirty, need to be cleaned. [] [0|1] [initial_value:0]
  optional bool img_snsr_clr_req_ri = 63;
  // description The error status of AVM front camera. [] [0|1] [initial_value:0]
  optional bool img_snsr_frnt_wrg = 64;
  // [] [0|1] [initial_value:None]
  optional bool img_snsr_frnt_wrg_ub = 65;
  // description The error status of AVM left camera. [] [0|1] [initial_value:0]
  optional bool img_snsr_le_wrg = 66;
  // [] [0|1] [initial_value:None]
  optional bool img_snsr_le_wrg_ub = 67;
  // description The error status of AVM rear camera. [] [0|1] [initial_value:0]
  optional bool img_snsr_re_wrg = 68;
  // [] [0|1] [initial_value:None]
  optional bool img_snsr_re_wrg_ub = 69;
  // description The error status of AVM right camera. [] [0|1] [initial_value:0]
  optional bool img_snsr_ri_wrg = 70;
  // [] [0|1] [initial_value:None]
  optional bool img_snsr_ri_wrg_ub = 71;
  // [] [0|1] [initial_value:None]
  optional bool indcn_unit_ub = 72;
  // description Clock Format [] [0|3] [initial_value:0]
  optional IndcnUnitClkFmtType indcn_unit_clk_fmt = 73;
  // description DateFormat [] [0|3] [initial_value:0]
  optional IndcnUnitDateFmtType indcn_unit_date_fmt = 74;
  // description Long Distance Units [] [0|3] [initial_value:0]
  optional IndcnUnitDstLongType indcn_unit_dst_long = 75;
  // description Short Distance Units [] [0|3] [initial_value:0]
  optional IndcnUnitDstShoType indcn_unit_dst_sho = 76;
  // description Fuel Consumption Units [] [0|7] [initial_value:0]
  optional IndcnUnitFuCnsUnitType indcn_unit_fu_cns_unit = 77;
  // description Pressure Unit [] [0|7] [initial_value:0]
  optional IndcnUnitPUnitType indcn_unit_p_unit = 78;
  // description Speed Units [] [0|3] [initial_value:0]
  optional IndcnUnitSpdUnitType indcn_unit_spd_unit = 79;
  // description Temperature Unit [] [0|3] [initial_value:0]
  optional IndcnUnitTUnitType indcn_unit_t_unit = 80;
  // description Volume Units [] [0|3] [initial_value:0]
  optional IndcnUnitVolUnitType indcn_unit_vol_unit = 81;
  // description Current miscellaneous traffic sign information from navigation Map. [] [0|15] [initial_value:0]
  optional MiscTrfcSgnInfoFromNavMapType misc_trfc_sgn_info_from_nav_map = 82;
  // [] [0|1] [initial_value:None]
  optional bool misc_trfc_sgn_info_from_nav_map_ub = 83;
  // description It describes which state managers that are member of each resource group. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 net_tcam_actvt = 84;
  // [] [0|1] [initial_value:None]
  optional bool net_tcam_actvt_ub = 85;
  // description The end parking method selected by the user [] [0|3] [initial_value:0]
  optional PrkgSlotTypSelectType prkg_slot_typ_select = 86;
  // [] [0|1] [initial_value:None]
  optional bool prkg_slot_typ_select_ub = 87;
  // description Remote Vehicle Moving function setting switch [] [0|1] [initial_value:0]
  optional bool rem_veh_movg_setting = 88;
  // [] [0|1] [initial_value:None]
  optional bool rem_veh_movg_setting_ub = 89;
  // description The function of passenger-vehicle companion is activated [] [0|1] [initial_value:0]
  optional bool veh_actv_drvg_actvn_sts = 90;
  // [] [0|1] [initial_value:None]
  optional bool veh_actv_drvg_actvn_sts_ub = 91;
  // description Intelligent Driving Light Control Switch [] [0|1] [initial_value:0]
  optional bool asy_aut_drvg_li_swt = 92;
  // [] [0|1] [initial_value:None]
  optional bool asy_aut_drvg_li_swt_ub = 93;
  // description HPA-MAX Close the pop-up window outside the car [] [0|3] [initial_value:0]
  optional AutValtPrkgClsPopType aut_valt_prkg_cls_pop = 94;
  // [] [0|1] [initial_value:None]
  optional bool aut_valt_prkg_cls_pop_ub = 95;
  // description Cover route result [] [0|3] [initial_value:0]
  optional AutValtPrkgCoverResultsType aut_valt_prkg_cover_results = 96;
  // [] [0|1] [initial_value:None]
  optional bool aut_valt_prkg_cover_results_ub = 97;
  // description HPA-MAX Use buttons outside the car [] [0|3] [initial_value:0]
  optional AutValtPrkgOutdBtnType aut_valt_prkg_outd_btn = 98;
  // [] [0|1] [initial_value:None]
  optional bool aut_valt_prkg_outd_btn_ub = 99;
  // description user chooses to select a fixed parking space/crowdsourced map/navigation [] [0|3] [initial_value:0]
  optional AutValtPrkgSelectD2DType aut_valt_prkg_select_d2_d = 100;
  // [] [0|1] [initial_value:None]
  optional bool aut_valt_prkg_select_d2_d_ub = 101;
  // description Intelligent Driving Learning Status Feedback Signal [] [0|3] [initial_value:0]
  optional HmiActvSftyLrngStsType hmi_actv_sfty_lrng_sts = 102;
  // [] [0|1] [initial_value:None]
  optional bool hmi_actv_sfty_lrng_sts_ub = 103;
  // description Intelligent Driving Learning Status Feedback Signal [] [0|3] [initial_value:0]
  optional HmiCrsCtrlLrngStsType hmi_crs_ctrl_lrng_sts = 104;
  // [] [0|1] [initial_value:None]
  optional bool hmi_crs_ctrl_lrng_sts_ub = 105;
  // description Intelligent Driving Learning Status Feedback Signal [] [0|3] [initial_value:0]
  optional HmiD2DLrngStsType hmi_d2_d_lrng_sts = 106;
  // [] [0|1] [initial_value:None]
  optional bool hmi_d2_d_lrng_sts_ub = 107;
  // description Intelligent Driving Video Tutorial Popup Feedback Signal [] [0|3] [initial_value:0]
  optional HmiFctLrngMesgFbType hmi_fct_lrng_mesg_fb = 108;
  // [] [0|1] [initial_value:None]
  optional bool hmi_fct_lrng_mesg_fb_ub = 109;
  // [] [0|1] [initial_value:None]
  optional bool prkg_lrng_sts_ub = 110;
  // description APA/RPA tutorial video learning status [] [0|3] [initial_value:0]
  optional PrkgLrngStsAPARPALrngStsType prkg_lrng_sts_aparpa_lrng_sts = 111;
  // description HPA tutorial video learning status [] [0|3] [initial_value:0]
  optional PrkgLrngStsHPALrngStsType prkg_lrng_sts_hpa_lrng_sts = 112;
  // description Reserved1 [] [0|3] [initial_value:0]
  optional PrkgLrngStsReserved1Type prkg_lrng_sts_reserved1 = 1113;
  // description Reserved2 [] [0|3] [initial_value:0]
  optional PrkgLrngStsReserved2Type prkg_lrng_sts_reserved2 = 114;
  // description Reserved3 [] [0|3] [initial_value:0]
  optional PrkgLrngStsReserved3Type prkg_lrng_sts_reserved3 = 115;
  // description Parking video tutorial pop-up feedback signal [] [0|3] [initial_value:0]
  optional PrkgTutorialRespType prkg_tutorial_resp = 116;
  // [] [0|1] [initial_value:None]
  optional bool prkg_tutorial_resp_ub = 117;
  // description Jam mode switch [] [0|1] [initial_value:0]
  optional bool trfc_jam_swt_on_off = 118;
  // [] [0|1] [initial_value:None]
  optional bool trfc_jam_swt_on_off_ub = 119;
}

message ADCU_ZCUCANFD1_FR03_2F0 {
// Control Message
  enum ActvSafeCtrlrStsType {
    ACTVSAFECTRLRSTS_SNSRSYSSTSLEFRNT_OFF = 0;
    ACTVSAFECTRLRSTS_SNSRSYSSTSLEFRNT_ON = 1;
    ACTVSAFECTRLRSTS_SNSRSYSSTSLEFRNT_CALIBRATION = 2;
    ACTVSAFECTRLRSTS_SNSRSYSSTSLEFRNT_BLOCKORHOT = 3;
    ACTVSAFECTRLRSTS_SNSRSYSSTSLEFRNT_FAULTY = 4;
    ACTVSAFECTRLRSTS_SNSRSYSSTSLEFRNT_RESD1 = 5;
    ACTVSAFECTRLRSTS_SNSRSYSSTSLEFRNT_RESD2 = 6;
    ACTVSAFECTRLRSTS_SNSRSYSSTSLEFRNT_RESD3 = 7;
  }
  enum AsyEmgyManoeuvreAidStsType {
    ASYEMGYMANOEUVREAIDSTS_FCTAON1_STRTUPON = 0;
    ASYEMGYMANOEUVREAIDSTS_FCTAON1_ON = 1;
    ASYEMGYMANOEUVREAIDSTS_FCTAON1_OFF = 2;
    ASYEMGYMANOEUVREAIDSTS_FCTAON1_TRLROFF = 3;
    ASYEMGYMANOEUVREAIDSTS_FCTAON1_TEMPERROR = 4;
    ASYEMGYMANOEUVREAIDSTS_FCTAON1_PERMERROR = 5;
  }
  enum AsyIccMaxWarnMsgType {
    ASYICCMAXWARNMSG_ASYICCMAXWARNMSG_DEFAULT = 0;
    ASYICCMAXWARNMSG_ASYICCMAXWARNMSG_ANTI_CONGESTION_PROMPT = 1;
    ASYICCMAXWARNMSG_ASYICCMAXWARNMSG_ANTI_CONGESTION_ENTERED = 2;
    ASYICCMAXWARNMSG_ASYICCMAXWARNMSG_AUTOMATIC_LANE_SELECTION = 3;
    ASYICCMAXWARNMSG_ASYICCMAXWARNMSG_AUTOMATICALLY_MERGE = 4;
    ASYICCMAXWARNMSG_ASYICCMAXWARNMSG_RESERVED1 = 5;
    ASYICCMAXWARNMSG_ASYICCMAXWARNMSG_RESERVED2 = 6;
    ASYICCMAXWARNMSG_ASYICCMAXWARNMSG_RESERVED3 = 7;
    ASYICCMAXWARNMSG_ASYICCMAXWARNMSG_RESERVED4 = 8;
    ASYICCMAXWARNMSG_ASYICCMAXWARNMSG_RESERVED5 = 9;
    ASYICCMAXWARNMSG_ASYICCMAXWARNMSG_RESERVED6 = 10;
    ASYICCMAXWARNMSG_ASYICCMAXWARNMSG_RESERVED7 = 11;
    ASYICCMAXWARNMSG_ASYICCMAXWARNMSG_RESERVED8 = 12;
    ASYICCMAXWARNMSG_ASYICCMAXWARNMSG_RESERVED9 = 13;
    ASYICCMAXWARNMSG_ASYICCMAXWARNMSG_RESERVED10 = 14;
    ASYICCMAXWARNMSG_ASYICCMAXWARNMSG_RESERVED11 = 15;
  }
  enum AsyLaneChgWarnModType {
    ASYLANECHGWARNMOD_CHGWARNMOD_NO = 0;
    ASYLANECHGWARNMOD_CHGWARNMOD_SOUND = 1;
    ASYLANECHGWARNMOD_CHGWARNMOD_HAPTIC = 2;
  }
  enum AsySftyFctStsToEDRACCFctSTsType {
    ASYSFTYFCTSTSTOEDRACCFCTSTS_FCTSTS_DEFAULT = 0;
    ASYSFTYFCTSTSTOEDRACCFCTSTS_FCTSTS_FAULTED = 1;
    ASYSFTYFCTSTSTOEDRACCFCTSTS_FCTSTS_OFF = 2;
    ASYSFTYFCTSTSTOEDRACCFCTSTS_FCTSTS_STANDBY = 3;
    ASYSFTYFCTSTSTOEDRACCFCTSTS_FCTSTS_ACTIVE = 4;
  }
  enum AsySftyFctStsToEDRACSFB1FctStsType {
    ASYSFTYFCTSTSTOEDRACSFB1FCTSTS_FCTSTS_DEFAULT = 0;
    ASYSFTYFCTSTSTOEDRACSFB1FCTSTS_FCTSTS_FAULTED = 1;
    ASYSFTYFCTSTSTOEDRACSFB1FCTSTS_FCTSTS_OFF = 2;
    ASYSFTYFCTSTSTOEDRACSFB1FCTSTS_FCTSTS_STANDBY = 3;
    ASYSFTYFCTSTSTOEDRACSFB1FCTSTS_FCTSTS_ACTIVE = 4;
  }
  enum AsySftyFctStsToEDRACSFB2FctStsType {
    ASYSFTYFCTSTSTOEDRACSFB2FCTSTS_FCTSTS_DEFAULT = 0;
    ASYSFTYFCTSTSTOEDRACSFB2FCTSTS_FCTSTS_FAULTED = 1;
    ASYSFTYFCTSTSTOEDRACSFB2FCTSTS_FCTSTS_OFF = 2;
    ASYSFTYFCTSTSTOEDRACSFB2FCTSTS_FCTSTS_STANDBY = 3;
    ASYSFTYFCTSTSTOEDRACSFB2FCTSTS_FCTSTS_ACTIVE = 4;
  }
  enum AsySftyFctStsToEDRACSFCFctStsType {
    ASYSFTYFCTSTSTOEDRACSFCFCTSTS_FCTSTS_DEFAULT = 0;
    ASYSFTYFCTSTSTOEDRACSFCFCTSTS_FCTSTS_FAULTED = 1;
    ASYSFTYFCTSTSTOEDRACSFCFCTSTS_FCTSTS_OFF = 2;
    ASYSFTYFCTSTSTOEDRACSFCFCTSTS_FCTSTS_STANDBY = 3;
    ASYSFTYFCTSTSTOEDRACSFCFCTSTS_FCTSTS_ACTIVE = 4;
  }
  enum AsySftyFctStsToEDRACSFDFctStsType {
    ASYSFTYFCTSTSTOEDRACSFDFCTSTS_FCTSTS_DEFAULT = 0;
    ASYSFTYFCTSTSTOEDRACSFDFCTSTS_FCTSTS_FAULTED = 1;
    ASYSFTYFCTSTSTOEDRACSFDFCTSTS_FCTSTS_OFF = 2;
    ASYSFTYFCTSTSTOEDRACSFDFCTSTS_FCTSTS_STANDBY = 3;
    ASYSFTYFCTSTSTOEDRACSFDFCTSTS_FCTSTS_ACTIVE = 4;
  }
  enum AsySftyFctStsToEDRACSFEFctStsType {
    ASYSFTYFCTSTSTOEDRACSFEFCTSTS_FCTSTS_DEFAULT = 0;
    ASYSFTYFCTSTSTOEDRACSFEFCTSTS_FCTSTS_FAULTED = 1;
    ASYSFTYFCTSTSTOEDRACSFEFCTSTS_FCTSTS_OFF = 2;
    ASYSFTYFCTSTSTOEDRACSFEFCTSTS_FCTSTS_STANDBY = 3;
    ASYSFTYFCTSTSTOEDRACSFEFCTSTS_FCTSTS_ACTIVE = 4;
  }
  enum AsySftyFctStsToEDRAEBSFctStsType {
    ASYSFTYFCTSTSTOEDRAEBSFCTSTS_AEBSFCTSTS_DEFAULT = 0;
    ASYSFTYFCTSTSTOEDRAEBSFCTSTS_AEBSFCTSTS_FAULTED = 1;
    ASYSFTYFCTSTSTOEDRAEBSFCTSTS_AEBSFCTSTS_OFF = 2;
    ASYSFTYFCTSTSTOEDRAEBSFCTSTS_AEBSFCTSTS_ONBUTNOTENGAGED = 3;
    ASYSFTYFCTSTSTOEDRAEBSFCTSTS_AEBSFCTSTS_WARNINGBUTNOTENGAGED = 4;
    ASYSFTYFCTSTSTOEDRAEBSFCTSTS_AEBSFCTSTS_ENGAGED = 5;
  }
  enum AsySftyFctStsToEDRCSFFctStsType {
    ASYSFTYFCTSTSTOEDRCSFFCTSTS_FCTSTS_DEFAULT = 0;
    ASYSFTYFCTSTSTOEDRCSFFCTSTS_FCTSTS_FAULTED = 1;
    ASYSFTYFCTSTSTOEDRCSFFCTSTS_FCTSTS_OFF = 2;
    ASYSFTYFCTSTSTOEDRCSFFCTSTS_FCTSTS_STANDBY = 3;
    ASYSFTYFCTSTSTOEDRCSFFCTSTS_FCTSTS_ACTIVE = 4;
  }
  enum AsySftyFctStsToEDRESFFctStsType {
    ASYSFTYFCTSTSTOEDRESFFCTSTS_FCTSTS_DEFAULT = 0;
    ASYSFTYFCTSTSTOEDRESFFCTSTS_FCTSTS_FAULTED = 1;
    ASYSFTYFCTSTSTOEDRESFFCTSTS_FCTSTS_OFF = 2;
    ASYSFTYFCTSTSTOEDRESFFCTSTS_FCTSTS_STANDBY = 3;
    ASYSFTYFCTSTSTOEDRESFFCTSTS_FCTSTS_ACTIVE = 4;
  }
  enum AsySftyFctStsToEDRLDWSFctStsType {
    ASYSFTYFCTSTSTOEDRLDWSFCTSTS_LDWSFCTSTS_DEFAULT = 0;
    ASYSFTYFCTSTSTOEDRLDWSFCTSTS_LDWSFCTSTS_FAULTED = 1;
    ASYSFTYFCTSTSTOEDRLDWSFCTSTS_LDWSFCTSTS_OFF = 2;
    ASYSFTYFCTSTSTOEDRLDWSFCTSTS_LDWSFCTSTS_ONBUTNOTENGAGED = 3;
    ASYSFTYFCTSTSTOEDRLDWSFCTSTS_LDWSFCTSTS_WARNINGLEFT = 4;
    ASYSFTYFCTSTSTOEDRLDWSFCTSTS_LDWSFCTSTS_WARNINGRIGHT = 5;
  }
  enum AsySftyHWLReqType {
    ASYSFTYHWLREQ_ASYSFTYHWLREQ_NOREQUEST = 0;
    ASYSFTYHWLREQ_ASYSFTYHWLREQ_TURNON = 1;
    ASYSFTYHWLREQ_ASYSFTYHWLREQ_TURNOFF = 2;
    ASYSFTYHWLREQ_ASYSFTYHWLREQ_RESERVED = 3;
  }
  enum CllsnMtgtnFctStsType {
    CLLSNMTGTNFCTSTS_CLLSNMTGTNFCTSTS_RESERVED1 = 0;
    CLLSNMTGTNFCTSTS_CLLSNMTGTNFCTSTS_OFF = 1;
    CLLSNMTGTNFCTSTS_CLLSNMTGTNFCTSTS_ON = 2;
    CLLSNMTGTNFCTSTS_CLLSNMTGTNFCTSTS_TEMPORARYERROR = 3;
    CLLSNMTGTNFCTSTS_CLLSNMTGTNFCTSTS_PERMENENTERROR = 4;
    CLLSNMTGTNFCTSTS_CLLSNMTGTNFCTSTS_AEB_PEDNOTAVALID = 5;
    CLLSNMTGTNFCTSTS_CLLSNMTGTNFCTSTS_RESERVED2 = 6;
    CLLSNMTGTNFCTSTS_CLLSNMTGTNFCTSTS_RESERVED3 = 7;
  }
  enum CllsnMtgtnWarnStsType {
    CLLSNMTGTNWARNSTS_CLLSNMTGTNWARNSTS_RESERVED1 = 0;
    CLLSNMTGTNWARNSTS_CLLSNMTGTNWARNSTS_OFF = 1;
    CLLSNMTGTNWARNSTS_CLLSNMTGTNWARNSTS_LOWSENSITIVE = 2;
    CLLSNMTGTNWARNSTS_CLLSNMTGTNWARNSTS_MEDIUMSENSITIVE = 3;
    CLLSNMTGTNWARNSTS_CLLSNMTGTNWARNSTS_HIGHSENSITIVE = 4;
    CLLSNMTGTNWARNSTS_CLLSNMTGTNWARNSTS_RESERVED2 = 5;
    CLLSNMTGTNWARNSTS_CLLSNMTGTNWARNSTS_RESERVED3 = 6;
    CLLSNMTGTNWARNSTS_CLLSNMTGTNWARNSTS_RESERVED4 = 7;
  }
  enum CllsnWarnReOn1Type {
    CLLSNWARNREON1_LCMACTRAON_OFF = 0;
    CLLSNWARNREON1_LCMACTRAON_PASSIVE = 1;
    CLLSNWARNREON1_LCMACTRAON_ACTIVE = 2;
    CLLSNWARNREON1_LCMACTRAON_ERROR = 3;
  }
  enum CtraOn1Type {
    CTRAON1_LCMACTRAON_OFF = 0;
    CTRAON1_LCMACTRAON_PASSIVE = 1;
    CTRAON1_LCMACTRAON_ACTIVE = 2;
    CTRAON1_LCMACTRAON_ERROR = 3;
  }
  enum DoorOpenwarnOn1Type {
    DOOROPENWARNON1_LCMACTRAON_OFF = 0;
    DOOROPENWARNON1_LCMACTRAON_PASSIVE = 1;
    DOOROPENWARNON1_LCMACTRAON_ACTIVE = 2;
    DOOROPENWARNON1_LCMACTRAON_ERROR = 3;
  }
  enum ISAControlResponseType {
    ISACONTROLRESPONSE_ISARESPONSE_DEAULT = 0;
    ISACONTROLRESPONSE_ISARESPONSE_READYSUCCESS = 1;
    ISACONTROLRESPONSE_ISARESPONSE_READYFAIL = 2;
    ISACONTROLRESPONSE_ISARESPONSE_ENABLEDSUCCESS = 3;
    ISACONTROLRESPONSE_ISARESPONSE_ENABLEDFAIL = 4;
    ISACONTROLRESPONSE_ISARESPONSE_PAUSED = 5;
    ISACONTROLRESPONSE_ISARESPONSE_RECOVER = 6;
    ISACONTROLRESPONSE_ISARESPONSE_QUIT = 7;
    ISACONTROLRESPONSE_ISARESPONSE_RESERVED = 8;
  }
  enum RsdsSysStsType {
    RSDSSYSSTS_RSDSMSTST_CFG = 0;
    RSDSSYSSTS_RSDSMSTST_STRTUP = 1;
    RSDSSYSSTS_RSDSMSTST_RUNNG = 2;
    RSDSSYSSTS_RSDSMSTST_BLKD = 3;
    RSDSSYSSTS_RSDSMSTST_FAULTY = 4;
    RSDSSYSSTS_RSDSMSTST_SHUTDOWN = 5;
    RSDSSYSSTS_RSDSMSTST_HOT = 6;
    RSDSSYSSTS_RSDSMSTST_CAL = 7;
  }
  enum RVMControlResponseType {
    RVMCONTROLRESPONSE_RVMCRESP_DEAULT = 0;
    RVMCONTROLRESPONSE_RVMCRESP_READYSUCCESS = 1;
    RVMCONTROLRESPONSE_RVMCRESP_READYFAIL = 2;
    RVMCONTROLRESPONSE_RVMCRESP_PARKOUTSUCCESS = 3;
    RVMCONTROLRESPONSE_RVMCRESP_PARKOUTFAIL = 4;
    RVMCONTROLRESPONSE_RVMCRESP_PAUSED = 5;
    RVMCONTROLRESPONSE_RVMCRESP_FORWARDBACKSUCCESS = 6;
    RVMCONTROLRESPONSE_RVMCRESP_STARTARMING = 7;
    RVMCONTROLRESPONSE_RVMCRESP_QUIT = 8;
    RVMCONTROLRESPONSE_RVMCRESP_RESERVED = 9;
  }
  enum RVMDirectionResponseType {
    RVMDIRECTIONRESPONSE_RVMDRESP_DEAULT = 0;
    RVMDIRECTIONRESPONSE_RVMDRESP_HORIZONTALLEFT = 1;
    RVMDIRECTIONRESPONSE_RVMDRESP_HORIZONTALRIGHT = 2;
    RVMDIRECTIONRESPONSE_RVMDRESP_VERTICALLEFT = 3;
    RVMDIRECTIONRESPONSE_RVMDRESP_VERTICALRIGHT = 4;
    RVMDIRECTIONRESPONSE_RVMDRESP_RESERVED = 5;
  }
  enum SpdAlrmActvStsType {
    SPDALRMACTVSTS_DY1_NOREQUEST = 0;
    SPDALRMACTVSTS_DY1_NOWARNING = 1;
    SPDALRMACTVSTS_DY1_FLASHING = 2;
    SPDALRMACTVSTS_DY1_FLASHINGANDAUDIO = 3;
  }
  enum TPTFPpUpRmdType {
    TPTFPPUPRMD_OFFONLEN2_OFF = 0;
    TPTFPPUPRMD_OFFONLEN2_ON = 1;
    TPTFPPUPRMD_OFFONLEN2_RSED1 = 2;
    TPTFPPUPRMD_OFFONLEN2_RSED2 = 3;
  }
  enum TPTFRptstsType {
    TPTFRPTSTS_DFTNOYESRESD_DEFAULT = 0;
    TPTFRPTSTS_DFTNOYESRESD_NO = 1;
    TPTFRPTSTS_DFTNOYESRESD_YES = 2;
    TPTFRPTSTS_DFTNOYESRESD_RESD = 3;
  }
  enum TPTFScnCrdNtType {
    TPTFSCNCRDNT_TPTFSCNCRDNT_NOTSHOW = 0;
    TPTFSCNCRDNT_TPTFSCNCRDNT_SHOW = 1;
    TPTFSCNCRDNT_TPTFSCNCRDNT_RESERVED1 = 2;
    TPTFSCNCRDNT_TPTFSCNCRDNT_RESERVED2 = 3;
    TPTFSCNCRDNT_TPTFSCNCRDNT_RESERVED3 = 4;
    TPTFSCNCRDNT_TPTFSCNCRDNT_RESERVED4 = 5;
    TPTFSCNCRDNT_TPTFSCNCRDNT_RESERVED5 = 6;
    TPTFSCNCRDNT_TPTFSCNCRDNT_RESERVED6 = 7;
  }
  enum TPTFSRRmdType {
    TPTFSRRMD_OFFONLEN3_OFF = 0;
    TPTFSRRMD_OFFONLEN3_ON = 1;
    TPTFSRRMD_OFFONLEN3_RSED1 = 2;
    TPTFSRRMD_OFFONLEN3_RSED2 = 3;
    TPTFSRRMD_OFFONLEN3_RSED3 = 4;
    TPTFSRRMD_OFFONLEN3_RSED4 = 5;
    TPTFSRRMD_OFFONLEN3_RSED5 = 6;
    TPTFSRRMD_OFFONLEN3_RSED6 = 7;
  }
  enum TrfcInfoMiscFirstType {
    TRFCINFOMISCFIRST_TRFCINFOMISCFIRST_OFF = 0;
    TRFCINFOMISCFIRST_TRFCINFOMISCFIRST_NOENTRANCE = 1;
    TRFCINFOMISCFIRST_TRFCINFOMISCFIRST_VEHICLEPASSINGNOTALLOWED = 2;
    TRFCINFOMISCFIRST_TRFCINFOMISCFIRST_ENDOFVEHICLEPASSINGNOTALLOWED = 3;
    TRFCINFOMISCFIRST_TRFCINFOMISCFIRST_STOP = 4;
    TRFCINFOMISCFIRST_TRFCINFOMISCFIRST_SPEEDLIMITCONTROL = 5;
    TRFCINFOMISCFIRST_TRFCINFOMISCFIRST_USNIGHTSPEEDLIMIT = 6;
    TRFCINFOMISCFIRST_TRFCINFOMISCFIRST_SCHOOLANDCHILDRENWARNING = 7;
    TRFCINFOMISCFIRST_TRFCINFOMISCFIRST_ROADWORK = 8;
    TRFCINFOMISCFIRST_TRFCINFOMISCFIRST_LEFTCURVE = 9;
    TRFCINFOMISCFIRST_TRFCINFOMISCFIRST_RIGHTCURVE = 10;
    TRFCINFOMISCFIRST_TRFCINFOMISCFIRST_SERIESCURVES = 11;
    TRFCINFOMISCFIRST_TRFCINFOMISCFIRST_RESERVED = 12;
  }
  enum TrfcLiStsType {
    TRFCLISTS_FCTSTS2_UKWN = 0;
    TRFCLISTS_FCTSTS2_OFF = 1;
    TRFCLISTS_FCTSTS2_SPDLOSTB = 2;
    TRFCLISTS_FCTSTS2_SPDHISTB = 3;
    TRFCLISTS_FCTSTS2_NOTAVL = 4;
    TRFCLISTS_FCTSTS2_SRVRQRD = 5;
    TRFCLISTS_FCTSTS2_ON = 6;
    TRFCLISTS_FCTSTS2_NOTINUSE = 7;
  }
  // description Indicates if ACC function fuses with TSR or not. [] [0|1] [initial_value:0]
  optional bool acc_fusn_trfc_sgn = 1;
  // [] [0|1] [initial_value:None]
  optional bool acc_fusn_trfc_sgn_ub = 2;
  // description Status signal which indicates the status of the ASDM. [] [0|7] [initial_value:0]
  optional ActvSafeCtrlrStsType actv_safe_ctrlr_sts = 3;
  // [] [0|1] [initial_value:None]
  optional bool actv_safe_ctrlr_sts_ub = 4;
  // description CNOA Cruise control  indicator status on HMI display [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_csd_indcr = 5;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_csd_indcr_ub = 6;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_dim_indcr_ub = 7;
  // description CNOA Cruise control indicator status for HMI display.   [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_dim_indcr_asy_cnoa_crs_dim_indcr = 8;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_dim_indcr_chks = 9;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_dim_indcr_cntr = 10;
  // description CNOA Cruise Hud Indicator [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_hud_indcr = 11;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_hud_indcr_ub = 12;
  // description Feedback to HMI for EmgyLaneKeepAidActvSts [] [0|1] [initial_value:1]
  optional bool asy_emgy_lane_keep_aid = 13;
  // [] [0|1] [initial_value:None]
  optional bool asy_emgy_lane_keep_aid_ub = 14;
  // description The signal indicates the status of EMA function; Off, passive, standby,active etc. [] [0|7] [initial_value:1]
  optional AsyEmgyManoeuvreAidStsType asy_emgy_manoeuvre_aid_sts = 15;
  // [] [0|1] [initial_value:None]
  optional bool asy_emgy_manoeuvre_aid_sts_ub = 16;
  // [] [0|1] [initial_value:0]
  optional bool asy_fctn_ihbt_by_trlr = 17;
  // [] [0|1] [initial_value:None]
  optional bool asy_fctn_ihbt_by_trlr_ub = 18;
  // description ICC_MAX messages [] [0|15] [initial_value:0]
  optional AsyIccMaxWarnMsgType asy_icc_max_warn_msg = 19;
  // [] [0|1] [initial_value:None]
  optional bool asy_icc_max_warn_msg_ub = 20;
  // description LDW function warning mode. [] [0|3] [initial_value:2]
  optional AsyLaneChgWarnModType asy_lane_chg_warn_mod = 21;
  // [] [0|1] [initial_value:None]
  optional bool asy_lane_chg_warn_mod_ub = 22;
  // [] [0|1] [initial_value:None]
  optional bool asy_sfty_fct_sts_to_edr_ub = 23;
  // description The signal indicates the function status of the ACC function. [] [0|7] [initial_value:0]
  optional AsySftyFctStsToEDRACCFctSTsType asy_sfty_fct_sts_to_edracc_fct_s_ts = 24;
  // description The signal indicates the function status of the HWA function. [] [0|7] [initial_value:0]
  optional AsySftyFctStsToEDRACSFB1FctStsType asy_sfty_fct_sts_to_edracsfb1_fct_sts = 25;
  // description The signal indicates the function status of the ACSF B2. [] [0|7] [initial_value:0]
  optional AsySftyFctStsToEDRACSFB2FctStsType asy_sfty_fct_sts_to_edracsfb2_fct_sts = 26;
  // description The signal indicates the function status of the ALCA function. [] [0|7] [initial_value:0]
  optional AsySftyFctStsToEDRACSFCFctStsType asy_sfty_fct_sts_to_edracsfc_fct_sts = 27;
  // description The signal indicates the function status of the ACSF D. [] [0|7] [initial_value:0]
  optional AsySftyFctStsToEDRACSFDFctStsType asy_sfty_fct_sts_to_edracsfd_fct_sts = 28;
  // description The signal indicates the function status of the ACSF E. [] [0|7] [initial_value:0]
  optional AsySftyFctStsToEDRACSFEFctStsType asy_sfty_fct_sts_to_edracsfe_fct_sts = 29;
  // description The signal indicates the function status of the AEB and FCW function. [] [0|7] [initial_value:0]
  optional AsySftyFctStsToEDRAEBSFctStsType asy_sfty_fct_sts_to_edraebs_fct_sts = 30;
  // description The signal indicates the function status of the LKA function. [] [0|7] [initial_value:0]
  optional AsySftyFctStsToEDRCSFFctStsType asy_sfty_fct_sts_to_edrcsf_fct_sts = 31;
  // description The signal indicates the function status of the ELKA function. [] [0|7] [initial_value:0]
  optional AsySftyFctStsToEDRESFFctStsType asy_sfty_fct_sts_to_edresf_fct_sts = 32;
  // description The signal indicates the function status of the LDW function. [] [0|7] [initial_value:0]
  optional AsySftyFctStsToEDRLDWSFctStsType asy_sfty_fct_sts_to_edrldws_fct_sts = 33;
  // description Request to turn on/off the Hazard Warning Light [] [0|3] [initial_value:0]
  optional AsySftyHWLReqType asy_sfty_hwl_req = 34;
  // [] [0|1] [initial_value:None]
  optional bool asy_sfty_hwl_req_ub = 35;
  // description indicate the status of lane changing  [Unitless] [0.0|63.0] [initial_value:0]
  optional uint32 aut_lane_chg_sts = 36;
  // [] [0|1] [initial_value:None]
  optional bool aut_lane_chg_sts_ub = 37;
  // description incident text message for EMA [] [0|1] [initial_value:0]
  optional bool cllsn_aid_post_ema = 38;
  // [] [0|1] [initial_value:None]
  optional bool cllsn_aid_post_ema_ub = 39;
  // description Shows if the AEB function is on or off.  [] [0|7] [initial_value:2]
  optional CllsnMtgtnFctStsType cllsn_mtgtn_fct_sts = 40;
  // [] [0|1] [initial_value:None]
  optional bool cllsn_mtgtn_fct_sts_ub = 41;
  // description Shows the FCW function switch and sensitivity status. [] [0|7] [initial_value:2]
  optional CllsnMtgtnWarnStsType cllsn_mtgtn_warn_sts = 42;
  // [] [0|1] [initial_value:None]
  optional bool cllsn_mtgtn_warn_sts_ub = 43;
  // description statemachine signal [] [0|3] [initial_value:0]
  optional CllsnWarnReOn1Type cllsn_warn_re_on1 = 44;
  // [] [0|1] [initial_value:None]
  optional bool cllsn_warn_re_on1_ub = 45;
  // description the request to select REM by switch in HMI. [] [0|1] [initial_value:0]
  optional bool cpm_on1 = 46;
  // [] [0|1] [initial_value:None]
  optional bool cpm_on1_ub = 47;
  // description state Machine signal [] [0|3] [initial_value:0]
  optional CtraOn1Type ctra_on1 = 48;
  // [] [0|1] [initial_value:None]
  optional bool ctra_on1_ub = 49;
  // description Country to be used for the presentation of  traffic signs. [Unitless] [0.0|1023.0] [initial_value:0]
  optional uint32 ctry_for_road_sgn_info = 50;
  // [] [0|1] [initial_value:None]
  optional bool ctry_for_road_sgn_info_ub = 51;
  // description statemachine signal [] [0|3] [initial_value:0]
  optional DoorOpenwarnOn1Type door_openwarn_on1 = 52;
  // [] [0|1] [initial_value:None]
  optional bool door_openwarn_on1_ub = 53;
  // description ISA control response [] [0|15] [initial_value:0]
  optional ISAControlResponseType isa_control_response = 54;
  // [] [0|1] [initial_value:None]
  optional bool isa_control_response_ub = 55;
  // description ISA heart beat response [] [0|1] [initial_value:0]
  optional bool isa_heart_resp = 56;
  // [] [0|1] [initial_value:None]
  optional bool isa_heart_resp_ub = 57;
  // description ISA toast status [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 isa_toast_status = 58;
  // [] [0|1] [initial_value:None]
  optional bool isa_toast_status_ub = 59;
  // description Signal indicating the status of the automatic lane change in High Way Assist (HWA) function. [] [0|1] [initial_value:0]
  optional bool lane_chg_aut_actv_sts = 60;
  // [] [0|1] [initial_value:None]
  optional bool lane_chg_aut_actv_sts_ub = 61;
  // description Vedio warning [] [0|1] [initial_value:0]
  optional bool lcma_aud_warn = 62;
  // [] [0|1] [initial_value:None]
  optional bool lcma_aud_warn_ub = 63;
  // description Indicates if road miscellaneous sign shall be displayed or not. [] [0|1] [initial_value:0]
  optional bool road_misc_sgn_info_sts = 64;
  // [] [0|1] [initial_value:None]
  optional bool road_misc_sgn_info_sts_ub = 65;
  // description rader system status [] [0|7] [initial_value:5]
  optional RsdsSysStsType rsds_sys_sts = 66;
  // [] [0|1] [initial_value:None]
  optional bool rsds_sys_sts_ub = 67;
  // description RVM control response [] [0|15] [initial_value:0]
  optional RVMControlResponseType rvm_control_response = 68;
  // [] [0|1] [initial_value:None]
  optional bool rvm_control_response_ub = 69;
  // description RVM direction response [] [0|7] [initial_value:0]
  optional RVMDirectionResponseType rvm_direction_response = 70;
  // [] [0|1] [initial_value:None]
  optional bool rvm_direction_response_ub = 71;
  // description RVM heart beat response [] [0|1] [initial_value:0]
  optional bool rvm_heart_resp = 72;
  // [] [0|1] [initial_value:None]
  optional bool rvm_heart_resp_ub = 73;
  // description RVM toast status [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 rvm_toast_status = 74;
  // [] [0|1] [initial_value:None]
  optional bool rvm_toast_status_ub = 75;
  // description Indicates TSR warning function status. [] [0|3] [initial_value:2]
  optional SpdAlrmActvStsType spd_alrm_actv_sts = 76;
  // [] [0|1] [initial_value:None]
  optional bool spd_alrm_actv_sts_ub = 77;
  // description Describe the distance from the electronic eye in front of the car. [Unitless] [0.0|1023.0] [initial_value:0]
  optional uint32 spd_lim_cam_dst = 78;
  // [] [0|1] [initial_value:None]
  optional bool spd_lim_cam_dst_ub = 79;
  // description Indicates if speed limit camera symbol (electronic eyes) shall be displayed or not. [] [0|1] [initial_value:0]
  optional bool spd_lim_cam_first = 80;
  // [] [0|1] [initial_value:None]
  optional bool spd_lim_cam_first_ub = 81;
  // description Indicates current speed limit sign units. [] [0|1] [initial_value:0]
  optional bool spd_lim_unit = 82;
  // [] [0|1] [initial_value:None]
  optional bool spd_lim_unit_ub = 83;
  // description Used to display DIM pop-ups [] [0|3] [initial_value:0]
  optional TPTFPpUpRmdType tptf_pp_up_rmd = 84;
  // [] [0|1] [initial_value:None]
  optional bool tptf_pp_up_rmd_ub = 85;
  // description Indicates whether there is content in the user experience report [] [0|3] [initial_value:0]
  optional TPTFRptstsType tptf_rptsts = 86;
  // [] [0|1] [initial_value:None]
  optional bool tptf_rptsts_ub = 87;
  // [] [0|1] [initial_value:None]
  optional bool tptf_scn_crd_ub = 88;
  // description It is used to display the scene card and progress in the report [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 tptf_scn_crd_crd1 = 89;
  // description It is used to display the scene card and progress in the report [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 tptf_scn_crd_crd2 = 90;
  // description It is used to display the scene card and progress in the report [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 tptf_scn_crd_crd3 = 91;
  // description It is used to display the scene card and progress in the report [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 tptf_scn_crd_crd4 = 92;
  // description It is used to display the scene card and progress in the report [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 tptf_scn_crd_crd5 = 93;
  // description It is used to display the scene card and progress in the report [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 tptf_scn_crd_crd6 = 94;
  // description It is used to display the scene card and progress in the report [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 tptf_scn_crd_crd7 = 95;
  // description It is used to display the scene card and progress in the report [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 tptf_scn_crd_crd8 = 96;
  // description It is used to inform the user that a new scene has been unlocked in the notification bar of the system on the vehicle side [] [0|7] [initial_value:0]
  optional TPTFScnCrdNtType tptf_scn_crd_nt = 97;
  // [] [0|1] [initial_value:None]
  optional bool tptf_scn_crd_nt_ub = 98;
  // description Used to demonstrate SR animations [] [0|7] [initial_value:0]
  optional TPTFSRRmdType tptfsr_rmd = 99;
  // [] [0|1] [initial_value:None]
  optional bool tptfsr_rmd_ub = 100;
  // description Indicates current miscellaneous sign (No entrance, No stop, etc). [] [0|15] [initial_value:0]
  optional TrfcInfoMiscFirstType trfc_info_misc_first = 101;
  // [] [0|1] [initial_value:None]
  optional bool trfc_info_misc_first_ub = 102;
  // description Traffic Lights Attention function status [] [0|7] [initial_value:0]
  optional TrfcLiStsType trfc_li_sts = 103;
  // [] [0|1] [initial_value:None]
  optional bool trfc_li_sts_ub = 104;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_l1_special_prompt_disp1_ub = 105;
  // description AsternDistance [m] [0.0|1023.0] [initial_value:0]
  optional uint32 valt_prkg_l1_special_prompt_disp1_astern_distance = 106;
  // description CruisingRemainDst1 [m] [0.0|6553.5] [initial_value:0]
  optional double valt_prkg_l1_special_prompt_disp1_cruising_remain_dst1 = 107;
  // description MappedRecDst1 [m] [0.0|6553.5] [initial_value:0]
  optional double valt_prkg_l1_special_prompt_disp1_mapped_rec_dst1 = 108;
}

message ADCU_ZCUCANFD1_FR24_300 {
// Control Message
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line0 = 1;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line0_ub = 2;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line1 = 3;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line1_ub = 4;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line10 = 5;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line10_ub = 6;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line11 = 7;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line11_ub = 8;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line12 = 9;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line12_ub = 10;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line13 = 11;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line13_ub = 12;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line14 = 13;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line14_ub = 14;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line15 = 15;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line15_ub = 16;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line16 = 17;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line16_ub = 18;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line17 = 19;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line17_ub = 20;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line18 = 21;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line18_ub = 22;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line19 = 23;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line19_ub = 24;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line2 = 25;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line2_ub = 26;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line20 = 27;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line20_ub = 28;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line21 = 29;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line21_ub = 30;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line22 = 31;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line22_ub = 32;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line23 = 33;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line23_ub = 34;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line24 = 35;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line24_ub = 36;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line25 = 37;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line25_ub = 38;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line26 = 39;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line26_ub = 40;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line27 = 41;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line27_ub = 42;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line28 = 43;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line28_ub = 44;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line29 = 45;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line29_ub = 46;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line3 = 47;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line3_ub = 48;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line30 = 49;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line30_ub = 50;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line31 = 51;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line31_ub = 52;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line32 = 53;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line32_ub = 54;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line33 = 55;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line33_ub = 56;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line34 = 57;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line34_ub = 58;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line35 = 59;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line35_ub = 60;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line36 = 61;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line36_ub = 62;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line37 = 63;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line37_ub = 64;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line38 = 65;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line38_ub = 66;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line39 = 67;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line39_ub = 68;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line4 = 69;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line4_ub = 70;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line40 = 71;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line40_ub = 72;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line41 = 73;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line41_ub = 74;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line42 = 75;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line42_ub = 76;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line43 = 77;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line43_ub = 78;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line44 = 79;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line44_ub = 80;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line45 = 81;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line45_ub = 82;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line46 = 83;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line46_ub = 84;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line47 = 85;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line47_ub = 86;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line48 = 87;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line48_ub = 88;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line49 = 89;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line49_ub = 90;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line5 = 91;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line5_ub = 92;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line50 = 93;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line50_ub = 94;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line6 = 95;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line6_ub = 96;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line7 = 97;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line7_ub = 98;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line8 = 99;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line8_ub = 100;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line9 = 101;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line9_ub = 102;
}

message ADCU_ZCUCANFD1_FR25_301 {
// Control Message
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line100 = 1;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line100_ub = 2;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line101 = 3;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line101_ub = 4;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line51 = 5;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line51_ub = 6;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line52 = 7;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line52_ub = 8;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line53 = 9;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line53_ub = 10;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line54 = 11;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line54_ub = 12;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line55 = 13;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line55_ub = 14;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line56 = 15;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line56_ub = 16;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line57 = 17;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line57_ub = 18;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line58 = 19;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line58_ub = 20;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line59 = 21;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line59_ub = 22;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line60 = 23;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line60_ub = 24;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line61 = 25;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line61_ub = 26;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line62 = 27;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line62_ub = 28;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line63 = 29;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line63_ub = 30;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line64 = 31;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line64_ub = 32;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line65 = 33;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line65_ub = 34;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line66 = 35;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line66_ub = 36;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line67 = 37;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line67_ub = 38;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line68 = 39;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line68_ub = 40;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line69 = 41;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line69_ub = 42;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line70 = 43;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line70_ub = 44;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line71 = 45;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line71_ub = 46;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line72 = 47;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line72_ub = 48;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line73 = 49;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line73_ub = 50;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line74 = 51;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line74_ub = 52;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line75 = 53;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line75_ub = 54;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line76 = 55;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line76_ub = 56;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line77 = 57;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line77_ub = 58;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line78 = 59;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line78_ub = 60;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line79 = 61;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line79_ub = 62;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line80 = 63;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line80_ub = 64;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line81 = 65;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line81_ub = 66;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line82 = 67;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line82_ub = 68;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line83 = 69;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line83_ub = 70;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line84 = 71;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line84_ub = 72;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line85 = 73;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line85_ub = 74;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line86 = 75;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line86_ub = 76;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line87 = 77;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line87_ub = 78;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line88 = 79;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line88_ub = 80;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line89 = 81;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line89_ub = 82;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line90 = 83;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line90_ub = 84;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line91 = 85;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line91_ub = 86;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line92 = 87;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line92_ub = 88;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line93 = 89;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line93_ub = 90;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line94 = 91;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line94_ub = 92;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line95 = 93;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line95_ub = 94;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line96 = 95;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line96_ub = 96;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line97 = 97;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line97_ub = 98;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line98 = 99;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line98_ub = 100;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line99 = 101;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line99_ub = 102;
}

message ADCU_ZCUCANFD1_FR26_302 {
// Control Message
  enum LeftElevationGrade0Type {
    LEFTELEVATIONGRADE0_ELEVATIONGRADE_INVALID = 0;
    LEFTELEVATIONGRADE0_ELEVATIONGRADE_1 = 1;
    LEFTELEVATIONGRADE0_ELEVATIONGRADE_2 = 2;
    LEFTELEVATIONGRADE0_ELEVATIONGRADE_3 = 3;
    LEFTELEVATIONGRADE0_ELEVATIONGRADE_4 = 4;
    LEFTELEVATIONGRADE0_ELEVATIONGRADE_5 = 5;
    LEFTELEVATIONGRADE0_ELEVATIONGRADE_6 = 6;
    LEFTELEVATIONGRADE0_ELEVATIONGRADE_7 = 7;
    LEFTELEVATIONGRADE0_ELEVATIONGRADE_8 = 8;
    LEFTELEVATIONGRADE0_ELEVATIONGRADE_9 = 9;
    LEFTELEVATIONGRADE0_ELEVATIONGRADE_10 = 10;
  }
  enum LeftElevationGrade1Type {
    LEFTELEVATIONGRADE1_ELEVATIONGRADE_INVALID = 0;
    LEFTELEVATIONGRADE1_ELEVATIONGRADE_1 = 1;
    LEFTELEVATIONGRADE1_ELEVATIONGRADE_2 = 2;
    LEFTELEVATIONGRADE1_ELEVATIONGRADE_3 = 3;
    LEFTELEVATIONGRADE1_ELEVATIONGRADE_4 = 4;
    LEFTELEVATIONGRADE1_ELEVATIONGRADE_5 = 5;
    LEFTELEVATIONGRADE1_ELEVATIONGRADE_6 = 6;
    LEFTELEVATIONGRADE1_ELEVATIONGRADE_7 = 7;
    LEFTELEVATIONGRADE1_ELEVATIONGRADE_8 = 8;
    LEFTELEVATIONGRADE1_ELEVATIONGRADE_9 = 9;
    LEFTELEVATIONGRADE1_ELEVATIONGRADE_10 = 10;
  }
  enum LeftElevationGrade2Type {
    LEFTELEVATIONGRADE2_ELEVATIONGRADE_INVALID = 0;
    LEFTELEVATIONGRADE2_ELEVATIONGRADE_1 = 1;
    LEFTELEVATIONGRADE2_ELEVATIONGRADE_2 = 2;
    LEFTELEVATIONGRADE2_ELEVATIONGRADE_3 = 3;
    LEFTELEVATIONGRADE2_ELEVATIONGRADE_4 = 4;
    LEFTELEVATIONGRADE2_ELEVATIONGRADE_5 = 5;
    LEFTELEVATIONGRADE2_ELEVATIONGRADE_6 = 6;
    LEFTELEVATIONGRADE2_ELEVATIONGRADE_7 = 7;
    LEFTELEVATIONGRADE2_ELEVATIONGRADE_8 = 8;
    LEFTELEVATIONGRADE2_ELEVATIONGRADE_9 = 9;
    LEFTELEVATIONGRADE2_ELEVATIONGRADE_10 = 10;
  }
  enum LeftRoadSceneQualityType {
    LEFTROADSCENEQUALITY_ROADQUALITY_DEFAULT = 0;
    LEFTROADSCENEQUALITY_ROADQUALITY_LOW = 1;
    LEFTROADSCENEQUALITY_ROADQUALITY_MEDIUM = 2;
    LEFTROADSCENEQUALITY_ROADQUALITY_HIGH = 3;
    LEFTROADSCENEQUALITY_ROADQUALITY_FAULTY = 4;
    LEFTROADSCENEQUALITY_ROADQUALITY_RESERVED1 = 5;
    LEFTROADSCENEQUALITY_ROADQUALITY_RESERVED2 = 6;
    LEFTROADSCENEQUALITY_ROADQUALITY_INVALID = 7;
  }
  enum LeftWaveGrade0Type {
    LEFTWAVEGRADE0_WAVEGRADE_INVALID = 0;
    LEFTWAVEGRADE0_WAVEGRADE_1 = 1;
    LEFTWAVEGRADE0_WAVEGRADE_2 = 2;
    LEFTWAVEGRADE0_WAVEGRADE_3 = 3;
    LEFTWAVEGRADE0_WAVEGRADE_4 = 4;
    LEFTWAVEGRADE0_WAVEGRADE_5 = 5;
    LEFTWAVEGRADE0_WAVEGRADE_6 = 6;
    LEFTWAVEGRADE0_WAVEGRADE_7 = 7;
  }
  enum LeftWaveGrade1Type {
    LEFTWAVEGRADE1_WAVEGRADE_INVALID = 0;
    LEFTWAVEGRADE1_WAVEGRADE_1 = 1;
    LEFTWAVEGRADE1_WAVEGRADE_2 = 2;
    LEFTWAVEGRADE1_WAVEGRADE_3 = 3;
    LEFTWAVEGRADE1_WAVEGRADE_4 = 4;
    LEFTWAVEGRADE1_WAVEGRADE_5 = 5;
    LEFTWAVEGRADE1_WAVEGRADE_6 = 6;
    LEFTWAVEGRADE1_WAVEGRADE_7 = 7;
  }
  enum LeftWaveGrade2Type {
    LEFTWAVEGRADE2_WAVEGRADE_INVALID = 0;
    LEFTWAVEGRADE2_WAVEGRADE_1 = 1;
    LEFTWAVEGRADE2_WAVEGRADE_2 = 2;
    LEFTWAVEGRADE2_WAVEGRADE_3 = 3;
    LEFTWAVEGRADE2_WAVEGRADE_4 = 4;
    LEFTWAVEGRADE2_WAVEGRADE_5 = 5;
    LEFTWAVEGRADE2_WAVEGRADE_6 = 6;
    LEFTWAVEGRADE2_WAVEGRADE_7 = 7;
  }
  // description left elevation grade [] [0|15] [initial_value:0]
  optional LeftElevationGrade0Type left_elevation_grade0 = 1;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_grade0_ub = 2;
  // description left elevation grade [] [0|15] [initial_value:0]
  optional LeftElevationGrade1Type left_elevation_grade1 = 3;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_grade1_ub = 4;
  // description left elevation grade [] [0|15] [initial_value:0]
  optional LeftElevationGrade2Type left_elevation_grade2 = 5;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_grade2_ub = 6;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line102 = 7;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line102_ub = 8;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line103 = 9;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line103_ub = 10;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line104 = 11;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line104_ub = 12;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line105 = 13;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line105_ub = 14;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line106 = 15;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line106_ub = 16;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line107 = 17;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line107_ub = 18;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line108 = 19;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line108_ub = 20;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line109 = 21;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line109_ub = 22;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line110 = 23;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line110_ub = 24;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line111 = 25;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line111_ub = 26;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line112 = 27;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line112_ub = 28;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line113 = 29;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line113_ub = 30;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line114 = 31;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line114_ub = 32;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line115 = 33;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line115_ub = 34;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line116 = 35;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line116_ub = 36;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line117 = 37;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line117_ub = 38;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line118 = 39;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line118_ub = 40;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line119 = 41;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line119_ub = 42;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line120 = 43;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line120_ub = 44;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line121 = 45;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line121_ub = 46;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line122 = 47;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line122_ub = 48;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line123 = 49;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line123_ub = 50;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line124 = 51;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line124_ub = 52;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line125 = 53;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line125_ub = 54;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line126 = 55;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line126_ub = 56;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line127 = 57;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line127_ub = 58;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line128 = 59;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line128_ub = 60;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line129 = 61;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line129_ub = 62;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line130 = 63;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line130_ub = 64;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line131 = 65;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line131_ub = 66;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line132 = 67;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line132_ub = 68;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line133 = 69;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line133_ub = 70;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line134 = 71;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line134_ub = 72;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line135 = 73;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line135_ub = 74;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line136 = 75;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line136_ub = 76;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line137 = 77;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line137_ub = 78;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line138 = 79;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line138_ub = 80;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line139 = 81;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line139_ub = 82;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line140 = 83;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line140_ub = 84;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line141 = 85;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line141_ub = 86;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line142 = 87;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line142_ub = 88;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line143 = 89;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line143_ub = 90;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line144 = 91;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line144_ub = 92;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line145 = 93;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line145_ub = 94;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line146 = 95;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line146_ub = 96;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line147 = 97;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line147_ub = 98;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line148 = 99;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line148_ub = 100;
  // description left elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double left_elevation_line149 = 101;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_line149_ub = 102;
  // description Left wheel road scene type quality [] [0|7] [initial_value:0]
  optional LeftRoadSceneQualityType left_road_scene_quality = 103;
  // [] [0|1] [initial_value:None]
  optional bool left_road_scene_quality_ub = 104;
  // description Left longitudinal wavelength level [] [0|7] [initial_value:0]
  optional LeftWaveGrade0Type left_wave_grade0 = 105;
  // [] [0|1] [initial_value:None]
  optional bool left_wave_grade0_ub = 106;
  // description Left longitudinal wavelength level [] [0|7] [initial_value:0]
  optional LeftWaveGrade1Type left_wave_grade1 = 107;
  // [] [0|1] [initial_value:None]
  optional bool left_wave_grade1_ub = 108;
  // description Left longitudinal wavelength level [] [0|7] [initial_value:0]
  optional LeftWaveGrade2Type left_wave_grade2 = 109;
  // [] [0|1] [initial_value:None]
  optional bool left_wave_grade2_ub = 110;
}

message ADCU_ZCUCANFD1_FR27_303 {
// Control Message
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line0 = 1;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line0_ub = 2;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line1 = 3;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line1_ub = 4;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line10 = 5;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line10_ub = 6;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line11 = 7;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line11_ub = 8;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line12 = 9;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line12_ub = 10;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line13 = 11;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line13_ub = 12;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line14 = 13;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line14_ub = 14;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line15 = 15;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line15_ub = 16;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line16 = 17;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line16_ub = 18;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line17 = 19;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line17_ub = 20;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line18 = 21;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line18_ub = 22;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line19 = 23;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line19_ub = 24;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line2 = 25;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line2_ub = 26;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line20 = 27;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line20_ub = 28;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line21 = 29;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line21_ub = 30;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line22 = 31;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line22_ub = 32;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line23 = 33;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line23_ub = 34;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line24 = 35;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line24_ub = 36;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line25 = 37;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line25_ub = 38;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line26 = 39;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line26_ub = 40;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line27 = 41;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line27_ub = 42;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line28 = 43;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line28_ub = 44;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line29 = 45;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line29_ub = 46;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line3 = 47;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line3_ub = 48;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line30 = 49;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line30_ub = 50;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line31 = 51;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line31_ub = 52;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line32 = 53;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line32_ub = 54;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line33 = 55;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line33_ub = 56;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line34 = 57;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line34_ub = 58;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line35 = 59;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line35_ub = 60;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line36 = 61;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line36_ub = 62;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line37 = 63;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line37_ub = 64;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line38 = 65;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line38_ub = 66;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line39 = 67;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line39_ub = 68;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line4 = 69;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line4_ub = 70;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line40 = 71;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line40_ub = 72;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line41 = 73;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line41_ub = 74;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line42 = 75;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line42_ub = 76;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line43 = 77;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line43_ub = 78;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line44 = 79;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line44_ub = 80;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line45 = 81;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line45_ub = 82;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line46 = 83;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line46_ub = 84;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line47 = 85;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line47_ub = 86;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line48 = 87;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line48_ub = 88;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line49 = 89;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line49_ub = 90;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line5 = 91;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line5_ub = 92;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line50 = 93;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line50_ub = 94;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line6 = 95;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line6_ub = 96;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line7 = 97;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line7_ub = 98;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line8 = 99;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line8_ub = 100;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line9 = 101;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line9_ub = 102;
}

message ADCU_ZCUCANFD1_FR28_304 {
// Control Message
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line100 = 1;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line100_ub = 2;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line101 = 3;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line101_ub = 4;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line51 = 5;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line51_ub = 6;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line52 = 7;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line52_ub = 8;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line53 = 9;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line53_ub = 10;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line54 = 11;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line54_ub = 12;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line55 = 13;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line55_ub = 14;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line56 = 15;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line56_ub = 16;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line57 = 17;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line57_ub = 18;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line58 = 19;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line58_ub = 20;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line59 = 21;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line59_ub = 22;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line60 = 23;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line60_ub = 24;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line61 = 25;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line61_ub = 26;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line62 = 27;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line62_ub = 28;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line63 = 29;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line63_ub = 30;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line64 = 31;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line64_ub = 32;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line65 = 33;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line65_ub = 34;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line66 = 35;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line66_ub = 36;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line67 = 37;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line67_ub = 38;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line68 = 39;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line68_ub = 40;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line69 = 41;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line69_ub = 42;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line70 = 43;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line70_ub = 44;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line71 = 45;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line71_ub = 46;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line72 = 47;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line72_ub = 48;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line73 = 49;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line73_ub = 50;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line74 = 51;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line74_ub = 52;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line75 = 53;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line75_ub = 54;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line76 = 55;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line76_ub = 56;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line77 = 57;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line77_ub = 58;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line78 = 59;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line78_ub = 60;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line79 = 61;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line79_ub = 62;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line80 = 63;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line80_ub = 64;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line81 = 65;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line81_ub = 66;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line82 = 67;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line82_ub = 68;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line83 = 69;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line83_ub = 70;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line84 = 71;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line84_ub = 72;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line85 = 73;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line85_ub = 74;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line86 = 75;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line86_ub = 76;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line87 = 77;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line87_ub = 78;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line88 = 79;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line88_ub = 80;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line89 = 81;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line89_ub = 82;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line90 = 83;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line90_ub = 84;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line91 = 85;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line91_ub = 86;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line92 = 87;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line92_ub = 88;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line93 = 89;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line93_ub = 90;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line94 = 91;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line94_ub = 92;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line95 = 93;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line95_ub = 94;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line96 = 95;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line96_ub = 96;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line97 = 97;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line97_ub = 98;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line98 = 99;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line98_ub = 100;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line99 = 101;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line99_ub = 102;
}

message ADCU_ZCUCANFD1_FR29_305 {
// Control Message
  enum RightElevationGrade0Type {
    RIGHTELEVATIONGRADE0_ELEVATIONGRADE_INVALID = 0;
    RIGHTELEVATIONGRADE0_ELEVATIONGRADE_1 = 1;
    RIGHTELEVATIONGRADE0_ELEVATIONGRADE_2 = 2;
    RIGHTELEVATIONGRADE0_ELEVATIONGRADE_3 = 3;
    RIGHTELEVATIONGRADE0_ELEVATIONGRADE_4 = 4;
    RIGHTELEVATIONGRADE0_ELEVATIONGRADE_5 = 5;
    RIGHTELEVATIONGRADE0_ELEVATIONGRADE_6 = 6;
    RIGHTELEVATIONGRADE0_ELEVATIONGRADE_7 = 7;
    RIGHTELEVATIONGRADE0_ELEVATIONGRADE_8 = 8;
    RIGHTELEVATIONGRADE0_ELEVATIONGRADE_9 = 9;
    RIGHTELEVATIONGRADE0_ELEVATIONGRADE_10 = 10;
  }
  enum RightElevationGrade1Type {
    RIGHTELEVATIONGRADE1_ELEVATIONGRADE_INVALID = 0;
    RIGHTELEVATIONGRADE1_ELEVATIONGRADE_1 = 1;
    RIGHTELEVATIONGRADE1_ELEVATIONGRADE_2 = 2;
    RIGHTELEVATIONGRADE1_ELEVATIONGRADE_3 = 3;
    RIGHTELEVATIONGRADE1_ELEVATIONGRADE_4 = 4;
    RIGHTELEVATIONGRADE1_ELEVATIONGRADE_5 = 5;
    RIGHTELEVATIONGRADE1_ELEVATIONGRADE_6 = 6;
    RIGHTELEVATIONGRADE1_ELEVATIONGRADE_7 = 7;
    RIGHTELEVATIONGRADE1_ELEVATIONGRADE_8 = 8;
    RIGHTELEVATIONGRADE1_ELEVATIONGRADE_9 = 9;
    RIGHTELEVATIONGRADE1_ELEVATIONGRADE_10 = 10;
  }
  enum RightElevationGrade2Type {
    RIGHTELEVATIONGRADE2_ELEVATIONGRADE_INVALID = 0;
    RIGHTELEVATIONGRADE2_ELEVATIONGRADE_1 = 1;
    RIGHTELEVATIONGRADE2_ELEVATIONGRADE_2 = 2;
    RIGHTELEVATIONGRADE2_ELEVATIONGRADE_3 = 3;
    RIGHTELEVATIONGRADE2_ELEVATIONGRADE_4 = 4;
    RIGHTELEVATIONGRADE2_ELEVATIONGRADE_5 = 5;
    RIGHTELEVATIONGRADE2_ELEVATIONGRADE_6 = 6;
    RIGHTELEVATIONGRADE2_ELEVATIONGRADE_7 = 7;
    RIGHTELEVATIONGRADE2_ELEVATIONGRADE_8 = 8;
    RIGHTELEVATIONGRADE2_ELEVATIONGRADE_9 = 9;
    RIGHTELEVATIONGRADE2_ELEVATIONGRADE_10 = 10;
  }
  enum RightRoadSceneQualityType {
    RIGHTROADSCENEQUALITY_ROADQUALITY_DEFAULT = 0;
    RIGHTROADSCENEQUALITY_ROADQUALITY_LOW = 1;
    RIGHTROADSCENEQUALITY_ROADQUALITY_MEDIUM = 2;
    RIGHTROADSCENEQUALITY_ROADQUALITY_HIGH = 3;
    RIGHTROADSCENEQUALITY_ROADQUALITY_FAULTY = 4;
    RIGHTROADSCENEQUALITY_ROADQUALITY_RESERVED1 = 5;
    RIGHTROADSCENEQUALITY_ROADQUALITY_RESERVED2 = 6;
    RIGHTROADSCENEQUALITY_ROADQUALITY_INVALID = 7;
  }
  enum RightWaveGrade0Type {
    RIGHTWAVEGRADE0_WAVEGRADE_INVALID = 0;
    RIGHTWAVEGRADE0_WAVEGRADE_1 = 1;
    RIGHTWAVEGRADE0_WAVEGRADE_2 = 2;
    RIGHTWAVEGRADE0_WAVEGRADE_3 = 3;
    RIGHTWAVEGRADE0_WAVEGRADE_4 = 4;
    RIGHTWAVEGRADE0_WAVEGRADE_5 = 5;
    RIGHTWAVEGRADE0_WAVEGRADE_6 = 6;
    RIGHTWAVEGRADE0_WAVEGRADE_7 = 7;
  }
  enum RightWaveGrade1Type {
    RIGHTWAVEGRADE1_WAVEGRADE_INVALID = 0;
    RIGHTWAVEGRADE1_WAVEGRADE_1 = 1;
    RIGHTWAVEGRADE1_WAVEGRADE_2 = 2;
    RIGHTWAVEGRADE1_WAVEGRADE_3 = 3;
    RIGHTWAVEGRADE1_WAVEGRADE_4 = 4;
    RIGHTWAVEGRADE1_WAVEGRADE_5 = 5;
    RIGHTWAVEGRADE1_WAVEGRADE_6 = 6;
    RIGHTWAVEGRADE1_WAVEGRADE_7 = 7;
  }
  enum RightWaveGrade2Type {
    RIGHTWAVEGRADE2_WAVEGRADE_INVALID = 0;
    RIGHTWAVEGRADE2_WAVEGRADE_1 = 1;
    RIGHTWAVEGRADE2_WAVEGRADE_2 = 2;
    RIGHTWAVEGRADE2_WAVEGRADE_3 = 3;
    RIGHTWAVEGRADE2_WAVEGRADE_4 = 4;
    RIGHTWAVEGRADE2_WAVEGRADE_5 = 5;
    RIGHTWAVEGRADE2_WAVEGRADE_6 = 6;
    RIGHTWAVEGRADE2_WAVEGRADE_7 = 7;
  }
  // description Right elevation level [] [0|15] [initial_value:0]
  optional RightElevationGrade0Type right_elevation_grade0 = 1;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_grade0_ub = 2;
  // description Right elevation level [] [0|15] [initial_value:0]
  optional RightElevationGrade1Type right_elevation_grade1 = 3;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_grade1_ub = 4;
  // description Right elevation level [] [0|15] [initial_value:0]
  optional RightElevationGrade2Type right_elevation_grade2 = 5;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_grade2_ub = 6;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line102 = 7;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line102_ub = 8;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line103 = 9;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line103_ub = 10;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line104 = 11;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line104_ub = 12;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line105 = 13;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line105_ub = 14;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line106 = 15;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line106_ub = 16;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line107 = 17;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line107_ub = 18;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line108 = 19;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line108_ub = 20;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line109 = 21;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line109_ub = 22;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line110 = 23;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line110_ub = 24;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line111 = 25;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line111_ub = 26;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line112 = 27;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line112_ub = 28;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line113 = 29;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line113_ub = 30;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line114 = 31;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line114_ub = 32;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line115 = 33;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line115_ub = 34;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line116 = 35;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line116_ub = 36;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line117 = 37;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line117_ub = 38;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line118 = 39;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line118_ub = 40;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line119 = 41;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line119_ub = 42;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line120 = 43;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line120_ub = 44;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line121 = 45;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line121_ub = 46;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line122 = 47;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line122_ub = 48;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line123 = 49;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line123_ub = 50;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line124 = 51;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line124_ub = 52;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line125 = 53;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line125_ub = 54;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line126 = 55;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line126_ub = 56;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line127 = 57;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line127_ub = 58;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line128 = 59;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line128_ub = 60;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line129 = 61;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line129_ub = 62;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line130 = 63;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line130_ub = 64;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line131 = 65;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line131_ub = 66;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line132 = 67;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line132_ub = 68;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line133 = 69;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line133_ub = 70;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line134 = 71;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line134_ub = 72;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line135 = 73;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line135_ub = 74;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line136 = 75;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line136_ub = 76;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line137 = 77;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line137_ub = 78;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line138 = 79;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line138_ub = 80;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line139 = 81;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line139_ub = 82;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line140 = 83;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line140_ub = 84;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line141 = 85;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line141_ub = 86;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line142 = 87;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line142_ub = 88;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line143 = 89;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line143_ub = 90;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line144 = 91;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line144_ub = 92;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line145 = 93;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line145_ub = 94;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line146 = 95;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line146_ub = 96;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line147 = 97;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line147_ub = 98;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line148 = 99;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line148_ub = 100;
  // description Right elevation line [mm] [-150.0|361.0] [initial_value:150]
  optional double right_elevation_line149 = 101;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_line149_ub = 102;
  // description Right wheel road scene type quality [] [0|7] [initial_value:0]
  optional RightRoadSceneQualityType right_road_scene_quality = 103;
  // [] [0|1] [initial_value:None]
  optional bool right_road_scene_quality_ub = 104;
  // description Right longitudinal wavelength level [] [0|7] [initial_value:0]
  optional RightWaveGrade0Type right_wave_grade0 = 105;
  // [] [0|1] [initial_value:None]
  optional bool right_wave_grade0_ub = 106;
  // description Right longitudinal wavelength level [] [0|7] [initial_value:0]
  optional RightWaveGrade1Type right_wave_grade1 = 107;
  // [] [0|1] [initial_value:None]
  optional bool right_wave_grade1_ub = 108;
  // description Right longitudinal wavelength level [] [0|7] [initial_value:0]
  optional RightWaveGrade2Type right_wave_grade2 = 109;
  // [] [0|1] [initial_value:None]
  optional bool right_wave_grade2_ub = 110;
}

message ADCU_ZCUCANFD1_FR30_306 {
// Control Message
  enum LeftRoadSignal0Type {
    LEFTROADSIGNAL0_ROADSIGNAL_INVALID = 0;
    LEFTROADSIGNAL0_ROADSIGNAL_SPEEDBUMPS = 1;
    LEFTROADSIGNAL0_ROADSIGNAL_MANHOLECOVERS = 2;
    LEFTROADSIGNAL0_ROADSIGNAL_OTHERS = 3;
  }
  enum LeftRoadSignal1Type {
    LEFTROADSIGNAL1_ROADSIGNAL_INVALID = 0;
    LEFTROADSIGNAL1_ROADSIGNAL_SPEEDBUMPS = 1;
    LEFTROADSIGNAL1_ROADSIGNAL_MANHOLECOVERS = 2;
    LEFTROADSIGNAL1_ROADSIGNAL_OTHERS = 3;
  }
  enum LeftRoadSignal2Type {
    LEFTROADSIGNAL2_ROADSIGNAL_INVALID = 0;
    LEFTROADSIGNAL2_ROADSIGNAL_SPEEDBUMPS = 1;
    LEFTROADSIGNAL2_ROADSIGNAL_MANHOLECOVERS = 2;
    LEFTROADSIGNAL2_ROADSIGNAL_OTHERS = 3;
  }
  enum RightRoadSignal0Type {
    RIGHTROADSIGNAL0_ROADSIGNAL_INVALID = 0;
    RIGHTROADSIGNAL0_ROADSIGNAL_SPEEDBUMPS = 1;
    RIGHTROADSIGNAL0_ROADSIGNAL_MANHOLECOVERS = 2;
    RIGHTROADSIGNAL0_ROADSIGNAL_OTHERS = 3;
  }
  enum RightRoadSignal1Type {
    RIGHTROADSIGNAL1_ROADSIGNAL_INVALID = 0;
    RIGHTROADSIGNAL1_ROADSIGNAL_SPEEDBUMPS = 1;
    RIGHTROADSIGNAL1_ROADSIGNAL_MANHOLECOVERS = 2;
    RIGHTROADSIGNAL1_ROADSIGNAL_OTHERS = 3;
  }
  enum RightRoadSignal2Type {
    RIGHTROADSIGNAL2_ROADSIGNAL_INVALID = 0;
    RIGHTROADSIGNAL2_ROADSIGNAL_SPEEDBUMPS = 1;
    RIGHTROADSIGNAL2_ROADSIGNAL_MANHOLECOVERS = 2;
    RIGHTROADSIGNAL2_ROADSIGNAL_OTHERS = 3;
  }
  enum RoadSceneDecideType {
    ROADSCENEDECIDE_SCENEDECIDE_INVALID = 0;
    ROADSCENEDECIDE_SCENEDECIDE_NORMALSCENES = 1;
    ROADSCENEDECIDE_SCENEDECIDE_SPECIALSCENES = 2;
    ROADSCENEDECIDE_SCENEDECIDE_FEATUREINHIBITSCENES = 3;
  }
  enum SystemStatusType {
    SYSTEMSTATUS_SYSTEMSTATUS3_INVALID = 0;
    SYSTEMSTATUS_SYSTEMSTATUS3_NORMAL = 1;
    SYSTEMSTATUS_SYSTEMSTATUS3_INHIBIT = 2;
  }
  enum TerrainSystemStatusType {
    TERRAINSYSTEMSTATUS_SYSTEMSTATUS2_INVALID = 0;
    TERRAINSYSTEMSTATUS_SYSTEMSTATUS2_NORMAL = 1;
    TERRAINSYSTEMSTATUS_SYSTEMSTATUS2_INHIBIT = 2;
    TERRAINSYSTEMSTATUS_SYSTEMSTATUS2_RESERVED = 3;
  }
  // description Left elevation signal status [] [0|1] [initial_value:0]
  optional bool left_elevation_signal = 1;
  // [] [0|1] [initial_value:None]
  optional bool left_elevation_signal_ub = 2;
  // description left lengthways distance [cm] [0.0|2047.0] [initial_value:0]
  optional uint32 leftlengthways_distance0 = 3;
  // [] [0|1] [initial_value:None]
  optional bool leftlengthways_distance0_ub = 4;
  // description left lengthways distance [cm] [0.0|2047.0] [initial_value:0]
  optional uint32 leftlengthways_distance1 = 5;
  // [] [0|1] [initial_value:None]
  optional bool leftlengthways_distance1_ub = 6;
  // description left lengthways distance [cm] [0.0|2047.0] [initial_value:0]
  optional uint32 leftlengthways_distance2 = 7;
  // [] [0|1] [initial_value:None]
  optional bool leftlengthways_distance2_ub = 8;
  // description left road signal [] [0|3] [initial_value:0]
  optional LeftRoadSignal0Type left_road_signal0 = 9;
  // [] [0|1] [initial_value:None]
  optional bool left_road_signal0_ub = 10;
  // description left road signal [] [0|3] [initial_value:0]
  optional LeftRoadSignal1Type left_road_signal1 = 11;
  // [] [0|1] [initial_value:None]
  optional bool left_road_signal1_ub = 12;
  // description left road signal [] [0|3] [initial_value:0]
  optional LeftRoadSignal2Type left_road_signal2 = 13;
  // [] [0|1] [initial_value:None]
  optional bool left_road_signal2_ub = 14;
  // description Left elevation signal status [] [0|1] [initial_value:0]
  optional bool right_elevation_signal = 15;
  // [] [0|1] [initial_value:None]
  optional bool right_elevation_signal_ub = 16;
  // description right lengthways distance [cm] [0.0|2047.0] [initial_value:0]
  optional uint32 rightlengthways_distance0 = 17;
  // [] [0|1] [initial_value:None]
  optional bool rightlengthways_distance0_ub = 18;
  // description right lengthways distance [cm] [0.0|2047.0] [initial_value:0]
  optional uint32 rightlengthways_distance1 = 19;
  // [] [0|1] [initial_value:None]
  optional bool rightlengthways_distance1_ub = 20;
  // description right lengthways distance [cm] [0.0|2047.0] [initial_value:0]
  optional uint32 rightlengthways_distance2 = 21;
  // [] [0|1] [initial_value:None]
  optional bool rightlengthways_distance2_ub = 22;
  // description right road signal [] [0|3] [initial_value:0]
  optional RightRoadSignal0Type right_road_signal0 = 23;
  // [] [0|1] [initial_value:None]
  optional bool right_road_signal0_ub = 24;
  // description right road signal [] [0|3] [initial_value:0]
  optional RightRoadSignal1Type right_road_signal1 = 25;
  // [] [0|1] [initial_value:None]
  optional bool right_road_signal1_ub = 26;
  // description right road signal [] [0|3] [initial_value:0]
  optional RightRoadSignal2Type right_road_signal2 = 27;
  // [] [0|1] [initial_value:None]
  optional bool right_road_signal2_ub = 28;
  // description Road scene judgment [] [0|3] [initial_value:0]
  optional RoadSceneDecideType road_scene_decide = 29;
  // [] [0|1] [initial_value:None]
  optional bool road_scene_decide_ub = 30;
  // description Controller malfunction [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 rolling_counts = 31;
  // [] [0|1] [initial_value:None]
  optional bool rolling_counts_ub = 32;
  // description Preview system status [] [0|7] [initial_value:0]
  optional SystemStatusType system_status = 33;
  // [] [0|1] [initial_value:None]
  optional bool system_status_ub = 34;
  // description All terrain detection system status [] [0|3] [initial_value:0]
  optional TerrainSystemStatusType terrain_system_status = 35;
  // [] [0|1] [initial_value:None]
  optional bool terrain_system_status_ub = 36;
  // description AD4 Camera heating request [] [0|1] [initial_value:0]
  optional bool ad4_camera_heating_req_zcu = 37;
  // [] [0|1] [initial_value:None]
  optional bool ad4_camera_heating_req_zcu_ub = 38;
}

message DHU_ZCUCANFD1_FR02_307 {
// Report Message
  enum ActvtPrkgPushRespType {
    ACTVTPRKGPUSHRESP_CMDTYPE1_IDLE = 0;
    ACTVTPRKGPUSHRESP_CMDTYPE1_CONFIRM = 1;
    ACTVTPRKGPUSHRESP_CMDTYPE1_CANCEL = 2;
    ACTVTPRKGPUSHRESP_CMDTYPE1_NOMOREREMINDER = 3;
  }
  enum CustomPrkgLotSwtType {
    CUSTOMPRKGLOTSWT_SWTREQ1_NOREQ = 0;
    CUSTOMPRKGLOTSWT_SWTREQ1_SELFCHOOSESLOT = 1;
    CUSTOMPRKGLOTSWT_SWTREQ1_HORIZONTAL = 2;
    CUSTOMPRKGLOTSWT_SWTREQ1_PERPENDICULAR = 3;
    CUSTOMPRKGLOTSWT_SWTREQ1_DIAGONAL = 4;
  }
  enum DigVideoRecStsType {
    DIGVIDEORECSTS_DIGVIDEORECSTS_IDLE = 0;
    DIGVIDEORECSTS_DIGVIDEORECSTS_LOOPRECORD = 1;
    DIGVIDEORECSTS_DIGVIDEORECSTS_EMERGENCYRECORD = 2;
    DIGVIDEORECSTS_DIGVIDEORECSTS_PAUSERECORD = 3;
    DIGVIDEORECSTS_DIGVIDEORECSTS_ERROR = 4;
  }
  enum DrvrAsscSysBtnPushType {
    DRVRASSCSYSBTNPUSH_DRVRASSCSYSBTNPUSH_NOREQ = 0;
    DRVRASSCSYSBTNPUSH_DRVRASSCSYSBTNPUSH_SELECTAUTOMATICPARKING = 1;
    DRVRASSCSYSBTNPUSH_DRVRASSCSYSBTNPUSH_SELECTREMOTEPARKING = 2;
    DRVRASSCSYSBTNPUSH_DRVRASSCSYSBTNPUSH_UNDOBUTTON = 3;
    DRVRASSCSYSBTNPUSH_DRVRASSCSYSBTNPUSH_STARTPARKING = 4;
    DRVRASSCSYSBTNPUSH_DRVRASSCSYSBTNPUSH_EXITAPA = 5;
    DRVRASSCSYSBTNPUSH_DRVRASSCSYSBTNPUSH_ENTERAPAORAVM = 6;
    DRVRASSCSYSBTNPUSH_DRVRASSCSYSBTNPUSH_MANUALBUTTON = 7;
    DRVRASSCSYSBTNPUSH_DRVRASSCSYSBTNPUSH_CONFIRMBUTTON = 8;
    DRVRASSCSYSBTNPUSH_DRVRASSCSYSBTNPUSH_ENTERAPA = 9;
    DRVRASSCSYSBTNPUSH_DRVRASSCSYSBTNPUSH_CONFIRMPARKOUT = 10;
    DRVRASSCSYSBTNPUSH_DRVRASSCSYSBTNPUSH_SUSPEND = 11;
    DRVRASSCSYSBTNPUSH_DRVRASSCSYSBTNPUSH_ABORT = 12;
    DRVRASSCSYSBTNPUSH_DRVRASSCSYSBTNPUSH_SELECTREMOTPARKBYVOIC = 13;
  }
  enum FogSetReReqType {
    FOGSETREREQ_ONOFFNOREQ_NOREQ = 0;
    FOGSETREREQ_ONOFFNOREQ_ON = 1;
    FOGSETREREQ_ONOFFNOREQ_OFF = 2;
  }
  enum GNSSSolution1SatltPosnStsPrm1Type {
    GNSSSOLUTION1SATLTPOSNSTSPRM1_SATLTPOSNSTS_POSNSTSOFLVL1 = 0;
    GNSSSOLUTION1SATLTPOSNSTSPRM1_SATLTPOSNSTS_POSNSTSOFLVL2 = 1;
    GNSSSOLUTION1SATLTPOSNSTSPRM1_SATLTPOSNSTS_POSNSTSOFLVL3 = 2;
    GNSSSOLUTION1SATLTPOSNSTSPRM1_SATLTPOSNSTS_POSNSTSOFLVL4 = 3;
  }
  enum HandsOnDetectionMultiZoneErrorStatusType {
    HANDSONDETECTIONMULTIZONEERRORSTATUS_ERRORSTS_INIT_DIAG = 0;
    HANDSONDETECTIONMULTIZONEERRORSTATUS_ERRORSTS_RESERVED1 = 1;
    HANDSONDETECTIONMULTIZONEERRORSTATUS_ERRORSTS_HOSWD_READY = 2;
    HANDSONDETECTIONMULTIZONEERRORSTATUS_ERRORSTS_HOSWD_CUFAULT = 3;
    HANDSONDETECTIONMULTIZONEERRORSTATUS_ERRORSTS_HOSWD_SMFAULT = 4;
    HANDSONDETECTIONMULTIZONEERRORSTATUS_ERRORSTS_HOSWD_SVFAULT = 5;
    HANDSONDETECTIONMULTIZONEERRORSTATUS_ERRORSTS_RESERVED2 = 6;
    HANDSONDETECTIONMULTIZONEERRORSTATUS_ERRORSTS_RESERVED3 = 7;
  }
  enum HandsOnDetectionMultiZoneHandsOnStatusType {
    HANDSONDETECTIONMULTIZONEHANDSONSTATUS_HANDSONSTS2_INITCLASS = 0;
    HANDSONDETECTIONMULTIZONEHANDSONSTATUS_HANDSONSTS2_GRASP = 1;
    HANDSONDETECTIONMULTIZONEHANDSONSTATUS_HANDSONSTS2_TOUCH = 2;
    HANDSONDETECTIONMULTIZONEHANDSONSTATUS_HANDSONSTS2_FREE = 3;
    HANDSONDETECTIONMULTIZONEHANDSONSTATUS_HANDSONSTS2_UNDETERMINEDCLASS = 4;
    HANDSONDETECTIONMULTIZONEHANDSONSTATUS_HANDSONSTS2_RESERVED1 = 5;
    HANDSONDETECTIONMULTIZONEHANDSONSTATUS_HANDSONSTS2_RESERVED2 = 6;
    HANDSONDETECTIONMULTIZONEHANDSONSTATUS_HANDSONSTS2_RESERVED3 = 7;
  }
  enum HmiAirDistbnRow1Type {
    HMIAIRDISTBNROW1_HMICMPTMTAIRDISTBNFRNT_FLR = 0;
    HMIAIRDISTBNROW1_HMICMPTMTAIRDISTBNFRNT_VENT = 1;
    HMIAIRDISTBNROW1_HMICMPTMTAIRDISTBNFRNT_DEFRST = 2;
    HMIAIRDISTBNROW1_HMICMPTMTAIRDISTBNFRNT_FLRDEFRST = 3;
    HMIAIRDISTBNROW1_HMICMPTMTAIRDISTBNFRNT_FLRVENT = 4;
    HMIAIRDISTBNROW1_HMICMPTMTAIRDISTBNFRNT_VENTDEFRST = 5;
    HMIAIRDISTBNROW1_HMICMPTMTAIRDISTBNFRNT_FLRVENTDEFRST = 6;
    HMIAIRDISTBNROW1_HMICMPTMTAIRDISTBNFRNT_AUT = 7;
  }
  enum HmiThemeModReqType {
    HMITHEMEMODREQ_THEMEMOD_NIGHT = 0;
    HMITHEMEMODREQ_THEMEMOD_DAY = 1;
    HMITHEMEMODREQ_THEMEMOD_AUTO = 2;
    HMITHEMEMODREQ_THEMEMOD_RESERVE = 3;
  }
  enum LoSpdDrvgAssiSwtType {
    LOSPDDRVGASSISWT_ASSISWT_NOREQ = 0;
    LOSPDDRVGASSISWT_ASSISWT_ENTER = 1;
    LOSPDDRVGASSISWT_ASSISWT_EXIT = 2;
  }
  enum MapBuildStsType {
    MAPBUILDSTS_MAPBUILDSTS_DEFAULT = 0;
    MAPBUILDSTS_MAPBUILDSTS_STORSUCCEED = 1;
    MAPBUILDSTS_MAPBUILDSTS_STORFAIL = 2;
    MAPBUILDSTS_MAPBUILDSTS_STORSUCDADBULDSUCD = 3;
    MAPBUILDSTS_MAPBUILDSTS_STORSUCDADBULDFAIL = 4;
  }
  enum PrkgFctSwtType {
    PRKGFCTSWT_SWTREQ2_NOREQ = 0;
    PRKGFCTSWT_SWTREQ2_AUTOMATICPARKINGBUTTONINAVM = 1;
    PRKGFCTSWT_SWTREQ2_VISUALPARKBUTTONINAPA = 2;
  }
  enum PrkgFrntOrReSelectType {
    PRKGFRNTORRESELECT_NONE = 0;
    PRKGFRNTORRESELECT_FRNT = 1;
    PRKGFRNTORRESELECT_REAR = 2;
    PRKGFRNTORRESELECT_BOTH = 3;
  }
  enum ScenarioModType {
    SCENARIOMOD_SCENEMOD_IDLE = 0;
    SCENARIOMOD_SCENEMOD_CHILDRENMOD = 1;
    SCENARIOMOD_SCENEMOD_REFRESHMOD = 2;
    SCENARIOMOD_SCENEMOD_THEATERMOD = 3;
    SCENARIOMOD_SCENEMOD_RESTMOD = 4;
    SCENARIOMOD_SCENEMOD_CONCERTHALLMOD = 5;
    SCENARIOMOD_SCENEMOD_CARWASHMOD = 6;
    SCENARIOMOD_SCENEMOD_SMOKINGMOD = 7;
    SCENARIOMOD_SCENEMOD_ROMANTICMOD = 8;
    SCENARIOMOD_SCENEMOD_MEDITATIONMOD = 9;
    SCENARIOMOD_SCENEMOD_SINGMOD = 10;
    SCENARIOMOD_SCENEMOD_PETMOD = 11;
    SCENARIOMOD_SCENEMOD_RESERVED1 = 12;
    SCENARIOMOD_SCENEMOD_RESERVED2 = 13;
    SCENARIOMOD_SCENEMOD_RESERVED3 = 14;
    SCENARIOMOD_SCENEMOD_RESERVED4 = 15;
  }
  enum SpplTrfcSgnInfoFromNavMapType {
    SPPLTRFCSGNINFOFROMNAVMAP_SPPLTRFCSGNINFO_OFF = 0;
    SPPLTRFCSGNINFOFROMNAVMAP_SPPLTRFCSGNINFO_LEFT = 1;
    SPPLTRFCSGNINFOFROMNAVMAP_SPPLTRFCSGNINFO_RIGHT = 2;
    SPPLTRFCSGNINFOFROMNAVMAP_SPPLTRFCSGNINFO_RAIN = 3;
    SPPLTRFCSGNINFOFROMNAVMAP_SPPLTRFCSGNINFO_SNOW = 4;
    SPPLTRFCSGNINFOFROMNAVMAP_SPPLTRFCSGNINFO_SNOWANDRAIN = 5;
    SPPLTRFCSGNINFOFROMNAVMAP_SPPLTRFCSGNINFO_WET = 6;
    SPPLTRFCSGNINFOFROMNAVMAP_SPPLTRFCSGNINFO_ICE = 7;
    SPPLTRFCSGNINFOFROMNAVMAP_SPPLTRFCSGNINFO_TRAILER = 8;
    SPPLTRFCSGNINFOFROMNAVMAP_SPPLTRFCSGNINFO_ZONE = 9;
    SPPLTRFCSGNINFOFROMNAVMAP_SPPLTRFCSGNINFO_TIMELIMIT = 10;
    SPPLTRFCSGNINFOFROMNAVMAP_SPPLTRFCSGNINFO_DISTANCETO = 11;
    SPPLTRFCSGNINFOFROMNAVMAP_SPPLTRFCSGNINFO_DISTANCEDURING = 12;
    SPPLTRFCSGNINFOFROMNAVMAP_SPPLTRFCSGNINFO_SCHOOLAREA = 13;
    SPPLTRFCSGNINFOFROMNAVMAP_SPPLTRFCSGNINFO_FOG = 14;
    SPPLTRFCSGNINFOFROMNAVMAP_SPPLTRFCSGNINFO_NIGHT = 15;
    SPPLTRFCSGNINFOFROMNAVMAP_SPPLTRFCSGNINFO_RAMP = 16;
    SPPLTRFCSGNINFOFROMNAVMAP_SPPLTRFCSGNINFO_GENERALSUPPLEMENTARYSIGN = 17;
    SPPLTRFCSGNINFOFROMNAVMAP_SPPLTRFCSGNINFO_END = 18;
  }
  enum TrackingBackAssiSwtType {
    TRACKINGBACKASSISWT_ASSISWT_NOREQ = 0;
    TRACKINGBACKASSISWT_ASSISWT_ENTER = 1;
    TRACKINGBACKASSISWT_ASSISWT_EXIT = 2;
  }
  // description The response for notification of the time of user parking is too much. [] [0|3] [initial_value:0]
  optional ActvtPrkgPushRespType actvt_prkg_push_resp = 1;
  // [] [0|1] [initial_value:None]
  optional bool actvt_prkg_push_resp_ub = 2;
  // description  Ultra Battery Saver Mode Linkling  ADCU [] [0|1] [initial_value:0]
  optional bool adcu_max_ev_mod = 3;
  // [] [0|1] [initial_value:None]
  optional bool adcu_max_ev_mod_ub = 4;
  // description After the BLE module and mobile phone verification is completed, the BLE module provides Bluetooth connection status. [] [0|1] [initial_value:0]
  optional bool ble_con_sts = 5;
  // [] [0|1] [initial_value:None]
  optional bool ble_con_sts_ub = 6;
  // description Self select parking lot switch [] [0|7] [initial_value:0]
  optional CustomPrkgLotSwtType custom_prkg_lot_swt = 7;
  // [] [0|1] [initial_value:None]
  optional bool custom_prkg_lot_swt_ub = 8;
  // description Indicate the digital video recorder work status [] [0|7] [initial_value:0]
  optional DigVideoRecStsType dig_video_rec_sts = 9;
  // [] [0|1] [initial_value:None]
  optional bool dig_video_rec_sts_ub = 10;
  // description The signal from PAS to IHU requesting video stream clipping [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 disp_interface_chg_req = 11;
  // [] [0|1] [initial_value:None]
  optional bool disp_interface_chg_req_ub = 12;
  // description APA button requirement [] [0|15] [initial_value:0]
  optional DrvrAsscSysBtnPushType drvr_assc_sys_btn_push = 13;
  // [] [0|1] [initial_value:None]
  optional bool drvr_assc_sys_btn_push_ub = 14;
  // description turn on or turn off rear fog light [] [0|3] [initial_value:0]
  optional FogSetReReqType fog_set_re_req = 15;
  // [] [0|1] [initial_value:None]
  optional bool fog_set_re_req_ub = 16;
  // [] [0|1] [initial_value:None]
  optional bool gnss_solution1_ub = 17;
  // description Counter [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 gnss_solution1_cntr = 18;
  // description Number of GPS satellites used for positioning [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 gnss_solution1_no_of_sat_it_for_sys_no1 = 19;
  // description Number of GLONASS satellites used for positioning [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 gnss_solution1_no_of_sat_it_for_sys_no2 = 20;
  // description Number of Galileo satellites used for positioning [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 gnss_solution1_no_of_sat_it_for_sys_no3 = 21;
  // description Number of SBAS satellites used for positioning [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 gnss_solution1_no_of_sat_it_for_sys_no4 = 22;
  // description Number of QZSS L1 satellites used for positioning [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 gnss_solution1_no_of_sat_it_for_sys_no5 = 23;
  // description Number of QZSS L1-SAIF satellites used for positioning [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 gnss_solution1_no_of_sat_it_for_sys_no6 = 24;
  // description Number of BeiDou satellites used for positioning [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 gnss_solution1_no_of_sat_it_for_sys_no7 = 25;
  // description GPS used for positioning [] [0|1] [initial_value:0]
  optional bool gnss_solution1_sat_it_sys_no1_in_use = 26;
  // description GLONASS used for positioning [] [0|1] [initial_value:0]
  optional bool gnss_solution1_sat_it_sys_no2_in_use = 27;
  // description Galileo used for positioning [] [0|1] [initial_value:0]
  optional bool gnss_solution1_sat_it_sys_no3_in_use = 28;
  // description SBAS used for positioning [] [0|1] [initial_value:0]
  optional bool gnss_solution1_sat_it_sys_no4_in_use = 29;
  // description QZSS L1 used for positioning [] [0|1] [initial_value:0]
  optional bool gnss_solution1_sat_it_sys_no5_in_use = 30;
  // description QZSS L1-SAIF used for positioning [] [0|1] [initial_value:0]
  optional bool gnss_solution1_sat_it_sys_no6_in_use = 31;
  // description BeiDou used for positioning [] [0|1] [initial_value:0]
  optional bool gnss_solution1_sat_it_sys_no7_in_use = 32;
  // description Navigation solution status [] [0|3] [initial_value:0]
  optional GNSSSolution1SatltPosnStsPrm1Type gnss_solution1_satlt_posn_sts_prm1 = 33;
  // description DGPS usage in solution [] [0|1] [initial_value:0]
  optional bool gnss_solution1_satlt_posn_sts_prm2 = 34;
  // [] [0|1] [initial_value:None]
  optional bool gnss_solution2_ub = 35;
  // description Counter  [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 gnss_solution2_cntr = 36;
  // description Horizontal Dilution Of Precision [Unitless] [0.0|25.5] [initial_value:0]
  optional double gnss_solution2_pre_hozl_dil = 37;
  // description Position Dilution Of Precision [Unitless] [0.0|25.5] [initial_value:0]
  optional double gnss_solution2_pre_posn_dil = 38;
  // description Vertical Dilution Of Precision [Unitless] [0.0|25.5] [initial_value:0]
  optional double gnss_solution2_pre_vert_dil = 39;
  // [] [0|1] [initial_value:None]
  optional bool hands_on_detection_multi_zone_ub = 40;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 hands_on_detection_multi_zone_chks = 41;
  // description couter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 hands_on_detection_multi_zone_cntr = 42;
  // description ErrorStaus [] [0|7] [initial_value:0]
  optional HandsOnDetectionMultiZoneErrorStatusType hands_on_detection_multi_zone_error_status = 43;
  // description  HandsOnStatus [] [0|7] [initial_value:0]
  optional HandsOnDetectionMultiZoneHandsOnStatusType hands_on_detection_multi_zone_hands_on_status = 44;
  // [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 hands_on_detection_multi_zone_touch_intensity1 = 45;
  // [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 hands_on_detection_multi_zone_touch_intensity2 = 46;
  // [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 hands_on_detection_multi_zone_touch_intensity3 = 47;
  // description Hmi Air Distribution Row 1 [] [0|7] [initial_value:0]
  optional HmiAirDistbnRow1Type hmi_air_distbn_row1 = 48;
  // [] [0|1] [initial_value:None]
  optional bool hmi_air_distbn_row1_ub = 49;
  // description Day/night/Auto mode setting request [] [0|3] [initial_value:2]
  optional HmiThemeModReqType hmi_theme_mod_req = 50;
  // [] [0|1] [initial_value:None]
  optional bool hmi_theme_mod_req_ub = 51;
  // description LSDA function switchs [] [0|15] [initial_value:0]
  optional LoSpdDrvgAssiSwtType lo_spd_drvg_assi_swt = 52;
  // [] [0|1] [initial_value:None]
  optional bool lo_spd_drvg_assi_swt_ub = 53;
  // description User set whether approve push LSDA on APA [] [0|1] [initial_value:0]
  optional bool lsda_notif_push_req = 54;
  // [] [0|1] [initial_value:None]
  optional bool lsda_notif_push_req_ub = 55;
  // description MAI function setting switch [] [0|1] [initial_value:0]
  optional bool mai_setting = 56;
  // [] [0|1] [initial_value:None]
  optional bool mai_setting_ub = 57;
  // description indicate the status of route generating [] [0|7] [initial_value:0]
  optional MapBuildStsType map_build_sts = 58;
  // [] [0|1] [initial_value:None]
  optional bool map_build_sts_ub = 59;
  // description MobDevDistSts - Key Distance status [cm] [0.0|1023.0] [initial_value:1023]
  optional uint32 mob_dev_dist_sts1 = 60;
  // [] [0|1] [initial_value:None]
  optional bool mob_dev_dist_sts1_ub = 61;
  // [] [0|1] [initial_value:None]
  optional bool posn_from_satlt1_ub = 62;
  // description Counter  [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 posn_from_satlt1_cntr = 63;
  // description Latitude [Deg] [-90.000072|90.000072] [initial_value:323999740]
  optional double posn_from_satlt1_posn_lat = 64;
  // description Longitude [Deg] [-180.000144|180.000144] [initial_value:647999481]
  optional double posn_from_satlt1_posn_lgt = 65;
  // description Switch parking functions [] [0|3] [initial_value:0]
  optional PrkgFctSwtType prkg_fct_swt = 66;
  // [] [0|1] [initial_value:None]
  optional bool prkg_fct_swt_ub = 67;
  // description user select front or rear on LSDA/TBA [] [0|3] [initial_value:0]
  optional PrkgFrntOrReSelectType prkg_frnt_or_re_select = 68;
  // [] [0|1] [initial_value:None]
  optional bool prkg_frnt_or_re_select_ub = 69;
  // description Vertical head parking switch. [] [0|3] [initial_value:0]
  optional uint32 prkg_in_dir_swt = 70;
  // [] [0|1] [initial_value:None]
  optional bool prkg_in_dir_swt_ub = 71;
  // description RPA self-searching request [] [0|1] [initial_value:0]
  optional bool rem_prkg_self_search_req = 72;
  // [] [0|1] [initial_value:None]
  optional bool rem_prkg_self_search_req_ub = 73;
  // description set the maximum move distance of RSPA(Remote Straight Parking Assist) [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 rem_straight_prkg_assi_seln_req = 74;
  // [] [0|1] [initial_value:None]
  optional bool rem_straight_prkg_assi_seln_req_ub = 75;
  // description Scenario mode setting, for example rest mdoe, refresh etc. [] [0|15] [initial_value:0]
  optional ScenarioModType scenario_mod = 76;
  // [] [0|1] [initial_value:None]
  optional bool scenario_mod_ub = 77;
  // description Current supplementary traffic sign information from navigation map [] [0|31] [initial_value:0]
  optional SpplTrfcSgnInfoFromNavMapType sppl_trfc_sgn_info_from_nav_map = 78;
  // [] [0|1] [initial_value:None]
  optional bool sppl_trfc_sgn_info_from_nav_map_ub = 79;
  // description IHU request AVM display switch [] [0|1] [initial_value:0]
  optional bool swt_disp_on_and_off_req = 80;
  // [] [0|1] [initial_value:None]
  optional bool swt_disp_on_and_off_req_ub = 81;
  // description TBA function switchs [] [0|15] [initial_value:0]
  optional TrackingBackAssiSwtType tracking_back_assi_swt = 82;
  // [] [0|1] [initial_value:None]
  optional bool tracking_back_assi_swt_ub = 83;
}

message ADCU_ZCUCANFD1_FR20_30A {
// Control Message
  // description CNOA Cruise Available Prompt [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_cnoa_crs_avl_prompt = 1;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_crs_avl_prompt_ub = 2;
  // description CNOA Learning Abort Message [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_cnoa_lrng_abort_msg = 3;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lrng_abort_msg_ub = 4;
  // description Notification warning for unable to start learning route of CNOA Learning function. [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_cnoa_lrng_actv_faild_msg = 5;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lrng_actv_faild_msg_ub = 6;
  // description Notification warning of starting Learning route actived by user for CNOA function. [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_cnoa_lrng_actv_msg = 7;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lrng_actv_msg_ub = 8;
  // description CNOA Learning Animation Status [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_cnoa_lrng_anima_sts = 9;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lrng_anima_sts_ub = 10;
  // description CNOA Learning Complete Message [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_cnoa_lrng_cmpl_msg = 11;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lrng_cmpl_msg_ub = 12;
  // description CNOA Learning Finshed Message [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_cnoa_lrng_finshd_msg = 13;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lrng_finshd_msg_ub = 14;
  // description CNOA Learning Learn Mileage Count Message [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 asy_cnoa_lrng_lrn_milg_cnt_msg = 15;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lrng_lrn_milg_cnt_msg_ub = 16;
  // description Notification warning for CNOA Learned kilometers. [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_cnoa_lrng_lrn_milg_msg = 17;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lrng_lrn_milg_msg_ub = 18;
  // description CNOA Learning Remain Surplus Distance [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 asy_cnoa_lrng_remain_distan = 19;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lrng_remain_distan_ub = 20;
  // description CNOA Learning Status [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_cnoa_lrng_sts = 21;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lrng_sts_ub = 22;
  // description Notification warning for CNOA Learning Route status. [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_cnoa_lrng_sts_msg = 23;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lrng_sts_msg_ub = 24;
  // description CNOA Learning Suspend Message [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_cnoa_lrng_suspend_msg = 25;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lrng_suspend_msg_ub = 26;
  // description The indicator reminder when the cruise functions are switchable, include HWA, NOA, CNOA, UNOA. [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_crs_sts_swil_indcr = 27;
  // [] [0|1] [initial_value:None]
  optional bool asy_crs_sts_swil_indcr_ub = 28;
  // description Voice reminder D2D function is available [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 asy_d2_d_avl_rmn_sod = 29;
  // [] [0|1] [initial_value:None]
  optional bool asy_d2_d_avl_rmn_sod_ub = 30;
  // description Voice reminder D2D function cannot be activated and why [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_d2_d_deactvd_reasn_sod = 31;
  // [] [0|1] [initial_value:None]
  optional bool asy_d2_d_deactvd_reasn_sod_ub = 32;
  // description Voice reminder D2D functional boundaries are about to be reached [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_d2_d_distan_sod = 33;
  // [] [0|1] [initial_value:None]
  optional bool asy_d2_d_distan_sod_ub = 34;
  // description Voice reminder D2D function is arriving at the toll station [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_d2_d_etc_distan_sod = 35;
  // [] [0|1] [initial_value:None]
  optional bool asy_d2_d_etc_distan_sod_ub = 36;
  // description Voice reminder D2D function is about to change lanes due to traffic ahead [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_d2_d_remind_sod = 37;
  // [] [0|1] [initial_value:None]
  optional bool asy_d2_d_remind_sod_ub = 38;
  // description Voice reminder D2D functions parking out and parking in [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 asy_d2_d_strt_to_end_sod = 39;
  // [] [0|1] [initial_value:None]
  optional bool asy_d2_d_strt_to_end_sod_ub = 40;
  // description Path Integrity [Unitless] [0.0|1023.0] [initial_value:0]
  optional uint32 asy_pah_intgrty = 41;
  // [] [0|1] [initial_value:None]
  optional bool asy_pah_intgrty_ub = 42;
  // description Controller malfunction [] [0|1] [initial_value:0]
  optional bool controller_fault = 43;
  // [] [0|1] [initial_value:None]
  optional bool controller_fault_ub = 44;
  // description ISA request VMM change [] [0|1] [initial_value:0]
  optional bool isa_req_vm_mchg = 45;
  // [] [0|1] [initial_value:None]
  optional bool isa_req_vm_mchg_ub = 46;
  // [] [0|1] [initial_value:0]
  optional bool rvm_req_vm_mchg = 47;
  // [] [0|1] [initial_value:None]
  optional bool rvm_req_vm_mchg_ub = 48;
  // description D2DRoutePushButton [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 d2_d_route_push_button = 49;
  // [] [0|1] [initial_value:None]
  optional bool d2_d_route_push_button_ub = 50;
}

message PASZCUCANFD1_FR18_310 {
// Control Message
  // description PAS request VMM to remain in drive mode [] [0|1] [initial_value:0]
  optional bool prkg_fct_vmm_mod_req = 1;
  // [] [0|1] [initial_value:None]
  optional bool prkg_fct_vmm_mod_req_ub = 2;
}

message PASZCUCANFD1_FR02_311 {
// Control Message
  enum LSDAArrowStsFrntType {
    LSDAARROWSTSFRNT_ACTVNAVL4_IDLE = 0;
    LSDAARROWSTSFRNT_ACTVNAVL4_ACTVN = 1;
    LSDAARROWSTSFRNT_ACTVNAVL4_DEACTVN = 2;
    LSDAARROWSTSFRNT_ACTVNAVL4_RECOMMAND = 3;
  }
  enum LSDAArrowStsReType {
    LSDAARROWSTSRE_ACTVNAVL4_IDLE = 0;
    LSDAARROWSTSRE_ACTVNAVL4_ACTVN = 1;
    LSDAARROWSTSRE_ACTVNAVL4_DEACTVN = 2;
    LSDAARROWSTSRE_ACTVNAVL4_RECOMMAND = 3;
  }
  enum NoRsdtBtnStsContPrkgType {
    NORSDTBTNSTSCONTPRKG_ACTVNAVL4_IDLE = 0;
    NORSDTBTNSTSCONTPRKG_ACTVNAVL4_ACTVN = 1;
    NORSDTBTNSTSCONTPRKG_ACTVNAVL4_DEACTVN = 2;
    NORSDTBTNSTSCONTPRKG_ACTVNAVL4_RECOMMAND = 3;
  }
  enum NoRsdtBtnStsPrkgInType {
    NORSDTBTNSTSPRKGIN_ACTVNAVL4_IDLE = 0;
    NORSDTBTNSTSPRKGIN_ACTVNAVL4_ACTVN = 1;
    NORSDTBTNSTSPRKGIN_ACTVNAVL4_DEACTVN = 2;
    NORSDTBTNSTSPRKGIN_ACTVNAVL4_RECOMMAND = 3;
  }
  enum NoRsdtBtnStsPrkgOutType {
    NORSDTBTNSTSPRKGOUT_ACTVNAVL4_IDLE = 0;
    NORSDTBTNSTSPRKGOUT_ACTVNAVL4_ACTVN = 1;
    NORSDTBTNSTSPRKGOUT_ACTVNAVL4_DEACTVN = 2;
    NORSDTBTNSTSPRKGOUT_ACTVNAVL4_RECOMMAND = 3;
  }
  enum NoRsdtBtnStsRemCtrlPrkgType {
    NORSDTBTNSTSREMCTRLPRKG_ACTVNAVL4_IDLE = 0;
    NORSDTBTNSTSREMCTRLPRKG_ACTVNAVL4_ACTVN = 1;
    NORSDTBTNSTSREMCTRLPRKG_ACTVNAVL4_DEACTVN = 2;
    NORSDTBTNSTSREMCTRLPRKG_ACTVNAVL4_RECOMMAND = 3;
  }
  enum NoRsdtBtnStsRetToOrgType {
    NORSDTBTNSTSRETTOORG_ACTVNAVL4_IDLE = 0;
    NORSDTBTNSTSRETTOORG_ACTVNAVL4_ACTVN = 1;
    NORSDTBTNSTSRETTOORG_ACTVNAVL4_DEACTVN = 2;
    NORSDTBTNSTSRETTOORG_ACTVNAVL4_RECOMMAND = 3;
  }
  // description The forward arrow shows the status signal [] [0|3] [initial_value:0]
  optional LSDAArrowStsFrntType lsda_arrow_sts_frnt = 1;
  // [] [0|1] [initial_value:None]
  optional bool lsda_arrow_sts_frnt_ub = 2;
  // description The backward arrow shows the status signal [] [0|3] [initial_value:0]
  optional LSDAArrowStsReType lsda_arrow_sts_re = 3;
  // [] [0|1] [initial_value:None]
  optional bool lsda_arrow_sts_re_ub = 4;
  // description LSDA continue exploring the button display [] [0|1] [initial_value:0]
  optional bool lsda_cont_eplg_btn_disp = 5;
  // [] [0|1] [initial_value:None]
  optional bool lsda_cont_eplg_btn_disp_ub = 6;
  // description Low speed exploration distance traveled signal (unit :m) [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 lsda_drvr_dst = 7;
  // [] [0|1] [initial_value:None]
  optional bool lsda_drvr_dst_ub = 8;
  // description LSDA function unavailable [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 lsda_fct_di_disp = 9;
  // [] [0|1] [initial_value:None]
  optional bool lsda_fct_di_disp_ub = 10;
  // description HMI prompt after LSDA function is enabled [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 lsda_fct_enad_disp = 11;
  // [] [0|1] [initial_value:None]
  optional bool lsda_fct_enad_disp_ub = 12;
  // description a signal to HMI to display guide information [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 lsda_info_disp = 13;
  // [] [0|1] [initial_value:None]
  optional bool lsda_info_disp_ub = 14;
  // description Low speed exploration obstacle avoidance times signal (unit: times) [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 lsda_obs_avoid_num = 15;
  // [] [0|1] [initial_value:None]
  optional bool lsda_obs_avoid_num_ub = 16;
  // [] [0|1] [initial_value:None]
  optional bool no_rsdt_btn_sts_ub = 17;
  // description Continue parking button status [] [0|3] [initial_value:0]
  optional NoRsdtBtnStsContPrkgType no_rsdt_btn_sts_cont_prkg = 18;
  // description parking in button status [] [0|3] [initial_value:0]
  optional NoRsdtBtnStsPrkgInType no_rsdt_btn_sts_prkg_in = 19;
  // description parking out button status [] [0|3] [initial_value:0]
  optional NoRsdtBtnStsPrkgOutType no_rsdt_btn_sts_prkg_out = 20;
  // description Remote control parking button status [] [0|3] [initial_value:0]
  optional NoRsdtBtnStsRemCtrlPrkgType no_rsdt_btn_sts_rem_ctrl_prkg = 21;
  // description Return to origin button status [] [0|3] [initial_value:0]
  optional NoRsdtBtnStsRetToOrgType no_rsdt_btn_sts_ret_to_org = 22;
  // description TBA function unavailable [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 tba_fct_di_disp = 23;
  // [] [0|1] [initial_value:None]
  optional bool tba_fct_di_disp_ub = 24;
  // description HMI prompt after TBA function is enabled [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 tba_fct_enad_disp = 25;
  // [] [0|1] [initial_value:None]
  optional bool tba_fct_enad_disp_ub = 26;
  // description a signal to HMI to display guide information [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 tba_info_disp = 27;
  // [] [0|1] [initial_value:None]
  optional bool tba_info_disp_ub = 28;
  // [] [0|1] [initial_value:None]
  optional bool val_prkg_mapinf_disp0_ub = 29;
  // description MAP ID [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 val_prkg_mapinf_disp0_map_id = 30;
  // description MAP OutdRemainingDst [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 val_prkg_mapinf_disp0_map_outd_remaining_dst = 31;
  // description MAP State [] [0|1] [initial_value:0]
  optional bool val_prkg_mapinf_disp0_map_state = 32;
  // description MAP Used [] [0|1] [initial_value:0]
  optional bool val_prkg_mapinf_disp0_map_used = 33;
  // [] [0|1] [initial_value:None]
  optional bool val_prkg_mapinf_disp1_ub = 34;
  // description MAP ID [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 val_prkg_mapinf_disp1_map_id = 35;
  // description MAP OutdRemainingDst [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 val_prkg_mapinf_disp1_map_outd_remaining_dst = 36;
  // description MAP State [] [0|1] [initial_value:0]
  optional bool val_prkg_mapinf_disp1_map_state = 37;
  // description MAP Used [] [0|1] [initial_value:0]
  optional bool val_prkg_mapinf_disp1_map_used = 38;
  // [] [0|1] [initial_value:None]
  optional bool val_prkg_mapinf_disp2_ub = 39;
  // description MAP ID [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 val_prkg_mapinf_disp2_map_id = 40;
  // description MAP OutdRemainingDst [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 val_prkg_mapinf_disp2_map_outd_remaining_dst = 41;
  // description MAP State [] [0|1] [initial_value:0]
  optional bool val_prkg_mapinf_disp2_map_state = 42;
  // description MAP Used [] [0|1] [initial_value:0]
  optional bool val_prkg_mapinf_disp2_map_used = 43;
  // [] [0|1] [initial_value:None]
  optional bool val_prkg_mapinf_disp3_ub = 44;
  // description MAP ID [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 val_prkg_mapinf_disp3_map_id = 45;
  // description MAP OutdRemainingDst [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 val_prkg_mapinf_disp3_map_outd_remaining_dst = 46;
  // description MAP State [] [0|1] [initial_value:0]
  optional bool val_prkg_mapinf_disp3_map_state = 47;
  // description MAP Used [] [0|1] [initial_value:0]
  optional bool val_prkg_mapinf_disp3_map_used = 48;
  // [] [0|1] [initial_value:None]
  optional bool val_prkg_mapinf_disp4_ub = 49;
  // description MAP ID [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 val_prkg_mapinf_disp4_map_id = 50;
  // description MAP OutdRemainingDst [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 val_prkg_mapinf_disp4_map_outd_remaining_dst = 51;
  // description MAP State [] [0|1] [initial_value:0]
  optional bool val_prkg_mapinf_disp4_map_state = 52;
  // description MAP Used [] [0|1] [initial_value:0]
  optional bool val_prkg_mapinf_disp4_map_used = 53;
}

message IHU_HUD_ZCUCANFD1_FR02_318 {
// Report Message
  enum TrafficLightInfoCrossManeuverIdType {
    TRAFFICLIGHTINFOCROSSMANEUVERID_CROSSMANEUVERID_IDLE = 0;
    TRAFFICLIGHTINFOCROSSMANEUVERID_CROSSMANEUVERID_LEFTTURN = 1;
    TRAFFICLIGHTINFOCROSSMANEUVERID_CROSSMANEUVERID_RIGHTTURN = 2;
    TRAFFICLIGHTINFOCROSSMANEUVERID_CROSSMANEUVERID_UTURN = 7;
    TRAFFICLIGHTINFOCROSSMANEUVERID_CROSSMANEUVERID_STRAIGHTAHEAD = 8;
  }
  enum TrafficLightInfoTrafficLightStatusType {
    TRAFFICLIGHTINFOTRAFFICLIGHTSTATUS_TRAFFICLIGHTSTATUS_IDLE = 0;
    TRAFFICLIGHTINFOTRAFFICLIGHTSTATUS_TRAFFICLIGHTSTATUS_WAITTING = 1;
    TRAFFICLIGHTINFOTRAFFICLIGHTSTATUS_TRAFFICLIGHTSTATUS_REDLIGHTCOUNTDOWN = 2;
    TRAFFICLIGHTINFOTRAFFICLIGHTSTATUS_TRAFFICLIGHTSTATUS_GREENLIGHTSOON = 3;
    TRAFFICLIGHTINFOTRAFFICLIGHTSTATUS_TRAFFICLIGHTSTATUS_ENTERINGGREENLIGHT = 4;
    TRAFFICLIGHTINFOTRAFFICLIGHTSTATUS_TRAFFICLIGHTSTATUS_GREENLIGHTTRAVERSABLE = 5;
    TRAFFICLIGHTINFOTRAFFICLIGHTSTATUS_TRAFFICLIGHTSTATUS_REDLIGHTSOON = 6;
  }
  // [] [0|1] [initial_value:None]
  optional bool traffic_light_info_ub = 1;
  // description Cross Maneuver Id [] [0|255] [initial_value:0]
  optional TrafficLightInfoCrossManeuverIdType traffic_light_info_cross_maneuver_id = 2;
  // description Light Count Down [s] [0.0|255.0] [initial_value:0]
  optional uint32 traffic_light_info_light_count_down = 3;
  // description Traffic Light Status [] [0|255] [initial_value:0]
  optional TrafficLightInfoTrafficLightStatusType traffic_light_info_traffic_light_status = 4;
  // description Wait Round Count [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 traffic_light_info_wait_round_count = 5;
}

message PASZCUCANFD1_FR05_335 {
// Control Message
  enum MirrOpenClsReqType {
    MIRROPENCLSREQ_MIRRFOLDCMDTYP_IDLE = 0;
    MIRROPENCLSREQ_MIRRFOLDCMDTYP_FOLDIN = 1;
    MIRROPENCLSREQ_MIRRFOLDCMDTYP_FOLDOUT = 2;
  }
  enum PrkgFctDiDispType {
    PRKGFCTDIDISP_PRKGFCTDIDISP_SYSTEMISNORMAL = 0;
    PRKGFCTDIDISP_PRKGFCTDIDISP_PASSYSTEMFAILURE_PARKINGTRIGGERDISABLE = 1;
    PRKGFCTDIDISP_PRKGFCTDIDISP_FUNCTIONCONFLICTPARKINGDISABLE = 2;
    PRKGFCTDIDISP_PRKGFCTDIDISP_OVERSPEED_PARKINGTRIGGERDISABLE = 3;
    PRKGFCTDIDISP_PRKGFCTDIDISP_HEAVYRAINPARKINGDISABLE = 4;
    PRKGFCTDIDISP_PRKGFCTDIDISP_GRADIENTOVERRANGEPARKINGDISABLE = 5;
    PRKGFCTDIDISP_PRKGFCTDIDISP_DISTANCETOOCLOSE_FUNCTIONNOTAVAILABLE = 6;
    PRKGFCTDIDISP_PRKGFCTDIDISP_VEHICLESPEEDISTOOFASTSYSQUITPLEASETAKEOVERTHECAR = 7;
    PRKGFCTDIDISP_PRKGFCTDIDISP_THEPARKINGFUNCTIONISENABLEDAFTERTHEBODYHEIGHTISRESTORED = 8;
    PRKGFCTDIDISP_PRKGFCTDIDISP_RELATEDSYSTEMFAILUREPARKINGDISABLE = 9;
    PRKGFCTDIDISP_PRKGFCTDIDISP_CAMERAFAILUREPARKINGDISABLE = 10;
    PRKGFCTDIDISP_PRKGFCTDIDISP_USSFAILUREPARKINGDISABLE = 11;
    PRKGFCTDIDISP_PRKGFCTDIDISP_USSCOVEPARKINGDISABLE = 12;
    PRKGFCTDIDISP_PRKGFCTDIDISP_CAMERALENSDIRTYPARKINGDISABLE = 13;
    PRKGFCTDIDISP_PRKGFCTDIDISP_TOWBARACTIVEPARKINGDISABLE = 14;
    PRKGFCTDIDISP_PRKGFCTDIDISP_TRAILERACTIVEPARKINGDISABLE = 15;
    PRKGFCTDIDISP_PRKGFCTDIDISP_CARWASHMODEACTIVEPARKINGDISABLE = 16;
    PRKGFCTDIDISP_PRKGFCTDIDISP_ECALLACTIVEPARKINGDISABLE = 17;
    PRKGFCTDIDISP_PRKGFCTDIDISP_ESCOFFPARKINGDISABLE = 18;
    PRKGFCTDIDISP_PRKGFCTDIDISP_NOOBSTACLEINFRONT = 19;
  }
  // description DTC info for big data record [mm] [0.0|8191.0] [initial_value:8191]
  optional uint32 dst_to_cllsn_of_prkg_emgy_brk = 1;
  // [] [0|1] [initial_value:None]
  optional bool dst_to_cllsn_of_prkg_emgy_brk_ub = 2;
  // description Send request to DCU to fold/unfold outside mirror. [] [0|3] [initial_value:0]
  optional MirrOpenClsReqType mirr_open_cls_req = 3;
  // [] [0|1] [initial_value:None]
  optional bool mirr_open_cls_req_ub = 4;
  // [] [0|1] [initial_value:None]
  optional bool mob_dev_rpa_sts_ub = 5;
  // description undo button display on mobile device [] [0|1] [initial_value:0]
  optional bool mob_dev_rpa_sts_on_off1 = 6;
  // description RPA status display on mobile device. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 mob_dev_rpa_sts_u_int8 = 7;
  // description Parking function unavailable [] [0|31] [initial_value:0]
  optional PrkgFctDiDispType prkg_fct_di_disp = 8;
  // [] [0|1] [initial_value:None]
  optional bool prkg_fct_di_disp_ub = 9;
  // description Request for audible warning that the parking manouvre has been terminated [] [0|1] [initial_value:0]
  optional bool prkg_stop_aud_warn_req = 10;
  // [] [0|1] [initial_value:None]
  optional bool prkg_stop_aud_warn_req_ub = 11;
}

message DHU_ZCUCANFD1_FR06_340 {
// Report Message
  enum AutPrkgVoiceTypType {
    AUTPRKGVOICETYP_VOICETYP10_NOREQ = 0;
    AUTPRKGVOICETYP_VOICETYP10_SIMPLE = 1;
    AUTPRKGVOICETYP_VOICETYP10_MIDDLE = 2;
    AUTPRKGVOICETYP_VOICETYP10_COMPLEX = 3;
  }
  enum AutValtPrkgInsBtnReqType {
    AUTVALTPRKGINSBTNREQ_INSBTN_NOREQ = 0;
    AUTVALTPRKGINSBTNREQ_INSBTN_CREATEMAPCONFIRM = 1;
    AUTVALTPRKGINSBTNREQ_INSBTN_CREATEMAPCANCEL = 2;
    AUTVALTPRKGINSBTNREQ_INSBTN_CREATEMAPSUCCESS = 3;
    AUTVALTPRKGINSBTNREQ_INSBTN_SELECTPICKUPPOINT = 4;
  }
  enum AutValtPrkgL1BtnReqType {
    AUTVALTPRKGL1BTNREQ_AUTVALTPRKGL1BTNREQ_DEFAULT = 0;
    AUTVALTPRKGL1BTNREQ_AUTVALTPRKGL1BTNREQ_SETTINGREQ = 1;
    AUTVALTPRKGL1BTNREQ_AUTVALTPRKGL1BTNREQ_EXITREQ = 2;
    AUTVALTPRKGL1BTNREQ_AUTVALTPRKGL1BTNREQ_REACHDESTINATIONREQ = 3;
    AUTVALTPRKGL1BTNREQ_AUTVALTPRKGL1BTNREQ_GLBVIRTVIEWREQ = 4;
    AUTVALTPRKGL1BTNREQ_AUTVALTPRKGL1BTNREQ_PTLVIRTVIEWREQ = 5;
    AUTVALTPRKGL1BTNREQ_AUTVALTPRKGL1BTNREQ_6 = 6;
    AUTVALTPRKGL1BTNREQ_AUTVALTPRKGL1BTNREQ_7 = 7;
    AUTVALTPRKGL1BTNREQ_AUTVALTPRKGL1BTNREQ_8 = 8;
  }
  enum AutValtPrkgL2BtnReqSettingFctPushBtnReqType {
    AUTVALTPRKGL2BTNREQSETTINGFCTPUSHBTNREQ_BTNREQ1_DEFAULT = 0;
    AUTVALTPRKGL2BTNREQSETTINGFCTPUSHBTNREQ_BTNREQ1_OPENREQ = 1;
    AUTVALTPRKGL2BTNREQSETTINGFCTPUSHBTNREQ_BTNREQ1_OFFREQ = 2;
  }
  enum AutValtPrkgL2BtnReqSettingNoSenceBtnReqType {
    AUTVALTPRKGL2BTNREQSETTINGNOSENCEBTNREQ_BTNREQ1_DEFAULT = 0;
    AUTVALTPRKGL2BTNREQSETTINGNOSENCEBTNREQ_BTNREQ1_OPENREQ = 1;
    AUTVALTPRKGL2BTNREQSETTINGNOSENCEBTNREQ_BTNREQ1_OFFREQ = 2;
  }
  enum AutValtPrkgL2BtnReqSettingVoiceBtnReqType {
    AUTVALTPRKGL2BTNREQSETTINGVOICEBTNREQ_SETTINGVOICEBTNREQ_DEFAULT = 0;
    AUTVALTPRKGL2BTNREQSETTINGVOICEBTNREQ_SETTINGVOICEBTNREQ_DETAILMODEREQ = 1;
    AUTVALTPRKGL2BTNREQSETTINGVOICEBTNREQ_SETTINGVOICEBTNREQ_SIMPLEMODEREQ = 2;
    AUTVALTPRKGL2BTNREQSETTINGVOICEBTNREQ_SETTINGVOICEBTNREQ_ALLOFFREQ = 3;
  }
  enum AutValtPrkgL2PopBtnReqType {
    AUTVALTPRKGL2POPBTNREQ_AUTVALTPRKGL2POPBTNREQ_DEFAULT = 0;
    AUTVALTPRKGL2POPBTNREQ_AUTVALTPRKGL2POPBTNREQ_TUTORIALSTRTREQ = 1;
    AUTVALTPRKGL2POPBTNREQ_AUTVALTPRKGL2POPBTNREQ_TUTORIALCNCLREQ = 2;
    AUTVALTPRKGL2POPBTNREQ_AUTVALTPRKGL2POPBTNREQ_RESERVED = 3;
    AUTVALTPRKGL2POPBTNREQ_AUTVALTPRKGL2POPBTNREQ_COVERROUTECNCLREQ = 4;
    AUTVALTPRKGL2POPBTNREQ_AUTVALTPRKGL2POPBTNREQ_NAMEROUTECONFIRMREQ = 5;
    AUTVALTPRKGL2POPBTNREQ_AUTVALTPRKGL2POPBTNREQ_SETTINGFCTREQ = 6;
    AUTVALTPRKGL2POPBTNREQ_AUTVALTPRKGL2POPBTNREQ_SETTINGHELPREQ = 7;
    AUTVALTPRKGL2POPBTNREQ_AUTVALTPRKGL2POPBTNREQ_SETTINGROUTEREQ = 8;
    AUTVALTPRKGL2POPBTNREQ_AUTVALTPRKGL2POPBTNREQ_SETTINGPRKGINROUTEREQ = 9;
    AUTVALTPRKGL2POPBTNREQ_AUTVALTPRKGL2POPBTNREQ_SETTINGPRKGOUTROUTEREQ = 10;
  }
  enum AutValtPrkgMapOperReq2MapType2Type {
    AUTVALTPRKGMAPOPERREQ2MAPTYPE2_MAPTYPE2_DEFAULT = 0;
    AUTVALTPRKGMAPOPERREQ2MAPTYPE2_MAPTYPE2_PRKGINCREATE = 1;
    AUTVALTPRKGMAPOPERREQ2MAPTYPE2_MAPTYPE2_PRKGOUTCREATE = 2;
    AUTVALTPRKGMAPOPERREQ2MAPTYPE2_MAPTYPE2_PRKGCNCLLOCATD = 3;
    AUTVALTPRKGMAPOPERREQ2MAPTYPE2_MAPTYPE2_PRKGINDELETE = 4;
    AUTVALTPRKGMAPOPERREQ2MAPTYPE2_MAPTYPE2_PRKGOUTDELETE = 5;
    AUTVALTPRKGMAPOPERREQ2MAPTYPE2_MAPTYPE2_PRKGINSELECT = 6;
    AUTVALTPRKGMAPOPERREQ2MAPTYPE2_MAPTYPE2_PRKGOUTSELECT = 7;
    AUTVALTPRKGMAPOPERREQ2MAPTYPE2_MAPTYPE2_PRKGINSELECT_NOLONGER = 8;
    AUTVALTPRKGMAPOPERREQ2MAPTYPE2_MAPTYPE2_PRKGOUTSELECT_NOLONGER = 9;
    AUTVALTPRKGMAPOPERREQ2MAPTYPE2_MAPTYPE2_PRKGINCOVER = 10;
    AUTVALTPRKGMAPOPERREQ2MAPTYPE2_MAPTYPE2_PRKGOUTCOVER = 11;
    AUTVALTPRKGMAPOPERREQ2MAPTYPE2_MAPTYPE2_SYNC = 12;
    AUTVALTPRKGMAPOPERREQ2MAPTYPE2_MAPTYPE2_RESERVED1 = 13;
    AUTVALTPRKGMAPOPERREQ2MAPTYPE2_MAPTYPE2_RESERVED2 = 14;
  }
  enum AutValtPrkgMapOperReqMapTypeType {
    AUTVALTPRKGMAPOPERREQMAPTYPE_MAPT_NOREQ = 0;
    AUTVALTPRKGMAPOPERREQMAPTYPE_MAPT_CREATE = 1;
    AUTVALTPRKGMAPOPERREQMAPTYPE_MAPT_SELECT = 2;
    AUTVALTPRKGMAPOPERREQMAPTYPE_MAPT_DELETE = 3;
  }
  enum AutValtPrkgMapOperReqSelectMapType {
    AUTVALTPRKGMAPOPERREQSELECTMAP_SELECTM_NOREQ = 0;
    AUTVALTPRKGMAPOPERREQSELECTMAP_SELECTM_MAPA = 1;
    AUTVALTPRKGMAPOPERREQSELECTMAP_SELECTM_MAPB = 2;
    AUTVALTPRKGMAPOPERREQSELECTMAP_SELECTM_MAPC = 3;
    AUTVALTPRKGMAPOPERREQSELECTMAP_SELECTM_MAPD = 4;
    AUTVALTPRKGMAPOPERREQSELECTMAP_SELECTM_MAPE = 5;
    AUTVALTPRKGMAPOPERREQSELECTMAP_SELECTM_MAPF = 6;
    AUTVALTPRKGMAPOPERREQSELECTMAP_SELECTM_MAPG = 7;
    AUTVALTPRKGMAPOPERREQSELECTMAP_SELECTM_MAPH = 8;
    AUTVALTPRKGMAPOPERREQSELECTMAP_SELECTM_MAPI = 9;
    AUTVALTPRKGMAPOPERREQSELECTMAP_SELECTM_MAPJ = 10;
  }
  enum AutValtPrkgMapSrcReqType {
    AUTVALTPRKGMAPSRCREQ_MAPS_NOREQ = 0;
    AUTVALTPRKGMAPSRCREQ_MAPS_LEARNPARKING = 1;
    AUTVALTPRKGMAPSRCREQ_MAPS_MAPPARKING = 2;
    AUTVALTPRKGMAPSRCREQ_MAPS_CANCEL = 3;
  }
  enum AutValtPrkgMapSyncnMapSyncnType {
    AUTVALTPRKGMAPSYNCNMAPSYNCN_MAPTYPE2_IDLE = 0;
    AUTVALTPRKGMAPSYNCNMAPSYNCN_MAPTYPE2_STARTSYNC = 1;
    AUTVALTPRKGMAPSYNCNMAPSYNCN_MAPTYPE2_CANCELSYNC = 2;
    AUTVALTPRKGMAPSYNCNMAPSYNCN_MAPTYPE2_SYNCFAIL = 3;
    AUTVALTPRKGMAPSYNCNMAPSYNCN_MAPTYPE2_RESERVED = 4;
  }
  enum AutValtPrkgSwtType {
    AUTVALTPRKGSWT_ONOFFNOREQ_NOREQ = 0;
    AUTVALTPRKGSWT_ONOFFNOREQ_ON = 1;
    AUTVALTPRKGSWT_ONOFFNOREQ_OFF = 2;
  }
  enum DrvrAsscWisdomBtnType {
    DRVRASSCWISDOMBTN_DRVRASSCWISDOMBTN_IDLE = 0;
    DRVRASSCWISDOMBTN_DRVRASSCWISDOMBTN_LEFTIN = 1;
    DRVRASSCWISDOMBTN_DRVRASSCWISDOMBTN_RIGHTIN = 2;
    DRVRASSCWISDOMBTN_DRVRASSCWISDOMBTN_MIDDLEIN = 3;
    DRVRASSCWISDOMBTN_DRVRASSCWISDOMBTN_APASUSPENSIONBALL = 4;
  }
  enum NoTouchingForAPAReqType {
    NOTOUCHINGFORAPAREQ_AVAILABLE_DEFAULT = 0;
    NOTOUCHINGFORAPAREQ_AVAILABLE_UNAVAILABLE = 1;
    NOTOUCHINGFORAPAREQ_AVAILABLE_AVAILABLE = 2;
    NOTOUCHINGFORAPAREQ_AVAILABLE_RESERVED = 3;
  }
  enum PrkgSpdReqType {
    PRKGSPDREQ_DEFAULTHOLDINGTORQUE = 0;
    PRKGSPDREQ_LOWSPEEDLEVELTORQUE = 1;
    PRKGSPDREQ_MEDIUMSPEEDLEVELTORQUE = 2;
    PRKGSPDREQ_HIGHSPEEDLEVELTORQUE = 3;
  }
  enum VoiceCtrlPrkType {
    VOICECTRLPRK_REMPRKGWARNSTS_NOREQUEST = 0;
    VOICECTRLPRK_REMPRKGWARNSTS_REQWARNEXTERNALECUFAILURE = 1;
    VOICECTRLPRK_REMPRKGWARNSTS_REQWARNDOOR = 2;
    VOICECTRLPRK_REMPRKGWARNSTS_REQWARNTRUNK = 3;
    VOICECTRLPRK_REMPRKGWARNSTS_REQWARNHOOD = 4;
    VOICECTRLPRK_REMPRKGWARNSTS_REQWARNENGINE = 5;
    VOICECTRLPRK_REMPRKGWARNSTS_REQWARNGEAR = 6;
    VOICECTRLPRK_REMPRKGWARNSTS_REQWARNREMOTEDISTANCE = 7;
    VOICECTRLPRK_REMPRKGWARNSTS_REQWARNREMOTEKEY = 8;
    VOICECTRLPRK_REMPRKGWARNSTS_REQWARNRAMP = 9;
    VOICECTRLPRK_REMPRKGWARNSTS_REQWARNLOCK = 10;
    VOICECTRLPRK_REMPRKGWARNSTS_REQWARNHAZARDWARNINGLIGHT = 11;
    VOICECTRLPRK_REMPRKGWARNSTS_REQWARNPATHUNIMPEDED = 12;
    VOICECTRLPRK_REMPRKGWARNSTS_REQWARNCALLDIALIN = 13;
    VOICECTRLPRK_REMPRKGWARNSTS_REQWARNPOWERLOW = 14;
    VOICECTRLPRK_REMPRKGWARNSTS_REQWARNMIRROR = 15;
  }
  // description Activate APA automatically switch [] [0|1] [initial_value:0]
  optional bool aut_actv_prkg_fct_swt = 1;
  // [] [0|1] [initial_value:None]
  optional bool aut_actv_prkg_fct_swt_ub = 2;
  // description Parking slot id [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 aut_prkg_slot_nr_req = 3;
  // [] [0|1] [initial_value:None]
  optional bool aut_prkg_slot_nr_req_ub = 4;
  // description APA voice control switch [] [0|1] [initial_value:0]
  optional bool aut_prkg_voice_swt = 5;
  // [] [0|1] [initial_value:None]
  optional bool aut_prkg_voice_swt_ub = 6;
  // description APA voice control type [] [0|3] [initial_value:0]
  optional AutPrkgVoiceTypType aut_prkg_voice_typ = 7;
  // [] [0|1] [initial_value:None]
  optional bool aut_prkg_voice_typ_ub = 8;
  // description AVP internal buttons [] [0|7] [initial_value:0]
  optional AutValtPrkgInsBtnReqType aut_valt_prkg_ins_btn_req = 9;
  // [] [0|1] [initial_value:None]
  optional bool aut_valt_prkg_ins_btn_req_ub = 10;
  // description Button pressed request [] [0|15] [initial_value:0]
  optional AutValtPrkgL1BtnReqType aut_valt_prkg_l1_btn_req = 11;
  // [] [0|1] [initial_value:None]
  optional bool aut_valt_prkg_l1_btn_req_ub = 12;
  // [] [0|1] [initial_value:None]
  optional bool aut_valt_prkg_l2_btn_req_ub = 13;
  // description reserve [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 aut_valt_prkg_l2_btn_req_reserved = 14;
  // description auto push map route setting [] [0|3] [initial_value:0]
  optional AutValtPrkgL2BtnReqSettingFctPushBtnReqType aut_valt_prkg_l2_btn_req_setting_fct_push_btn_req = 15;
  // description generate map automatically setting [] [0|3] [initial_value:0]
  optional AutValtPrkgL2BtnReqSettingNoSenceBtnReqType aut_valt_prkg_l2_btn_req_setting_no_sence_btn_req = 16;
  // description voice setting [] [0|3] [initial_value:0]
  optional AutValtPrkgL2BtnReqSettingVoiceBtnReqType aut_valt_prkg_l2_btn_req_setting_voice_btn_req = 17;
  // description Button pressed request for popup [] [0|15] [initial_value:0]
  optional AutValtPrkgL2PopBtnReqType aut_valt_prkg_l2_pop_btn_req = 18;
  // [] [0|1] [initial_value:None]
  optional bool aut_valt_prkg_l2_pop_btn_req_ub = 19;
  // [] [0|1] [initial_value:None]
  optional bool aut_valt_prkg_map_oper_req_ub = 20;
  // [] [0|1] [initial_value:None]
  optional bool aut_valt_prkg_map_oper_req2_ub = 21;
  // [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 aut_valt_prkg_map_oper_req2_map_list1 = 22;
  // [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 aut_valt_prkg_map_oper_req2_map_list2 = 23;
  // [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 aut_valt_prkg_map_oper_req2_map_list3 = 24;
  // description bit0-3 means map ID 96-99 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 aut_valt_prkg_map_oper_req2_map_list4 = 25;
  // description Request action [] [0|15] [initial_value:0]
  optional AutValtPrkgMapOperReq2MapType2Type aut_valt_prkg_map_oper_req2_map_type2 = 26;
  // description Map operation(create/select/delete) [] [0|3] [initial_value:0]
  optional AutValtPrkgMapOperReqMapTypeType aut_valt_prkg_map_oper_req_map_type = 27;
  // description Map operation(create/select/delete) [] [0|15] [initial_value:0]
  optional AutValtPrkgMapOperReqSelectMapType aut_valt_prkg_map_oper_req_select_map = 28;
  // description Map source when create map [] [0|7] [initial_value:0]
  optional AutValtPrkgMapSrcReqType aut_valt_prkg_map_src_req = 29;
  // [] [0|1] [initial_value:None]
  optional bool aut_valt_prkg_map_src_req_ub = 30;
  // [] [0|1] [initial_value:None]
  optional bool aut_valt_prkg_map_syncn_ub = 31;
  // description bit0-31 means map ID 1-32 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 aut_valt_prkg_map_syncn_map_id_list1 = 32;
  // description bit0-31 means map ID 33-64 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 aut_valt_prkg_map_syncn_map_id_list2 = 33;
  // description bit0-31 means map ID 65-96 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 aut_valt_prkg_map_syncn_map_id_list3 = 34;
  // description bit0-31 means map ID 97-100 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 aut_valt_prkg_map_syncn_map_id_list4 = 35;
  // description Map synchronization status [] [0|15] [initial_value:0]
  optional AutValtPrkgMapSyncnMapSyncnType aut_valt_prkg_map_syncn_map_syncn = 36;
  // description AVP open or exit request [] [0|3] [initial_value:0]
  optional AutValtPrkgSwtType aut_valt_prkg_swt = 37;
  // [] [0|1] [initial_value:None]
  optional bool aut_valt_prkg_swt_ub = 38;
  // [] [0|1] [initial_value:None]
  optional bool biased_posn_from_satlt1_ub = 39;
  // description counter [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 biased_posn_from_satlt1_cntr = 40;
  // description Latitude [Deg] [-90.000072|90.000072] [initial_value:323999740]
  optional double biased_posn_from_satlt1_posn_lat = 41;
  // description Longitude [Deg] [-180.000144|180.000144] [initial_value:647999481]
  optional double biased_posn_from_satlt1_posn_lgt = 42;
  // description APA Wisdom parking in button [] [0|7] [initial_value:0]
  optional DrvrAsscWisdomBtnType drvr_assc_wisdom_btn = 43;
  // [] [0|1] [initial_value:None]
  optional bool drvr_assc_wisdom_btn_ub = 44;
  // description HMI MAX EV mode [] [0|1] [initial_value:0]
  optional bool hmi_max_ev_mod = 45;
  // [] [0|1] [initial_value:None]
  optional bool hmi_max_ev_mod_ub = 46;
  // description Indicate the AVM splice status. [] [0|1] [initial_value:0]
  optional bool img_group_sts = 47;
  // [] [0|1] [initial_value:None]
  optional bool img_group_sts_ub = 48;
  // description It describes which state managers that are member of each resource group. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 net_dhu_actvt = 49;
  // [] [0|1] [initial_value:None]
  optional bool net_dhu_actvt_ub = 50;
  // description AVM function request to enter APA function [] [0|3] [initial_value:0]
  optional NoTouchingForAPAReqType no_touching_for_apa_req = 51;
  // [] [0|1] [initial_value:None]
  optional bool no_touching_for_apa_req_ub = 52;
  // [] [0|1] [initial_value:None]
  optional bool posn_from_satlt2_ub = 53;
  // description counter [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 posn_from_satlt2_cntr = 54;
  // description Speed [m/s] [0.0|100.0] [initial_value:0]
  optional double posn_from_satlt2_posn_spdosn = 55;
  // [] [0|1] [initial_value:None]
  optional bool posn_from_satlt3_ub = 56;
  // description counter [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 posn_from_satlt3_cntr = 57;
  // description Altitide from mean sea level [m] [-100.0|6000.0] [initial_value:1000]
  optional double posn_from_satlt3_posn_alti = 58;
  // description Heading from true north [Deg] [0.0|359.99] [initial_value:100]
  optional double posn_from_satlt3_posn_dir = 59;
  // description minute [Mins] [0.0|59.0] [initial_value:0]
  optional double posn_from_satlt3_ti_for_mins = 60;
  // description milliseconds [Unitless] [0.0|1023.0] [initial_value:0]
  optional uint32 posn_from_satlt3_ti_for_msec = 61;
  // description second [s] [0.0|59.0] [initial_value:0]
  optional double posn_from_satlt3_ti_for_sec = 62;
  // description Parking speed setting request [] [0|3] [initial_value:0]
  optional PrkgSpdReqType prkg_spd_req = 63;
  // [] [0|1] [initial_value:None]
  optional bool prkg_spd_req_ub = 64;
  // description voice control parking outside of the car [] [0|15] [initial_value:0]
  optional VoiceCtrlPrkType voice_ctrl_prk = 65;
  // [] [0|1] [initial_value:None]
  optional bool voice_ctrl_prk_ub = 66;
}

message ZCUD_ZCUCANFD1_FR11_345 {
// Report Message
  // [] [0|1] [initial_value:None]
  optional bool ti_and_date_indcn_ub = 1;
  // description Current time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Signal qualifier, No means values should be ignored. [] [0|1] [initial_value:0]
  optional bool ti_and_date_indcn_data_valid = 2;
  // description Current time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Day [Days] [1.0|31.0] [initial_value:1]
  optional uint32 ti_and_date_indcn_day = 3;
  // description Current time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Hour [hours] [0.0|23.0] [initial_value:0]
  optional double ti_and_date_indcn_hr1 = 4;
  // description Current time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Minutes [Mins] [0.0|59.0] [initial_value:0]
  optional double ti_and_date_indcn_mins1 = 5;
  // description Current time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Month, 1-12 [Month] [1.0|12.0] [initial_value:1]
  optional double ti_and_date_indcn_mth1 = 6;
  // description Current time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Seconds [s] [0.0|59.0] [initial_value:0]
  optional double ti_and_date_indcn_sec1 = 7;
  // description Current time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Year, 0-99 [Year] [0.0|99.0] [initial_value:0]
  optional double ti_and_date_indcn_yr1 = 8;
}

message ZCUD_ZCUCANFD1_FR03_353 {
// Report Message
  enum BtnLockSts1BtnSts2Type {
    BTNLOCKSTS1BTNSTS2_BTNSTS2_IDLE = 0;
    BTNLOCKSTS1BTNSTS2_BTNSTS2_SHORTPSD = 1;
    BTNLOCKSTS1BTNSTS2_BTNSTS2_TWICEPSD = 2;
    BTNLOCKSTS1BTNSTS2_BTNSTS2_LONGPSD = 3;
    BTNLOCKSTS1BTNSTS2_BTNSTS2_RELEASED = 4;
  }
  enum BtnLockSts1KeyIdType {
    BTNLOCKSTS1KEYID_KEYID1_KEY0 = 0;
    BTNLOCKSTS1KEYID_KEYID1_KEY1 = 1;
    BTNLOCKSTS1KEYID_KEYID1_KEY2 = 2;
    BTNLOCKSTS1KEYID_KEYID1_KEY3 = 3;
    BTNLOCKSTS1KEYID_KEYID1_KEY4 = 4;
    BTNLOCKSTS1KEYID_KEYID1_KEY5 = 5;
    BTNLOCKSTS1KEYID_KEYID1_KEY6 = 6;
    BTNLOCKSTS1KEYID_KEYID1_KEY7 = 7;
    BTNLOCKSTS1KEYID_KEYID1_KEY8 = 8;
    BTNLOCKSTS1KEYID_KEYID1_KEY9 = 9;
    BTNLOCKSTS1KEYID_KEYID1_KEY10 = 10;
    BTNLOCKSTS1KEYID_KEYID1_KEY11 = 11;
  }
  enum BtnTrSts1BtnSts2Type {
    BTNTRSTS1BTNSTS2_BTNSTS2_IDLE = 0;
    BTNTRSTS1BTNSTS2_BTNSTS2_SHORTPSD = 1;
    BTNTRSTS1BTNSTS2_BTNSTS2_TWICEPSD = 2;
    BTNTRSTS1BTNSTS2_BTNSTS2_LONGPSD = 3;
    BTNTRSTS1BTNSTS2_BTNSTS2_RELEASED = 4;
  }
  enum BtnTrSts1KeyIdType {
    BTNTRSTS1KEYID_KEYID1_KEY0 = 0;
    BTNTRSTS1KEYID_KEYID1_KEY1 = 1;
    BTNTRSTS1KEYID_KEYID1_KEY2 = 2;
    BTNTRSTS1KEYID_KEYID1_KEY3 = 3;
    BTNTRSTS1KEYID_KEYID1_KEY4 = 4;
    BTNTRSTS1KEYID_KEYID1_KEY5 = 5;
    BTNTRSTS1KEYID_KEYID1_KEY6 = 6;
    BTNTRSTS1KEYID_KEYID1_KEY7 = 7;
    BTNTRSTS1KEYID_KEYID1_KEY8 = 8;
    BTNTRSTS1KEYID_KEYID1_KEY9 = 9;
    BTNTRSTS1KEYID_KEYID1_KEY10 = 10;
    BTNTRSTS1KEYID_KEYID1_KEY11 = 11;
  }
  enum BtnUnlckSts1BtnSts2Type {
    BTNUNLCKSTS1BTNSTS2_BTNSTS2_IDLE = 0;
    BTNUNLCKSTS1BTNSTS2_BTNSTS2_SHORTPSD = 1;
    BTNUNLCKSTS1BTNSTS2_BTNSTS2_TWICEPSD = 2;
    BTNUNLCKSTS1BTNSTS2_BTNSTS2_LONGPSD = 3;
    BTNUNLCKSTS1BTNSTS2_BTNSTS2_RELEASED = 4;
  }
  enum BtnUnlckSts1KeyIdType {
    BTNUNLCKSTS1KEYID_KEYID1_KEY0 = 0;
    BTNUNLCKSTS1KEYID_KEYID1_KEY1 = 1;
    BTNUNLCKSTS1KEYID_KEYID1_KEY2 = 2;
    BTNUNLCKSTS1KEYID_KEYID1_KEY3 = 3;
    BTNUNLCKSTS1KEYID_KEYID1_KEY4 = 4;
    BTNUNLCKSTS1KEYID_KEYID1_KEY5 = 5;
    BTNUNLCKSTS1KEYID_KEYID1_KEY6 = 6;
    BTNUNLCKSTS1KEYID_KEYID1_KEY7 = 7;
    BTNUNLCKSTS1KEYID_KEYID1_KEY8 = 8;
    BTNUNLCKSTS1KEYID_KEYID1_KEY9 = 9;
    BTNUNLCKSTS1KEYID_KEYID1_KEY10 = 10;
    BTNUNLCKSTS1KEYID_KEYID1_KEY11 = 11;
  }
  enum DCChrgnHndlStsType {
    DCCHRGNHNDLSTS_ONBDCHRGRHNDLSTS_DISCONNECTED = 0;
    DCCHRGNHNDLSTS_ONBDCHRGRHNDLSTS_CONNECTEDWITHOUTPOWER = 1;
    DCCHRGNHNDLSTS_ONBDCHRGRHNDLSTS_POWERAVAILABLEBUTNOTACTIVATED = 2;
    DCCHRGNHNDLSTS_ONBDCHRGRHNDLSTS_CONNECTEDWITHPOWER = 3;
    DCCHRGNHNDLSTS_ONBDCHRGRHNDLSTS_INIT = 4;
    DCCHRGNHNDLSTS_ONBDCHRGRHNDLSTS_FAULT = 5;
  }
  enum FullElecTwbrPosnType {
    FULLELECTWBRPOSN_FULLELECTWBRPOSN_UNKNOW = 0;
    FULLELECTWBRPOSN_FULLELECTWBRPOSN_INFOLDED = 1;
    FULLELECTWBRPOSN_FULLELECTWBRPOSN_OUTFOLDED = 2;
    FULLELECTWBRPOSN_FULLELECTWBRPOSN_MOVINGOUT = 3;
    FULLELECTWBRPOSN_FULLELECTWBRPOSN_MOVINGIN = 4;
    FULLELECTWBRPOSN_FULLELECTWBRPOSN_RESERVED1 = 5;
    FULLELECTWBRPOSN_FULLELECTWBRPOSN_RESERVED2 = 6;
    FULLELECTWBRPOSN_FULLELECTWBRPOSN_RESERVED3 = 7;
  }
  enum TwbrLockdPosnType {
    TWBRLOCKDPOSN_TWBRLOCKDPOSN_UKWN = 0;
    TWBRLOCKDPOSN_TWBRLOCKDPOSN_UNLCKD = 1;
    TWBRLOCKDPOSN_TWBRLOCKDPOSN_LOCKD = 2;
    TWBRLOCKDPOSN_TWBRLOCKDPOSN_RESERVED = 3;
  }
  enum ULoWarnULoWarnType {
    ULOWARNULOWARN_ULOWARN_UOK = 0;
    ULOWARNULOWARN_ULOWARN_ULOTMP = 1;
    ULOWARNULOWARN_ULOWARN_ULOPRMNT = 2;
    ULOWARNULOWARN_ULOWARN_ULODCDC = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool btn_lock_sts1_ub = 1;
  // description Lock button pressed status [] [0|7] [initial_value:0]
  optional BtnLockSts1BtnSts2Type btn_lock_sts1_btn_sts2 = 2;
  // description key id [] [0|15] [initial_value:0]
  optional BtnLockSts1KeyIdType btn_lock_sts1_key_id = 3;
  // [] [0|1] [initial_value:None]
  optional bool btn_tr_sts1_ub = 4;
  // description Trunk button pressed status [] [0|7] [initial_value:0]
  optional BtnTrSts1BtnSts2Type btn_tr_sts1_btn_sts2 = 5;
  // description key id [] [0|15] [initial_value:0]
  optional BtnTrSts1KeyIdType btn_tr_sts1_key_id = 6;
  // [] [0|1] [initial_value:None]
  optional bool btn_unlck_sts1_ub = 7;
  // description Unlock button pressed status [] [0|7] [initial_value:0]
  optional BtnUnlckSts1BtnSts2Type btn_unlck_sts1_btn_sts2 = 8;
  // description key id [] [0|15] [initial_value:0]
  optional BtnUnlckSts1KeyIdType btn_unlck_sts1_key_id = 9;
  // description Fast charging gun connect state [] [0|7] [initial_value:0]
  optional DCChrgnHndlStsType dc_chrgn_hndl_sts = 10;
  // [] [0|1] [initial_value:None]
  optional bool dc_chrgn_hndl_sts_ub = 11;
  // description To indicate the towbar position [] [0|7] [initial_value:0]
  optional FullElecTwbrPosnType full_elec_twbr_posn = 12;
  // [] [0|1] [initial_value:None]
  optional bool full_elec_twbr_posn_ub = 13;
  // description To indicate if the towbar is in locked position. [] [0|3] [initial_value:0]
  optional TwbrLockdPosnType twbr_lockd_posn = 14;
  // [] [0|1] [initial_value:None]
  optional bool twbr_lockd_posn_ub = 15;
  // [] [0|1] [initial_value:None]
  optional bool u_lo_warn_ub = 16;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 u_lo_warn_chks = 17;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 u_lo_warn_cntr = 18;
  // description Low voltage warning at LVEEM system [] [0|3] [initial_value:0]
  optional ULoWarnULoWarnType u_lo_warn_u_lo_warn = 19;
}

message ADCU_ZCUCANFD1_FR09_360 {
// Control Message
  enum AD4DrvrBeltWarnType {
    AD4DRVRBELTWARN_NOACTVN = 0;
    AD4DRVRBELTWARN_ACTVNFLO = 1;
    AD4DRVRBELTWARN_ACTVNFHI = 2;
    AD4DRVRBELTWARN_RESD1 = 3;
    AD4DRVRBELTWARN_RESD2 = 4;
  }
  enum AD4DrvrBeltWarnForBkpType {
    AD4DRVRBELTWARNFORBKP_NOACTVN = 0;
    AD4DRVRBELTWARNFORBKP_ACTVNFLO = 1;
    AD4DRVRBELTWARNFORBKP_ACTVNFHI = 2;
    AD4DRVRBELTWARNFORBKP_RESD1 = 3;
    AD4DRVRBELTWARNFORBKP_RESD2 = 4;
  }
  enum ADTakeoverReqGroupADTakeoverAudioType {
    ADTAKEOVERREQGROUPADTAKEOVERAUDIO_LOWHIGH_NOREQUEST = 0;
    ADTAKEOVERREQGROUPADTAKEOVERAUDIO_LOWHIGH_LOW = 1;
    ADTAKEOVERREQGROUPADTAKEOVERAUDIO_LOWHIGH_HIGH = 2;
    ADTAKEOVERREQGROUPADTAKEOVERAUDIO_LOWHIGH_RESERVED = 3;
  }
  enum ADTakeoverReqGroupADTakeoverMsgType {
    ADTAKEOVERREQGROUPADTAKEOVERMSG_TAKEOVERMSG_NOREQUEST = 0;
    ADTAKEOVERREQGROUPADTAKEOVERMSG_TAKEOVERMSG_INATTENTION = 1;
    ADTAKEOVERREQGROUPADTAKEOVERMSG_TAKEOVERMSG_TAKEOVERREQUEST = 2;
    ADTAKEOVERREQGROUPADTAKEOVERMSG_TAKEOVERMSG_SPEEDREDUCE = 3;
    ADTAKEOVERREQGROUPADTAKEOVERMSG_TAKEOVERMSG_SAFESTOP = 4;
    ADTAKEOVERREQGROUPADTAKEOVERMSG_TAKEOVERMSG_AEB = 5;
    ADTAKEOVERREQGROUPADTAKEOVERMSG_TAKEOVERMSG_RESERVED2 = 6;
    ADTAKEOVERREQGROUPADTAKEOVERMSG_TAKEOVERMSG_RESERVED3 = 7;
  }
  enum ADWiprCtrlReqType {
    ADWIPRCTRLREQ_WIPRCTRLCMD_NOREQUEST = 0;
    ADWIPRCTRLREQ_WIPRCTRLCMD_SINGLEWIPE = 1;
    ADWIPRCTRLREQ_WIPRCTRLCMD_CONTINUOUSWIPING = 2;
    ADWIPRCTRLREQ_WIPRCTRLCMD_WASHINGREQUEST = 3;
  }
  enum AsyNoaBltFastnType {
    ASYNOABLTFASTN_ASYFIRSTTIACTVN_NOREQ = 0;
    ASYNOABLTFASTN_ASYFIRSTTIACTVN_ICCFIRSTACTICATION = 1;
    ASYNOABLTFASTN_ASYFIRSTTIACTVN_ACCFIRSTACTICATION = 2;
    ASYNOABLTFASTN_ASYFIRSTTIACTVN_RESERVED = 3;
  }
  enum AutPrkgInBtnStsFromRPAType {
    AUTPRKGINBTNSTSFROMRPA_ACTVNAVL4_IDLE = 0;
    AUTPRKGINBTNSTSFROMRPA_ACTVNAVL4_ACTVN = 1;
    AUTPRKGINBTNSTSFROMRPA_ACTVNAVL4_DEACTVN = 2;
    AUTPRKGINBTNSTSFROMRPA_ACTVNAVL4_RECOMMAND = 3;
  }
  enum CameraStsforAHBCType {
    CAMERASTSFORAHBC_ADBCAMSTS_IDLE = 0;
    CAMERASTSFORAHBC_ADBCAMSTS_NORMAL = 1;
    CAMERASTSFORAHBC_ADBCAMSTS_BLOCKING = 2;
    CAMERASTSFORAHBC_ADBCAMSTS_UNKNOWN = 3;
  }
  enum PdcMuteButtonStsDispsetType {
    PDCMUTEBUTTONSTSDISPSET_ACTVNAVL4_IDLE = 0;
    PDCMUTEBUTTONSTSDISPSET_ACTVNAVL4_ACTVN = 1;
    PDCMUTEBUTTONSTSDISPSET_ACTVNAVL4_DEACTVN = 2;
    PDCMUTEBUTTONSTSDISPSET_ACTVNAVL4_RECOMMAND = 3;
  }
  enum PDCReqAVMType {
    PDCREQAVM_PDCREQAVM_NOREQ = 0;
    PDCREQAVM_PDCREQAVM_DISPLAYBYSWIPE = 1;
    PDCREQAVM_PDCREQAVM_DISPLAY = 2;
    PDCREQAVM_PDCREQAVM_OFF = 3;
  }
  enum PrkgBtnStsDispAPAType {
    PRKGBTNSTSDISPAPA_ACTVNAVL4_IDLE = 0;
    PRKGBTNSTSDISPAPA_ACTVNAVL4_ACTVN = 1;
    PRKGBTNSTSDISPAPA_ACTVNAVL4_DEACTVN = 2;
    PRKGBTNSTSDISPAPA_ACTVNAVL4_RECOMMAND = 3;
  }
  enum TurnIndicReqByALCAType {
    TURNINDICREQBYALCA_INDCRTYPEXT1_OFF = 0;
    TURNINDICREQBYALCA_INDCRTYPEXT1_LE = 1;
    TURNINDICREQBYALCA_INDCRTYPEXT1_RI = 2;
  }
  enum ValtPrkgCrsTiTYPType {
    VALTPRKGCRSTITYP_VALTPRKGTYP_DEFAULT = 0;
    VALTPRKGCRSTITYP_VALTPRKGTYP_VALTPRKGESTDCRSTI = 1;
    VALTPRKGCRSTITYP_VALTPRKGTYP_VALTPRKGTOTCRSTI = 2;
    VALTPRKGCRSTITYP_VALTPRKGTYP_VALTPRKGCRSREMITI = 3;
  }
  enum ValtPrkgFailrNotifType {
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_FUNCTIONAVAILABLE = 0;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_FUNCTIONUNAVAILABLE = 1;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_FUNCTIONEXIT_VMMMODEWRONG = 2;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_FUNCTIONEXIT_PASFAILURE = 3;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_FUNCTIONEXIT_USSFAILURE = 4;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_FUNCTIONEXIT_AVMFAILURE = 5;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_FUNCTIONEXIT_RELATEDSYSTEMFAILURE = 6;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_FUNCTIONEXIT_ACTIVESECURITYMODULEACTIVATED = 7;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_TRAILERCONNECTED = 8;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_TIREPRESSUREABNORMAL = 9;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_USSCOVEREDORDIRTY = 10;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_AVMCOVEREDORDIRTY = 11;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_LOADING = 12;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_FUNCTIONEXIT_LOADINGOVERTIME = 13;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_PLEASETURNOFFESCSPORTMODE = 14;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_FUNCTIONEXIT_RADAR = 15;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_FUNCTIONEXIT_TRAILERMODE = 16;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_RESERVED17 = 17;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_RESERVED18 = 18;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_FUNCTIONEXIT_VEHICLESPEED = 19;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_FUNCTIONEXIT_RAINFALL = 20;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_FUNCTIONEXIT_SLOPE = 21;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_FUNCTIONEXIT_LUX = 22;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_FUNCTIONEXIT_VEHICLEWASH = 23;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_FUNCTIONEXIT_CHARGING = 24;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_FUNCTIONEXIT_OUTSIDEOFPARKINGLOT = 25;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_FUNCTIONEXIT = 26;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_UNLOCK_FUNCTION = 27;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_FUNCTION_AVAILABLE = 28;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_WHETHERSAVE_PARKINGINROUTE = 29;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_WHETHERSAVE_PARKINGOUTROUTE = 30;
    VALTPRKGFAILRNOTIF_VALTPRKGFAILRNOTIF_SAVE_PARKINGINROUTE = 31;
  }
  enum ValtPrkgL1BtnDispExitBtnStType {
    VALTPRKGL1BTNDISPEXITBTNST_BTNST1_DEFAULT = 0;
    VALTPRKGL1BTNDISPEXITBTNST_BTNST1_DISPLAYEDANDCLICKABLE = 1;
    VALTPRKGL1BTNDISPEXITBTNST_BTNST1_DISPLAYEDANDUNCLICKABLE = 2;
    VALTPRKGL1BTNDISPEXITBTNST_BTNST1_UNDISPLAYED = 3;
  }
  enum ValtPrkgL1BtnDispGlbVirtViewBtnStType {
    VALTPRKGL1BTNDISPGLBVIRTVIEWBTNST_BTNST1_DEFAULT = 0;
    VALTPRKGL1BTNDISPGLBVIRTVIEWBTNST_BTNST1_DISPLAYEDANDCLICKABLE = 1;
    VALTPRKGL1BTNDISPGLBVIRTVIEWBTNST_BTNST1_DISPLAYEDANDUNCLICKABLE = 2;
    VALTPRKGL1BTNDISPGLBVIRTVIEWBTNST_BTNST1_UNDISPLAYED = 3;
  }
  enum ValtPrkgL1BtnDispInterruptRecoveryBtnStType {
    VALTPRKGL1BTNDISPINTERRUPTRECOVERYBTNST_BTNST1_DEFAULT = 0;
    VALTPRKGL1BTNDISPINTERRUPTRECOVERYBTNST_BTNST1_DISPLAYEDANDCLICKABLE = 1;
    VALTPRKGL1BTNDISPINTERRUPTRECOVERYBTNST_BTNST1_DISPLAYEDANDUNCLICKABLE = 2;
    VALTPRKGL1BTNDISPINTERRUPTRECOVERYBTNST_BTNST1_UNDISPLAYED = 3;
  }
  enum ValtPrkgL1BtnDispPrkgInCreateBtnStType {
    VALTPRKGL1BTNDISPPRKGINCREATEBTNST_BTNST1_DEFAULT = 0;
    VALTPRKGL1BTNDISPPRKGINCREATEBTNST_BTNST1_DISPLAYEDANDCLICKABLE = 1;
    VALTPRKGL1BTNDISPPRKGINCREATEBTNST_BTNST1_DISPLAYEDANDUNCLICKABLE = 2;
    VALTPRKGL1BTNDISPPRKGINCREATEBTNST_BTNST1_UNDISPLAYED = 3;
  }
  enum ValtPrkgL1BtnDispPrkgInOrOutCreateBtnStsType {
    VALTPRKGL1BTNDISPPRKGINOROUTCREATEBTNSTS_PRKGINOROUTCREATEBTNSTS_DEFAULT = 0;
    VALTPRKGL1BTNDISPPRKGINOROUTCREATEBTNSTS_PRKGINOROUTCREATEBTNSTS_NORMAL = 1;
    VALTPRKGL1BTNDISPPRKGINOROUTCREATEBTNSTS_PRKGINOROUTCREATEBTNSTS_UNNORMAL = 2;
    VALTPRKGL1BTNDISPPRKGINOROUTCREATEBTNSTS_PRKGINOROUTCREATEBTNSTS_UNDISPLAYED = 3;
  }
  enum ValtPrkgL1BtnDispPrkgOutCreateBtnStType {
    VALTPRKGL1BTNDISPPRKGOUTCREATEBTNST_BTNST1_DEFAULT = 0;
    VALTPRKGL1BTNDISPPRKGOUTCREATEBTNST_BTNST1_DISPLAYEDANDCLICKABLE = 1;
    VALTPRKGL1BTNDISPPRKGOUTCREATEBTNST_BTNST1_DISPLAYEDANDUNCLICKABLE = 2;
    VALTPRKGL1BTNDISPPRKGOUTCREATEBTNST_BTNST1_UNDISPLAYED = 3;
  }
  enum ValtPrkgL1BtnDispPtlVirtViewBtnStType {
    VALTPRKGL1BTNDISPPTLVIRTVIEWBTNST_BTNST1_DEFAULT = 0;
    VALTPRKGL1BTNDISPPTLVIRTVIEWBTNST_BTNST1_DISPLAYEDANDCLICKABLE = 1;
    VALTPRKGL1BTNDISPPTLVIRTVIEWBTNST_BTNST1_DISPLAYEDANDUNCLICKABLE = 2;
    VALTPRKGL1BTNDISPPTLVIRTVIEWBTNST_BTNST1_UNDISPLAYED = 3;
  }
  enum ValtPrkgL1BtnDispReachDestinationBtnStType {
    VALTPRKGL1BTNDISPREACHDESTINATIONBTNST_BTNST1_DEFAULT = 0;
    VALTPRKGL1BTNDISPREACHDESTINATIONBTNST_BTNST1_DISPLAYEDANDCLICKABLE = 1;
    VALTPRKGL1BTNDISPREACHDESTINATIONBTNST_BTNST1_DISPLAYEDANDUNCLICKABLE = 2;
    VALTPRKGL1BTNDISPREACHDESTINATIONBTNST_BTNST1_UNDISPLAYED = 3;
  }
  enum ValtPrkgL1BtnDispSettingBtnStType {
    VALTPRKGL1BTNDISPSETTINGBTNST_BTNST1_DEFAULT = 0;
    VALTPRKGL1BTNDISPSETTINGBTNST_BTNST1_DISPLAYEDANDCLICKABLE = 1;
    VALTPRKGL1BTNDISPSETTINGBTNST_BTNST1_DISPLAYEDANDUNCLICKABLE = 2;
    VALTPRKGL1BTNDISPSETTINGBTNST_BTNST1_UNDISPLAYED = 3;
  }
  enum ValtPrkgL1BtnDispStartMemorizingParkingBtnStType {
    VALTPRKGL1BTNDISPSTARTMEMORIZINGPARKINGBTNST_BTNST1_DEFAULT = 0;
    VALTPRKGL1BTNDISPSTARTMEMORIZINGPARKINGBTNST_BTNST1_DISPLAYEDANDCLICKABLE = 1;
    VALTPRKGL1BTNDISPSTARTMEMORIZINGPARKINGBTNST_BTNST1_DISPLAYEDANDUNCLICKABLE = 2;
    VALTPRKGL1BTNDISPSTARTMEMORIZINGPARKINGBTNST_BTNST1_UNDISPLAYED = 3;
  }
  enum ValtPrkgL1BtnDispStartParkingBtnStType {
    VALTPRKGL1BTNDISPSTARTPARKINGBTNST_BTNST1_DEFAULT = 0;
    VALTPRKGL1BTNDISPSTARTPARKINGBTNST_BTNST1_DISPLAYEDANDCLICKABLE = 1;
    VALTPRKGL1BTNDISPSTARTPARKINGBTNST_BTNST1_DISPLAYEDANDUNCLICKABLE = 2;
    VALTPRKGL1BTNDISPSTARTPARKINGBTNST_BTNST1_UNDISPLAYED = 3;
  }
  enum ValtPrkgL2BtnDispSettingVoiceBtnStType {
    VALTPRKGL2BTNDISPSETTINGVOICEBTNST_SETTINGVOICEBTNST_DEFAULT = 0;
    VALTPRKGL2BTNDISPSETTINGVOICEBTNST_SETTINGVOICEBTNST_DETAILMODE = 1;
    VALTPRKGL2BTNDISPSETTINGVOICEBTNST_SETTINGVOICEBTNST_SIMPLEMODE = 2;
    VALTPRKGL2BTNDISPSETTINGVOICEBTNST_SETTINGVOICEBTNST_ALLOFF = 3;
  }
  enum ValtPrkgL2PopBtnDispType {
    VALTPRKGL2POPBTNDISP_VALTPRKGL2POPBTNDISP_DEFAULT = 0;
    VALTPRKGL2POPBTNDISP_VALTPRKGL2POPBTNDISP_TUTORIALPOP = 1;
    VALTPRKGL2POPBTNDISP_VALTPRKGL2POPBTNDISP_LOCNPRKGINPOP = 2;
    VALTPRKGL2POPBTNDISP_VALTPRKGL2POPBTNDISP_LOCNPRKGOUTPOP = 3;
    VALTPRKGL2POPBTNDISP_VALTPRKGL2POPBTNDISP_COVERPRKGINPOP = 4;
    VALTPRKGL2POPBTNDISP_VALTPRKGL2POPBTNDISP_COVERPRKGOUTPOP = 5;
    VALTPRKGL2POPBTNDISP_VALTPRKGL2POPBTNDISP_NAMEPRKGINPOP = 6;
    VALTPRKGL2POPBTNDISP_VALTPRKGL2POPBTNDISP_NAMEPRKGOUTPOP = 7;
    VALTPRKGL2POPBTNDISP_VALTPRKGL2POPBTNDISP_SETTINGFCTPOP = 8;
    VALTPRKGL2POPBTNDISP_VALTPRKGL2POPBTNDISP_SETTINGHELPPOP = 9;
    VALTPRKGL2POPBTNDISP_VALTPRKGL2POPBTNDISP_SETTINGPRKGINROUTE = 10;
    VALTPRKGL2POPBTNDISP_VALTPRKGL2POPBTNDISP_SETTINGPRKGOUTROUTE = 11;
  }
  enum ValtPrkgMapSyncnReqMapSyncnReqType {
    VALTPRKGMAPSYNCNREQMAPSYNCNREQ_MAPSYNCNREQ_DEFAULT = 0;
    VALTPRKGMAPSYNCNREQMAPSYNCNREQ_MAPSYNCNREQ_STARTREQ = 1;
    VALTPRKGMAPSYNCNREQMAPSYNCNREQ_MAPSYNCNREQ_DELETEREQ = 2;
    VALTPRKGMAPSYNCNREQMAPSYNCNREQ_MAPSYNCNREQ_COMPLETEREQ = 3;
    VALTPRKGMAPSYNCNREQMAPSYNCNREQ_MAPSYNCNREQ_IDRELEASEREQ = 4;
    VALTPRKGMAPSYNCNREQMAPSYNCNREQ_MAPSYNCNREQ_MAPDELETEREQ = 5;
  }
  enum ValtPrkgPopOrBtnDispStsType {
    VALTPRKGPOPORBTNDISPSTS_POPORBTNDISPSTS_DEFAULT = 0;
    VALTPRKGPOPORBTNDISPSTS_POPORBTNDISPSTS_NORMAL = 1;
    VALTPRKGPOPORBTNDISPSTS_POPORBTNDISPSTS_UNNORMAL = 2;
    VALTPRKGPOPORBTNDISPSTS_POPORBTNDISPSTS_POPRES = 3;
  }
  enum ValtPrkgProsStsType {
    VALTPRKGPROSSTS_VALTPRKGPROSSTS_DEFAULT = 0;
    VALTPRKGPROSSTS_VALTPRKGPROSSTS_PARKINCRUISINGSTS = 1;
    VALTPRKGPROSSTS_VALTPRKGPROSSTS_PARKINSTS = 2;
    VALTPRKGPROSSTS_VALTPRKGPROSSTS_PARKOUTCRUISINGSTS = 3;
    VALTPRKGPROSSTS_VALTPRKGPROSSTS_PARKOUTSTS = 4;
    VALTPRKGPROSSTS_VALTPRKGPROSSTS_CRUISINGCOMPLETEDSTS = 5;
    VALTPRKGPROSSTS_VALTPRKGPROSSTS_CRUISINGABORTSTS = 6;
    VALTPRKGPROSSTS_VALTPRKGPROSSTS_CRUISINGINTERRUPTSTS = 7;
  }
  enum ValtPrkgViewDispType {
    VALTPRKGVIEWDISP_VALTPRKGVIEWDISP_DEFAULT = 0;
    VALTPRKGVIEWDISP_VALTPRKGVIEWDISP_VIRTUALVIEW = 1;
    VALTPRKGVIEWDISP_VALTPRKGVIEWDISP_VIRTUALANDSPLICED = 2;
    VALTPRKGVIEWDISP_VALTPRKGVIEWDISP_VIRTUALANDFORWARD = 3;
    VALTPRKGVIEWDISP_VALTPRKGVIEWDISP_VIRTUALANDREAR = 4;
    VALTPRKGVIEWDISP_VALTPRKGVIEWDISP_VIRTUALANDFORWARDANDSPLICED = 5;
    VALTPRKGVIEWDISP_VALTPRKGVIEWDISP_VIRTUALANDREARANDSPLICED = 6;
    VALTPRKGVIEWDISP_VALTPRKGVIEWDISP_FORWARDANDSPLICED = 7;
    VALTPRKGVIEWDISP_VALTPRKGVIEWDISP_REARANDSPLICED = 8;
  }
  // description AD4 Camera heating request [] [0|1] [initial_value:0]
  optional bool ad4_camera_heating_req = 1;
  // [] [0|1] [initial_value:None]
  optional bool ad4_camera_heating_req_ub = 2;
  // description AD4 driver belt haptic and pre-tension warning request [] [0|7] [initial_value:0]
  optional AD4DrvrBeltWarnType ad4_drvr_belt_warn = 3;
  // [] [0|1] [initial_value:None]
  optional bool ad4_drvr_belt_warn_ub = 4;
  // description AD4 driver belt haptic and pre-tension warning request [] [0|7] [initial_value:0]
  optional AD4DrvrBeltWarnForBkpType ad4_drvr_belt_warn_for_bkp = 5;
  // [] [0|1] [initial_value:None]
  optional bool ad4_drvr_belt_warn_for_bkp_ub = 6;
  // [] [0|1] [initial_value:None]
  optional bool ad_takeover_req_group_ub = 7;
  // description This is to send audio notifications to alert the driver. [] [0|3] [initial_value:0]
  optional ADTakeoverReqGroupADTakeoverAudioType ad_takeover_req_group_ad_takeover_audio = 8;
  // description This message group contains messages that ask driver to pay attention to road, or take over the vehicle. [] [0|7] [initial_value:0]
  optional ADTakeoverReqGroupADTakeoverMsgType ad_takeover_req_group_ad_takeover_msg = 9;
  // description E2E protect [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad_takeover_req_group_chks = 10;
  // description E2E protect [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad_takeover_req_group_cntr = 11;
  // description This signal is speical for TJP function to control wiper when TJP function is active. [] [0|3] [initial_value:0]
  optional ADWiprCtrlReqType ad_wipr_ctrl_req = 12;
  // [] [0|1] [initial_value:None]
  optional bool ad_wipr_ctrl_req_ub = 13;
  // description another voice warning for Lane change [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_lan_chg_sod_sec = 14;
  // [] [0|1] [initial_value:None]
  optional bool asy_lan_chg_sod_sec_ub = 15;
  // description the status of ALCA [Unitless] [0.0|63.0] [initial_value:0]
  optional uint32 asy_lane_chg_assist_sts = 16;
  // [] [0|1] [initial_value:None]
  optional bool asy_lane_chg_assist_sts_ub = 17;
  // description the type of failure [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_lane_chg_fail_type = 18;
  // [] [0|1] [initial_value:None]
  optional bool asy_lane_chg_fail_type_ub = 19;
  // description Haptic warning for take over in NOA state [] [0|3] [initial_value:0]
  optional AsyNoaBltFastnType asy_noa_blt_fastn = 20;
  // [] [0|1] [initial_value:None]
  optional bool asy_noa_blt_fastn_ub = 21;
  // description Voice warning for the reason of NOA cannot be active [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_noa_deactvd_reasn_sod = 22;
  // [] [0|1] [initial_value:None]
  optional bool asy_noa_deactvd_reasn_sod_ub = 23;
  // description Voice remind warning in NOA state [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_noa_remind_sod = 24;
  // [] [0|1] [initial_value:None]
  optional bool asy_noa_remind_sod_ub = 25;
  // description Voice warning for take over in NOA state [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_noa_takeover_sod = 26;
  // [] [0|1] [initial_value:None]
  optional bool asy_noa_takeover_sod_ub = 27;
  // description warning driver when lane changing is in progress [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_req_lane_chg = 28;
  // [] [0|1] [initial_value:None]
  optional bool asy_req_lane_chg_ub = 29;
  // description Automatic parking in button status from RPA [] [0|3] [initial_value:0]
  optional AutPrkgInBtnStsFromRPAType aut_prkg_in_btn_sts_from_rpa = 30;
  // [] [0|1] [initial_value:None]
  optional bool aut_prkg_in_btn_sts_from_rpa_ub = 31;
  // description To discribe camera can working or not. [] [0|3] [initial_value:0]
  optional CameraStsforAHBCType camera_stsfor_ahbc = 32;
  // [] [0|1] [initial_value:None]
  optional bool camera_stsfor_ahbc_ub = 33;
  // [] [0|1] [initial_value:None]
  optional bool cam_sts_ub = 34;
  // description Camera calibration not completed [] [0|1] [initial_value:0]
  optional bool cam_sts_cam_cam_frnt_cal_not_cmpl = 35;
  // description This signal indicates if the windscreen heater in front of the windscreen camera is active. [] [0|1] [initial_value:0]
  optional bool cam_sts_cam_cam_heatr_actv = 36;
  // description Partial Camera blockage [] [0|1] [initial_value:0]
  optional bool cam_sts_cam_frnt_blkd1 = 37;
  // description Partial Camera blockage [] [0|1] [initial_value:0]
  optional bool cam_sts_cam_frnt_blkd2 = 38;
  // description Partial Camera blockage [] [0|1] [initial_value:0]
  optional bool cam_sts_cam_frnt_blkd3 = 39;
  // description Partial Camera blockage [] [0|1] [initial_value:0]
  optional bool cam_sts_cam_frnt_blkd4 = 40;
  // description Partial Camera blockage [] [0|1] [initial_value:0]
  optional bool cam_sts_cam_frnt_blkd5 = 41;
  // description Partial Camera blockage [] [0|1] [initial_value:0]
  optional bool cam_sts_cam_frnt_blkd6 = 42;
  // description Partial Camera blockage [] [0|1] [initial_value:0]
  optional bool cam_sts_cam_frnt_blkd7 = 43;
  // description Partial Camera blockage [] [0|1] [initial_value:0]
  optional bool cam_sts_cam_frnt_blkd8 = 44;
  // description Camera calibration not started [] [0|1] [initial_value:0]
  optional bool cam_sts_cam_frnt_cal_not_strtd = 45;
  // description Indicate seperate error for faulty , refer to port description. [Unitless] [0.0|4095.0] [initial_value:0]
  optional uint32 cam_sts_cam_frnt_faulty = 46;
  // description Camera enable [] [0|1] [initial_value:0]
  optional bool cam_sts_cam_front_ena = 47;
  // description Camera miss communication [] [0|1] [initial_value:0]
  optional bool cam_sts_cam_miss_com = 48;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 cam_sts_chks = 49;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 cam_sts_cntr = 50;
  // description HPA VOICE PROMPT [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 home_prkg_voice_prompt_req = 51;
  // [] [0|1] [initial_value:None]
  optional bool home_prkg_voice_prompt_req_ub = 52;
  // description HpaToAppFaultChinese [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 hpa_to_app_fault_chinese = 53;
  // [] [0|1] [initial_value:None]
  optional bool hpa_to_app_fault_chinese_ub = 54;
  // description HpaToAppMainChinese [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 hpa_to_app_main_chinese = 55;
  // [] [0|1] [initial_value:None]
  optional bool hpa_to_app_main_chinese_ub = 56;
  // description Whether the host vehicle is in a lit area [] [0|1] [initial_value:0]
  optional bool lit_area = 57;
  // [] [0|1] [initial_value:None]
  optional bool lit_area_ub = 58;
  // description Gear to enter or exit APA function [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 no_touching_for_avm_req = 59;
  // [] [0|1] [initial_value:None]
  optional bool no_touching_for_avm_req_ub = 60;
  // description Set PDC mute button status signal [] [0|3] [initial_value:0]
  optional PdcMuteButtonStsDispsetType pdc_mute_button_sts_dispset = 61;
  // [] [0|1] [initial_value:None]
  optional bool pdc_mute_button_sts_dispset_ub = 62;
  // description PDC request AVM display [] [0|3] [initial_value:0]
  optional PDCReqAVMType pdc_req_avm = 63;
  // [] [0|1] [initial_value:None]
  optional bool pdc_req_avm_ub = 64;
  // description APA button status signal [] [0|3] [initial_value:0]
  optional PrkgBtnStsDispAPAType prkg_btn_sts_disp_apa = 65;
  // [] [0|1] [initial_value:None]
  optional bool prkg_btn_sts_disp_apa_ub = 66;
  // description RCW lit the hazard light request. [] [0|1] [initial_value:1]
  optional bool rcwm_li_req = 67;
  // [] [0|1] [initial_value:None]
  optional bool rcwm_li_req_ub = 68;
  // description control turn indicator lamps turn on or turn off. when 0-turn off, 1-turn on left turn indicator lamps, 2-turn on right turn indicator lamp [] [0|3] [initial_value:0]
  optional TurnIndicReqByALCAType turn_indic_req_by_alca = 69;
  // [] [0|1] [initial_value:None]
  optional bool turn_indic_req_by_alca_ub = 70;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_crs_ti_ub = 71;
  // description Hr1 [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 valt_prkg_crs_ti_hr1 = 72;
  // description Mins1 [Unitless] [0.0|63.0] [initial_value:0]
  optional uint32 valt_prkg_crs_ti_mins1 = 73;
  // description Sec1 [Unitless] [0.0|63.0] [initial_value:0]
  optional uint32 valt_prkg_crs_ti_sec1 = 74;
  // description TYP [] [0|3] [initial_value:0]
  optional ValtPrkgCrsTiTYPType valt_prkg_crs_ti_typ = 75;
  // description HPA cruising percent [%] [0.0|100.0] [initial_value:0]
  optional double valt_prkg_cruisingperctg_disp = 76;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_cruisingperctg_disp_ub = 77;
  // description Notify IHU parking function not available. [] [0|31] [initial_value:0]
  optional ValtPrkgFailrNotifType valt_prkg_failr_notif = 78;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_failr_notif_ub = 79;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_l1_btn_disp_ub = 80;
  // description ExitBtnSt [] [0|3] [initial_value:0]
  optional ValtPrkgL1BtnDispExitBtnStType valt_prkg_l1_btn_disp_exit_btn_st = 81;
  // description GlbVirtViewBtnSt [] [0|3] [initial_value:0]
  optional ValtPrkgL1BtnDispGlbVirtViewBtnStType valt_prkg_l1_btn_disp_glb_virt_view_btn_st = 82;
  // description reserved [] [0|3] [initial_value:0]
  optional ValtPrkgL1BtnDispInterruptRecoveryBtnStType valt_prkg_l1_btn_disp_interrupt_recovery_btn_st = 83;
  // description PrkgInCreateBtnSt [] [0|3] [initial_value:0]
  optional ValtPrkgL1BtnDispPrkgInCreateBtnStType valt_prkg_l1_btn_disp_prkg_in_create_btn_st = 84;
  // description PrkglnOrOutCreateBtnSts [] [0|3] [initial_value:0]
  optional ValtPrkgL1BtnDispPrkgInOrOutCreateBtnStsType valt_prkg_l1_btn_disp_prkg_in_or_out_create_btn_sts = 85;
  // description PrkgOutCreateBtnSt [] [0|3] [initial_value:0]
  optional ValtPrkgL1BtnDispPrkgOutCreateBtnStType valt_prkg_l1_btn_disp_prkg_out_create_btn_st = 86;
  // description PrkgOutCreateBtnSt [] [0|3] [initial_value:0]
  optional ValtPrkgL1BtnDispPtlVirtViewBtnStType valt_prkg_l1_btn_disp_ptl_virt_view_btn_st = 87;
  // description ReachDestinationBtnSt [] [0|3] [initial_value:0]
  optional ValtPrkgL1BtnDispReachDestinationBtnStType valt_prkg_l1_btn_disp_reach_destination_btn_st = 88;
  // description SettingBtnSt [] [0|3] [initial_value:0]
  optional ValtPrkgL1BtnDispSettingBtnStType valt_prkg_l1_btn_disp_setting_btn_st = 89;
  // description reserved [] [0|3] [initial_value:0]
  optional ValtPrkgL1BtnDispStartMemorizingParkingBtnStType valt_prkg_l1_btn_disp_start_memorizing_parking_btn_st = 90;
  // description reserved [] [0|3] [initial_value:0]
  optional ValtPrkgL1BtnDispStartParkingBtnStType valt_prkg_l1_btn_disp_start_parking_btn_st = 91;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_l1_special_prompt_disp_ub = 92;
  // description 0bit defines MappedRecDst state, 0 is undsplay, 1 is display [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 valt_prkg_l1_special_prompt_disp_btn_st = 93;
  // description avoid PED during cruising process [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 valt_prkg_l1_special_prompt_disp_cruising_rec_ped = 94;
  // description recrod ramp during cruising process [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 valt_prkg_l1_special_prompt_disp_cruising_rec_ramp = 95;
  // description avoid vehicle during cruising process [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 valt_prkg_l1_special_prompt_disp_cruising_rec_veh = 96;
  // description remain distance during cruising process [m] [0.0|3276.8] [initial_value:0]
  optional double valt_prkg_l1_special_prompt_disp_cruising_remain_dst = 97;
  // description record bump during mapping process [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 valt_prkg_l1_special_prompt_disp_mapped_rec_bump = 98;
  // description record crossing during mapping process [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 valt_prkg_l1_special_prompt_disp_mapped_rec_crossing = 99;
  // description record distance during mapping process [m] [0.0|3276.8] [initial_value:0]
  optional double valt_prkg_l1_special_prompt_disp_mapped_rec_dst = 100;
  // description remain parking distance [m] [0.0|51.2] [initial_value:0]
  optional double valt_prkg_l1_special_prompt_disp_prkg_remain_dst = 101;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_l2_btn_disp_ub = 102;
  // description SettingFctPushBtnSt [] [0|1] [initial_value:0]
  optional bool valt_prkg_l2_btn_disp_setting_fct_push_btn_st = 103;
  // description SettingNoSenceBtnSt [] [0|1] [initial_value:0]
  optional bool valt_prkg_l2_btn_disp_setting_no_sence_btn_st = 104;
  // description SettingVoiceBtnSt [] [0|3] [initial_value:0]
  optional ValtPrkgL2BtnDispSettingVoiceBtnStType valt_prkg_l2_btn_disp_setting_voice_btn_st = 105;
  // description L2POP state [] [0|63] [initial_value:0]
  optional ValtPrkgL2PopBtnDispType valt_prkg_l2_pop_btn_disp = 106;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_l2_pop_btn_disp_ub = 107;
  // description HPA main process prompt  [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 valt_prkg_mai_proc_prompt_req = 108;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_mai_proc_prompt_req_ub = 109;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_map_syncn_req_ub = 110;
  // description MapList1 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 valt_prkg_map_syncn_req_map_list1 = 111;
  // description MapList2 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 valt_prkg_map_syncn_req_map_list2 = 112;
  // description MapList3 [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 valt_prkg_map_syncn_req_map_list3 = 113;
  // description MapList4 [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 valt_prkg_map_syncn_req_map_list4 = 114;
  // description MapSyncnReq [] [0|15] [initial_value:0]
  optional ValtPrkgMapSyncnReqMapSyncnReqType valt_prkg_map_syncn_req_map_syncn_req = 115;
  // description ValtPrkgPopOrBtnDispSts [] [0|3] [initial_value:0]
  optional ValtPrkgPopOrBtnDispStsType valt_prkg_pop_or_btn_disp_sts = 116;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_pop_or_btn_disp_sts_ub = 117;
  // description ValtPrkgProsSts [] [0|7] [initial_value:0]
  optional ValtPrkgProsStsType valt_prkg_pros_sts = 118;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_pros_sts_ub = 119;
  // description small promt to HMI [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 valt_prkg_small_prompt_req = 120;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_small_prompt_req_ub = 121;
  // description ValtPrkgViewDisp [] [0|15] [initial_value:0]
  optional ValtPrkgViewDispType valt_prkg_view_disp = 122;
  // [] [0|1] [initial_value:None]
  optional bool valt_prkg_view_disp_ub = 123;
}

message ZCUD_ZCUCANFD1_FR08_363 {
// Report Message
  enum DrvrSeatSnsrStsType {
    DRVRSEATSNSRSTS_OKNOKDI_OK = 0;
    DRVRSEATSNSRSTS_OKNOKDI_NOTOK = 1;
    DRVRSEATSNSRSTS_OKNOKDI_DISABLED = 2;
    DRVRSEATSNSRSTS_OKNOKDI_RESERVED = 3;
  }
  enum DrvrSeatStsType {
    DRVRSEATSTS_OCCPTPRESST1_UNDEFD1 = 0;
    DRVRSEATSTS_OCCPTPRESST1_OCCPTNOTPRSNT = 1;
    DRVRSEATSTS_OCCPTPRESST1_OCCPTPRSNT = 2;
    DRVRSEATSTS_OCCPTPRESST1_UNDEFD2 = 3;
  }
  // description Informs if there is a fault on the driver seat sensor is detected through electrical measurements, or plausibility judgement. NotOk means sensor is judged as faulty. Di means that the sensor is not configured. [] [0|3] [initial_value:0]
  optional DrvrSeatSnsrStsType drvr_seat_snsr_sts = 1;
  // [] [0|1] [initial_value:None]
  optional bool drvr_seat_snsr_sts_ub = 2;
  // description Describes if an occupant is detected in the driver seat. [] [0|3] [initial_value:1]
  optional DrvrSeatStsType drvr_seat_sts = 3;
  // [] [0|1] [initial_value:None]
  optional bool drvr_seat_sts_ub = 4;
  // description Inlet Coolant Temperature of the OBC [degC] [-40.0|215.0] [initial_value:40]
  optional double on_bd_chrgr_coolt_t = 5;
  // [] [0|1] [initial_value:None]
  optional bool on_bd_chrgr_coolt_t_ub = 6;
}

message DHU_ZCUCANFD1_FR13_367 {
// Report Message
  enum DrvrAsscSysParkModType {
    DRVRASSCSYSPARKMOD_DRVRFBOFPRKGMOD2_DEFAULT = 0;
    DRVRASSCSYSPARKMOD_DRVRFBOFPRKGMOD2_CANCEL = 1;
    DRVRASSCSYSPARKMOD_DRVRFBOFPRKGMOD2_HORIZONTALPARKINGIN = 2;
    DRVRASSCSYSPARKMOD_DRVRFBOFPRKGMOD2_PERPENDICULARPARKINGIN = 3;
    DRVRASSCSYSPARKMOD_DRVRFBOFPRKGMOD2_PERPENDICULARPARKINGINFORWARD = 4;
    DRVRASSCSYSPARKMOD_DRVRFBOFPRKGMOD2_PERPENDICULARPARKINGINBACKWARD = 5;
    DRVRASSCSYSPARKMOD_DRVRFBOFPRKGMOD2_RESERVED1 = 6;
    DRVRASSCSYSPARKMOD_DRVRFBOFPRKGMOD2_RESERVED2 = 7;
    DRVRASSCSYSPARKMOD_DRVRFBOFPRKGMOD2_RESERVED3 = 8;
    DRVRASSCSYSPARKMOD_DRVRFBOFPRKGMOD2_HORIZONTALLEFTPARKINGOUT = 9;
    DRVRASSCSYSPARKMOD_DRVRFBOFPRKGMOD2_HORIZONTALRIGHTPARKINGOUT = 10;
    DRVRASSCSYSPARKMOD_DRVRFBOFPRKGMOD2_PERPENDICULARLEFTPARKINGOUTFORWARD = 11;
    DRVRASSCSYSPARKMOD_DRVRFBOFPRKGMOD2_PERPENDICULARRIGHTPARKINGOUTFORWARD = 12;
    DRVRASSCSYSPARKMOD_DRVRFBOFPRKGMOD2_PERPENDICULARLEFTPARKINGOUTBACKWARD = 13;
    DRVRASSCSYSPARKMOD_DRVRFBOFPRKGMOD2_PERPENDICULARRIGHTPARKINGOUTBACKWARD = 14;
    DRVRASSCSYSPARKMOD_DRVRFBOFPRKGMOD2_RESERVED6 = 15;
  }
  enum ISAControlType {
    ISACONTROL_ISACOMMAND_DEAULT = 0;
    ISACONTROL_ISACOMMAND_REQUEST = 1;
    ISACONTROL_ISACOMMAND_START = 2;
    ISACONTROL_ISACOMMAND_STOP = 3;
    ISACONTROL_ISACOMMAND_QUIT = 4;
    ISACONTROL_ISACOMMAND_RESERVED = 5;
  }
  enum PdcMuteBtnReqType {
    PDCMUTEBTNREQ_ONOFFNOREQ_NOREQ = 0;
    PDCMUTEBTNREQ_ONOFFNOREQ_ON = 1;
    PDCMUTEBTNREQ_ONOFFNOREQ_OFF = 2;
  }
  enum PrkgInOrOutAndCnclType {
    PRKGINOROUTANDCNCL_PRKGINOROUTANDCNCL1_DEFAULT = 0;
    PRKGINOROUTANDCNCL_PRKGINOROUTANDCNCL1_PARKINGIN = 1;
    PRKGINOROUTANDCNCL_PRKGINOROUTANDCNCL1_PARKINGOUT = 2;
    PRKGINOROUTANDCNCL_PRKGINOROUTANDCNCL1_CANCEL = 3;
  }
  enum PrkgIntrptReldBtnType {
    PRKGINTRPTRELDBTN_BTNREQ_NOREQ = 0;
    PRKGINTRPTRELDBTN_BTNREQ_CONTINUE = 1;
    PRKGINTRPTRELDBTN_BTNREQ_NOTCONTINUE = 2;
    PRKGINTRPTRELDBTN_BTNREQ_BACKTOSTARTPOINT = 3;
  }
  enum RVMControlType {
    RVMCONTROL_RVMCONTROL_DEFAULT = 0;
    RVMCONTROL_RVMCONTROL_REQUEST = 1;
    RVMCONTROL_RVMCONTROL_PARKOUT = 2;
    RVMCONTROL_RVMCONTROL_PARKSTOP = 3;
    RVMCONTROL_RVMCONTROL_FORWARD = 4;
    RVMCONTROL_RVMCONTROL_BACKWARD = 5;
    RVMCONTROL_RVMCONTROL_FORWARDBACK = 6;
    RVMCONTROL_RVMCONTROL_ARMING = 7;
    RVMCONTROL_RVMCONTROL_QUIT = 8;
    RVMCONTROL_RVMCONTROL_RESERVED = 9;
  }
  enum RVMDirectionType {
    RVMDIRECTION_RVMDRESP_DEAULT = 0;
    RVMDIRECTION_RVMDRESP_HORIZONTALLEFT = 1;
    RVMDIRECTION_RVMDRESP_HORIZONTALRIGHT = 2;
    RVMDIRECTION_RVMDRESP_VERTICALLEFT = 3;
    RVMDIRECTION_RVMDRESP_VERTICALRIGHT = 4;
    RVMDIRECTION_RVMDRESP_RESERVED = 5;
  }
  // description The control command sent by the APP to the HPA. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 app_to_hpa_ctrl_cmd = 1;
  // [] [0|1] [initial_value:None]
  optional bool app_to_hpa_ctrl_cmd_ub = 2;
  // description Park mode [] [0|15] [initial_value:0]
  optional DrvrAsscSysParkModType drvr_assc_sys_park_mod = 3;
  // [] [0|1] [initial_value:None]
  optional bool drvr_assc_sys_park_mod_ub = 4;
  // description ISAControl [] [0|7] [initial_value:0]
  optional ISAControlType isa_control = 5;
  // [] [0|1] [initial_value:None]
  optional bool isa_control_ub = 6;
  // description PDC mute button [] [0|3] [initial_value:0]
  optional PdcMuteBtnReqType pdc_mute_btn_req = 7;
  // [] [0|1] [initial_value:None]
  optional bool pdc_mute_btn_req_ub = 8;
  // description Signal indicates whether PDC Switch is being pressed,Default is 1 [] [0|1] [initial_value:0]
  optional bool prkg_dst_ctrl_sys_swt = 9;
  // [] [0|1] [initial_value:None]
  optional bool prkg_dst_ctrl_sys_swt_ub = 10;
  // description Signal indicates whether PEB Switch is being pressed,Default is 1 [] [0|1] [initial_value:0]
  optional bool prkg_emg_brk_sys_swt = 11;
  // [] [0|1] [initial_value:None]
  optional bool prkg_emg_brk_sys_swt_ub = 12;
  // description cancel park in and park out. [] [0|3] [initial_value:0]
  optional PrkgInOrOutAndCnclType prkg_in_or_out_and_cncl = 13;
  // [] [0|1] [initial_value:None]
  optional bool prkg_in_or_out_and_cncl_ub = 14;
  // description parking interrupt has been cleared [] [0|3] [initial_value:0]
  optional PrkgIntrptReldBtnType prkg_intrpt_reld_btn = 15;
  // [] [0|1] [initial_value:None]
  optional bool prkg_intrpt_reld_btn_ub = 16;
  // description Signal indicates whether auto APA is selected. [] [0|1] [initial_value:0]
  optional bool prkg_typ_aut_btn = 17;
  // [] [0|1] [initial_value:None]
  optional bool prkg_typ_aut_btn_ub = 18;
  // description RPA enable or disable request from HMI [] [0|1] [initial_value:0]
  optional bool rem_prkg_ena_req = 19;
  // [] [0|1] [initial_value:None]
  optional bool rem_prkg_ena_req_ub = 20;
  // description RVMControl [] [0|15] [initial_value:0]
  optional RVMControlType rvm_control = 21;
  // [] [0|1] [initial_value:None]
  optional bool rvm_control_ub = 22;
  // description RVMDirection [] [0|7] [initial_value:0]
  optional RVMDirectionType rvm_direction = 23;
  // [] [0|1] [initial_value:None]
  optional bool rvm_direction_ub = 24;
}

message ADCU_ZCUCANFD1_FR12_370 {
// Control Message
  enum AsyD2DStsD2DStsType {
    ASYD2DSTSD2DSTS_ASYD2DSTS_OFF = 0;
    ASYD2DSTSD2DSTS_ASYD2DSTS_ACCACTIVATED = 1;
    ASYD2DSTSD2DSTS_ASYD2DSTS_ICCACTIVATED = 2;
    ASYD2DSTSD2DSTS_ASYD2DSTS_NOAACTIVATED = 3;
    ASYD2DSTSD2DSTS_ASYD2DSTS_HPAACTIVATED = 4;
    ASYD2DSTSD2DSTS_ASYD2DSTS_RESERVED = 5;
  }
  // description CNOA Lane Change Assist Status [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_cnoa_lane_chg_assist_sts = 1;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lane_chg_assist_sts_ub = 2;
  // description Lane Change Fail Type [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 asy_cnoa_lane_chg_fail_type = 3;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_lane_chg_fail_type_ub = 4;
  // description The Reason of CNOA Lane Change Request  . [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_cnoa_req_lane_chg = 5;
  // [] [0|1] [initial_value:None]
  optional bool asy_cnoa_req_lane_chg_ub = 6;
  // [] [0|1] [initial_value:None]
  optional bool asy_d2_d_sts_ub = 7;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 asy_d2_d_sts_chks = 8;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_d2_d_sts_cntr = 9;
  // description Describe D2D functional status  = OFF/ACC/ICC/NOA/HPA [] [0|15] [initial_value:0]
  optional AsyD2DStsD2DStsType asy_d2_d_sts_d2_d_sts = 10;
  // description Auto CNOA Lane Change Status [Unitless] [0.0|31.0] [initial_value:0]
  optional uint32 aut_cnoa_lane_chg_sts = 11;
  // [] [0|1] [initial_value:None]
  optional bool aut_cnoa_lane_chg_sts_ub = 12;
}

message ADCU_ZCUCANFD1_FR31_371 {
// Control Message
  // [] [0|1] [initial_value:None]
  optional bool vfc_vector_fsrl_ub = 1;
  // description BlockID [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 vfc_vector_fsrl_block_id = 2;
  // description SettingsComfort [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid0 = 3;
  // description ParkingDrivingClimatization [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid1 = 4;
  // description ExteriorLighting [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid10 = 5;
  // description VFC11 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid11 = 6;
  // description Alarm [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid12 = 7;
  // description VFC13 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid13 = 8;
  // description InteriorLighting [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid14 = 9;
  // description VFC15 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid15 = 10;
  // description Locking [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid16 = 11;
  // description emoteKeyFunctionality [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid17 = 12;
  // description PropulsionStart [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid18 = 13;
  // description VFC19 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid19 = 14;
  // description PostClimatisation [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid2 = 15;
  // description VFC20 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid20 = 16;
  // description PowerClosures [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid21 = 17;
  // description VehicleDriving [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid22 = 18;
  // description VFC23 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid23 = 19;
  // description SettingsProfile [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid24 = 20;
  // description SeatComfortFunctions [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid25 = 21;
  // description Brake [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid26 = 22;
  // description InfotainmentPoll [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid27 = 23;
  // description HVEnergyStorage [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid28 = 24;
  // description VFC29 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid29 = 25;
  // description PowertrainParkingClimatization [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid3 = 26;
  // description TelematicsConnectivity [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid30 = 27;
  // description VFC31 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid31 = 28;
  // description VFC32 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid32 = 29;
  // description Diagnostics [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid33 = 30;
  // description VehicleModeManagement [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid34 = 31;
  // description TrailerCaravanFunctions [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid35 = 32;
  // description Immobilizer [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid36 = 33;
  // description Windows [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid37 = 34;
  // description Visibility [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid38 = 35;
  // description VFC39 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid39 = 36;
  // description VFC4 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid4 = 37;
  // description VFC40 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid40 = 38;
  // description InfotainmentPush [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid41 = 39;
  // description ChargingHV [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid42 = 40;
  // description BodyPreClimatisation [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid43 = 41;
  // description Crash [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid44 = 42;
  // description GlobalShortDuration [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid45 = 43;
  // description ExteriorLightsHazard [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid46 = 44;
  // description VFC47 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid47 = 45;
  // description DoorOpenWarning [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid48 = 46;
  // description ChargingLVInit [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid49 = 47;
  // description VFC5 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid5 = 48;
  // description VFC50 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid50 = 49;
  // description VFC51 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid51 = 50;
  // description HVBatteryThermalEventWarning [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid52 = 51;
  // description VisualAssist [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid53 = 52;
  // description PassiveSafety [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid54 = 53;
  // description LifeDetection [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid55 = 54;
  // description BackboneFlexray [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid56 = 55;
  // description Functionmarket [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid57 = 56;
  // description VFCid58 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid58 = 57;
  // description VFCid59 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid59 = 58;
  // description SettingsVehicle [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid6 = 59;
  // description VFCid60 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid60 = 60;
  // description VFCid61 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid61 = 61;
  // description VFC7 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid7 = 62;
  // description VFC8 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid8 = 63;
  // description IPWakeup [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrlvf_cid9 = 64;
  // [] [0|1] [initial_value:None]
  optional bool vfc_vector_fsrr_ub = 65;
  // description BlockID [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 vfc_vector_fsrr_block_id = 66;
  // description SettingsComfort [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid0 = 67;
  // description ParkingDrivingClimatization [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid1 = 68;
  // description ExteriorLighting [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid10 = 69;
  // description VFC11 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid11 = 70;
  // description Alarm [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid12 = 71;
  // description VFC13 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid13 = 72;
  // description InteriorLighting [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid14 = 73;
  // description VFC15 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid15 = 74;
  // description Locking [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid16 = 75;
  // description emoteKeyFunctionality [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid17 = 76;
  // description PropulsionStart [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid18 = 77;
  // description VFC19 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid19 = 78;
  // description PostClimatisation [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid2 = 79;
  // description VFC20 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid20 = 80;
  // description PowerClosures [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid21 = 81;
  // description VehicleDriving [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid22 = 82;
  // description VFC23 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid23 = 83;
  // description SettingsProfile [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid24 = 84;
  // description SeatComfortFunctions [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid25 = 85;
  // description Brake [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid26 = 86;
  // description InfotainmentPoll [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid27 = 87;
  // description HVEnergyStorage [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid28 = 88;
  // description VFC29 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid29 = 89;
  // description PowertrainParkingClimatization [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid3 = 90;
  // description TelematicsConnectivity [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid30 = 91;
  // description VFC31 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid31 = 92;
  // description VFC32 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid32 = 93;
  // description Diagnostics [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid33 = 94;
  // description VehicleModeManagement [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid34 = 95;
  // description TrailerCaravanFunctions [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid35 = 96;
  // description Immobilizer [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid36 = 97;
  // description Windows [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid37 = 98;
  // description Visibility [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid38 = 99;
  // description VFC39 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid39 = 100;
  // description VFC4 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid4 = 101;
  // description VFC40 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid40 = 102;
  // description InfotainmentPush [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid41 = 103;
  // description ChargingHV [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid42 = 104;
  // description BodyPreClimatisation [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid43 = 105;
  // description Crash [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid44 = 106;
  // description GlobalShortDuration [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid45 = 107;
  // description ExteriorLightsHazard [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid46 = 108;
  // description VFC47 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid47 = 109;
  // description DoorOpenWarning [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid48 = 110;
  // description ChargingLVInit [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid49 = 111;
  // description VFC5 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid5 = 112;
  // description VFC50 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid50 = 113;
  // description VFC51 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid51 = 114;
  // description HVBatteryThermalEventWarning [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid52 = 115;
  // description VisualAssist [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid53 = 116;
  // description PassiveSafety [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid54 = 117;
  // description LifeDetection [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid55 = 118;
  // description BackboneFlexray [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid56 = 119;
  // description Functionmarket [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid57 = 120;
  // description VFCid58 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid58 = 121;
  // description VFCid59 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid59 = 122;
  // description SettingsVehicle [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid6 = 123;
  // description VFCid60 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid60 = 124;
  // description VFCid61 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid61 = 125;
  // description VFC7 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid7 = 126;
  // description VFC8 [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid8 = 127;
  // description IPWakeup [] [0|1] [initial_value:0]
  optional bool vfc_vector_fsrrvf_cid9 = 128;
  // [] [0|1] [initial_value:None]
  optional bool vfc_vector_hwas_ub = 129;
  // description BlockID [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 vfc_vector_hwas_block_id = 130;
  // description SettingsComfort [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid0 = 131;
  // description ParkingDrivingClimatization [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid1 = 132;
  // description ExteriorLighting [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid10 = 133;
  // description VFC11 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid11 = 134;
  // description Alarm [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid12 = 135;
  // description VFC13 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid13 = 136;
  // description InteriorLighting [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid14 = 137;
  // description VFC15 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid15 = 138;
  // description Locking [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid16 = 139;
  // description emoteKeyFunctionality [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid17 = 140;
  // description PropulsionStart [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid18 = 141;
  // description VFC19 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid19 = 142;
  // description PostClimatisation [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid2 = 143;
  // description VFC20 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid20 = 144;
  // description PowerClosures [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid21 = 145;
  // description VehicleDriving [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid22 = 146;
  // description VFC23 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid23 = 147;
  // description SettingsProfile [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid24 = 148;
  // description SeatComfortFunctions [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid25 = 149;
  // description Brake [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid26 = 150;
  // description InfotainmentPoll [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid27 = 151;
  // description HVEnergyStorage [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid28 = 152;
  // description VFC29 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid29 = 153;
  // description PowertrainParkingClimatization [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid3 = 154;
  // description TelematicsConnectivity [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid30 = 155;
  // description VFC31 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid31 = 156;
  // description VFC32 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid32 = 157;
  // description Diagnostics [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid33 = 158;
  // description VehicleModeManagement [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid34 = 159;
  // description TrailerCaravanFunctions [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid35 = 160;
  // description Immobilizer [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid36 = 161;
  // description Windows [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid37 = 162;
  // description Visibility [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid38 = 163;
  // description VFC39 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid39 = 164;
  // description VFC4 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid4 = 165;
  // description VFC40 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid40 = 166;
  // description InfotainmentPush [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid41 = 167;
  // description ChargingHV [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid42 = 168;
  // description BodyPreClimatisation [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid43 = 169;
  // description Crash [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid44 = 170;
  // description GlobalShortDuration [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid45 = 171;
  // description ExteriorLightsHazard [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid46 = 172;
  // description VFC47 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid47 = 173;
  // description DoorOpenWarning [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid48 = 174;
  // description ChargingLVInit [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid49 = 175;
  // description VFC5 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid5 = 176;
  // description VFC50 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid50 = 177;
  // description VFC51 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid51 = 178;
  // description HVBatteryThermalEventWarning [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid52 = 179;
  // description VisualAssist [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid53 = 180;
  // description PassiveSafety [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid54 = 181;
  // description LifeDetection [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid55 = 182;
  // description BackboneFlexray [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid56 = 183;
  // description Functionmarket [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid57 = 184;
  // description VFCid58 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid58 = 185;
  // description VFCid59 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid59 = 186;
  // description SettingsVehicle [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid6 = 187;
  // description VFCid60 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid60 = 188;
  // description VFCid61 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid61 = 189;
  // description VFC7 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid7 = 190;
  // description VFC8 [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid8 = 191;
  // description IPWakeup [] [0|1] [initial_value:0]
  optional bool vfc_vector_hwasvf_cid9 = 192;
  // [] [0|1] [initial_value:None]
  optional bool vfc_vector_sodl_ub = 193;
  // description BlockID [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 vfc_vector_sodl_block_id = 194;
  // description SettingsComfort [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid0 = 195;
  // description ParkingDrivingClimatization [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid1 = 196;
  // description ExteriorLighting [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid10 = 197;
  // description VFC11 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid11 = 198;
  // description Alarm [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid12 = 199;
  // description VFC13 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid13 = 200;
  // description InteriorLighting [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid14 = 201;
  // description VFC15 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid15 = 202;
  // description Locking [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid16 = 203;
  // description emoteKeyFunctionality [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid17 = 204;
  // description PropulsionStart [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid18 = 205;
  // description VFC19 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid19 = 206;
  // description PostClimatisation [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid2 = 207;
  // description VFC20 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid20 = 208;
  // description PowerClosures [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid21 = 209;
  // description VehicleDriving [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid22 = 210;
  // description VFC23 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid23 = 211;
  // description SettingsProfile [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid24 = 212;
  // description SeatComfortFunctions [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid25 = 213;
  // description Brake [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid26 = 214;
  // description InfotainmentPoll [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid27 = 215;
  // description HVEnergyStorage [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid28 = 216;
  // description VFC29 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid29 = 217;
  // description PowertrainParkingClimatization [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid3 = 218;
  // description TelematicsConnectivity [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid30 = 219;
  // description VFC31 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid31 = 220;
  // description VFC32 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid32 = 221;
  // description Diagnostics [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid33 = 222;
  // description VehicleModeManagement [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid34 = 223;
  // description TrailerCaravanFunctions [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid35 = 224;
  // description Immobilizer [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid36 = 225;
  // description Windows [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid37 = 226;
  // description Visibility [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid38 = 227;
  // description VFC39 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid39 = 228;
  // description VFC4 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid4 = 229;
  // description VFC40 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid40 = 230;
  // description InfotainmentPush [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid41 = 231;
  // description ChargingHV [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid42 = 232;
  // description BodyPreClimatisation [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid43 = 233;
  // description Crash [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid44 = 234;
  // description GlobalShortDuration [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid45 = 235;
  // description ExteriorLightsHazard [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid46 = 236;
  // description VFC47 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid47 = 237;
  // description DoorOpenWarning [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid48 = 238;
  // description ChargingLVInit [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid49 = 239;
  // description VFC5 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid5 = 240;
  // description VFC50 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid50 = 241;
  // description VFC51 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid51 = 242;
  // description HVBatteryThermalEventWarning [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid52 = 243;
  // description VisualAssist [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid53 = 244;
  // description PassiveSafety [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid54 = 245;
  // description LifeDetection [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid55 = 246;
  // description BackboneFlexray [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid56 = 247;
  // description Functionmarket [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid57 = 248;
  // description VFCid58 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid58 = 249;
  // description VFCid59 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid59 = 250;
  // description SettingsVehicle [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid6 = 251;
  // description VFCid60 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid60 = 252;
  // description VFCid61 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid61 = 253;
  // description VFC7 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid7 = 254;
  // description VFC8 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid8 = 255;
  // description IPWakeup [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodlvf_cid9 = 256;
  // [] [0|1] [initial_value:None]
  optional bool vfc_vector_sodr_ub = 257;
  // description BlockID [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 vfc_vector_sodr_block_id = 258;
  // description SettingsComfort [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid0 = 259;
  // description ParkingDrivingClimatization [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid1 = 260;
  // description ExteriorLighting [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid10 = 261;
  // description VFC11 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid11 = 262;
  // description Alarm [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid12 = 263;
  // description VFC13 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid13 = 264;
  // description InteriorLighting [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid14 = 265;
  // description VFC15 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid15 = 266;
  // description Locking [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid16 = 267;
  // description emoteKeyFunctionality [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid17 = 268;
  // description PropulsionStart [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid18 = 269;
  // description VFC19 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid19 = 270;
  // description PostClimatisation [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid2 = 271;
  // description VFC20 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid20 = 272;
  // description PowerClosures [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid21 = 273;
  // description VehicleDriving [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid22 = 274;
  // description VFC23 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid23 = 275;
  // description SettingsProfile [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid24 = 276;
  // description SeatComfortFunctions [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid25 = 277;
  // description Brake [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid26 = 278;
  // description InfotainmentPoll [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid27 = 279;
  // description HVEnergyStorage [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid28 = 280;
  // description VFC29 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid29 = 281;
  // description PowertrainParkingClimatization [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid3 = 282;
  // description TelematicsConnectivity [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid30 = 283;
  // description VFC31 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid31 = 284;
  // description VFC32 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid32 = 285;
  // description Diagnostics [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid33 = 286;
  // description VehicleModeManagement [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid34 = 287;
  // description TrailerCaravanFunctions [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid35 = 288;
  // description Immobilizer [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid36 = 289;
  // description Windows [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid37 = 290;
  // description Visibility [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid38 = 291;
  // description VFC39 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid39 = 292;
  // description VFC4 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid4 = 293;
  // description VFC40 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid40 = 294;
  // description InfotainmentPush [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid41 = 295;
  // description ChargingHV [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid42 = 296;
  // description BodyPreClimatisation [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid43 = 297;
  // description Crash [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid44 = 298;
  // description GlobalShortDuration [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid45 = 299;
  // description ExteriorLightsHazard [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid46 = 300;
  // description VFC47 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid47 = 301;
  // description DoorOpenWarning [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid48 = 302;
  // description ChargingLVInit [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid49 = 303;
  // description VFC5 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid5 = 304;
  // description VFC50 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid50 = 305;
  // description VFC51 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid51 = 306;
  // description HVBatteryThermalEventWarning [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid52 = 307;
  // description VisualAssist [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid53 = 308;
  // description PassiveSafety [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid54 = 309;
  // description LifeDetection [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid55 = 310;
  // description BackboneFlexray [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid56 = 311;
  // description Functionmarket [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid57 = 312;
  // description VFCid58 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid58 = 313;
  // description VFCid59 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid59 = 314;
  // description SettingsVehicle [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid6 = 315;
  // description VFCid60 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid60 = 316;
  // description VFCid61 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid61 = 317;
  // description VFC7 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid7 = 318;
  // description VFC8 [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid8 = 319;
  // description IPWakeup [] [0|1] [initial_value:0]
  optional bool vfc_vector_sodrvf_cid9 = 320;
}

message ADCU_ZCUCANFD1_FR32_372 {
// Control Message
  // [] [0|1] [initial_value:None]
  optional bool vfc_vector_flr_ub = 1;
  // description BlockID [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 vfc_vector_flr_block_id = 2;
  // description SettingsComfort [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid0 = 3;
  // description ParkingDrivingClimatization [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid1 = 4;
  // description ExteriorLighting [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid10 = 5;
  // description VFC11 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid11 = 6;
  // description Alarm [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid12 = 7;
  // description VFC13 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid13 = 8;
  // description InteriorLighting [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid14 = 9;
  // description VFC15 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid15 = 10;
  // description Locking [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid16 = 11;
  // description emoteKeyFunctionality [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid17 = 12;
  // description PropulsionStart [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid18 = 13;
  // description VFC19 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid19 = 14;
  // description PostClimatisation [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid2 = 15;
  // description VFC20 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid20 = 16;
  // description PowerClosures [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid21 = 17;
  // description VehicleDriving [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid22 = 18;
  // description VFC23 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid23 = 19;
  // description SettingsProfile [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid24 = 20;
  // description SeatComfortFunctions [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid25 = 21;
  // description Brake [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid26 = 22;
  // description InfotainmentPoll [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid27 = 23;
  // description HVEnergyStorage [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid28 = 24;
  // description VFC29 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid29 = 25;
  // description PowertrainParkingClimatization [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid3 = 26;
  // description TelematicsConnectivity [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid30 = 27;
  // description VFC31 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid31 = 28;
  // description VFC32 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid32 = 29;
  // description Diagnostics [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid33 = 30;
  // description VehicleModeManagement [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid34 = 31;
  // description TrailerCaravanFunctions [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid35 = 32;
  // description Immobilizer [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid36 = 33;
  // description Windows [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid37 = 34;
  // description Visibility [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid38 = 35;
  // description VFC39 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid39 = 36;
  // description VFC4 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid4 = 37;
  // description VFC40 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid40 = 38;
  // description InfotainmentPush [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid41 = 39;
  // description ChargingHV [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid42 = 40;
  // description BodyPreClimatisation [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid43 = 41;
  // description Crash [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid44 = 42;
  // description GlobalShortDuration [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid45 = 43;
  // description ExteriorLightsHazard [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid46 = 44;
  // description VFC47 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid47 = 45;
  // description DoorOpenWarning [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid48 = 46;
  // description ChargingLVInit [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid49 = 47;
  // description VFC5 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid5 = 48;
  // description VFC50 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid50 = 49;
  // description VFC51 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid51 = 50;
  // description HVBatteryThermalEventWarning [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid52 = 51;
  // description VisualAssist [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid53 = 52;
  // description PassiveSafety [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid54 = 53;
  // description LifeDetection [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid55 = 54;
  // description BackboneFlexray [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid56 = 55;
  // description Functionmarket [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid57 = 56;
  // description VFCid58 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid58 = 57;
  // description VFCid59 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid59 = 58;
  // description SettingsVehicle [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid6 = 59;
  // description VFCid60 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid60 = 60;
  // description VFCid61 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid61 = 61;
  // description VFC7 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid7 = 62;
  // description VFC8 [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid8 = 63;
  // description IPWakeup [] [0|1] [initial_value:0]
  optional bool vfc_vector_flrvf_cid9 = 64;
}

message DHU_ZCUCANFD1_FR07_379 {
// Report Message
  enum HandsOnDetectionErrorStatusType {
    HANDSONDETECTIONERRORSTATUS_ERRORSTS_INIT_DIAG = 0;
    HANDSONDETECTIONERRORSTATUS_ERRORSTS_RESERVED1 = 1;
    HANDSONDETECTIONERRORSTATUS_ERRORSTS_HOSWD_READY = 2;
    HANDSONDETECTIONERRORSTATUS_ERRORSTS_HOSWD_CUFAULT = 3;
    HANDSONDETECTIONERRORSTATUS_ERRORSTS_HOSWD_SMFAULT = 4;
    HANDSONDETECTIONERRORSTATUS_ERRORSTS_HOSWD_SVFAULT = 5;
    HANDSONDETECTIONERRORSTATUS_ERRORSTS_RESERVED2 = 6;
    HANDSONDETECTIONERRORSTATUS_ERRORSTS_RESERVED3 = 7;
  }
  enum HandsOnDetectionHandsOnStatusType {
    HANDSONDETECTIONHANDSONSTATUS_INIT_CLASS = 0;
    HANDSONDETECTIONHANDSONSTATUS_HANDS_ON = 1;
    HANDSONDETECTIONHANDSONSTATUS_HANDS_OFF = 2;
    HANDSONDETECTIONHANDSONSTATUS_UNDETERMINED_CLASS = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool hands_on_detection_ub = 1;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 hands_on_detection_chks = 2;
  // description couter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 hands_on_detection_cntr = 3;
  // description ErrorStaus [] [0|7] [initial_value:0]
  optional HandsOnDetectionErrorStatusType hands_on_detection_error_status = 4;
  // description  HandsOnStatus [] [0|3] [initial_value:0]
  optional HandsOnDetectionHandsOnStatusType hands_on_detection_hands_on_status = 5;
  // description IHU fail signal indicates IHU is in failure mode. [] [0|1] [initial_value:0]
  optional bool ih_ufail = 6;
  // [] [0|1] [initial_value:None]
  optional bool ih_ufail_ub = 7;
  // [] [0|1] [initial_value:None]
  optional bool list_of_nod_av_ub = 8;
  // description Bit coded with 0 indicating not mounted and 1 indicating mounted.  ECUs from 1 to 32. [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 list_of_nod_av1 = 9;
  // description ECUs from 33 to 64. [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 list_of_nod_av2 = 10;
  // description ECUs from 65 to 96. [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 list_of_nod_av3 = 11;
  // description ECUs from 97 to 128. [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 list_of_nod_av4 = 12;
  // description ECUs from 129 to 160. [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 list_of_nod_av5 = 13;
  // description ECUs from 161 to 192. [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 list_of_nod_av6 = 14;
  // description ECUs from 193 to 224. [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 list_of_nod_av7 = 15;
  // description ECUs from 225 to 256. [Unitless] [0.0|4294967295.0] [initial_value:0]
  optional uint32 list_of_nod_av8 = 16;
}

message ZCUD_ZCUCANFD1_FR09_3A3 {
// Report Message
  enum VehBattUSysUQfType {
    VEHBATTUSYSUQF_GENQF1_UNDEFINDDATAACCUR = 0;
    VEHBATTUSYSUQF_GENQF1_TMPUNDEFDDATA = 1;
    VEHBATTUSYSUQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    VEHBATTUSYSUQF_GENQF1_ACCURDATA = 3;
  }
  // description HV battery State-Of-Charge (SOC) value for display to driver. Note: this value may differ from the actual battery SOC.  [%] [0.0|102.30000000000001] [initial_value:0]
  optional double disp_hv_batt_lvl_of_chrg = 1;
  // [] [0|1] [initial_value:None]
  optional bool disp_hv_batt_lvl_of_chrg_ub = 2;
  // description Passenger airbag status, based on PACOS input. [] [0|1] [initial_value:1]
  optional bool pass_airb_sts = 3;
  // [] [0|1] [initial_value:None]
  optional bool pass_airb_sts_ub = 4;
  // [] [0|1] [initial_value:None]
  optional bool veh_batt_u_ub = 5;
  // description Vehicle System Voltage At 12V side [Volt] [0.0|25.0] [initial_value:0]
  optional double veh_batt_u_sys_u = 6;
  // description Present vehicle voltage measured by CEM with QF [] [0|3] [initial_value:1]
  optional VehBattUSysUQfType veh_batt_u_sys_u_qf = 7;
}

message BCM_ZCUCANFD1_FR08_3E5 {
// Report Message
  enum EmgyBrkLiReqEmgyBrkType {
    EMGYBRKLIREQEMGYBRK_EBLREQ_EMGYBRKGNOTINPROGS = 0;
    EMGYBRKLIREQEMGYBRK_EBLREQ_EMGYBRKGINPROGS = 1;
    EMGYBRKLIREQEMGYBRK_EBLREQ_EMGYBRKGINPROGSATSPDLO = 2;
  }
  // [] [0|1] [initial_value:None]
  optional bool emgy_brk_li_req_ub = 1;
  // description check sum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 emgy_brk_li_req_chks = 2;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 emgy_brk_li_req_cntr = 3;
  // description Emergency brake light (EBL) request [] [0|3] [initial_value:0]
  optional EmgyBrkLiReqEmgyBrkType emgy_brk_li_req_emgy_brk = 4;
}

message BCM_ZCUCANFD1_FR02_401 {
// Report Message
  // [] [0|1] [initial_value:None]
  optional bool abs_ctrl_actv_for_whl_ub = 1;
  // description Anti Blocking Systems (ABS) control is active or not (for front left wheel) [] [0|1] [initial_value:0]
  optional bool abs_ctrl_actv_for_whl_frnt_le = 2;
  // description Anti Blocking Systems (ABS) control is active or not (for front right wheel) [] [0|1] [initial_value:0]
  optional bool abs_ctrl_actv_for_whl_frnt_ri = 3;
  // description Anti Blocking Systems (ABS) control is active or not (for rear left wheel) [] [0|1] [initial_value:0]
  optional bool abs_ctrl_actv_for_whl_re_le = 4;
  // description Anti Blocking Systems (ABS) control is active or not (for rear right wheel) [] [0|1] [initial_value:0]
  optional bool abs_ctrl_actv_for_whl_re_ri = 5;
}

message PASZCUCANFD1_FR19_451 {
// Control Message
  enum InhbCdnOfPrkgEmgyBrkType {
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_NOINHIBITEDCONDITIONS = 0;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_TAILGATENOTCLOSE = 1;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_HOODNOTCLOSE = 2;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_DRIVERDOORNOTCLOSE = 3;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_PASSENGERDOORNOTCLOSE = 4;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_DRIVERSIDEREARDOORNOCLOSE = 5;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_PASSENGERSIDEREARDOORNOCLOSE = 6;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_ESCERROR = 7;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_SAFETYBELTUNLOCK = 8;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_TRAILERMODE = 9;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_VEHICLESPEEDISINVALID = 10;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_THELATERALANDLONGITUDINALACCELERATIONSIGNALISINVALID = 11;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_GEARSIGNALISINVALID = 12;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_MISSCOMMUNICATEWITHGEARSIGNAL = 13;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_MISSCOMMUNICATEWITHVEHICLESPEEDSIGNAL = 14;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_RESERVED1 = 15;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_MISSCOMMUNICATEWITHWHEELSPEEDDIRECTION = 16;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_MISSCOMMUNICATEWITHESCSIGNAL = 17;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_MISSCOMMUNICATEWITHTAILGATE = 18;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_MISSCOMMUNICATEWITHHOOD = 19;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_MISSCOMMUNICATEWITHDRIVERDOOR = 20;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_MISSCOMMUNICATEWITHPASSENGERDOOR = 21;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_MISSCOMMUNICATEWITHDRIVERSIDEREARDOOR = 22;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_MISSCOMMUNICATEWITHPASSENGERSIDEREARDOOR = 23;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_MISSCOMMUNICATEWITHSAFETYBELTSIGNAL = 24;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_MISSCOMMUNICATEWITHTRAILERMODESIGNAL = 25;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_MISSCOMMUNICATEWITHACCELERATEPEDALSIGNAL = 26;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_MISSCOMMUNICATEWITHTHELATERALANDLONGITUDINALACCELERATIONSIGNAL = 27;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_MISSCOMMUNICATEWITHBRAKEPEDALSIGNAL = 28;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_MISSCOMMUNICATEWITHEPBSIGNAL = 29;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_MISSCOMMUNICATEWITHSTEERINGANGLE = 30;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_MISSCOMMUNICATEWITHVEHICLESTANDSTILLSTATUS = 31;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_REARVIEWMIRRORFOLD = 32;
    INHBCDNOFPRKGEMGYBRK_INHBCDNOFPRKGEMGYBRK_RAINISTOOLARGE = 33;
  }
  // description Inhibit Condition Of Parking Emergency Brake for big data record [] [0|63] [initial_value:0]
  optional InhbCdnOfPrkgEmgyBrkType inhb_cdn_of_prkg_emgy_brk = 1;
  // [] [0|1] [initial_value:None]
  optional bool inhb_cdn_of_prkg_emgy_brk_ub = 2;
}

message ADCU_ZCUCANFD1_FR15_469 {
// Control Message
  enum FrntRdrStsRdrStsMisAlignType {
    FRNTRDRSTSRDRSTSMISALIGN_MISALIGN_CALIBRATIONNOTSTART = 0;
    FRNTRDRSTSRDRSTSMISALIGN_MISALIGN_SUCCESSFULLYCALIBRATEDINFACTORYORAFTERSALES = 1;
    FRNTRDRSTSRDRSTSMISALIGN_MISALIGN_SUCCESSFULLYAUTOCALIBRATED = 2;
    FRNTRDRSTSRDRSTSMISALIGN_MISALIGN_MISALIGNMENTDEGREEISLARGERTHANTHRESHOLD_STATICCALIBRATIONFAIL = 3;
    FRNTRDRSTSRDRSTSMISALIGN_MISALIGN_CANNOTBECALIBRATEDSTATICALLYCAUSEOTHERREASON = 4;
    FRNTRDRSTSRDRSTSMISALIGN_MISALIGN_AUTOCALIBRATEFAIL_CAUSEMISALIGNMENTDEGREEISLARGERTHANTHRESHOLDOROTHERREASON = 5;
    FRNTRDRSTSRDRSTSMISALIGN_MISALIGN_MISALIGNMENTDEGREEISLARGERTHANTHRESHOLD_DYNAMICCALIBRATIONFAILINFACTORYORAFTERSALES = 6;
    FRNTRDRSTSRDRSTSMISALIGN_MISALIGN_CANNOTBECALIBRATEDDYNAMICALLYCAUSEOTHERREASON = 7;
  }
  enum FrntRdrStsRdrStsSftyFltType {
    FRNTRDRSTSRDRSTSSFTYFLT_SFTYFLT_UNDEFINED = 0;
    FRNTRDRSTSRDRSTSSFTYFLT_SFTYFLT_NOSAFETYFAULT = 1;
    FRNTRDRSTSRDRSTSSFTYFLT_SFTYFLT_SAFETYFAULT = 2;
    FRNTRDRSTSRDRSTSSFTYFLT_SFTYFLT_RESERVED = 3;
  }
  enum ReSideRdrLeStsRdrStsMisAlignType {
    RESIDERDRLESTSRDRSTSMISALIGN_MISALIGN_CALIBRATIONNOTSTART = 0;
    RESIDERDRLESTSRDRSTSMISALIGN_MISALIGN_SUCCESSFULLYCALIBRATEDINFACTORYORAFTERSALES = 1;
    RESIDERDRLESTSRDRSTSMISALIGN_MISALIGN_SUCCESSFULLYAUTOCALIBRATED = 2;
    RESIDERDRLESTSRDRSTSMISALIGN_MISALIGN_MISALIGNMENTDEGREEISLARGERTHANTHRESHOLD_STATICCALIBRATIONFAIL = 3;
    RESIDERDRLESTSRDRSTSMISALIGN_MISALIGN_CANNOTBECALIBRATEDSTATICALLYCAUSEOTHERREASON = 4;
    RESIDERDRLESTSRDRSTSMISALIGN_MISALIGN_AUTOCALIBRATEFAIL_CAUSEMISALIGNMENTDEGREEISLARGERTHANTHRESHOLDOROTHERREASON = 5;
    RESIDERDRLESTSRDRSTSMISALIGN_MISALIGN_MISALIGNMENTDEGREEISLARGERTHANTHRESHOLD_DYNAMICCALIBRATIONFAILINFACTORYORAFTERSALES = 6;
    RESIDERDRLESTSRDRSTSMISALIGN_MISALIGN_CANNOTBECALIBRATEDDYNAMICALLYCAUSEOTHERREASON = 7;
  }
  enum ReSideRdrLeStsRdrStsSftyFltType {
    RESIDERDRLESTSRDRSTSSFTYFLT_SFTYFLT_UNDEFINED = 0;
    RESIDERDRLESTSRDRSTSSFTYFLT_SFTYFLT_NOSAFETYFAULT = 1;
    RESIDERDRLESTSRDRSTSSFTYFLT_SFTYFLT_SAFETYFAULT = 2;
    RESIDERDRLESTSRDRSTSSFTYFLT_SFTYFLT_RESERVED = 3;
  }
  enum ReSideRdrRiStsRdrStsMisAlignType {
    RESIDERDRRISTSRDRSTSMISALIGN_MISALIGN_CALIBRATIONNOTSTART = 0;
    RESIDERDRRISTSRDRSTSMISALIGN_MISALIGN_SUCCESSFULLYCALIBRATEDINFACTORYORAFTERSALES = 1;
    RESIDERDRRISTSRDRSTSMISALIGN_MISALIGN_SUCCESSFULLYAUTOCALIBRATED = 2;
    RESIDERDRRISTSRDRSTSMISALIGN_MISALIGN_MISALIGNMENTDEGREEISLARGERTHANTHRESHOLD_STATICCALIBRATIONFAIL = 3;
    RESIDERDRRISTSRDRSTSMISALIGN_MISALIGN_CANNOTBECALIBRATEDSTATICALLYCAUSEOTHERREASON = 4;
    RESIDERDRRISTSRDRSTSMISALIGN_MISALIGN_AUTOCALIBRATEFAIL_CAUSEMISALIGNMENTDEGREEISLARGERTHANTHRESHOLDOROTHERREASON = 5;
    RESIDERDRRISTSRDRSTSMISALIGN_MISALIGN_MISALIGNMENTDEGREEISLARGERTHANTHRESHOLD_DYNAMICCALIBRATIONFAILINFACTORYORAFTERSALES = 6;
    RESIDERDRRISTSRDRSTSMISALIGN_MISALIGN_CANNOTBECALIBRATEDDYNAMICALLYCAUSEOTHERREASON = 7;
  }
  enum ReSideRdrRiStsRdrStsSftyFltType {
    RESIDERDRRISTSRDRSTSSFTYFLT_SFTYFLT_UNDEFINED = 0;
    RESIDERDRRISTSRDRSTSSFTYFLT_SFTYFLT_NOSAFETYFAULT = 1;
    RESIDERDRRISTSRDRSTSSFTYFLT_SFTYFLT_SAFETYFAULT = 2;
    RESIDERDRRISTSRDRSTSSFTYFLT_SFTYFLT_RESERVED = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool frnt_rdr_sts_ub = 1;
  // description Number of detections [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 frnt_rdr_sts_rdr_nr_detn = 2;
  // description Number of objects [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 frnt_rdr_sts_rdr_nr_obj = 3;
  // description Blockage flag for 0bin [] [0|1] [initial_value:0]
  optional bool frnt_rdr_sts_rdr_sts_blkd0bin = 4;
  // description Confidence of radar blockage [%] [0.0|100.0] [initial_value:0]
  optional double frnt_rdr_sts_rdr_sts_blkd_conf = 5;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 frnt_rdr_sts_rdr_sts_chks = 6;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 frnt_rdr_sts_rdr_sts_cntr = 7;
  // description Indication of radar interference, 0 means no interference, 100 means the radar fully saturated from interference [%] [0.0|100.0] [initial_value:0]
  optional double frnt_rdr_sts_rdr_sts_dstbc = 8;
  // description Indication whether radar functionality is enabled [] [0|1] [initial_value:0]
  optional bool frnt_rdr_sts_rdr_sts_ena = 9;
  // description Indication whether radar is faulty [] [0|1] [initial_value:0]
  optional bool frnt_rdr_sts_rdr_sts_faulty = 10;
  // description Reserve [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 frnt_rdr_sts_rdr_sts_if_vers_major = 11;
  // description Reserve [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 frnt_rdr_sts_rdr_sts_if_vers_minor = 12;
  // description The time instance starting from the end of the last measurement acquisition per cycle to the CAN-FD frames being outputted on the CAN-FD bus [Unitless] [0.0|65535.0] [initial_value:0]
  optional uint32 frnt_rdr_sts_rdr_sts_latency = 13;
  // description Indication whether 0, calibration not start. 1, successfully calibrated in factory or after-sales. 2, successfully auto-calibrated. 3, misalignment degree is larger than threshold, static calibration fail. 4, can not be calibrated statically cause other reason. 5, auto-calibrate fail (cause misalignment degree is larger than threshold or other reason). 6, misalignment degree is larger than threshold, dynamic calibration fail in factory or after-sales. 7, can not be calibrated dynamically cause other reason. [] [0|7] [initial_value:0]
  optional FrntRdrStsRdrStsMisAlignType frnt_rdr_sts_rdr_sts_mis_align = 14;
  // description Signal used to detect missing communication from radar [] [0|1] [initial_value:0]
  optional bool frnt_rdr_sts_rdr_sts_miss_com = 15;
  // description Safety faulty status [] [0|3] [initial_value:1]
  optional FrntRdrStsRdrStsSftyFltType frnt_rdr_sts_rdr_sts_sfty_flt = 16;
  // description Timestamp [s] [0.0|429496.7295] [initial_value:0]
  optional double frnt_rdr_sts_rdr_sts_ti_stamp = 17;
  // description Timestamp [] [0|1] [initial_value:0]
  optional bool frnt_rdr_sts_rdr_sts_ti_stamp_sts_glb_ti_bas = 18;
  // description Time synchronization status - synchronized to gateway [] [0|1] [initial_value:0]
  optional bool frnt_rdr_sts_rdr_sts_ti_stamp_sts_sync_to_gatewy = 19;
  // description Time synchronization status - time leap [] [0|1] [initial_value:0]
  optional bool frnt_rdr_sts_rdr_sts_ti_stamp_sts_ti_leap = 20;
  // description Time synchronization status - time out [] [0|1] [initial_value:0]
  optional bool frnt_rdr_sts_rdr_sts_ti_stamp_sts_ti_out = 21;
  // description Estimated compensation factor for host speed. [Unitless] [0.92|1.075] [initial_value:16]
  optional double frnt_rdr_sts_rdr_sts_whl_spd_cmp_fac = 22;
  // [] [0|1] [initial_value:None]
  optional bool re_side_rdr_le_sts_ub = 23;
  // description Number of detections [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 re_side_rdr_le_sts_rdr_nr_detn = 24;
  // description Number of objects [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 re_side_rdr_le_sts_rdr_nr_obj = 25;
  // description Blockage flag for 0bin [] [0|1] [initial_value:0]
  optional bool re_side_rdr_le_sts_rdr_sts_blkd0bin = 26;
  // description Confidence of radar blockage [%] [0.0|100.0] [initial_value:0]
  optional double re_side_rdr_le_sts_rdr_sts_blkd_conf = 27;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 re_side_rdr_le_sts_rdr_sts_chks = 28;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 re_side_rdr_le_sts_rdr_sts_cntr = 29;
  // description Indication of radar interference, 0 means no interference, 100 means the radar fully saturated from interference [%] [0.0|100.0] [initial_value:0]
  optional double re_side_rdr_le_sts_rdr_sts_dstbc = 30;
  // description Indication whether radar functionality is enabled [] [0|1] [initial_value:0]
  optional bool re_side_rdr_le_sts_rdr_sts_ena = 31;
  // description Indication whether radar is faulty [] [0|1] [initial_value:0]
  optional bool re_side_rdr_le_sts_rdr_sts_faulty = 32;
  // description Interface version major [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 re_side_rdr_le_sts_rdr_sts_if_vers_major = 33;
  // description Interface version major [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 re_side_rdr_le_sts_rdr_sts_if_vers_minor = 34;
  // description The latency definition is the time instance starting from the end of the last measurement acquisition per cycle to the CAN-FD frames being outputted on the CAN-FD bus. The unit of latency is ms. [Unitless] [0.0|65535.0] [initial_value:65535]
  optional uint32 re_side_rdr_le_sts_rdr_sts_latency = 35;
  // description 0, calibration not start. 1, successfully calibrated in factory or after-sales. 2, successfully auto-calibrated. 3, misalignment degree is larger than threshold, static calibration fail. 4, can not be calibrated statically cause other reason. 5, auto-calibrate fail (cause the misalignment degree is larger than threshold or other reason). 6, misalignment degree is larger than threshold, dynamic calibration fail in factory or after-sales. 7, can not be calibrated dynamically cause other reason. [] [0|7] [initial_value:0]
  optional ReSideRdrLeStsRdrStsMisAlignType re_side_rdr_le_sts_rdr_sts_mis_align = 36;
  // description Signal used to detect missing communication from radar. Reserved/ [] [0|1] [initial_value:0]
  optional bool re_side_rdr_le_sts_rdr_sts_miss_com = 37;
  // description Safety faulty status [] [0|3] [initial_value:1]
  optional ReSideRdrLeStsRdrStsSftyFltType re_side_rdr_le_sts_rdr_sts_sfty_flt = 38;
  // description Timestamp [s] [0.0|429496.7295] [initial_value:0]
  optional double re_side_rdr_le_sts_rdr_sts_ti_stamp = 39;
  // description Time synchronization status - synchronized to global time base [] [0|1] [initial_value:0]
  optional bool re_side_rdr_le_sts_rdr_sts_ti_stamp_sts_glb_ti_bas = 40;
  // description Time synchronization status - synchronized to gateway [] [0|1] [initial_value:0]
  optional bool re_side_rdr_le_sts_rdr_sts_ti_stamp_sts_sync_to_gatewy = 41;
  // description Time synchronization status - time leap [] [0|1] [initial_value:0]
  optional bool re_side_rdr_le_sts_rdr_sts_ti_stamp_sts_ti_leap = 42;
  // description Time synchronization status - time out [] [0|1] [initial_value:0]
  optional bool re_side_rdr_le_sts_rdr_sts_ti_stamp_sts_ti_out = 43;
  // description reserved, not use. [Unitless] [0.92|1.075] [initial_value:16]
  optional double re_side_rdr_le_sts_rdr_sts_whl_spd_cmp_fac = 44;
  // [] [0|1] [initial_value:None]
  optional bool re_side_rdr_ri_sts_ub = 45;
  // description Number of detections [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 re_side_rdr_ri_sts_rdr_nr_detn = 46;
  // description Number of objects [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 re_side_rdr_ri_sts_rdr_nr_obj = 47;
  // description Blockage flag for 0bin [] [0|1] [initial_value:0]
  optional bool re_side_rdr_ri_sts_rdr_sts_blkd0bin = 48;
  // description Confidence of radar blockage [%] [0.0|100.0] [initial_value:0]
  optional double re_side_rdr_ri_sts_rdr_sts_blkd_conf = 49;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 re_side_rdr_ri_sts_rdr_sts_chks = 50;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 re_side_rdr_ri_sts_rdr_sts_cntr = 51;
  // description Indication of radar interference, 0 means no interference, 100 means the radar fully saturated from interference [%] [0.0|100.0] [initial_value:0]
  optional double re_side_rdr_ri_sts_rdr_sts_dstbc = 52;
  // description Indication whether radar functionality is enabled [] [0|1] [initial_value:0]
  optional bool re_side_rdr_ri_sts_rdr_sts_ena = 53;
  // description Indication whether radar is faulty [] [0|1] [initial_value:0]
  optional bool re_side_rdr_ri_sts_rdr_sts_faulty = 54;
  // description Interface version major [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 re_side_rdr_ri_sts_rdr_sts_if_vers_major = 55;
  // description Interface version major [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 re_side_rdr_ri_sts_rdr_sts_if_vers_minor = 56;
  // description The latency definition is the time instance starting from the end of the last measurement acquisition per cycle to the CAN-FD frames being outputted on the CAN-FD bus. The unit of latency is ms. [Unitless] [0.0|65535.0] [initial_value:65535]
  optional uint32 re_side_rdr_ri_sts_rdr_sts_latency = 57;
  // description 0, calibration not start. 1, successfully calibrated in factory or after-sales. 2, successfully auto-calibrated. 3, misalignment degree is larger than threshold, static calibration fail. 4, can not be calibrated statically cause other reason. 5, auto-calibrate fail (cause the misalignment degree is larger than threshold or other reason). 6, misalignment degree is larger than threshold, dynamic calibration fail in factory or after-sales. 7, can not be calibrated dynamically cause other reason. [] [0|7] [initial_value:0]
  optional ReSideRdrRiStsRdrStsMisAlignType re_side_rdr_ri_sts_rdr_sts_mis_align = 58;
  // description Signal used to detect missing communication from radar.Reserved/ [] [0|1] [initial_value:0]
  optional bool re_side_rdr_ri_sts_rdr_sts_miss_com = 59;
  // description Safety faulty status [] [0|3] [initial_value:1]
  optional ReSideRdrRiStsRdrStsSftyFltType re_side_rdr_ri_sts_rdr_sts_sfty_flt = 60;
  // description Timestamp [s] [0.0|429496.7295] [initial_value:0]
  optional double re_side_rdr_ri_sts_rdr_sts_ti_stamp = 61;
  // description Time synchronization status - synchronized to global time base [] [0|1] [initial_value:0]
  optional bool re_side_rdr_ri_sts_rdr_sts_ti_stamp_sts_glb_ti_bas = 62;
  // description Time synchronization status - synchronized to gateway [] [0|1] [initial_value:0]
  optional bool re_side_rdr_ri_sts_rdr_sts_ti_stamp_sts_sync_to_gatewy = 63;
  // description Time synchronization status - time leap [] [0|1] [initial_value:0]
  optional bool re_side_rdr_ri_sts_rdr_sts_ti_stamp_sts_ti_leap = 64;
  // description Time synchronization status - time out [] [0|1] [initial_value:0]
  optional bool re_side_rdr_ri_sts_rdr_sts_ti_stamp_sts_ti_out = 65;
  // description reserved, not use [Unitless] [0.92|1.075] [initial_value:16]
  optional double re_side_rdr_ri_sts_rdr_sts_whl_spd_cmp_fac = 66;
}

message ADCU_ZCUCANFD1_FR05_480 {
// Control Message
  enum AsyObjForBigData1SnsrSrcOfAbsLatSpdType {
    ASYOBJFORBIGDATA1SNSRSRCOFABSLATSPD_SNSRSRC1_UKWN = 0;
    ASYOBJFORBIGDATA1SNSRSRCOFABSLATSPD_SNSRSRC1_RADAR = 1;
    ASYOBJFORBIGDATA1SNSRSRCOFABSLATSPD_SNSRSRC1_CAM = 2;
    ASYOBJFORBIGDATA1SNSRSRCOFABSLATSPD_SNSRSRC1_FUSN = 3;
  }
  enum AsyObjForBigData1SnsrSrcOfAbsLgtSpdType {
    ASYOBJFORBIGDATA1SNSRSRCOFABSLGTSPD_SNSRSRC1_UKWN = 0;
    ASYOBJFORBIGDATA1SNSRSRCOFABSLGTSPD_SNSRSRC1_RADAR = 1;
    ASYOBJFORBIGDATA1SNSRSRCOFABSLGTSPD_SNSRSRC1_CAM = 2;
    ASYOBJFORBIGDATA1SNSRSRCOFABSLGTSPD_SNSRSRC1_FUSN = 3;
  }
  enum AsyObjForBigData1TypeType {
    ASYOBJFORBIGDATA1TYPE_ASYOBJTYPE_CAR = 0;
    ASYOBJFORBIGDATA1TYPE_ASYOBJTYPE_PEDESTRIAN = 1;
    ASYOBJFORBIGDATA1TYPE_ASYOBJTYPE_CYCLIST = 2;
    ASYOBJFORBIGDATA1TYPE_ASYOBJTYPE_MOTORBIKE = 3;
    ASYOBJFORBIGDATA1TYPE_ASYOBJTYPE_BUS = 4;
    ASYOBJFORBIGDATA1TYPE_ASYOBJTYPE_TRUCK = 5;
    ASYOBJFORBIGDATA1TYPE_ASYOBJTYPE_TREE = 6;
    ASYOBJFORBIGDATA1TYPE_ASYOBJTYPE_WALL = 7;
    ASYOBJFORBIGDATA1TYPE_ASYOBJTYPE_ANIMAL = 8;
    ASYOBJFORBIGDATA1TYPE_ASYOBJTYPE_UNKNOWN = 9;
  }
  enum AsyObjForBigData2SnsrSrcOfAbsLatSpdType {
    ASYOBJFORBIGDATA2SNSRSRCOFABSLATSPD_SNSRSRC1_UKWN = 0;
    ASYOBJFORBIGDATA2SNSRSRCOFABSLATSPD_SNSRSRC1_RADAR = 1;
    ASYOBJFORBIGDATA2SNSRSRCOFABSLATSPD_SNSRSRC1_CAM = 2;
    ASYOBJFORBIGDATA2SNSRSRCOFABSLATSPD_SNSRSRC1_FUSN = 3;
  }
  enum AsyObjForBigData2SnsrSrcOfAbsLgtSpdType {
    ASYOBJFORBIGDATA2SNSRSRCOFABSLGTSPD_SNSRSRC1_UKWN = 0;
    ASYOBJFORBIGDATA2SNSRSRCOFABSLGTSPD_SNSRSRC1_RADAR = 1;
    ASYOBJFORBIGDATA2SNSRSRCOFABSLGTSPD_SNSRSRC1_CAM = 2;
    ASYOBJFORBIGDATA2SNSRSRCOFABSLGTSPD_SNSRSRC1_FUSN = 3;
  }
  enum AsyObjForBigData2TypeType {
    ASYOBJFORBIGDATA2TYPE_ASYOBJTYPE_CAR = 0;
    ASYOBJFORBIGDATA2TYPE_ASYOBJTYPE_PEDESTRIAN = 1;
    ASYOBJFORBIGDATA2TYPE_ASYOBJTYPE_CYCLIST = 2;
    ASYOBJFORBIGDATA2TYPE_ASYOBJTYPE_MOTORBIKE = 3;
    ASYOBJFORBIGDATA2TYPE_ASYOBJTYPE_BUS = 4;
    ASYOBJFORBIGDATA2TYPE_ASYOBJTYPE_TRUCK = 5;
    ASYOBJFORBIGDATA2TYPE_ASYOBJTYPE_TREE = 6;
    ASYOBJFORBIGDATA2TYPE_ASYOBJTYPE_WALL = 7;
    ASYOBJFORBIGDATA2TYPE_ASYOBJTYPE_ANIMAL = 8;
    ASYOBJFORBIGDATA2TYPE_ASYOBJTYPE_UNKNOWN = 9;
  }
  enum ExtLiDataDayNightType {
    EXTLIDATADAYNIGHT_DAYNIGHT_UNKWN = 0;
    EXTLIDATADAYNIGHT_DAYNIGHT_DAY = 1;
    EXTLIDATADAYNIGHT_DAYNIGHT_TWLITWILIGHT = 2;
    EXTLIDATADAYNIGHT_DAYNIGHT_NIGHT = 3;
  }
  enum ExtLiDataTrfcSideType {
    EXTLIDATATRFCSIDE_TRFCSIDE_UNKWN = 0;
    EXTLIDATATRFCSIDE_TRFCSIDE_LE = 1;
    EXTLIDATATRFCSIDE_TRFCSIDE_RI = 2;
    EXTLIDATATRFCSIDE_TRFCSIDE_NOTUSED = 3;
  }
  // description Lower limit for angle controller torque request. [Nm] [-30.0|30.0] [initial_value:240]
  optional double ag_ctrl_tq_lowr_lim = 1;
  // [] [0|1] [initial_value:None]
  optional bool ag_ctrl_tq_lowr_lim_ub = 2;
  // description Upper limit for angle controller torque request. [Nm] [-30.0|30.0] [initial_value:240]
  optional double ag_ctrl_tq_uppr_lim = 3;
  // [] [0|1] [initial_value:None]
  optional bool ag_ctrl_tq_uppr_lim_ub = 4;
  // [] [0|1] [initial_value:None]
  optional bool asy_obj_for_big_data1_ub = 5;
  // description Describe the reletive latent speed of object. [m/s] [-16.0|15.75] [initial_value:64]
  optional double asy_obj_for_big_data1_abs_lat_spd = 6;
  // description Describe the reletive latent speed of object. [m/s] [0.0|125.0] [initial_value:0]
  optional double asy_obj_for_big_data1_abs_lgt_spd = 7;
  // description Describe the confidence of the object type. [Unitless] [0.0|1.0] [initial_value:0]
  optional double asy_obj_for_big_data1_confidence = 8;
  // description Describe the latent distance of object. [m] [-25.0|25.0] [initial_value:250]
  optional double asy_obj_for_big_data1_rlvt_lat_dst = 9;
  // description Describe the longitudinal distance of object. [m] [0.0|150.0] [initial_value:0]
  optional double asy_obj_for_big_data1_rlvt_lgt_dst = 10;
  // description Describe source of reletive latent speed of object. [] [0|3] [initial_value:0]
  optional AsyObjForBigData1SnsrSrcOfAbsLatSpdType asy_obj_for_big_data1_snsr_src_of_abs_lat_spd = 11;
  // description Describe source of reletive longitudinal speed of object. [] [0|3] [initial_value:0]
  optional AsyObjForBigData1SnsrSrcOfAbsLgtSpdType asy_obj_for_big_data1_snsr_src_of_abs_lgt_spd = 12;
  // description Describe the TTC between host vehicle and object. [s] [0.0|6.3500000000000005] [initial_value:127]
  optional double asy_obj_for_big_data1_ttc = 13;
  // description Describe type of object. [] [0|15] [initial_value:9]
  optional AsyObjForBigData1TypeType asy_obj_for_big_data1_type = 14;
  // [] [0|1] [initial_value:None]
  optional bool asy_obj_for_big_data2_ub = 15;
  // description Describe the reletive latent speed of object. [m/s] [-16.0|15.75] [initial_value:64]
  optional double asy_obj_for_big_data2_abs_lat_spd = 16;
  // description Describe the reletive latent speed of object. [m/s] [0.0|125.0] [initial_value:0]
  optional double asy_obj_for_big_data2_abs_lgt_spd = 17;
  // description Describe the confidence of the object type. [Unitless] [0.0|1.0] [initial_value:0]
  optional double asy_obj_for_big_data2_confidence = 18;
  // description Describe the latent distance of object. [m] [-25.0|25.0] [initial_value:250]
  optional double asy_obj_for_big_data2_rlvt_lat_dst = 19;
  // description Describe the longitudinal distance of object. [m] [0.0|150.0] [initial_value:0]
  optional double asy_obj_for_big_data2_rlvt_lgt_dst = 20;
  // description Describe source of reletive latent speed of object. [] [0|3] [initial_value:0]
  optional AsyObjForBigData2SnsrSrcOfAbsLatSpdType asy_obj_for_big_data2_snsr_src_of_abs_lat_spd = 21;
  // description Describe source of reletive longitudinal speed of object. [] [0|3] [initial_value:0]
  optional AsyObjForBigData2SnsrSrcOfAbsLgtSpdType asy_obj_for_big_data2_snsr_src_of_abs_lgt_spd = 22;
  // description Describe the TTC between host vehicle and object. [s] [0.0|6.3500000000000005] [initial_value:127]
  optional double asy_obj_for_big_data2_ttc = 23;
  // description Describe type of object. [] [0|15] [initial_value:9]
  optional AsyObjForBigData2TypeType asy_obj_for_big_data2_type = 24;
  // [] [0|1] [initial_value:None]
  optional bool asy_pinion_ag_req_safe_ub = 25;
  // description Steering request signal from Active Safety with end-to-end protection  [rad] [-14.5|17.4990234375] [initial_value:14848]
  optional double asy_pinion_ag_req_safe_asy_pinion_ag_req = 26;
  // description CRC [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 asy_pinion_ag_req_safe_asy_pinion_ag_req_chks = 27;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_pinion_ag_req_safe_asy_pinion_ag_req_cntr = 28;
  // [] [0|1] [initial_value:None]
  optional bool ext_li_data_ub = 29;
  // description Signal indicating Day, Twilight or Night based on ambient light intensity. [] [0|3] [initial_value:0]
  optional ExtLiDataDayNightType ext_li_data_day_night = 30;
  // description Highway with driveways separated with guardrail in between. [] [0|1] [initial_value:0]
  optional bool ext_li_data_hi_way = 31;
  // description city [] [0|1] [initial_value:0]
  optional bool ext_li_data_in_city = 32;
  // description tunnel [] [0|1] [initial_value:0]
  optional bool ext_li_data_in_tunnel = 33;
  // description TimeStamp [s] [0.0|429496.7295] [initial_value:0]
  optional double ext_li_data_ti_stamp = 34;
  // description Trafic side. [] [0|3] [initial_value:0]
  optional ExtLiDataTrfcSideType ext_li_data_trfc_side = 35;
  // [] [0|1] [initial_value:0]
  optional bool rcta_brk_req_qm = 36;
  // [] [0|1] [initial_value:None]
  optional bool rcta_brk_req_qm_ub = 37;
}

message ADCU_ZCUDCANFD1_NM_FR_501 {
// Control Message
  // [] [0|0] [initial_value:None]
  optional bool pnc23_asdm = 1;
  // [] [0|0] [initial_value:None]
  optional bool pnc25_asdm = 2;
  // [] [0|0] [initial_value:None]
  optional bool pnc29_asdm = 3;
  // [] [0|0] [initial_value:None]
  optional bool pnc36_asdm = 4;
  // [] [0|0] [initial_value:None]
  optional bool pnc38_asdm = 5;
  // [] [0|0] [initial_value:None]
  optional bool nm_pni_asdm = 6;
  // [] [0|0] [initial_value:None]
  optional bool nm_aw_asdm = 7;
  // [] [0|0] [initial_value:None]
  optional bool nm_cs_asdm = 8;
  // [] [0|0] [initial_value:None]
  optional bool nm_rmr_asdm = 9;
  // [] [0|0] [initial_value:None]
  optional uint32 nm_node_id_asdm = 10;
}

message ZCUD_ZCUCANFD1_FR10_53 {
// Report Message
  enum DoorDrvrLockStsType {
    DOORDRVRLOCKSTS_LOCKSTS2_LOCKSTSUKWN = 0;
    DOORDRVRLOCKSTS_LOCKSTS2_UNLCKD = 1;
    DOORDRVRLOCKSTS_LOCKSTS2_LOCKD = 2;
    DOORDRVRLOCKSTS_LOCKSTS2_SAFELOCKD = 3;
  }
  enum DoorLeReLockStsType {
    DOORLERELOCKSTS_LOCKSTS2_LOCKSTSUKWN = 0;
    DOORLERELOCKSTS_LOCKSTS2_UNLCKD = 1;
    DOORLERELOCKSTS_LOCKSTS2_LOCKD = 2;
    DOORLERELOCKSTS_LOCKSTS2_SAFELOCKD = 3;
  }
  enum DrvrGearShiftParkReqStsType {
    DRVRGEARSHIFTPARKREQSTS_CLUTCHPEDLPSD_NO = 0;
    DRVRGEARSHIFTPARKREQSTS_CLUTCHPEDLPSD_YES = 1;
    DRVRGEARSHIFTPARKREQSTS_CLUTCHPEDLPSD_RESERVED1 = 2;
    DRVRGEARSHIFTPARKREQSTS_CLUTCHPEDLPSD_RESERVED2 = 3;
  }
  enum EngSt1WdStsEngSt1WdStsType {
    ENGST1WDSTSENGST1WDSTS_ENGST1_INI = 0;
    ENGST1WDSTSENGST1WDSTS_ENGST1_AWAKE = 1;
    ENGST1WDSTSENGST1WDSTS_ENGST1_RDY = 2;
    ENGST1WDSTSENGST1WDSTS_ENGST1_PRESTRTG = 3;
    ENGST1WDSTSENGST1WDSTS_ENGST1_STRTGINPROGS = 4;
    ENGST1WDSTSENGST1WDSTS_ENGST1_RUNNGRUNNG = 5;
    ENGST1WDSTSENGST1WDSTS_ENGST1_RUNNGSTB = 6;
    ENGST1WDSTSENGST1WDSTS_ENGST1_RUNNGSTRTGINPROGS = 7;
    ENGST1WDSTSENGST1WDSTS_ENGST1_RUNNGREMSTRTD = 8;
    ENGST1WDSTSENGST1WDSTS_ENGST1_AFTRUN = 9;
  }
  enum SuspPosnVertLe1FrntQfType {
    SUSPPOSNVERTLE1FRNTQF_GENQF1_UNDEFINDDATAACCUR = 0;
    SUSPPOSNVERTLE1FRNTQF_GENQF1_TMPUNDEFDDATA = 1;
    SUSPPOSNVERTLE1FRNTQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    SUSPPOSNVERTLE1FRNTQF_GENQF1_ACCURDATA = 3;
  }
  enum SuspPosnVertLe1ReQfType {
    SUSPPOSNVERTLE1REQF_GENQF1_UNDEFINDDATAACCUR = 0;
    SUSPPOSNVERTLE1REQF_GENQF1_TMPUNDEFDDATA = 1;
    SUSPPOSNVERTLE1REQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    SUSPPOSNVERTLE1REQF_GENQF1_ACCURDATA = 3;
  }
  enum SuspPosnVertRi1SuspPosnVertRiFrntQfType {
    SUSPPOSNVERTRI1SUSPPOSNVERTRIFRNTQF_GENQF1_UNDEFINDDATAACCUR = 0;
    SUSPPOSNVERTRI1SUSPPOSNVERTRIFRNTQF_GENQF1_TMPUNDEFDDATA = 1;
    SUSPPOSNVERTRI1SUSPPOSNVERTRIFRNTQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    SUSPPOSNVERTRI1SUSPPOSNVERTRIFRNTQF_GENQF1_ACCURDATA = 3;
  }
  enum SuspPosnVertRi1SuspPosnVertRiReQfType {
    SUSPPOSNVERTRI1SUSPPOSNVERTRIREQF_GENQF1_UNDEFINDDATAACCUR = 0;
    SUSPPOSNVERTRI1SUSPPOSNVERTRIREQF_GENQF1_TMPUNDEFDDATA = 1;
    SUSPPOSNVERTRI1SUSPPOSNVERTRIREQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    SUSPPOSNVERTRI1SUSPPOSNVERTRIREQF_GENQF1_ACCURDATA = 3;
  }
  enum VehModMngtGlbSafe1CarModSts1Type {
    VEHMODMNGTGLBSAFE1CARMODSTS1_CARMODSTS1_CARMODNORM = 0;
    VEHMODMNGTGLBSAFE1CARMODSTS1_CARMODSTS1_CARMODTRNSP = 1;
    VEHMODMNGTGLBSAFE1CARMODSTS1_CARMODSTS1_CARMODFCY = 2;
    VEHMODMNGTGLBSAFE1CARMODSTS1_CARMODSTS1_CARMODCRASH = 3;
    VEHMODMNGTGLBSAFE1CARMODSTS1_CARMODSTS1_RESERVED4 = 4;
    VEHMODMNGTGLBSAFE1CARMODSTS1_CARMODSTS1_CARMODDYNO = 5;
    VEHMODMNGTGLBSAFE1CARMODSTS1_CARMODSTS1_RESERVED6 = 6;
    VEHMODMNGTGLBSAFE1CARMODSTS1_CARMODSTS1_RESERVED7 = 7;
  }
  enum VehModMngtGlbSafe1UsgModStsType {
    VEHMODMNGTGLBSAFE1USGMODSTS_USGMODSTS1_USGMODABDND = 0;
    VEHMODMNGTGLBSAFE1USGMODSTS_USGMODSTS1_USGMODINACTV = 1;
    VEHMODMNGTGLBSAFE1USGMODSTS_USGMODSTS1_USGMODCNVINC = 2;
    VEHMODMNGTGLBSAFE1USGMODSTS_USGMODSTS1_RESERVED3 = 3;
    VEHMODMNGTGLBSAFE1USGMODSTS_USGMODSTS1_RESERVED4 = 4;
    VEHMODMNGTGLBSAFE1USGMODSTS_USGMODSTS1_RESERVED5 = 5;
    VEHMODMNGTGLBSAFE1USGMODSTS_USGMODSTS1_RESERVED6 = 6;
    VEHMODMNGTGLBSAFE1USGMODSTS_USGMODSTS1_RESERVED7 = 7;
    VEHMODMNGTGLBSAFE1USGMODSTS_USGMODSTS1_RESERVED8 = 8;
    VEHMODMNGTGLBSAFE1USGMODSTS_USGMODSTS1_RESERVED9 = 9;
    VEHMODMNGTGLBSAFE1USGMODSTS_USGMODSTS1_RESERVED10 = 10;
    VEHMODMNGTGLBSAFE1USGMODSTS_USGMODSTS1_USGMODACTV = 11;
    VEHMODMNGTGLBSAFE1USGMODSTS_USGMODSTS1_RESERVED12 = 12;
    VEHMODMNGTGLBSAFE1USGMODSTS_USGMODSTS1_USGMODDRVG = 13;
    VEHMODMNGTGLBSAFE1USGMODSTS_USGMODSTS1_RESERVED14 = 14;
    VEHMODMNGTGLBSAFE1USGMODSTS_USGMODSTS1_RESERVED15 = 15;
  }
  enum WinPosnStsAtDrvrType {
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_POSNUKWN = 0;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_CLSFULL = 1;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN4 = 2;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN8 = 3;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN12 = 4;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN16 = 5;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN20 = 6;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN24 = 7;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN28 = 8;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN32 = 9;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN36 = 10;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN40 = 11;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN44 = 12;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN48 = 13;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN52 = 14;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN56 = 15;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN60 = 16;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN64 = 17;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN68 = 18;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN72 = 19;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN76 = 20;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN80 = 21;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN84 = 22;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN88 = 23;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN92 = 24;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_PERCOPEN96 = 25;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_OPENFULL = 26;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_RESD1 = 27;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_RESD2 = 28;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_RESD3 = 29;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_RESD4 = 30;
    WINPOSNSTSATDRVR_WINANDROOFANDCURTPOSNTYP_MOVG = 31;
  }
  enum WinPosnStsAtReLeType {
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_POSNUKWN = 0;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_CLSFULL = 1;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN4 = 2;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN8 = 3;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN12 = 4;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN16 = 5;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN20 = 6;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN24 = 7;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN28 = 8;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN32 = 9;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN36 = 10;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN40 = 11;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN44 = 12;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN48 = 13;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN52 = 14;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN56 = 15;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN60 = 16;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN64 = 17;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN68 = 18;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN72 = 19;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN76 = 20;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN80 = 21;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN84 = 22;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN88 = 23;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN92 = 24;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_PERCOPEN96 = 25;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_OPENFULL = 26;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_RESD1 = 27;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_RESD2 = 28;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_RESD3 = 29;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_RESD4 = 30;
    WINPOSNSTSATRELE_WINANDROOFANDCURTPOSNTYP_MOVG = 31;
  }
  // [] [0|1] [initial_value:None]
  optional bool accr_pedl_rat_ub = 1;
  // description Accelerator Pedal Position with adapted 0 point. Value as percentage of fully pressed pedal [%] [0.0|100.0] [initial_value:0]
  optional double accr_pedl_rat_accr_pedl_rat = 2;
  // description Accelerator Pedal Position with adapted 0 point. Value as percentage of fully pressed pedal. Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 accr_pedl_rat_chks = 3;
  // description Accelerator Pedal Position with adapted 0 point. Value as percentage of fully pressed pedal. Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 accr_pedl_rat_cntr = 4;
  // [] [0|1] [initial_value:None]
  optional bool blt_lock_st_at_drvr_ub = 5;
  // description State of belt lock at driver seating position Belt lock state, locked/unlocked [] [0|1] [initial_value:1]
  optional bool blt_lock_st_at_drvr_blt_lock_st1 = 6;
  // description State of belt lock at driver seating position Belt lock status, OK/NOK [] [0|1] [initial_value:0]
  optional bool blt_lock_st_at_drvr_blt_lock_sts = 7;
  // [] [0|3] [initial_value:0]
  optional DoorDrvrLockStsType door_drvr_lock_sts = 8;
  // [] [0|1] [initial_value:None]
  optional bool door_drvr_lock_sts_ub = 9;
  // [] [0|3] [initial_value:0]
  optional DoorLeReLockStsType door_le_re_lock_sts = 10;
  // [] [0|1] [initial_value:None]
  optional bool door_le_re_lock_sts_ub = 11;
  // [] [0|1] [initial_value:None]
  optional bool drvr_gear_shift_park_req_ub = 12;
  // description Driver park request from gear shifter. Valid for Shift-By-Wire system. [] [0|1] [initial_value:0]
  optional bool drvr_gear_shift_park_req1 = 13;
  // description Driver park request from gear shifter. Valid for Shift-By-Wire system.Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 drvr_gear_shift_park_req_chks = 14;
  // description Driver park request from gear shifter. Valid for Shift-By-Wire system.Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 drvr_gear_shift_park_req_cntr = 15;
  // description Driver park request from gear shifter. Valid for Shift-By-Wire system.Status [] [0|3] [initial_value:0]
  optional DrvrGearShiftParkReqStsType drvr_gear_shift_park_req_sts = 16;
  // [] [0|1] [initial_value:None]
  optional bool eng_st1_wd_sts_ub = 17;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 eng_st1_wd_sts_chks = 18;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 eng_st1_wd_sts_cntr = 19;
  // description Signaling the state of the powerpack [] [0|15] [initial_value:0]
  optional EngSt1WdStsEngSt1WdStsType eng_st1_wd_sts_eng_st1_wd_sts = 20;
  // description LED status in Driver side rear mirror. [] [0|1] [initial_value:1]
  optional bool lcma_led_sts_drvr_side = 21;
  // [] [0|1] [initial_value:None]
  optional bool lcma_led_sts_drvr_side_ub = 22;
  // [] [0|1] [initial_value:None]
  optional bool susp_posn_vert_le1_ub = 23;
  // description Checksum on height information and QFs for front and rear. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 susp_posn_vert_le1_chks = 24;
  // description Height information from left front [m] [-0.999998|1.00006] [initial_value:0]
  optional double susp_posn_vert_le1_frnt = 25;
  // description QF on height information from left front [] [0|3] [initial_value:1]
  optional SuspPosnVertLe1FrntQfType susp_posn_vert_le1_frnt_qf = 26;
  // description Height information from left rear [m] [-0.999998|1.00006] [initial_value:0]
  optional double susp_posn_vert_le1_re = 27;
  // description QF on height information from left rear [] [0|3] [initial_value:1]
  optional SuspPosnVertLe1ReQfType susp_posn_vert_le1_re_qf = 28;
  // [] [0|1] [initial_value:None]
  optional bool susp_posn_vert_ri1_ub = 29;
  // description External CAN signal to inform the right body height (include both front and rear) with ASIL-A leve(A CRC is added)l. Checksum on height information and QF for front and rear. [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 susp_posn_vert_ri1_susp_posn_vert_ri_chks = 30;
  // description External CAN signal to inform the right body height (include both front and rear) with ASIL-A leve(A CRC is added)l. Height information from right front [m] [-0.999998|1.00006] [initial_value:0]
  optional double susp_posn_vert_ri1_susp_posn_vert_ri_frnt = 31;
  // description External CAN signal to inform the right body height (include both front and rear) with ASIL-A leve(A CRC is added)l. QF on height information from right front [] [0|3] [initial_value:1]
  optional SuspPosnVertRi1SuspPosnVertRiFrntQfType susp_posn_vert_ri1_susp_posn_vert_ri_frnt_qf = 32;
  // description External CAN signal to inform the right body height (include both front and rear) with ASIL-A leve(A CRC is added)l. Height information from right rear [m] [-0.999998|1.00006] [initial_value:0]
  optional double susp_posn_vert_ri1_susp_posn_vert_ri_re = 33;
  // description External CAN signal to inform the right body height (include both front and rear) with ASIL-A leve(A CRC is added)l. QF on height information from right rear [] [0|3] [initial_value:1]
  optional SuspPosnVertRi1SuspPosnVertRiReQfType susp_posn_vert_ri1_susp_posn_vert_ri_re_qf = 34;
  // [] [0|1] [initial_value:0]
  optional bool trlr_prsnt = 35;
  // [] [0|1] [initial_value:None]
  optional bool trlr_prsnt_ub = 36;
  // [] [0|1] [initial_value:None]
  optional bool veh_mod_mngt_glb_safe1_ub = 37;
  // description CarMode Status [] [0|7] [initial_value:0]
  optional VehModMngtGlbSafe1CarModSts1Type veh_mod_mngt_glb_safe1_car_mod_sts1 = 38;
  // description CarMode substate status [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 veh_mod_mngt_glb_safe1_car_mod_subtyp_wd_car_mod_subtyp = 39;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_mod_mngt_glb_safe1_chks = 40;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 veh_mod_mngt_glb_safe1_cntr = 41;
  // description Main energy level in the vehicle. [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 veh_mod_mngt_glb_safe1_egy_lvl_elec_mai = 42;
  // description Substate of the energy level in the vehicle. [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 veh_mod_mngt_glb_safe1_egy_lvl_elec_subtyp = 43;
  // description High quiescent current detected by CEM via BMS. [] [0|1] [initial_value:0]
  optional bool veh_mod_mngt_glb_safe1_flt_egy_cns_wd_sts = 44;
  // description Main Power level in the vehicle. [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 veh_mod_mngt_glb_safe1_pwr_lvl_elec_mai = 45;
  // description Substate of the power level in the vehicle. [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 veh_mod_mngt_glb_safe1_pwr_lvl_elec_subtyp = 46;
  // description UsageMode Status [] [0|15] [initial_value:1]
  optional VehModMngtGlbSafe1UsgModStsType veh_mod_mngt_glb_safe1_usg_mod_sts = 47;
  // [] [0|1] [initial_value:None]
  optional bool veh_ti_and_data_ub = 48;
  // description Vehicle time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Signal qualifier, No means values should be ignored. [] [0|1] [initial_value:0]
  optional bool veh_ti_and_data_data_valid = 49;
  // description Vehicle time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Day [Days] [1.0|31.0] [initial_value:1]
  optional uint32 veh_ti_and_data_day = 50;
  // description Vehicle time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Hour [hours] [0.0|23.0] [initial_value:0]
  optional double veh_ti_and_data_hr1 = 51;
  // description Vehicle time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Minutes [Mins] [0.0|59.0] [initial_value:0]
  optional double veh_ti_and_data_mins1 = 52;
  // description Vehicle time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Month, 1-12 [Month] [1.0|12.0] [initial_value:1]
  optional double veh_ti_and_data_mth1 = 53;
  // description Vehicle time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Seconds [s] [0.0|59.0] [initial_value:0]
  optional double veh_ti_and_data_sec1 = 54;
  // description Vehicle time (Hr, Min and Sec) and date (Year, Months and days) data for indication. See requirement for more information about the signals. Year, 0-99 [Year] [0.0|99.0] [initial_value:0]
  optional double veh_ti_and_data_yr1 = 55;
  // [] [0|31] [initial_value:0]
  optional WinPosnStsAtDrvrType win_posn_sts_at_drvr = 56;
  // [] [0|1] [initial_value:None]
  optional bool win_posn_sts_at_drvr_ub = 57;
  // [] [0|31] [initial_value:0]
  optional WinPosnStsAtReLeType win_posn_sts_at_re_le = 58;
  // [] [0|1] [initial_value:None]
  optional bool win_posn_sts_at_re_le_ub = 59;
}

message ADCU_ZCUCANFD1_VFC_VECT_FR_541 {
// Control Message
  // description BlockID [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 vfc_vector_adcu_block_id = 1;
  // description SettingsComfort [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid0 = 2;
  // description ParkingDrivingClimatization [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid1 = 3;
  // description ExteriorLighting [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid10 = 4;
  // description VFCid11 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid11 = 5;
  // description Alarm [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid12 = 6;
  // description VFCid13 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid13 = 7;
  // description InteriorLighting [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid14 = 8;
  // description VFCid15 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid15 = 9;
  // description Locking [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid16 = 10;
  // description RemoteKeyFunctionality [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid17 = 11;
  // description PropulsionStart [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid18 = 12;
  // description VFCid19 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid19 = 13;
  // description PostClimatisation [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid2 = 14;
  // description VFCid20 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid20 = 15;
  // description PowerClosures [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid21 = 16;
  // description VehicleDriving [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid22 = 17;
  // description VFCid23 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid23 = 18;
  // description SettingsProfile [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid24 = 19;
  // description SeatComfortFunctions [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid25 = 20;
  // description Brake [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid26 = 21;
  // description InfotainmentPoll [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid27 = 22;
  // description HVEnergyStorage [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid28 = 23;
  // description VFCid29 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid29 = 24;
  // description PowertrainParkingClimatization [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid3 = 25;
  // description TelematicsConnectivity [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid30 = 26;
  // description VFCid31 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid31 = 27;
  // description VFCid32 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid32 = 28;
  // description Diagnostics [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid33 = 29;
  // description VehicleModeManagement [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid34 = 30;
  // description TrailerCaravanFunctions [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid35 = 31;
  // description Immobilizer [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid36 = 32;
  // description Windows [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid37 = 33;
  // description Visibility [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid38 = 34;
  // description VFCid39 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid39 = 35;
  // description VFCid4 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid4 = 36;
  // description VFCid40 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid40 = 37;
  // description InfotainmentPush [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid41 = 38;
  // description ChargingHV [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid42 = 39;
  // description BodyPreClimatisation [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid43 = 40;
  // description Crash [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid44 = 41;
  // description GlobalShortDuration [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid45 = 42;
  // description ExteriorLightsHazard [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid46 = 43;
  // description VFCid47 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid47 = 44;
  // description DoorOpenWarning [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid48 = 45;
  // description ChargingLVInit [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid49 = 46;
  // description VFCid5 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid5 = 47;
  // description VFCid50 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid50 = 48;
  // description VFCid51 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid51 = 49;
  // description HVBatteryThermalEventWarning [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid52 = 50;
  // description VisualAssist [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid53 = 51;
  // description PassiveSafety [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid54 = 52;
  // description LifeDetection [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid55 = 53;
  // description BackboneFlexray [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid56 = 54;
  // description Functionmarket [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid57 = 55;
  // description VFCid58 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid58 = 56;
  // description VFCid59 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid59 = 57;
  // description SettingsVehicle [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid6 = 58;
  // description VFCid60 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid60 = 59;
  // description VFCid61 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid61 = 60;
  // description VFCid7 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid7 = 61;
  // description VFCid8 [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid8 = 62;
  // description IPWakeup [] [0|1] [initial_value:0]
  optional bool vfc_vector_adcuvf_cid9 = 63;
}

message DHU_ZCUCANFD1_FR03_56 {
// Report Message
  enum AsyAutDrvCtrlTypDIMReqType {
    ASYAUTDRVCTRLTYPDIMREQ_ASYAUTDRVCTRLTYP_INACTIVE = 0;
    ASYAUTDRVCTRLTYPDIMREQ_ASYAUTDRVCTRLTYP_ACC = 1;
    ASYAUTDRVCTRLTYPDIMREQ_ASYAUTDRVCTRLTYP_GPILOT = 2;
    ASYAUTDRVCTRLTYPDIMREQ_ASYAUTDRVCTRLTYP_D2D = 3;
  }
  enum DrvModReqType {
    DRVMODREQ_DRVMODREQTYPE1_UNDEFD = 0;
    DRVMODREQ_DRVMODREQTYPE1_ECO = 1;
    DRVMODREQ_DRVMODREQTYPE1_COMFORT_NORMAL = 2;
    DRVMODREQ_DRVMODREQTYPE1_DYNAMIC_SPORT = 3;
    DRVMODREQ_DRVMODREQTYPE1_INDIVIDUAL = 4;
    DRVMODREQ_DRVMODREQTYPE1_OFFROAD_CROSSTERRAIN = 5;
    DRVMODREQ_DRVMODREQTYPE1_ADAPTIVE = 6;
    DRVMODREQ_DRVMODREQTYPE1_RACE = 7;
    DRVMODREQ_DRVMODREQTYPE1_PURE_EV = 8;
    DRVMODREQ_DRVMODREQTYPE1_HYBRID = 9;
    DRVMODREQ_DRVMODREQTYPE1_POWER = 10;
    DRVMODREQ_DRVMODREQTYPE1_SNOW = 11;
    DRVMODREQ_DRVMODREQTYPE1_SAND = 12;
    DRVMODREQ_DRVMODREQTYPE1_MUD = 13;
    DRVMODREQ_DRVMODREQTYPE1_ROCK = 14;
    DRVMODREQ_DRVMODREQTYPE1_ERR = 15;
  }
  enum FctHldSigType {
    FCTHLDSIG_FCTHLDSIG_DEFAULTVALUE = 0;
    FCTHLDSIG_FCTHLDSIG_HPA_MAX = 1;
    FCTHLDSIG_FCTHLDSIG_ISA = 2;
    FCTHLDSIG_FCTHLDSIG_RVM = 3;
  }
  enum IntvAndWarnModForLaneKeepAidStsType {
    INTVANDWARNMODFORLANEKEEPAIDSTS_INTVANDWARNMODFORLANEKEEPAIDSTS_INACTIVE = 0;
    INTVANDWARNMODFORLANEKEEPAIDSTS_INTVANDWARNMODFORLANEKEEPAIDSTS_INTERVENTIONANDWARNING = 1;
    INTVANDWARNMODFORLANEKEEPAIDSTS_INTVANDWARNMODFORLANEKEEPAIDSTS_INTERVENTIONONLY = 2;
    INTVANDWARNMODFORLANEKEEPAIDSTS_INTVANDWARNMODFORLANEKEEPAIDSTS_WARNINGONLY = 3;
  }
  // [] [0|7] [initial_value:0]
  optional AsyAutDrvCtrlTypDIMReqType asy_aut_drv_ctrl_typ_dim_req = 1;
  // [] [0|1] [initial_value:None]
  optional bool asy_aut_drv_ctrl_typ_dim_req_ub = 2;
  // [] [0|1] [initial_value:None]
  optional bool biased_posn_from_satlt_ub = 3;
  // description Counter  [Unitless] [0.0|7.0] [initial_value:0]
  optional uint32 biased_posn_from_satlt_cntr = 4;
  // description Latitude [Deg] [-90.000072|90.000072] [initial_value:323999740]
  optional double biased_posn_from_satlt_posn_lat = 5;
  // description Longitude [Deg] [-180.000144|180.000144] [initial_value:647999481]
  optional double biased_posn_from_satlt_posn_lgt = 6;
  // description minutes [Mins] [0.0|59.0] [initial_value:0]
  optional double biased_posn_from_satlt_ti_for_mins = 7;
  // description milliseconds  [Unitless] [0.0|1023.0] [initial_value:0]
  optional uint32 biased_posn_from_satlt_ti_for_msec = 8;
  // description seconds [s] [0.0|59.0] [initial_value:0]
  optional double biased_posn_from_satlt_ti_for_sec = 9;
  // description drive mode [] [0|15] [initial_value:0]
  optional DrvModReqType drv_mod_req = 10;
  // [] [0|1] [initial_value:None]
  optional bool drv_mod_req_ub = 11;
  // description Telematics subsystem forwards function hold signal sent by mobile APP (for function timeout interrupt/exit) [] [0|3] [initial_value:0]
  optional FctHldSigType fct_hld_sig = 12;
  // [] [0|1] [initial_value:None]
  optional bool fct_hld_sig_ub = 13;
  // description GPS signal confidence, successful=1 or failure=0.  [] [0|1] [initial_value:1]
  optional bool gps_status = 14;
  // [] [0|1] [initial_value:None]
  optional bool gps_status_ub = 15;
  // [] [0|1] [initial_value:None]
  optional bool guestr_sts1_ub = 16;
  // description checksum calculation [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 guestr_sts1_chks = 17;
  // description E2E counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 guestr_sts1_cntr = 18;
  // description Guesture status [] [0|1] [initial_value:0]
  optional bool guestr_sts1_validity = 19;
  // description this port is used to LKA founction [] [0|3] [initial_value:0]
  optional IntvAndWarnModForLaneKeepAidStsType intv_and_warn_mod_for_lane_keep_aid_sts = 20;
  // [] [0|1] [initial_value:None]
  optional bool intv_and_warn_mod_for_lane_keep_aid_sts_ub = 21;
  // [] [0|1] [initial_value:None]
  optional bool mob_dev_rpa_auth_resp1_ub = 22;
  // description answer [Unitless] [0.0|511.0] [initial_value:0]
  optional uint32 mob_dev_rpa_auth_resp1_answer = 23;
  // description checksum calculation [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 mob_dev_rpa_auth_resp1_chks = 24;
  // description E2E counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 mob_dev_rpa_auth_resp1_cntr = 25;
  // description x [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 mob_dev_rpa_auth_resp1_x = 26;
  // description y [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 mob_dev_rpa_auth_resp1_y = 27;
  // description TPTF function switch ON/OFF [] [0|1] [initial_value:0]
  optional bool tptf_on_off = 28;
  // [] [0|1] [initial_value:None]
  optional bool tptf_on_off_ub = 29;
  // description TPTF function reset signal [] [0|1] [initial_value:0]
  optional bool tptf_reset = 30;
  // [] [0|1] [initial_value:None]
  optional bool tptf_reset_ub = 31;
  // description TPTF feature request signal [] [0|1] [initial_value:0]
  optional bool tptf_rpt_req = 32;
  // [] [0|1] [initial_value:None]
  optional bool tptf_rpt_req_ub = 33;
  // description D2D P Icon is Clicked [] [0|1] [initial_value:0]
  optional bool d2_dp_icon_clicked = 34;
  // [] [0|1] [initial_value:None]
  optional bool d2_dp_icon_clicked_ub = 35;
  // description D2D Route Push Button Resp [Unitless] [0.0|3.0] [initial_value:0]
  optional uint32 d2_d_route_push_button_resp = 36;
  // [] [0|1] [initial_value:None]
  optional bool d2_d_route_push_button_resp_ub = 37;
}

message DHU_TO_ADCU_SEC_OC_FR01_57 {
// Report Message
  enum DrvrACCrsSetSpdReqDrvrCrsSetSpdReqType {
    DRVRACCRSSETSPDREQDRVRCRSSETSPDREQ_DRVRCRSAMODREQ_NEUTRAL = 0;
    DRVRACCRSSETSPDREQDRVRCRSSETSPDREQ_DRVRCRSAMODREQ_APOSREQMOD1 = 1;
    DRVRACCRSSETSPDREQDRVRCRSSETSPDREQ_DRVRCRSAMODREQ_APOSREQMOD2 = 2;
    DRVRACCRSSETSPDREQDRVRCRSSETSPDREQ_DRVRCRSAMODREQ_ANEGREQMOD1 = 3;
    DRVRACCRSSETSPDREQDRVRCRSSETSPDREQ_DRVRCRSAMODREQ_ANEGREQMOD2 = 4;
  }
  // [] [0|1] [initial_value:None]
  optional bool drvr_ac_crs_set_spd_req_ub = 1;
  // description this group port is used  to  inform the safty subsystem to the ADAS fouction target speed set information. this port is the speed with offset [m/s] [0.0|125.0] [initial_value:0]
  optional double drvr_ac_crs_set_spd_req_drvr_ac_crs_ctrl_set_in_spd_req = 2;
  // description this group port is used  to  inform the safty subsystem to the ADAS fouction target speed set information. this port is used to inform safty the user want to add 1or add 5or minus1 or minus5 [] [0|7] [initial_value:0]
  optional DrvrACCrsSetSpdReqDrvrCrsSetSpdReqType drvr_ac_crs_set_spd_req_drvr_crs_set_spd_req = 3;
  // description this group port is used  to  inform the safty subsystem to the ADAS fouction target speed set information. this port is the speed without offset [m/s] [0.0|125.0] [initial_value:0]
  optional double drvr_ac_crs_set_spd_req_set_spd_for_crs_ctrl_fct_active = 4;
}

message PASZCUCANFD1_FR07_60 {
// Control Message
  enum DPACtrlModReqDPACtrlModReqType {
    DPACTRLMODREQDPACTRLMODREQ_DPACTRLMODREQ_DEFAULT = 0;
    DPACTRLMODREQDPACTRLMODREQ_DPACTRLMODREQ_LOCKLFANDTURNLEFT = 1;
    DPACTRLMODREQDPACTRLMODREQ_DPACTRLMODREQ_LOCKLFANDTURNRIGHT = 2;
    DPACTRLMODREQDPACTRLMODREQ_DPACTRLMODREQ_LOCKRFANDTURNLEFT = 3;
    DPACTRLMODREQDPACTRLMODREQ_DPACTRLMODREQ_LOCKRFANDTURNRIGHT = 4;
    DPACTRLMODREQDPACTRLMODREQ_DPACTRLMODREQ_LOCKLRANDTURNLEFT = 5;
    DPACTRLMODREQDPACTRLMODREQ_DPACTRLMODREQ_LOCKLRANDTURNRIGHT = 6;
    DPACTRLMODREQDPACTRLMODREQ_DPACTRLMODREQ_LOCKRRANDTURNLEFT = 7;
    DPACTRLMODREQDPACTRLMODREQ_DPACTRLMODREQ_LOCKRRANDTURNRIGHT = 8;
    DPACTRLMODREQDPACTRLMODREQ_DPACTRLMODREQ_RELEASELOCK = 9;
  }
  enum EngRunngReqByParkAssi1Type {
    ENGRUNNGREQBYPARKASSI1_ENGRUNNGREQBYPARKASSI1_DEFAULT = 0;
    ENGRUNNGREQBYPARKASSI1_ENGRUNNGREQBYPARKASSI1_STOPINHIBITED = 1;
    ENGRUNNGREQBYPARKASSI1_ENGRUNNGREQBYPARKASSI1_REQUESTTOKEEPTHEENGINERUNNING = 2;
    ENGRUNNGREQBYPARKASSI1_ENGRUNNGREQBYPARKASSI1_RESERVED = 3;
  }
  enum GearPrkgAssiReqGroupGearPrkgAssiReq1Type {
    GEARPRKGASSIREQGROUPGEARPRKGASSIREQ1_GEARPRKGASSIREQ1_NOREQUEST = 0;
    GEARPRKGASSIREQGROUPGEARPRKGASSIREQ1_GEARPRKGASSIREQ1_TARGETGEARP = 1;
    GEARPRKGASSIREQGROUPGEARPRKGASSIREQ1_GEARPRKGASSIREQ1_TARGETGEARR = 2;
    GEARPRKGASSIREQGROUPGEARPRKGASSIREQ1_GEARPRKGASSIREQ1_TARGETGEARD = 3;
  }
  enum GearSapaToBrkReqGearPrkgAssiReq1Type {
    GEARSAPATOBRKREQGEARPRKGASSIREQ1_GEARPRKGASSIREQ1_NOREQUEST = 0;
    GEARSAPATOBRKREQGEARPRKGASSIREQ1_GEARPRKGASSIREQ1_TARGETGEARP = 1;
    GEARSAPATOBRKREQGEARPRKGASSIREQ1_GEARPRKGASSIREQ1_TARGETGEARR = 2;
    GEARSAPATOBRKREQGEARPRKGASSIREQ1_GEARPRKGASSIREQ1_TARGETGEARD = 3;
  }
  enum MobDevRPABtnStsToAppGrpPrkgInBtnStsType {
    MOBDEVRPABTNSTSTOAPPGRPPRKGINBTNSTS_IDLEACTREC_IDLE = 0;
    MOBDEVRPABTNSTSTOAPPGRPPRKGINBTNSTS_IDLEACTREC_ACTIVE = 1;
    MOBDEVRPABTNSTSTOAPPGRPPRKGINBTNSTS_IDLEACTREC_DEACTIVE = 2;
    MOBDEVRPABTNSTSTOAPPGRPPRKGINBTNSTS_IDLEACTREC_RECOMMAND = 3;
  }
  enum MobDevRPABtnStsToAppGrpPrkgOutBtnStsType {
    MOBDEVRPABTNSTSTOAPPGRPPRKGOUTBTNSTS_IDLEACTREC_IDLE = 0;
    MOBDEVRPABTNSTSTOAPPGRPPRKGOUTBTNSTS_IDLEACTREC_ACTIVE = 1;
    MOBDEVRPABTNSTSTOAPPGRPPRKGOUTBTNSTS_IDLEACTREC_DEACTIVE = 2;
    MOBDEVRPABTNSTSTOAPPGRPPRKGOUTBTNSTS_IDLEACTREC_RECOMMAND = 3;
  }
  enum MobDevRPABtnStsToAppGrpRemParkOutCrsSwtRspType {
    MOBDEVRPABTNSTSTOAPPGRPREMPARKOUTCRSSWTRSP_IDLEACTREC_IDLE = 0;
    MOBDEVRPABTNSTSTOAPPGRPREMPARKOUTCRSSWTRSP_IDLEACTREC_ACTIVE = 1;
    MOBDEVRPABTNSTSTOAPPGRPREMPARKOUTCRSSWTRSP_IDLEACTREC_DEACTIVE = 2;
    MOBDEVRPABTNSTSTOAPPGRPREMPARKOUTCRSSWTRSP_IDLEACTREC_RECOMMAND = 3;
  }
  enum PrkgAsscSysEcuTypType {
    PRKGASSCSYSECUTYP_PRKGASSCSYSECUTYP_PAS1 = 0;
    PRKGASSCSYSECUTYP_PRKGASSCSYSECUTYP_PAS2 = 1;
    PRKGASSCSYSECUTYP_PRKGASSCSYSECUTYP_PAS3 = 2;
  }
  enum PrkgAssiElectcStabyProgCtrlModReqGroupPASElectcStabyProgCtrlModReqType {
    PRKGASSIELECTCSTABYPROGCTRLMODREQGROUPPASELECTCSTABYPROGCTRLMODREQ_PASELECTCSTABYPROGCTRLMOD_NOREQUEST = 0;
    PRKGASSIELECTCSTABYPROGCTRLMODREQGROUPPASELECTCSTABYPROGCTRLMODREQ_PASELECTCSTABYPROGCTRLMOD_APAREQUEST = 1;
    PRKGASSIELECTCSTABYPROGCTRLMODREQGROUPPASELECTCSTABYPROGCTRLMODREQ_PASELECTCSTABYPROGCTRLMOD_RPAREQUEST = 2;
    PRKGASSIELECTCSTABYPROGCTRLMODREQGROUPPASELECTCSTABYPROGCTRLMODREQ_PASELECTCSTABYPROGCTRLMOD_HPAREQUEST = 3;
    PRKGASSIELECTCSTABYPROGCTRLMODREQGROUPPASELECTCSTABYPROGCTRLMODREQ_PASELECTCSTABYPROGCTRLMOD_APACONTROLACTIVE = 4;
    PRKGASSIELECTCSTABYPROGCTRLMODREQGROUPPASELECTCSTABYPROGCTRLMODREQ_PASELECTCSTABYPROGCTRLMOD_RPACONTROLACTIVE = 5;
    PRKGASSIELECTCSTABYPROGCTRLMODREQGROUPPASELECTCSTABYPROGCTRLMODREQ_PASELECTCSTABYPROGCTRLMOD_HPACONTROLACTIVE = 6;
    PRKGASSIELECTCSTABYPROGCTRLMODREQGROUPPASELECTCSTABYPROGCTRLMODREQ_PASELECTCSTABYPROGCTRLMOD_RESERVED2 = 7;
  }
  enum PrkgAssiSysRemPrkgStsType {
    PRKGASSISYSREMPRKGSTS_PRKGASSISYSREMPRKGSTS_OFF = 0;
    PRKGASSISYSREMPRKGSTS_PRKGASSISYSREMPRKGSTS_REMOTEPARKINSTANDBY = 1;
    PRKGASSISYSREMPRKGSTS_PRKGASSISYSREMPRKGSTS_REMOTEPARKOUTSTANDBY = 2;
    PRKGASSISYSREMPRKGSTS_PRKGASSISYSREMPRKGSTS_SEARCHING = 3;
    PRKGASSISYSREMPRKGSTS_PRKGASSISYSREMPRKGSTS_REMOTEPARKINPREACTIVE = 4;
    PRKGASSISYSREMPRKGSTS_PRKGASSISYSREMPRKGSTS_REMOTEPARKACTIVE = 5;
    PRKGASSISYSREMPRKGSTS_PRKGASSISYSREMPRKGSTS_PARKPROCESSACTIVE = 6;
    PRKGASSISYSREMPRKGSTS_PRKGASSISYSREMPRKGSTS_SUSPEND = 7;
    PRKGASSISYSREMPRKGSTS_PRKGASSISYSREMPRKGSTS_ABORT = 8;
    PRKGASSISYSREMPRKGSTS_PRKGASSISYSREMPRKGSTS_REMOTEPARKPROCESSCOMPLETED = 9;
    PRKGASSISYSREMPRKGSTS_PRKGASSISYSREMPRKGSTS_REMOTEPARKOUTPROCSCOMPLETED = 10;
    PRKGASSISYSREMPRKGSTS_PRKGASSISYSREMPRKGSTS_REMOTEPARKCOMPLETED = 11;
    PRKGASSISYSREMPRKGSTS_PRKGASSISYSREMPRKGSTS_QUIT = 12;
    PRKGASSISYSREMPRKGSTS_PRKGASSISYSREMPRKGSTS_FAILURE = 13;
    PRKGASSISYSREMPRKGSTS_PRKGASSISYSREMPRKGSTS_CANCEL = 14;
  }
  enum PrkgFctDiModType {
    PRKGFCTDIMOD_AVAILABLE_DEFAULT = 0;
    PRKGFCTDIMOD_AVAILABLE_UNAVAILABLE = 1;
    PRKGFCTDIMOD_AVAILABLE_AVAILABLE = 2;
    PRKGFCTDIMOD_AVAILABLE_RESERVED = 3;
  }
  enum PrkgSpdCtrlSafeGroupDrvrAsscSysBrkFctModType {
    PRKGSPDCTRLSAFEGROUPDRVRASSCSYSBRKFCTMOD_DRVRASSCSYSBRKFCTMOD_DEFAULT = 0;
    PRKGSPDCTRLSAFEGROUPDRVRASSCSYSBRKFCTMOD_DRVRASSCSYSBRKFCTMOD_COMFORTABLE = 1;
    PRKGSPDCTRLSAFEGROUPDRVRASSCSYSBRKFCTMOD_DRVRASSCSYSBRKFCTMOD_EMERGENCY = 2;
  }
  enum PrkgSpdCtrlSafeGroupHPADrvrAsscSysBrkFctModType {
    PRKGSPDCTRLSAFEGROUPHPADRVRASSCSYSBRKFCTMOD_DRVRASSCSYSBRKFCTMOD_DEFAULT = 0;
    PRKGSPDCTRLSAFEGROUPHPADRVRASSCSYSBRKFCTMOD_DRVRASSCSYSBRKFCTMOD_COMFORTABLE = 1;
    PRKGSPDCTRLSAFEGROUPHPADRVRASSCSYSBRKFCTMOD_DRVRASSCSYSBRKFCTMOD_EMERGENCY = 2;
  }
  enum RotaSuspReqType {
    ROTASUSPREQ_ROTASUSPREQ_DEFAULT = 0;
    ROTASUSPREQ_ROTASUSPREQ_ROTATESUSPEND = 1;
    ROTASUSPREQ_ROTASUSPREQ_ROTATECONTINUE = 2;
    ROTASUSPREQ_ROTASUSPREQ_RESERVED = 3;
  }
  enum VehBeamLoModReqType {
    VEHBEAMLOMODREQ_ONOFFNOREQ_NOREQ = 0;
    VEHBEAMLOMODREQ_ONOFFNOREQ_ON = 1;
    VEHBEAMLOMODREQ_ONOFFNOREQ_OFF = 2;
  }
  // [] [0|1] [initial_value:None]
  optional bool dpa_ag_req_group_ub = 1;
  // description CRC,to check the signal,For E2E Protection [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 dpa_ag_req_group_chks = 2;
  // description counter,For E2E Protection [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 dpa_ag_req_group_cntr = 3;
  // description DPA Rotation Angle request [Deg] [0.0|360.0] [initial_value:0]
  optional double dpa_ag_req_group_rton_ag_req = 4;
  // description DPA Target Angle [Deg] [0.0|360.0] [initial_value:0]
  optional double dpa_ag_req_group_trgt_ag = 5;
  // description Actual rotation Angle of the vehicle [Deg] [0.0|360.0] [initial_value:0]
  optional double dpa_ag_req_group_veh_ata_rtonl_ag = 6;
  // [] [0|1] [initial_value:None]
  optional bool dpa_ctrl_mod_req_ub = 7;
  // description CRC,to check the signal,For E2E Protection [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 dpa_ctrl_mod_req_chks = 8;
  // description counter,For E2E Protection [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 dpa_ctrl_mod_req_cntr = 9;
  // description DPA controls mode request [] [0|15] [initial_value:0]
  optional DPACtrlModReqDPACtrlModReqType dpa_ctrl_mod_req_dpa_ctrl_mod_req = 10;
  // [] [0|1] [initial_value:None]
  optional bool eng_runng_req_by_park_assi_ub = 11;
  // description Request to keep engine running during a Semi automatic parking manoeuvre. [] [0|3] [initial_value:0]
  optional EngRunngReqByParkAssi1Type eng_runng_req_by_park_assi1 = 12;
  // description counter,For E2E Protection [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 eng_runng_req_by_park_assi_chks = 13;
  // description CRC,to check the signal,For E2E Protection [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 eng_runng_req_by_park_assi_cntr = 14;
  // [] [0|1] [initial_value:None]
  optional bool gear_prkg_assi_req_group_ub = 15;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 gear_prkg_assi_req_group_chks = 16;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 gear_prkg_assi_req_group_cntr = 17;
  // description The target gear request [] [0|3] [initial_value:0]
  optional GearPrkgAssiReqGroupGearPrkgAssiReq1Type gear_prkg_assi_req_group_gear_prkg_assi_req1 = 18;
  // [] [0|1] [initial_value:None]
  optional bool gear_sapa_to_brk_req_ub = 19;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 gear_sapa_to_brk_req_chks = 20;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 gear_sapa_to_brk_req_cntr = 21;
  // description The target gear request (Sapa) [] [0|3] [initial_value:0]
  optional GearSapaToBrkReqGearPrkgAssiReq1Type gear_sapa_to_brk_req_gear_prkg_assi_req1 = 22;
  // [] [0|1] [initial_value:None]
  optional bool mob_dev_rpa_btn_sts_to_app_grp_ub = 23;
  // description Mobile phone remote parking in button display status [] [0|3] [initial_value:0]
  optional MobDevRPABtnStsToAppGrpPrkgInBtnStsType mob_dev_rpa_btn_sts_to_app_grp_prkg_in_btn_sts = 24;
  // description Mobile phone remote parking out button display status [] [0|3] [initial_value:0]
  optional MobDevRPABtnStsToAppGrpPrkgOutBtnStsType mob_dev_rpa_btn_sts_to_app_grp_prkg_out_btn_sts = 25;
  // description The PAS side is opposite to the feedback signal of the cruise button [] [0|3] [initial_value:0]
  optional MobDevRPABtnStsToAppGrpRemParkOutCrsSwtRspType mob_dev_rpa_btn_sts_to_app_grp_rem_park_out_crs_swt_rsp = 26;
  // description PAS ECU TYPE [] [0|3] [initial_value:0]
  optional PrkgAsscSysEcuTypType prkg_assc_sys_ecu_typ = 27;
  // [] [0|1] [initial_value:None]
  optional bool prkg_assc_sys_ecu_typ_ub = 28;
  // [] [0|1] [initial_value:None]
  optional bool prkg_assi_electc_staby_prog_ctrl_mod_req_group_ub = 29;
  // description CRC,to check the signal,For E2E Protection [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 prkg_assi_electc_staby_prog_ctrl_mod_req_group_chks = 30;
  // description counter,For E2E Protection [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 prkg_assi_electc_staby_prog_ctrl_mod_req_group_cntr = 31;
  // description Parking control mode request [] [0|7] [initial_value:0]
  optional PrkgAssiElectcStabyProgCtrlModReqGroupPASElectcStabyProgCtrlModReqType prkg_assi_electc_staby_prog_ctrl_mod_req_group_pas_electc_staby_prog_ctrl_mod_req = 32;
  // description RPA work status [] [0|15] [initial_value:0]
  optional PrkgAssiSysRemPrkgStsType prkg_assi_sys_rem_prkg_sts = 33;
  // [] [0|1] [initial_value:None]
  optional bool prkg_assi_sys_rem_prkg_sts_ub = 34;
  // description This is the PEB function emergency brake request to VDDM [] [0|1] [initial_value:0]
  optional bool prkg_emgy_brk_emgy_brk_req = 35;
  // [] [0|1] [initial_value:None]
  optional bool prkg_emgy_brk_emgy_brk_req_ub = 36;
  // description EPB apply request by PEB [] [0|1] [initial_value:0]
  optional bool prkg_emgy_brk_epb_apply_req = 37;
  // [] [0|1] [initial_value:None]
  optional bool prkg_emgy_brk_epb_apply_req_ub = 38;
  // description Keep the vehicle standstill [] [0|1] [initial_value:0]
  optional bool prkg_emgy_brk_stand_still_req = 39;
  // [] [0|1] [initial_value:None]
  optional bool prkg_emgy_brk_stand_still_req_ub = 40;
  // [] [0|3] [initial_value:0]
  optional PrkgFctDiModType prkg_fct_di_mod = 41;
  // [] [0|1] [initial_value:None]
  optional bool prkg_fct_di_mod_ub = 42;
  // [] [0|1] [initial_value:None]
  optional bool prkg_spd_ctrl_safe_group_ub = 43;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 prkg_spd_ctrl_safe_group_chks = 44;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 prkg_spd_ctrl_safe_group_cntr = 45;
  // description emergency and comfortable brake [] [0|3] [initial_value:0]
  optional PrkgSpdCtrlSafeGroupDrvrAsscSysBrkFctModType prkg_spd_ctrl_safe_group_drvr_assc_sys_brk_fct_mod = 46;
  // [] [0|1] [initial_value:None]
  optional bool prkg_spd_ctrl_safe_group_hpa_ub = 47;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 prkg_spd_ctrl_safe_group_hpa_chks = 48;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 prkg_spd_ctrl_safe_group_hpa_cntr = 49;
  // description emergency and comfortable brake [] [0|3] [initial_value:0]
  optional PrkgSpdCtrlSafeGroupHPADrvrAsscSysBrkFctModType prkg_spd_ctrl_safe_group_hpa_drvr_assc_sys_brk_fct_mod = 50;
  // description The lower limit of the target acceleration/deceleration [m/s^2] [-10.24|10.229999999999999] [initial_value:1024]
  optional double prkg_spd_ctrl_safe_group_hpa_prkg_assi_a_lowr_lim = 51;
  // description Target acceleration/deceleration lower slope limit [m/s^3] [-12.7|0.000000000000001776] [initial_value:124]
  optional double prkg_spd_ctrl_safe_group_hpa_prkg_assi_a_lowr_slop = 52;
  // description Target acceleration/deceleration request [m/s^2] [-10.24|10.229999999999999] [initial_value:1024]
  optional double prkg_spd_ctrl_safe_group_hpa_prkg_assi_a_req = 53;
  // description The upper limit of the target acceleration/deceleration [m/s^2] [-10.24|10.229999999999999] [initial_value:1024]
  optional double prkg_spd_ctrl_safe_group_hpa_prkg_assi_a_uppr_lim = 54;
  // description Target acceleration/deceleration upper slope limit [m/s^3] [0.0|12.700000000000001] [initial_value:3]
  optional double prkg_spd_ctrl_safe_group_hpa_prkg_assi_a_uppr_slop = 55;
  // description The lower limit of the target acceleration/deceleration [m/s^2] [-1.28|1.2700000000000002] [initial_value:128]
  optional double prkg_spd_ctrl_safe_group_prkg_assi_a_lowr_lim = 56;
  // description Target acceleration/deceleration lower slope limit [m/s^3] [-12.7|0.000000000000001776] [initial_value:124]
  optional double prkg_spd_ctrl_safe_group_prkg_assi_a_lowr_slop = 57;
  // description Target acceleration/deceleration request [m/s^2] [-1.28|1.2700000000000002] [initial_value:128]
  optional double prkg_spd_ctrl_safe_group_prkg_assi_a_req1 = 58;
  // description The upper limit of the target acceleration/deceleration [m/s^2] [-1.28|1.2700000000000002] [initial_value:128]
  optional double prkg_spd_ctrl_safe_group_prkg_assi_a_uppr_lim = 59;
  // description Target acceleration/deceleration upper slope limit [m/s^3] [0.0|12.700000000000001] [initial_value:3]
  optional double prkg_spd_ctrl_safe_group_prkg_assi_a_uppr_slop = 60;
  // description Request VMM change usage mode. [] [0|1] [initial_value:0]
  optional bool prkg_usg_drv_mod_tran_req = 61;
  // [] [0|1] [initial_value:None]
  optional bool prkg_usg_drv_mod_tran_req_ub = 62;
  // description Rotate Suspend request [] [0|3] [initial_value:0]
  optional RotaSuspReqType rota_susp_req = 63;
  // [] [0|1] [initial_value:None]
  optional bool rota_susp_req_ub = 64;
  // [] [0|1] [initial_value:None]
  optional bool sapa_dst_ub = 65;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 sapa_dst_chks = 66;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 sapa_dst_cntr = 67;
  // description Residual distance request [m] [-10.0|71.91] [initial_value:0]
  optional double sapa_dst_sapa_dst = 68;
  // [] [0|1] [initial_value:None]
  optional bool sapa_mod_ub = 69;
  // description checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 sapa_mod_chks = 70;
  // description counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 sapa_mod_cntr = 71;
  // description Sapa mode request [] [0|1] [initial_value:0]
  optional bool sapa_mod_sapa_mod = 72;
  // description Vehicle speed request [m/s] [0.0|10.23] [initial_value:0]
  optional double sapa_vmax = 73;
  // [] [0|1] [initial_value:None]
  optional bool sapa_vmax_ub = 74;
  // description Request open/close low beam mode. [] [0|3] [initial_value:0]
  optional VehBeamLoModReqType veh_beam_lo_mod_req = 75;
  // [] [0|1] [initial_value:None]
  optional bool veh_beam_lo_mod_req_ub = 76;
  // description Request to active horn warning. [] [0|1] [initial_value:0]
  optional bool veh_prkg_to_horn = 77;
  // [] [0|1] [initial_value:None]
  optional bool veh_prkg_to_horn_ub = 78;
  // description voice prompt requirement [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 voice_prompt_req = 79;
  // [] [0|1] [initial_value:None]
  optional bool voice_prompt_req_ub = 80;
}

message ZCUD_ZCUCANFD1_FR01_61 {
// Report Message
  enum ADataRawSafeALat1QfType {
    ADATARAWSAFEALAT1QF_QF1_DEVOFDATAUNDEFD = 0;
    ADATARAWSAFEALAT1QF_QF1_DATATMPUNDEFDANDEVLNINPROGS = 1;
    ADATARAWSAFEALAT1QF_QF1_DEVOFDATANOTWITHINRNGALLWD = 2;
    ADATARAWSAFEALAT1QF_QF1_DATACALCDWITHDEVDEFD = 3;
  }
  enum ADataRawSafeALgt1QfType {
    ADATARAWSAFEALGT1QF_QF1_DEVOFDATAUNDEFD = 0;
    ADATARAWSAFEALGT1QF_QF1_DATATMPUNDEFDANDEVLNINPROGS = 1;
    ADATARAWSAFEALGT1QF_QF1_DEVOFDATANOTWITHINRNGALLWD = 2;
    ADATARAWSAFEALGT1QF_QF1_DATACALCDWITHDEVDEFD = 3;
  }
  enum ADataRawSafeAVertQfType {
    ADATARAWSAFEAVERTQF_QF1_DEVOFDATAUNDEFD = 0;
    ADATARAWSAFEAVERTQF_QF1_DATATMPUNDEFDANDEVLNINPROGS = 1;
    ADATARAWSAFEAVERTQF_QF1_DEVOFDATANOTWITHINRNGALLWD = 2;
    ADATARAWSAFEAVERTQF_QF1_DATACALCDWITHDEVDEFD = 3;
  }
  enum ADModCtrlInhbnADModCtrlInhbnType {
    ADMODCTRLINHBNADMODCTRLINHBN_NOINHB = 0;
    ADMODCTRLINHBNADMODCTRLINHBN_L12LGTCTRLMODINHB = 1;
    ADMODCTRLINHBNADMODCTRLINHBN_AUTOPARKINGMODINHB = 2;
    ADMODCTRLINHBNADMODCTRLINHBN_L12ANDAUTOPARKINGMODINHB = 3;
    ADMODCTRLINHBNADMODCTRLINHBN_L3ADMODINHB = 4;
    ADMODCTRLINHBNADMODCTRLINHBN_L3ADANDL12LGTCTRLMODINHB = 5;
    ADMODCTRLINHBNADMODCTRLINHBN_L3ADANDAUTOPARKINGMODINHB = 6;
    ADMODCTRLINHBNADMODCTRLINHBN_L3ADANDAUTOPARKINGANDL12LGTCTRLMODINHB = 7;
  }
  enum AgDataRawSafeRollRateQfType {
    AGDATARAWSAFEROLLRATEQF_QF1_DEVOFDATAUNDEFD = 0;
    AGDATARAWSAFEROLLRATEQF_QF1_DATATMPUNDEFDANDEVLNINPROGS = 1;
    AGDATARAWSAFEROLLRATEQF_QF1_DEVOFDATANOTWITHINRNGALLWD = 2;
    AGDATARAWSAFEROLLRATEQF_QF1_DATACALCDWITHDEVDEFD = 3;
  }
  enum AgDataRawSafeYawRateQfType {
    AGDATARAWSAFEYAWRATEQF_QF1_DEVOFDATAUNDEFD = 0;
    AGDATARAWSAFEYAWRATEQF_QF1_DATATMPUNDEFDANDEVLNINPROGS = 1;
    AGDATARAWSAFEYAWRATEQF_QF1_DEVOFDATANOTWITHINRNGALLWD = 2;
    AGDATARAWSAFEYAWRATEQF_QF1_DATACALCDWITHDEVDEFD = 3;
  }
  enum AmbTRawQlyType {
    AMBTRAWQLY_GENQF1_UNDEFINDDATAACCUR = 0;
    AMBTRAWQLY_GENQF1_TMPUNDEFDDATA = 1;
    AMBTRAWQLY_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    AMBTRAWQLY_GENQF1_ACCURDATA = 3;
  }
  enum AsyDataWithCmpSafeALat1QfType {
    ASYDATAWITHCMPSAFEALAT1QF_QF1_DEVOFDATAUNDEFD = 0;
    ASYDATAWITHCMPSAFEALAT1QF_QF1_DATATMPUNDEFDANDEVLNINPROGS = 1;
    ASYDATAWITHCMPSAFEALAT1QF_QF1_DEVOFDATANOTWITHINRNGALLWD = 2;
    ASYDATAWITHCMPSAFEALAT1QF_QF1_DATACALCDWITHDEVDEFD = 3;
  }
  enum AsyDataWithCmpSafeALgt1QfType {
    ASYDATAWITHCMPSAFEALGT1QF_QF1_DEVOFDATAUNDEFD = 0;
    ASYDATAWITHCMPSAFEALGT1QF_QF1_DATATMPUNDEFDANDEVLNINPROGS = 1;
    ASYDATAWITHCMPSAFEALGT1QF_QF1_DEVOFDATANOTWITHINRNGALLWD = 2;
    ASYDATAWITHCMPSAFEALGT1QF_QF1_DATACALCDWITHDEVDEFD = 3;
  }
  enum AsyDataWithCmpSafeYawRateQfType {
    ASYDATAWITHCMPSAFEYAWRATEQF_QF1_DEVOFDATAUNDEFD = 0;
    ASYDATAWITHCMPSAFEYAWRATEQF_QF1_DATATMPUNDEFDANDEVLNINPROGS = 1;
    ASYDATAWITHCMPSAFEYAWRATEQF_QF1_DEVOFDATANOTWITHINRNGALLWD = 2;
    ASYDATAWITHCMPSAFEYAWRATEQF_QF1_DATACALCDWITHDEVDEFD = 3;
  }
  enum CrsCtrlrStsType {
    CRSCTRLRSTS_CRSCTRLRSTS1_OFF = 1;
    CRSCTRLRSTS_CRSCTRLRSTS1_STB = 2;
    CRSCTRLRSTS_CRSCTRLRSTS1_ACTV = 3;
  }
  enum DoorDrvrLockCmdType {
    DOORDRVRLOCKCMD_LOCKACTVNSAFE1_LOCKACTVNOFF = 0;
    DOORDRVRLOCKCMD_LOCKACTVNSAFE1_LOCKACTVNUNLCK = 1;
    DOORDRVRLOCKCMD_LOCKACTVNSAFE1_LOCKACTVNLOCK = 2;
    DOORDRVRLOCKCMD_LOCKACTVNSAFE1_LOCKACTVNSAFE = 3;
    DOORDRVRLOCKCMD_LOCKACTVNSAFE1_LOCKACTVNUNLCKBYCRASH1 = 4;
    DOORDRVRLOCKCMD_LOCKACTVNSAFE1_LOCKACTVNUNLCKBYCRASH2 = 8;
    DOORDRVRLOCKCMD_LOCKACTVNSAFE1_LOCKACTVNUNLCKBYCRASH0 = 12;
    DOORDRVRLOCKCMD_LOCKACTVNSAFE1_LOCKACTVNUNLCKBYCRASH4 = 13;
    DOORDRVRLOCKCMD_LOCKACTVNSAFE1_LOCKACTVNUNLCKBYCRASH3 = 14;
  }
  enum DrvrDesDirDrvrDesDirType {
    DRVRDESDIRDRVRDESDIR_DRVRDESDIR1_UNDEFD = 0;
    DRVRDESDIRDRVRDESDIR_DRVRDESDIR1_FWD = 1;
    DRVRDESDIRDRVRDESDIR_DRVRDESDIR1_RVS = 2;
    DRVRDESDIRDRVRDESDIR_DRVRDESDIR1_NEUT = 3;
    DRVRDESDIRDRVRDESDIR_DRVRDESDIR1_RESD0 = 4;
    DRVRDESDIRDRVRDESDIR_DRVRDESDIR1_RESD1 = 5;
    DRVRDESDIRDRVRDESDIR_DRVRDESDIR1_RESD2 = 6;
    DRVRDESDIRDRVRDESDIR_DRVRDESDIR1_RESD3 = 7;
  }
  enum EpbActrStSecType {
    EPBACTRSTSEC_APPREL_APPLIED = 0;
    EPBACTRSTSEC_APPREL_RELEASED = 1;
    EPBACTRSTSEC_APPREL_APPLYING = 2;
    EPBACTRSTSEC_APPREL_RELEASING = 3;
    EPBACTRSTSEC_APPREL_UNKNOWN = 4;
    EPBACTRSTSEC_APPREL_HOLDAPPLIED = 5;
    EPBACTRSTSEC_APPREL_COMPLETELYRELEASED = 6;
    EPBACTRSTSEC_APPREL_HAPPREPARED = 7;
  }
  // description Activation Request for Welcome Light [] [0|1] [initial_value:0]
  optional bool actvn_of_welcome_li = 1;
  // [] [0|1] [initial_value:None]
  optional bool actvn_of_welcome_li_ub = 2;
  // [] [0|1] [initial_value:None]
  optional bool a_data_raw_safe_ub = 3;
  // description IMU acceleration data Lateral acceleration [m/s^2] [-138.99200000000002|139.00050000000002] [initial_value:0]
  optional double a_data_raw_safe_a_lat = 4;
  // description IMU acceleration data Quality factor for Lateral acceleration signal [] [0|3] [initial_value:1]
  optional ADataRawSafeALat1QfType a_data_raw_safe_a_lat1_qf = 5;
  // description IMU acceleration data Longitudinal acceleration [m/s^2] [-138.99200000000002|139.00050000000002] [initial_value:0]
  optional double a_data_raw_safe_a_lgt = 6;
  // description IMU acceleration data Quality factor for Longitudinal acceleration [] [0|3] [initial_value:1]
  optional ADataRawSafeALgt1QfType a_data_raw_safe_a_lgt1_qf = 7;
  // description IMU acceleration data Vertical acceleration [m/s^2] [-138.99200000000002|139.00050000000002] [initial_value:1155]
  optional double a_data_raw_safe_a_vert = 8;
  // description IMU acceleration data Quality factor for Vertical acceleration [] [0|3] [initial_value:1]
  optional ADataRawSafeAVertQfType a_data_raw_safe_a_vert_qf = 9;
  // description IMU acceleration data Check sum [Unitless] [0.0|255.0] [initial_value:255]
  optional uint32 a_data_raw_safe_chks = 10;
  // description IMU acceleration data Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 a_data_raw_safe_cntr = 11;
  // [] [0|1] [initial_value:None]
  optional bool ad_mod_ctrl_inhbn_ub = 12;
  // description Inhibition flag of AD mode. [] [0|7] [initial_value:0]
  optional ADModCtrlInhbnADModCtrlInhbnType ad_mod_ctrl_inhbn_ad_mod_ctrl_inhbn = 13;
  // description checksum for ADModCtrlInhbn [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 ad_mod_ctrl_inhbn_chks = 14;
  // description counter for ADModCtrlInhbn [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ad_mod_ctrl_inhbn_cntr = 15;
  // [] [0|1] [initial_value:None]
  optional bool ag_data_raw_safe_ub = 16;
  // description IMU angular rate data. Check summa [Unitless] [0.0|255.0] [initial_value:255]
  optional uint32 ag_data_raw_safe_chks = 17;
  // description IMU angular rate data. Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 ag_data_raw_safe_cntr = 18;
  // description IMU angular rate data. Roll Rate [rad/s] [-6.0|6.0] [initial_value:0]
  optional double ag_data_raw_safe_roll_rate = 19;
  // description IMU angular rate data. Quality factor for Roll Rate [] [0|3] [initial_value:1]
  optional AgDataRawSafeRollRateQfType ag_data_raw_safe_roll_rate_qf = 20;
  // description IMU angular rate data. Yaw Rate [rad/s] [-6.0|6.0] [initial_value:0]
  optional double ag_data_raw_safe_yaw_rate = 21;
  // description IMU angular rate data. Quality Factor for Yaw Rate [] [0|3] [initial_value:1]
  optional AgDataRawSafeYawRateQfType ag_data_raw_safe_yaw_rate_qf = 22;
  // [] [0|1] [initial_value:None]
  optional bool amb_t_raw_ub = 23;
  // description Unfiltered ambient temp raw data in deg C. Ambient temp value [degC] [-70.0|134.70000000000002] [initial_value:700]
  optional double amb_t_raw_amb_t_val = 24;
  // description Unfiltered ambient temp raw data in deg C. Quality Factor of the ambient temp [] [0|3] [initial_value:0]
  optional AmbTRawQlyType amb_t_raw_qly = 25;
  // [] [0|1] [initial_value:None]
  optional bool asy_data_with_cmp_safe_ub = 26;
  // description IMU processed special data. Quality factor for Lateral acceleration signal [] [0|3] [initial_value:1]
  optional AsyDataWithCmpSafeALat1QfType asy_data_with_cmp_safe_a_lat1_qf = 27;
  // description IMU processed special data.  Compensated Lateral acceleration [m/s^2] [-138.99200000000002|139.00050000000002] [initial_value:0]
  optional double asy_data_with_cmp_safe_a_lat_with_cmp = 28;
  // description IMU processed special data. Quality factor for Longitudinal acceleration [] [0|3] [initial_value:1]
  optional AsyDataWithCmpSafeALgt1QfType asy_data_with_cmp_safe_a_lgt1_qf = 29;
  // description IMU processed special data. Check sum [Unitless] [0.0|255.0] [initial_value:255]
  optional uint32 asy_data_with_cmp_safe_chks = 30;
  // description IMU processed special data. Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 asy_data_with_cmp_safe_cntr = 31;
  // description IMU processed special data. Derivative of Longitudinal acceleration [m/s^3] [-30.0|30.0] [initial_value:0]
  optional double asy_data_with_cmp_safe_grdt_of_a_lgt = 32;
  // description IMU processed special data. Quality Factor for Yaw Rate [] [0|3] [initial_value:1]
  optional AsyDataWithCmpSafeYawRateQfType asy_data_with_cmp_safe_yaw_rate_qf = 33;
  // description IMU processed special data. Compensated Yaw rate [rad/s] [-6.0|6.0] [initial_value:0]
  optional double asy_data_with_cmp_safe_yaw_rate_with_cmp = 34;
  // description Body height is a calculated average value from the four level sensors at each wheel. [m] [-0.999998|1.00006] [initial_value:0]
  optional double body_hei = 35;
  // [] [0|1] [initial_value:None]
  optional bool body_hei_ub = 36;
  // description Presents a tiime value that shall be used by all ECUs to time-stamp diagnsotic trouble codes (DTC) according to the requirements for Global DTC snapshot data. [s] [0.0|429496729.5] [initial_value:0]
  optional double car_ti_glb = 37;
  // [] [0|1] [initial_value:None]
  optional bool car_ti_glb_ub = 38;
  // description Override CC/ACC with accelerator pedal [] [0|1] [initial_value:0]
  optional bool crs_ctrl_ovrdn = 39;
  // [] [0|1] [initial_value:None]
  optional bool crs_ctrl_ovrdn_ub = 40;
  // description The signal indicates the status (or state) of the Cruise Controller; Off, Standby, Actv etc. [] [0|7] [initial_value:1]
  optional CrsCtrlrStsType crs_ctrlr_sts = 41;
  // [] [0|1] [initial_value:None]
  optional bool crs_ctrlr_sts_ub = 42;
  // [] [0|15] [initial_value:0]
  optional DoorDrvrLockCmdType door_drvr_lock_cmd = 43;
  // [] [0|1] [initial_value:None]
  optional bool door_drvr_lock_cmd_ub = 44;
  // [] [0|1] [initial_value:None]
  optional bool drvr_des_dir_ub = 45;
  // description Desired Driver Direction is an interpretation of driver input. It specifies in which longitudinal direction the driver requests that any accelerating propulsive torque shall be delivered. There are three possible directions: 1. Forward 2. Reverse 3. Neutral. Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 drvr_des_dir_chks = 46;
  // description Desired Driver Direction is an interpretation of driver input. It specifies in which longitudinal direction the driver requests that any accelerating propulsive torque shall be delivered. There are three possible directions: 1. Forward 2. Reverse 3. Neutral. Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 drvr_des_dir_cntr = 47;
  // description Desired Driver Direction is an interpretation of driver input. It specifies in which longitudinal direction the driver requests that any accelerating propulsive torque shall be delivered. There are three possible directions: 1. Forward 2. Reverse 3. Neutral [] [0|7] [initial_value:0]
  optional DrvrDesDirDrvrDesDirType drvr_des_dir_drvr_des_dir = 48;
  // [] [0|1] [initial_value:None]
  optional bool drvr_gear_shift_dir_req1_ub = 49;
  // description 8 bit checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 drvr_gear_shift_dir_req1_chks = 50;
  // description 4 bit counter used in checksum calculation. N=E (modulo 16) [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 drvr_gear_shift_dir_req1_cntr = 51;
  // description Gear shifter downdown tip in automatic gate [] [0|1] [initial_value:0]
  optional bool drvr_gear_shift_dir_req1_dwn_dwn_tip_aut = 52;
  // description Gear shifter down tip in automatic gate [] [0|1] [initial_value:0]
  optional bool drvr_gear_shift_dir_req1_dwn_tip_aut = 53;
  // description Gear shifter in automatic gate position [] [0|1] [initial_value:0]
  optional bool drvr_gear_shift_dir_req1_posn_aut = 54;
  // description Gear shifter up tip in automatic gate [] [0|1] [initial_value:0]
  optional bool drvr_gear_shift_dir_req1_up_tip_aut = 55;
  // description Gear shifter upup tip in automatic gate [] [0|1] [initial_value:0]
  optional bool drvr_gear_shift_dir_req1_up_up_tip_aut = 56;
  // [] [0|1] [initial_value:None]
  optional bool drvr_gear_shift_dir_req2_ub = 57;
  // description 8 bit checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 drvr_gear_shift_dir_req2_chks = 58;
  // description 4 bit counter used in checksum calculation. N=E (modulo 16) [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 drvr_gear_shift_dir_req2_cntr = 59;
  // description Gear shifter downdown tip in automatic gate [] [0|1] [initial_value:0]
  optional bool drvr_gear_shift_dir_req2_dwn_dwn_tip_aut = 60;
  // description Gear shifter down tip in automatic gate [] [0|1] [initial_value:0]
  optional bool drvr_gear_shift_dir_req2_dwn_tip_aut = 61;
  // description Gear shifter in automatic gate position [] [0|1] [initial_value:0]
  optional bool drvr_gear_shift_dir_req2_posn_aut = 62;
  // description Gear shifter up tip in automatic gate [] [0|1] [initial_value:0]
  optional bool drvr_gear_shift_dir_req2_up_tip_aut = 63;
  // description Gear shifter upup tip in automatic gate [] [0|1] [initial_value:0]
  optional bool drvr_gear_shift_dir_req2_up_up_tip_aut = 64;
  // description EPB actuator state for Secondary EPB ECU. [] [0|7] [initial_value:4]
  optional EpbActrStSecType epb_actr_st_sec = 65;
  // [] [0|1] [initial_value:None]
  optional bool epb_actr_st_sec_ub = 66;
  // description Informs HCMs about upcoming shut down of Exterior Light Relay. [] [0|1] [initial_value:0]
  optional bool extr_li_rly_pwr_dwn = 67;
  // [] [0|1] [initial_value:None]
  optional bool extr_li_rly_pwr_dwn_ub = 68;
  // description Automaic Remote Parking Request sent by telematics [] [0|1] [initial_value:0]
  optional bool mob_dev_avp_req = 69;
  // [] [0|1] [initial_value:None]
  optional bool mob_dev_avp_req_ub = 70;
}

message BCM_ZCUCANFD1_FR16_62 {
// Report Message
  enum SapaVehMtnStVehMtnStType {
    SAPAVEHMTNSTVEHMTNST_VEHMTNST2_UKWN = 0;
    SAPAVEHMTNSTVEHMTNST_VEHMTNST2_STANDSTILLVAL1 = 1;
    SAPAVEHMTNSTVEHMTNST_VEHMTNST2_STANDSTILLVAL2 = 2;
    SAPAVEHMTNSTVEHMTNST_VEHMTNST2_STANDSTILLVAL3 = 3;
    SAPAVEHMTNSTVEHMTNST_VEHMTNST2_ROLLGFWDVAL1 = 4;
    SAPAVEHMTNSTVEHMTNST_VEHMTNST2_ROLLGFWDVAL2 = 5;
    SAPAVEHMTNSTVEHMTNST_VEHMTNST2_ROLLGBACKWVAL1 = 6;
    SAPAVEHMTNSTVEHMTNST_VEHMTNST2_ROLLGBACKWVAL2 = 7;
  }
  enum VehDynCtrlStsForALgtCmftVehDynCtrlStsForStandStillMgrForParkType {
    VEHDYNCTRLSTSFORALGTCMFTVEHDYNCTRLSTSFORSTANDSTILLMGRFORPARK_STANDSTILLMGRSTSFORPARK2_PARKNOTREQD = 0;
    VEHDYNCTRLSTSFORALGTCMFTVEHDYNCTRLSTSFORSTANDSTILLMGRFORPARK_STANDSTILLMGRSTSFORPARK2_PARKREQDBYDRVR = 1;
    VEHDYNCTRLSTSFORALGTCMFTVEHDYNCTRLSTSFORSTANDSTILLMGRFORPARK_STANDSTILLMGRSTSFORPARK2_PARKREQDAUTBYHLDTIEXCD = 2;
    VEHDYNCTRLSTSFORALGTCMFTVEHDYNCTRLSTSFORSTANDSTILLMGRFORPARK_STANDSTILLMGRSTSFORPARK2_PARKREQDAUT = 3;
    VEHDYNCTRLSTSFORALGTCMFTVEHDYNCTRLSTSFORSTANDSTILLMGRFORPARK_STANDSTILLMGRSTSFORPARK2_PARKNOTAVL = 4;
  }
  enum VehMtnStVehMtnStType {
    VEHMTNSTVEHMTNST_VEHMTNST2_UKWN = 0;
    VEHMTNSTVEHMTNST_VEHMTNST2_STANDSTILLVAL1 = 1;
    VEHMTNSTVEHMTNST_VEHMTNST2_STANDSTILLVAL2 = 2;
    VEHMTNSTVEHMTNST_VEHMTNST2_STANDSTILLVAL3 = 3;
    VEHMTNSTVEHMTNST_VEHMTNST2_ROLLGFWDVAL1 = 4;
    VEHMTNSTVEHMTNST_VEHMTNST2_ROLLGFWDVAL2 = 5;
    VEHMTNSTVEHMTNST_VEHMTNST2_ROLLGBACKWVAL1 = 6;
    VEHMTNSTVEHMTNST_VEHMTNST2_ROLLGBACKWVAL2 = 7;
  }
  enum VehSpdLgtQfType {
    VEHSPDLGTQF_GENQF1_UNDEFINDDATAACCUR = 0;
    VEHSPDLGTQF_GENQF1_TMPUNDEFDDATA = 1;
    VEHSPDLGTQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    VEHSPDLGTQF_GENQF1_ACCURDATA = 3;
  }
  enum WhlVAgrFrntLeQfType {
    WHLVAGRFRNTLEQF_GENQF1_UNDEFINDDATAACCUR = 0;
    WHLVAGRFRNTLEQF_GENQF1_TMPUNDEFDDATA = 1;
    WHLVAGRFRNTLEQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    WHLVAGRFRNTLEQF_GENQF1_ACCURDATA = 3;
  }
  enum WhlVAgrFrntRiQfType {
    WHLVAGRFRNTRIQF_GENQF1_UNDEFINDDATAACCUR = 0;
    WHLVAGRFRNTRIQF_GENQF1_TMPUNDEFDDATA = 1;
    WHLVAGRFRNTRIQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    WHLVAGRFRNTRIQF_GENQF1_ACCURDATA = 3;
  }
  enum WhlVAgrReLeQfType {
    WHLVAGRRELEQF_GENQF1_UNDEFINDDATAACCUR = 0;
    WHLVAGRRELEQF_GENQF1_TMPUNDEFDDATA = 1;
    WHLVAGRRELEQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    WHLVAGRRELEQF_GENQF1_ACCURDATA = 3;
  }
  enum WhlVAgrReRiQfType {
    WHLVAGRRERIQF_GENQF1_UNDEFINDDATAACCUR = 0;
    WHLVAGRRERIQF_GENQF1_TMPUNDEFDDATA = 1;
    WHLVAGRRERIQF_GENQF1_DATAACCURNOTWITHINSPCN = 2;
    WHLVAGRRERIQF_GENQF1_ACCURDATA = 3;
  }
  // [] [0|1] [initial_value:None]
  optional bool sapa_veh_mtn_st_ub = 1;
  // description Vehicle motion status in Sapa [] [0|7] [initial_value:0]
  optional SapaVehMtnStVehMtnStType sapa_veh_mtn_st_veh_mtn_st = 2;
  // description Cheksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 sapa_veh_mtn_st_veh_mtn_st_chks = 3;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 sapa_veh_mtn_st_veh_mtn_st_cntr = 4;
  // [] [0|1] [initial_value:None]
  optional bool veh_dyn_ctrl_sts_for_a_lgt_cmft_ub = 5;
  // description Arbitrator and actuator status for the vehicle longitudianal acceleration comfort control. Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_dyn_ctrl_sts_for_a_lgt_cmft_veh_dyn_ctrl_sts_chks = 6;
  // description Arbitrator and actuator status for the vehicle longitudianal acceleration comfort control. Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 veh_dyn_ctrl_sts_for_a_lgt_cmft_veh_dyn_ctrl_sts_cntr = 7;
  // description Arbitrator and actuator status for the vehicle longitudianal acceleration comfort control. Longitudinal acceleration control for comfort denied [] [0|1] [initial_value:0]
  optional bool veh_dyn_ctrl_sts_for_a_lgt_cmft_veh_dyn_ctrl_sts_dend = 8;
  // description Arbitrator and actuator status for the vehicle longitudianal acceleration comfort control. Brake actuator active for comfort braking [] [0|1] [initial_value:0]
  optional bool veh_dyn_ctrl_sts_for_a_lgt_cmft_veh_dyn_ctrl_sts_for_brk_actv = 9;
  // description Arbitrator and actuator status for the vehicle longitudianal acceleration comfort control. Brake actuator prefill active [] [0|1] [initial_value:0]
  optional bool veh_dyn_ctrl_sts_for_a_lgt_cmft_veh_dyn_ctrl_sts_for_brk_prec_actv = 10;
  // description Arbitrator and actuator status for the vehicle longitudianal acceleration comfort control. Stand still staus for park [] [0|7] [initial_value:0]
  optional VehDynCtrlStsForALgtCmftVehDynCtrlStsForStandStillMgrForParkType veh_dyn_ctrl_sts_for_a_lgt_cmft_veh_dyn_ctrl_sts_for_stand_still_mgr_for_park = 11;
  // description Arbitrator and actuator status for the vehicle longitudianal acceleration comfort control. Indication of warm wheel brakes [] [0|1] [initial_value:0]
  optional bool veh_dyn_ctrl_sts_for_a_lgt_cmft_veh_dyn_ctrl_sts_for_whl_brk_wrm = 12;
  // description Arbitrator and actuator status for the vehicle longitudianal acceleration comfort control. Longitudinal acceleration control for comfort not enabled [] [0|1] [initial_value:0]
  optional bool veh_dyn_ctrl_sts_for_a_lgt_cmft_veh_dyn_ctrl_sts_not_ena = 13;
  // [] [0|1] [initial_value:None]
  optional bool veh_mtn_st_ub = 14;
  // description Vehicle motion state information based on wheel speed sensors. Provides information about vehicle stand still and vehicle rolling direction. Checksum for vehicle motion state [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_mtn_st_chks = 15;
  // description Vehicle motion state information based on wheel speed sensors. Provides information about vehicle stand still and vehicle rolling direction. Counter for vehicle motion state [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 veh_mtn_st_cntr = 16;
  // description Vehicle motion state information based on wheel speed sensors. Provides information about vehicle stand still and vehicle rolling direction. Vehicle motion state [] [0|7] [initial_value:0]
  optional VehMtnStVehMtnStType veh_mtn_st_veh_mtn_st = 17;
  // [] [0|1] [initial_value:None]
  optional bool veh_spd_lgt_ub = 18;
  // description Vehicle speed longitudinal based on wheel speed sensors and longitudinal acceleration. [m/s] [0.0|125.0027] [initial_value:0]
  optional double veh_spd_lgt_a = 19;
  // description Checksum [Unitless] [0.0|255.0] [initial_value:0]
  optional uint32 veh_spd_lgt_chks = 20;
  // description Counter [Unitless] [0.0|15.0] [initial_value:0]
  optional uint32 veh_spd_lgt_cntr = 21;
  // description Quality factor for vehicle speed as measured by wheel speed sensors and longitudinal acceleration. [] [0|3] [initial_value:1]
  optional VehSpdLgtQfType veh_spd_lgt_qf = 22;
  // [] [0|1] [initial_value:None]
  optional bool whl_v_agr_frnt_ub = 23;
  // description Unfiltered angular velocity of individual front left wheel. [rad/s] [-255.0|255.0] [initial_value:0]
  optional double whl_v_agr_frnt_le = 24;
  // description quality factor [] [0|3] [initial_value:0]
  optional WhlVAgrFrntLeQfType whl_v_agr_frnt_le_qf = 25;
  // description Unfiltered angular velocity of individual front right wheel. [rad/s] [-255.0|255.0] [initial_value:0]
  optional double whl_v_agr_frnt_ri = 26;
  // description quality factor [] [0|3] [initial_value:0]
  optional WhlVAgrFrntRiQfType whl_v_agr_frnt_ri_qf = 27;
  // [] [0|1] [initial_value:None]
  optional bool whl_v_agr_re_ub = 28;
  // description Unfiltered angular velocity of individual rear left wheel. [rad/s] [-255.0|255.0] [initial_value:0]
  optional double whl_v_agr_re_le = 29;
  // description quality factor [] [0|3] [initial_value:0]
  optional WhlVAgrReLeQfType whl_v_agr_re_le_qf = 30;
  // description Unfiltered angular velocity of individual rear right wheel. [rad/s] [-255.0|255.0] [initial_value:0]
  optional double whl_v_agr_re_ri = 31;
  // description quality factor [] [0|3] [initial_value:0]
  optional WhlVAgrReRiQfType whl_v_agr_re_ri_qf = 32;
}


message GlP177ChassisDetail {
  optional ADPU_AD_REDUNDANCY_CAN_FR09_101 adpu_ad_redundancy_can_fr09_101 = 1; // control message
  optional ADPU_AD_REDUNDANCY_CAN_FR08_102 adpu_ad_redundancy_can_fr08_102 = 2; // control message
  optional ADPU_AD_REDUNDANCY_CAN_FR07_103 adpu_ad_redundancy_can_fr07_103 = 3; // control message
  optional ADPU_AD_REDUNDANCY_CAN_FR06_105 adpu_ad_redundancy_can_fr06_105 = 4; // control message
  optional ADPU_AD_REDUNDANCY_CAN_FR03_108 adpu_ad_redundancy_can_fr03_108 = 5; // control message
  optional ADPU_AD_REDUNDANCY_CAN_FR02_109 adpu_ad_redundancy_can_fr02_109 = 6; // control message
  optional ADPU_AD_REDUNDANCY_CAN_FR01_110 adpu_ad_redundancy_can_fr01_110 = 7; // control message
  optional ADSC_AD_REDUNDANCY_FR05_115 adsc_ad_redundancy_fr05_115 = 8; // control message
  optional ADSC_AD_REDUNDANCY_FR04_126 adsc_ad_redundancy_fr04_126 = 9; // control message
  optional RBCM_AD_REDUNDANCY_FR09_158 rbcm_ad_redundancy_fr09_158 = 10; // control message
  optional ADCU_AD_REDUNDANCY_FR02_160 adcu_ad_redundancy_fr02_160 = 11; // control message
  optional ADSC_AD_REDUNDANCY_FR01_177 adsc_ad_redundancy_fr01_177 = 12; // control message
  optional ADSC_AD_REDUNDANCY_FR02_178 adsc_ad_redundancy_fr02_178 = 13; // control message
  optional ADSC_AD_REDUNDANCY_FR03_179 adsc_ad_redundancy_fr03_179 = 14; // control message
  optional RBCM_AD_REDUNDANCY_FR10_219 rbcm_ad_redundancy_fr10_219 = 15; // control message
  optional RBCM_AD_REDUNDANCY_FR11_220 rbcm_ad_redundancy_fr11_220 = 16; // control message
  optional RBCM_AD_REDUNDANCY_FR07_23A rbcm_ad_redundancy_fr07_23a = 17; // control message
  optional ADCU_AD_REDUNDANCY_FR03_23B adcu_ad_redundancy_fr03_23b = 18; // control message
  optional RBCM_AD_REDUNDANCY_FR06_241 rbcm_ad_redundancy_fr06_241 = 19; // control message
  optional PSCM_AD_REDUNDANCY_FR02_30 pscm_ad_redundancy_fr02_30 = 20; // report message
  optional BBM_AD_REDUNDANCY_FR02_40 bbm_ad_redundancy_fr02_40 = 21; // report message
  optional BBM_AD_REDUNDANCY_FR01_45 bbm_ad_redundancy_fr01_45 = 22; // report message
  optional BBM_AD_REDUNDANCY_FR03_48 bbm_ad_redundancy_fr03_48 = 23; // report message
  optional ADCU_AD_REDUNDANCY_CAN_NM_FR01_506 adcu_ad_redundancy_can_nm_fr01_506 = 24; // control message
  optional BBM_AD_REDUNDANCY_FR04_52 bbm_ad_redundancy_fr04_52 = 25; // report message
  optional ADCU_AD_REDUNDANCY_CANVFC_VECT_FR_546 adcu_ad_redundancy_canvfc_vect_fr_546 = 26; // control message
  optional BBM_AD_REDUNDANCY_FR14_56 bbm_ad_redundancy_fr14_56 = 27; // report message
  optional BBM_AD_REDUNDANCY_FR13_57 bbm_ad_redundancy_fr13_57 = 28; // report message
  optional BBM_AD_REDUNDANCY_FR16_59 bbm_ad_redundancy_fr16_59 = 29; // report message
  optional BBM_AD_REDUNDANCY_FR18_71 bbm_ad_redundancy_fr18_71 = 30; // report message
  optional ADCU_AD_REDUNDANCY_FR01_80 adcu_ad_redundancy_fr01_80 = 31; // control message
  optional PSCM_AD_REDUNDANCY_FR01_85 pscm_ad_redundancy_fr01_85 = 32; // report message
  optional ECM_CHAS1_FR59_108 ecm_chas1_fr59_108 = 33; // report message
  optional ASDM_CHAS1_FR07_117 asdm_chas1_fr07_117 = 34; // control message
  optional ECM_CHAS1_FR68_123 ecm_chas1_fr68_123 = 35; // report message
  optional ECM_CHAS1_FR60_129 ecm_chas1_fr60_129 = 36; // report message
  optional ASDM_CHAS1_FR06_131 asdm_chas1_fr06_131 = 37; // control message
  optional ECM_CHAS1_FR67_15D ecm_chas1_fr67_15d = 38; // report message
  optional IEM_CHAS1_FR02_161 iem_chas1_fr02_161 = 39; // report message
  optional ASDM_CHAS1_FR05_165 asdm_chas1_fr05_165 = 40; // control message
  optional ASDM_CHAS1_FR11_176 asdm_chas1_fr11_176 = 41; // control message
  optional ASDM_CHAS1_FR08_199 asdm_chas1_fr08_199 = 42; // control message
  optional VDDM_CHAS1_FR10_1B1 vddm_chas1_fr10_1b1 = 43; // report message
  optional VDDM_CHAS1_FR55_1B7 vddm_chas1_fr55_1b7 = 44; // report message
  optional PSCM_CHAS1_FR03_1BC pscm_chas1_fr03_1bc = 45; // report message
  optional ECM_CHAS1_FR24_1C7 ecm_chas1_fr24_1c7 = 46; // report message
  optional VDDM_CHAS1_FR53_1F0 vddm_chas1_fr53_1f0 = 47; // report message
  optional BCM_CHAS1_FR17_2E bcm_chas1_fr17_2e = 48; // report message
  optional VDDM_CHAS1_FR23_310 vddm_chas1_fr23_310 = 49; // report message
  optional ASDM_CHAS1_FR03_33 asdm_chas1_fr03_33 = 50; // control message
  optional VDDM_CHAS1_FR56_34 vddm_chas1_fr56_34 = 51; // report message
  optional ASDM_CHAS1_FR09_379 asdm_chas1_fr09_379 = 52; // control message
  optional PSCM_CHAS1_FR06_3BB pscm_chas1_fr06_3bb = 53; // report message
  optional SAS_CHAS1_FR01_40 sas_chas1_fr01_40 = 54; // report message
  optional VDDM_CHAS1_FR46_44B vddm_chas1_fr46_44b = 55; // report message
  optional ECM_CHAS1_FR08_457 ecm_chas1_fr08_457 = 56; // report message
  optional PSCM_CHAS1_FR02_46 pscm_chas1_fr02_46 = 57; // report message
  optional ECM_CHAS1_FR58_48 ecm_chas1_fr58_48 = 58; // report message
  optional PSCM_CHAS1_FR07_4E pscm_chas1_fr07_4e = 59; // report message
  optional ASDM_CHAS1_NM_FR_529 asdm_chas1_nm_fr_529 = 60; // control message
  optional ASDM_CHAS1_FR10_54 asdm_chas1_fr10_54 = 61; // control message
  optional ADCU_CHAS1_VFC_VECTOR_FR_569 adcu_chas1_vfc_vector_fr_569 = 62; // control message
  optional VDCU_IEM_CHAS1_FR02_57 vdcu_iem_chas1_fr02_57 = 63; // report message
  optional IEM_CHAS1_FR01_76 iem_chas1_fr01_76 = 64; // report message
  optional VDDM_CHAS1_FR24_89 vddm_chas1_fr24_89 = 65; // report message
  optional ASDM_CHAS1_FR01_93 asdm_chas1_fr01_93 = 66; // control message
  optional PAS_CHAS1_FR04_95 pas_chas1_fr04_95 = 67; // control message
  optional BCM_CHAS1_FR09_B9 bcm_chas1_fr09_b9 = 68; // report message
  optional PAS_CHAS1_FR02_EB pas_chas1_fr02_eb = 69; // control message
  optional PSCM_CHAS1_FR01_F6 pscm_chas1_fr01_f6 = 70; // report message
  optional ADCU_ZCUCANFD1_FR33_100 adcu_zcucanfd1_fr33_100 = 71; // control message
  optional BCM_ZCUCANFD1_FR01_101 bcm_zcucanfd1_fr01_101 = 72; // report message
  optional ZCUD_ZCUCANFD1_FR02_105 zcud_zcucanfd1_fr02_105 = 73; // report message
  optional BCM_ZCUCANFD1_FR17_10A bcm_zcucanfd1_fr17_10a = 74; // report message
  optional PASZCUCANFD1_FR20_112 paszcucanfd1_fr20_112 = 75; // control message
  optional ADCU_ZCUCANFD1_FR23_116 adcu_zcucanfd1_fr23_116 = 76; // control message
  optional ADCU_ZCUCANFD1_FR08_120 adcu_zcucanfd1_fr08_120 = 77; // control message
  optional ADCU_ZCUCANFD1_RESD_FR01_131 adcu_zcucanfd1_resd_fr01_131 = 78; // control message
  optional ADCU_TO_DHU_SEC_OC_FR01_132 adcu_to_dhu_sec_oc_fr01_132 = 79; // control message
  optional ZCUD_ZCUCANFD1_RESD_FR01_134 zcud_zcucanfd1_resd_fr01_134 = 80; // report message
  optional ZCUP_ZCUCANFD1_RESD_FR01_135 zcup_zcucanfd1_resd_fr01_135 = 81; // report message
  optional ZCUD_ZCUCANFD1_RESD_FR02_139 zcud_zcucanfd1_resd_fr02_139 = 82; // report message
  optional DHUZCUDCANFD1_SEC_OC_SYNC_FR_151 dhuzcudcanfd1_sec_oc_sync_fr_151 = 83; // report message
  optional VDCU_ZCUCANFD1_RESD_FR01_153 vdcu_zcucanfd1_resd_fr01_153 = 84; // report message
  optional ADCU_ZCUDCANFD1_SYCN_REQ_FR_155 adcu_zcudcanfd1_sycn_req_fr_155 = 85; // control message
  optional DHU_ZCUCANFD1_FR16_160 dhu_zcucanfd1_fr16_160 = 86; // report message
  optional DHU_ZCUCANFD1_FR04_175 dhu_zcucanfd1_fr04_175 = 87; // report message
  optional BCM_ZCUCANFD1_FR06_180 bcm_zcucanfd1_fr06_180 = 88; // report message
  optional DHU_ZCUCANFD1_RESD_FR01_181 dhu_zcucanfd1_resd_fr01_181 = 89; // report message
  optional DHU_ZCUCANFD1_RESD_FR02_185 dhu_zcucanfd1_resd_fr02_185 = 90; // report message
  optional ADCU_ZCUCANFD1_FR13_190 adcu_zcucanfd1_fr13_190 = 91; // control message
  optional BCM_ZCUCANFD1_FR15_192 bcm_zcucanfd1_fr15_192 = 92; // report message
  optional ADCU_ZCUCANFD1_FR04_1A0 adcu_zcucanfd1_fr04_1a0 = 93; // control message
  optional ADCU_ZCUCANFD1_FR10_1B5 adcu_zcucanfd1_fr10_1b5 = 94; // control message
  optional ADCU_ZCUCANFD1_FR01_1C0 adcu_zcucanfd1_fr01_1c0 = 95; // control message
  optional ZCUD_ZCUCANFD1_FR07_1C3 zcud_zcucanfd1_fr07_1c3 = 96; // report message
  optional ADCU_ZCUCANFD1_FR21_1C6 adcu_zcucanfd1_fr21_1c6 = 97; // control message
  optional ADCU_ZCUCANFD1_FR22_1CA adcu_zcucanfd1_fr22_1ca = 98; // control message
  optional ADCU_ZCUCANFD1_FR11_1E0 adcu_zcucanfd1_fr11_1e0 = 99; // control message
  optional BCM_ZCUCANFD1_FR03_1E3 bcm_zcucanfd1_fr03_1e3 = 100; // report message
  optional DHU_ZCUCANFD1_FR01_1E8 dhu_zcucanfd1_fr01_1e8 = 101; // report message
  optional ADCU_ZCUCANFD1_FR02_1F0 adcu_zcucanfd1_fr02_1f0 = 102; // control message
  optional DHU_ZCUCANFD1_FR12_1F5 dhu_zcucanfd1_fr12_1f5 = 103; // report message
  optional DHU_ZCUCANFD1_FR14_1F8 dhu_zcucanfd1_fr14_1f8 = 104; // report message
  optional ADCU_ZCUCANFD1_FR06_1FF adcu_zcucanfd1_fr06_1ff = 105; // control message
  optional PASZCUCANFD1_FR06_210 paszcucanfd1_fr06_210 = 106; // control message
  optional PASZCUCANFD1_FR04_211 paszcucanfd1_fr04_211 = 107; // control message
  optional ZCUP_ZCUCANFD1_FR01_212 zcup_zcucanfd1_fr01_212 = 108; // report message
  optional ADCU_ZCUCANFD1_FR14_220 adcu_zcucanfd1_fr14_220 = 109; // control message
  optional ZCUD_ZCUCANFD1_FR05_221 zcud_zcucanfd1_fr05_221 = 110; // report message
  optional ADCU_ZCUCANFD1_FR19_226 adcu_zcucanfd1_fr19_226 = 111; // control message
  optional BCM_ZCUCANFD1_FR11_240 bcm_zcucanfd1_fr11_240 = 112; // control message
  optional ZCUD_ZCUCANFD1_FR06_243 zcud_zcucanfd1_fr06_243 = 113; // report message
  optional PASZCUCANFD1_FR15_24B paszcucanfd1_fr15_24b = 114; // control message
  optional ADCU_ZCUCANFD1_FR07_280 adcu_zcucanfd1_fr07_280 = 115; // control message
  optional BCM_ZCUCANFD1_FR14_2C0 bcm_zcucanfd1_fr14_2c0 = 116; // report message
  optional DHU_ZCUCANFD1_FR08_2EF dhu_zcucanfd1_fr08_2ef = 117; // report message
  optional ADCU_ZCUCANFD1_FR03_2F0 adcu_zcucanfd1_fr03_2f0 = 118; // control message
  optional ADCU_ZCUCANFD1_FR24_300 adcu_zcucanfd1_fr24_300 = 119; // control message
  optional ADCU_ZCUCANFD1_FR25_301 adcu_zcucanfd1_fr25_301 = 120; // control message
  optional ADCU_ZCUCANFD1_FR26_302 adcu_zcucanfd1_fr26_302 = 121; // control message
  optional ADCU_ZCUCANFD1_FR27_303 adcu_zcucanfd1_fr27_303 = 122; // control message
  optional ADCU_ZCUCANFD1_FR28_304 adcu_zcucanfd1_fr28_304 = 123; // control message
  optional ADCU_ZCUCANFD1_FR29_305 adcu_zcucanfd1_fr29_305 = 124; // control message
  optional ADCU_ZCUCANFD1_FR30_306 adcu_zcucanfd1_fr30_306 = 125; // control message
  optional DHU_ZCUCANFD1_FR02_307 dhu_zcucanfd1_fr02_307 = 126; // report message
  optional ADCU_ZCUCANFD1_FR20_30A adcu_zcucanfd1_fr20_30a = 127; // control message
  optional PASZCUCANFD1_FR18_310 paszcucanfd1_fr18_310 = 128; // control message
  optional PASZCUCANFD1_FR02_311 paszcucanfd1_fr02_311 = 129; // control message
  optional IHU_HUD_ZCUCANFD1_FR02_318 ihu_hud_zcucanfd1_fr02_318 = 130; // report message
  optional PASZCUCANFD1_FR05_335 paszcucanfd1_fr05_335 = 131; // control message
  optional DHU_ZCUCANFD1_FR06_340 dhu_zcucanfd1_fr06_340 = 132; // report message
  optional ZCUD_ZCUCANFD1_FR11_345 zcud_zcucanfd1_fr11_345 = 133; // report message
  optional ZCUD_ZCUCANFD1_FR03_353 zcud_zcucanfd1_fr03_353 = 134; // report message
  optional ADCU_ZCUCANFD1_FR09_360 adcu_zcucanfd1_fr09_360 = 135; // control message
  optional ZCUD_ZCUCANFD1_FR08_363 zcud_zcucanfd1_fr08_363 = 136; // report message
  optional DHU_ZCUCANFD1_FR13_367 dhu_zcucanfd1_fr13_367 = 137; // report message
  optional ADCU_ZCUCANFD1_FR12_370 adcu_zcucanfd1_fr12_370 = 138; // control message
  optional ADCU_ZCUCANFD1_FR31_371 adcu_zcucanfd1_fr31_371 = 139; // control message
  optional ADCU_ZCUCANFD1_FR32_372 adcu_zcucanfd1_fr32_372 = 140; // control message
  optional DHU_ZCUCANFD1_FR07_379 dhu_zcucanfd1_fr07_379 = 141; // report message
  optional ZCUD_ZCUCANFD1_FR09_3A3 zcud_zcucanfd1_fr09_3a3 = 142; // report message
  optional BCM_ZCUCANFD1_FR08_3E5 bcm_zcucanfd1_fr08_3e5 = 143; // report message
  optional BCM_ZCUCANFD1_FR02_401 bcm_zcucanfd1_fr02_401 = 144; // report message
  optional PASZCUCANFD1_FR19_451 paszcucanfd1_fr19_451 = 145; // control message
  optional ADCU_ZCUCANFD1_FR15_469 adcu_zcucanfd1_fr15_469 = 146; // control message
  optional ADCU_ZCUCANFD1_FR05_480 adcu_zcucanfd1_fr05_480 = 147; // control message
  optional ADCU_ZCUDCANFD1_NM_FR_501 adcu_zcudcanfd1_nm_fr_501 = 148; // control message
  optional ZCUD_ZCUCANFD1_FR10_53 zcud_zcucanfd1_fr10_53 = 149; // report message
  optional ADCU_ZCUCANFD1_VFC_VECT_FR_541 adcu_zcucanfd1_vfc_vect_fr_541 = 150; // control message
  optional DHU_ZCUCANFD1_FR03_56 dhu_zcucanfd1_fr03_56 = 151; // report message
  optional DHU_TO_ADCU_SEC_OC_FR01_57 dhu_to_adcu_sec_oc_fr01_57 = 152; // report message
  optional PASZCUCANFD1_FR07_60 paszcucanfd1_fr07_60 = 153; // control message
  optional ZCUD_ZCUCANFD1_FR01_61 zcud_zcucanfd1_fr01_61 = 154; // report message
  optional BCM_ZCUCANFD1_FR16_62 bcm_zcucanfd1_fr16_62 = 155; // report message
  optional ASDM_CHAS1_FR21_167 asdm_chas1_fr21_167 = 156; // control message
  optional ASDM_CHAS1_FR22_16E asdm_chas1_fr22_16e = 157; // control message
}
