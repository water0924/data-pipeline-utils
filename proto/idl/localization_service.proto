syntax = "proto2";

package deeproute.idl.localization_service;

import "drivers/gnss/ins.proto";
import "drivers/gnss/imu.proto";
import "drivers/gnss/gnss.proto";
import "drivers/pointcloud2.proto";
import "canbus/chassis.proto";
import "perception/deeproute_perception_obstacle.proto";
import "localization/localization_external_command.proto";
import "localization/localization_external_events.proto";
import "localization/localization_internal_messages.proto";
import "drivers/gnss/gnss_raw.proto";
import "perception/deeproute_perception_ras_map.proto";

service LocalizationService {
  rpc Init(LocalizationInitRequest) returns (LocalizationInitResponse) {
  }
  rpc Proc(LocalizationProcRequest) returns (LocalizationProcResponse) {
  }
}

message LocalizationInitRequest {
}

message LocalizationInitResponse {
}

message LocalizationProcRequest {
  optional deeproute.drivers.PointCloud2 lidar = 1;
  optional deeproute.drivers.gnss.Imu imu = 2;
  optional deeproute.drivers.gnss.Gnss gnss = 3;
  optional deeproute.drivers.gnss.SensorsIns gnss_pose = 4;
  optional deeproute.canbus.WheelSpeed wheel_speed = 5;
  optional deeproute.perception.PerceptionObstacles perception_obstacles = 6;
  optional deeproute.localization.command.LocalizationCommand
      localization_command = 7;
  optional deeproute.localization.event.LocalizationEvent localization_event =
      8;
}

message LocalizationProcResponse {
  optional deeproute.drivers.gnss.Ins pose = 1;
  optional deeproute.localization.command.LocalizationResponse
      localization_response = 2;
}

service RtkPoseForwardService {
  rpc Init(RtkPoseForwardInitRequest) returns (RtkPoseForwardInitResponse) {
  }
  rpc Proc(RtkPoseForwardProcRequest) returns (RtkPoseForwardProcResponse) {
  }
}

message RtkPoseForwardInitRequest {
}

message RtkPoseForwardInitResponse {
}

message RtkPoseForwardProcRequest {
  optional deeproute.drivers.gnss.SensorsIns gnss_pose = 1;
}

message RtkPoseForwardProcResponse {
  optional deeproute.drivers.gnss.Ins pose = 1;
}

service InsOnlineService {
  rpc Init(InsOnlineInitRequest) returns (InsOnlineInitResponse) {
  }
  rpc Proc(InsOnlineProcRequest) returns (InsOnlineProcResponse) {
  }
}

message InsOnlineInitRequest {
}

message InsOnlineInitResponse {
}

message InsOnlineProcRequest {
  optional deeproute.drivers.gnss.ShortRawImu short_raw_imu = 1;
  optional deeproute.canbus.WheelSpeed wheel_speed = 2;
  optional deeproute.drivers.gnss.GnssPosition gnss_position = 3;
  optional deeproute.drivers.gnss.GnssVelocity gnss_velocity = 4;
  optional deeproute.drivers.gnss.DualAntennaHeading dual_antenna_heading = 5;
  optional deeproute.drivers.gnss.SensorsIns gnss_pose = 6;
  optional deeproute.drivers.PointCloud2 lidar = 7;
  optional deeproute.perception.PerceptionObstacles perception_obstacles = 8;
  optional deeproute.localization.command.LocalizationCommand
      localization_command = 9;
  optional deeproute.localization.message.LidarMatchingMessage
      lidar_matching_message = 10;
}

message InsOnlineProcResponse {
  optional deeproute.drivers.gnss.Ins pose = 1;
}

service ParkingEntryDetectionService {
  rpc Init(ParkingEntryDetectionInitRequest)
      returns (ParkingEntryDetectionInitResponse) {
  }
  rpc Proc(ParkingEntryDetectionProcRequest)
      returns (ParkingEntryDetectionProcResponse) {
  }
}

message ParkingEntryDetectionInitRequest {
}

message ParkingEntryDetectionInitResponse {
}

message ParkingEntryDetectionProcRequest {
  optional deeproute.drivers.gnss.SensorsIns gnss_pose = 1;
  optional deeproute.drivers.PointCloud2 lidar = 2;
  optional deeproute.drivers.gnss.Gnss gnss = 3;
  optional deeproute.localization.command.LocalizationCommand
      localization_command = 4;
}

message ParkingEntryDetectionProcResponse {
  optional deeproute.localization.event.LocalizationEvent detection_event = 1;
  optional deeproute.localization.event.LocalizationEvent map_switch_event = 2;
}

service VpaMappingService {
  rpc Init(VpaMappingInitRequest) returns (VpaMappingInitResponse) {
  }
  rpc Proc(VpaMappingProcRequest) returns (VpaMappingProcResponse) {
  }
}

message VpaMappingInitRequest {
}

message VpaMappingInitResponse {
}

message VpaMappingProcRequest {
  optional deeproute.drivers.gnss.SensorsIns gnss_pose = 1;
  optional deeproute.drivers.gnss.Gnss gnss = 2;
  optional deeproute.drivers.gnss.Ins pose = 3;
  optional deeproute.drivers.PointCloud2 lidar = 4;
  optional deeproute.perception.PerceptionObstacles perception_obstacles = 5;
  optional deeproute.perception.RASMap ras_map = 6;
  optional deeproute.canbus.WheelSpeed wheel_speed = 7;
  optional deeproute.localization.command.LocalizationCommand
      localization_command = 8;
}

message VpaMappingProcResponse {
  optional deeproute.localization.event.LocalizationEvent event = 1;
}

service OnboardMapLocService {
  rpc Init(OnboardMapLocInitRequest) returns (OnboardMapLocInitResponse) {
  }
  rpc Proc(OnboardMapLocProcRequest) returns (OnboardMapLocProcResponse) {
  }
}

message OnboardMapLocInitRequest {
}

message OnboardMapLocInitResponse {
}

message OnboardMapLocProcRequest {
  optional deeproute.drivers.gnss.SensorsIns gnss_pose = 1;
  optional deeproute.drivers.gnss.Gnss gnss = 2;
  optional deeproute.drivers.gnss.Ins pose = 3;
  optional deeproute.drivers.PointCloud2 lidar = 4;
  optional deeproute.perception.PerceptionObstacles perception_obstacles = 5;
  optional deeproute.perception.RASMap ras_map = 6;
  optional deeproute.canbus.WheelSpeed wheel_speed = 7;
  optional deeproute.localization.command.LocalizationCommand
      localization_command = 8;
  optional deeproute.localization.message.KeyframeUpdateStatus
      keyframe_update_status = 9;
}

message OnboardMapLocProcResponse {
  optional deeproute.localization.event.LocalizationEvent status_event = 1;
  optional deeproute.localization.event.LocalizationEvent map_switch_event = 2;
}